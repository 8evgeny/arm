
1. Initialization:

    Enable the I2C clock and GPIO clock for the corresponding pins. 

Configure the I2C pins as alternate function (AF) with I2C functionality. 
Initialize the I2C using LL_I2C_Init with desired settings like speed mode (standard or fast). 
Configure the I2C addressing mode (7-bit or 10-bit). 
Enable the I2C peripheral using LL_I2C_Enable(I2C1). 

2. Write operation:

    Generate a start condition: LL_I2C_GenerateStartCondition(I2C1).
    Send the slave address with the write bit: LL_I2C_TransmitData8(I2C1, (slave_address << 1) | 0).
    Wait for the acknowledge from the slave.
    Send the register address: LL_I2C_TransmitData8(I2C1, register_address).
    Wait for the acknowledge.
    Send the data byte: LL_I2C_TransmitData8(I2C1, data).
    Wait for the acknowledge.
    Generate a stop condition: LL_I2C_GenerateStopCondition(I2C1). 

3. Read operation:

    Generate a start condition: LL_I2C_GenerateStartCondition(I2C1).
    Send the slave address with the write bit (to send the register address): LL_I2C_TransmitData8(I2C1, (slave_address << 1) | 0).
    Wait for the acknowledge.
    Send the register address: LL_I2C_TransmitData8(I2C1, register_address).
    Wait for the acknowledge.
    Generate a repeated start condition: LL_I2C_GenerateStartCondition(I2C1).
    Send the slave address with the read bit: LL_I2C_TransmitData8(I2C1, (slave_address << 1) | 1).
    Wait for the acknowledge.
    Read the data byte: data = LL_I2C_ReceiveData8(I2C1).
    Send acknowledge (if more bytes are expected): LL_I2C_Acknowledge(I2C1, LL_I2C_ACK) or LL_I2C_Acknowledge(I2C1, LL_I2C_NACK) for the last byte.
    Generate a stop condition: LL_I2C_GenerateStopCondition(I2C1)

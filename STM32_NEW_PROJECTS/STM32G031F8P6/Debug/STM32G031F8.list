
STM32G031F8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025cc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002688  08002688  00003688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002700  08002700  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002700  08002700  00003700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002708  08002708  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002708  08002708  00003708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800270c  0800270c  0000370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002710  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  0800271c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800271c  00004114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c39d  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e4  00000000  00000000  000103d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00011db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081b  00000000  00000000  00012810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015281  00000000  00000000  0001302b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf33  00000000  00000000  000282ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b26  00000000  00000000  000351df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bcd05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f0  00000000  00000000  000bcd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000bf238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002670 	.word	0x08002670

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002670 	.word	0x08002670

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fa70 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f808 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 f8c6 	bl	80005e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000458:	f000 f88c 	bl	8000574 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800045c:	f000 f84a 	bl	80004f4 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000460:	46c0      	nop			@ (mov r8, r8)
 8000462:	e7fd      	b.n	8000460 <main+0x18>

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b093      	sub	sp, #76	@ 0x4c
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	2410      	movs	r4, #16
 800046c:	193b      	adds	r3, r7, r4
 800046e:	0018      	movs	r0, r3
 8000470:	2338      	movs	r3, #56	@ 0x38
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f002 f8cf 	bl	8002618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047a:	003b      	movs	r3, r7
 800047c:	0018      	movs	r0, r3
 800047e:	2310      	movs	r3, #16
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f002 f8c8 	bl	8002618 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	0018      	movs	r0, r3
 800048e:	f000 feb1 	bl	80011f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2202      	movs	r2, #2
 8000496:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2280      	movs	r2, #128	@ 0x80
 800049c:	0052      	lsls	r2, r2, #1
 800049e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	2240      	movs	r2, #64	@ 0x40
 80004aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fee9 	bl	800128c <HAL_RCC_OscConfig>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004be:	f000 f91d 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c2:	003b      	movs	r3, r7
 80004c4:	2207      	movs	r2, #7
 80004c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c8:	003b      	movs	r3, r7
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ce:	003b      	movs	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d4:	003b      	movs	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004da:	003b      	movs	r3, r7
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 f9ee 	bl	80018c0 <HAL_RCC_ClockConfig>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004e8:	f000 f908 	bl	80006fc <Error_Handler>
  }
}
 80004ec:	46c0      	nop			@ (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b013      	add	sp, #76	@ 0x4c
 80004f2:	bd90      	pop	{r4, r7, pc}

080004f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <MX_I2C2_Init+0x74>)
 80004fa:	4a1c      	ldr	r2, [pc, #112]	@ (800056c <MX_I2C2_Init+0x78>)
 80004fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <MX_I2C2_Init+0x74>)
 8000500:	4a1b      	ldr	r2, [pc, #108]	@ (8000570 <MX_I2C2_Init+0x7c>)
 8000502:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000504:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <MX_I2C2_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050a:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <MX_I2C2_Init+0x74>)
 800050c:	2201      	movs	r2, #1
 800050e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000510:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <MX_I2C2_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_I2C2_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800051c:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <MX_I2C2_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000522:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_I2C2_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_I2C2_Init+0x74>)
 800052a:	2200      	movs	r2, #0
 800052c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_I2C2_Init+0x74>)
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fd21 	bl	8000f78 <HAL_I2C_Init>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800053a:	f000 f8df 	bl	80006fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800053e:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <MX_I2C2_Init+0x74>)
 8000540:	2100      	movs	r1, #0
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fdbe 	bl	80010c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800054c:	f000 f8d6 	bl	80006fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000550:	4b05      	ldr	r3, [pc, #20]	@ (8000568 <MX_I2C2_Init+0x74>)
 8000552:	2100      	movs	r1, #0
 8000554:	0018      	movs	r0, r3
 8000556:	f000 fe01 	bl	800115c <HAL_I2CEx_ConfigDigitalFilter>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800055e:	f000 f8cd 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000028 	.word	0x20000028
 800056c:	40005800 	.word	0x40005800
 8000570:	00503d58 	.word	0x00503d58

08000574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000578:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 800057a:	4a19      	ldr	r2, [pc, #100]	@ (80005e0 <MX_USART2_UART_Init+0x6c>)
 800057c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800057e:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 8000580:	22e1      	movs	r2, #225	@ 0xe1
 8000582:	0252      	lsls	r2, r2, #9
 8000584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 80005b8:	2208      	movs	r2, #8
 80005ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80005bc:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 80005be:	2280      	movs	r2, #128	@ 0x80
 80005c0:	0212      	lsls	r2, r2, #8
 80005c2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <MX_USART2_UART_Init+0x68>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 fb24 	bl	8001c14 <HAL_UART_Init>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80005d0:	f000 f894 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	2000007c 	.word	0x2000007c
 80005e0:	40004400 	.word	0x40004400

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b089      	sub	sp, #36	@ 0x24
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	240c      	movs	r4, #12
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2314      	movs	r3, #20
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f002 f80f 	bl	8002618 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b3e      	ldr	r3, [pc, #248]	@ (80006f4 <MX_GPIO_Init+0x110>)
 80005fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005fe:	4b3d      	ldr	r3, [pc, #244]	@ (80006f4 <MX_GPIO_Init+0x110>)
 8000600:	2102      	movs	r1, #2
 8000602:	430a      	orrs	r2, r1
 8000604:	635a      	str	r2, [r3, #52]	@ 0x34
 8000606:	4b3b      	ldr	r3, [pc, #236]	@ (80006f4 <MX_GPIO_Init+0x110>)
 8000608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800060a:	2202      	movs	r2, #2
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b38      	ldr	r3, [pc, #224]	@ (80006f4 <MX_GPIO_Init+0x110>)
 8000614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000616:	4b37      	ldr	r3, [pc, #220]	@ (80006f4 <MX_GPIO_Init+0x110>)
 8000618:	2104      	movs	r1, #4
 800061a:	430a      	orrs	r2, r1
 800061c:	635a      	str	r2, [r3, #52]	@ 0x34
 800061e:	4b35      	ldr	r3, [pc, #212]	@ (80006f4 <MX_GPIO_Init+0x110>)
 8000620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000622:	2204      	movs	r2, #4
 8000624:	4013      	ands	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b32      	ldr	r3, [pc, #200]	@ (80006f4 <MX_GPIO_Init+0x110>)
 800062c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800062e:	4b31      	ldr	r3, [pc, #196]	@ (80006f4 <MX_GPIO_Init+0x110>)
 8000630:	2101      	movs	r1, #1
 8000632:	430a      	orrs	r2, r1
 8000634:	635a      	str	r2, [r3, #52]	@ 0x34
 8000636:	4b2f      	ldr	r3, [pc, #188]	@ (80006f4 <MX_GPIO_Init+0x110>)
 8000638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800063a:	2201      	movs	r2, #1
 800063c:	4013      	ands	r3, r2
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_2_Pin|GPIO_1_Pin, GPIO_PIN_RESET);
 8000642:	4b2d      	ldr	r3, [pc, #180]	@ (80006f8 <MX_GPIO_Init+0x114>)
 8000644:	2200      	movs	r2, #0
 8000646:	2188      	movs	r1, #136	@ 0x88
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fc39 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Enable_42790_Pin|Enable_RS485_Pin|Enable_2790_Pin|One_Wire_Pin
 800064e:	23a0      	movs	r3, #160	@ 0xa0
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2200      	movs	r2, #0
 8000654:	21f2      	movs	r1, #242	@ 0xf2
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fc32 	bl	8000ec0 <HAL_GPIO_WritePin>
                          |WDT_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GPIO_2_Pin GPIO_1_Pin */
  GPIO_InitStruct.Pin = GPIO_2_Pin|GPIO_1_Pin;
 800065c:	193b      	adds	r3, r7, r4
 800065e:	2288      	movs	r2, #136	@ 0x88
 8000660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2201      	movs	r2, #1
 8000666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	193b      	adds	r3, r7, r4
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	193b      	adds	r3, r7, r4
 8000676:	4a20      	ldr	r2, [pc, #128]	@ (80006f8 <MX_GPIO_Init+0x114>)
 8000678:	0019      	movs	r1, r3
 800067a:	0010      	movs	r0, r2
 800067c:	f000 fabc 	bl	8000bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_FROM_42790_Pin IRQ_FROM_7920_Pin */
  GPIO_InitStruct.Pin = IRQ_FROM_42790_Pin|IRQ_FROM_7920_Pin;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2202      	movs	r2, #2
 8000684:	32ff      	adds	r2, #255	@ 0xff
 8000686:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2288      	movs	r2, #136	@ 0x88
 800068c:	0352      	lsls	r2, r2, #13
 800068e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	193a      	adds	r2, r7, r4
 8000698:	23a0      	movs	r3, #160	@ 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 faaa 	bl	8000bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Enable_42790_Pin Enable_RS485_Pin Enable_2790_Pin One_Wire_Pin
                           WDT_OUT_Pin */
  GPIO_InitStruct.Pin = Enable_42790_Pin|Enable_RS485_Pin|Enable_2790_Pin|One_Wire_Pin
 80006a4:	0021      	movs	r1, r4
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	22f2      	movs	r2, #242	@ 0xf2
 80006aa:	601a      	str	r2, [r3, #0]
                          |WDT_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2201      	movs	r2, #1
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	187a      	adds	r2, r7, r1
 80006c0:	23a0      	movs	r3, #160	@ 0xa0
 80006c2:	05db      	lsls	r3, r3, #23
 80006c4:	0011      	movs	r1, r2
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fa96 	bl	8000bf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2005      	movs	r0, #5
 80006d2:	f000 fa5f 	bl	8000b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80006d6:	2005      	movs	r0, #5
 80006d8:	f000 fa71 	bl	8000bbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	2007      	movs	r0, #7
 80006e2:	f000 fa57 	bl	8000b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006e6:	2007      	movs	r0, #7
 80006e8:	f000 fa69 	bl	8000bbe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b009      	add	sp, #36	@ 0x24
 80006f2:	bd90      	pop	{r4, r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	50000400 	.word	0x50000400

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	e7fd      	b.n	8000704 <Error_Handler+0x8>

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <HAL_MspInit+0x44>)
 8000710:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <HAL_MspInit+0x44>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	641a      	str	r2, [r3, #64]	@ 0x40
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <HAL_MspInit+0x44>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_MspInit+0x44>)
 8000728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <HAL_MspInit+0x44>)
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	0549      	lsls	r1, r1, #21
 8000730:	430a      	orrs	r2, r1
 8000732:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_MspInit+0x44>)
 8000736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000738:	2380      	movs	r3, #128	@ 0x80
 800073a:	055b      	lsls	r3, r3, #21
 800073c:	4013      	ands	r3, r2
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b08b      	sub	sp, #44	@ 0x2c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	2414      	movs	r4, #20
 800075a:	193b      	adds	r3, r7, r4
 800075c:	0018      	movs	r0, r3
 800075e:	2314      	movs	r3, #20
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f001 ff58 	bl	8002618 <memset>
  if(hi2c->Instance==I2C2)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a1c      	ldr	r2, [pc, #112]	@ (80007e0 <HAL_I2C_MspInit+0x90>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d131      	bne.n	80007d6 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <HAL_I2C_MspInit+0x94>)
 8000774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000776:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <HAL_I2C_MspInit+0x94>)
 8000778:	2101      	movs	r1, #1
 800077a:	430a      	orrs	r2, r1
 800077c:	635a      	str	r2, [r3, #52]	@ 0x34
 800077e:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <HAL_I2C_MspInit+0x94>)
 8000780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000782:	2201      	movs	r2, #1
 8000784:	4013      	ands	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	22c0      	movs	r2, #192	@ 0xc0
 800078e:	0152      	lsls	r2, r2, #5
 8000790:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000792:	0021      	movs	r1, r4
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2212      	movs	r2, #18
 8000798:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2206      	movs	r2, #6
 80007aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	187a      	adds	r2, r7, r1
 80007ae:	23a0      	movs	r3, #160	@ 0xa0
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fa1f 	bl	8000bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_I2C_MspInit+0x94>)
 80007bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <HAL_I2C_MspInit+0x94>)
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	03c9      	lsls	r1, r1, #15
 80007c4:	430a      	orrs	r2, r1
 80007c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_I2C_MspInit+0x94>)
 80007ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007cc:	2380      	movs	r3, #128	@ 0x80
 80007ce:	03db      	lsls	r3, r3, #15
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b00b      	add	sp, #44	@ 0x2c
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	40005800 	.word	0x40005800
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b08b      	sub	sp, #44	@ 0x2c
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	2414      	movs	r4, #20
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	0018      	movs	r0, r3
 80007f6:	2314      	movs	r3, #20
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f001 ff0c 	bl	8002618 <memset>
  if(huart->Instance==USART2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <HAL_UART_MspInit+0x8c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d130      	bne.n	800086c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <HAL_UART_MspInit+0x90>)
 800080c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <HAL_UART_MspInit+0x90>)
 8000810:	2180      	movs	r1, #128	@ 0x80
 8000812:	0289      	lsls	r1, r1, #10
 8000814:	430a      	orrs	r2, r1
 8000816:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <HAL_UART_MspInit+0x90>)
 800081a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800081c:	2380      	movs	r3, #128	@ 0x80
 800081e:	029b      	lsls	r3, r3, #10
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <HAL_UART_MspInit+0x90>)
 8000828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <HAL_UART_MspInit+0x90>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	635a      	str	r2, [r3, #52]	@ 0x34
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <HAL_UART_MspInit+0x90>)
 8000834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800083e:	0021      	movs	r1, r4
 8000840:	187b      	adds	r3, r7, r1
 8000842:	220c      	movs	r2, #12
 8000844:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2201      	movs	r2, #1
 800085c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	187a      	adds	r2, r7, r1
 8000860:	23a0      	movs	r3, #160	@ 0xa0
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f000 f9c6 	bl	8000bf8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b00b      	add	sp, #44	@ 0x2c
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	40004400 	.word	0x40004400
 8000878:	40021000 	.word	0x40021000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f8ae 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_FROM_42790_Pin);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f000 fb22 	bl	8000efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_FROM_7920_Pin);
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fb18 	bl	8000efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008dc:	480d      	ldr	r0, [pc, #52]	@ (8000914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e0:	f7ff fff7 	bl	80008d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	@ (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	@ (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800090a:	f001 fe8d 	bl	8002628 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800090e:	f7ff fd9b 	bl	8000448 <main>

08000912 <LoopForever>:

LoopForever:
  b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   r0, =_estack
 8000914:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000920:	08002710 	.word	0x08002710
  ldr r2, =_sbss
 8000924:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000928:	20000114 	.word	0x20000114

0800092c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_IRQHandler>
	...

08000930 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <HAL_Init+0x3c>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_Init+0x3c>)
 8000942:	2180      	movs	r1, #128	@ 0x80
 8000944:	0049      	lsls	r1, r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800094a:	2003      	movs	r0, #3
 800094c:	f000 f810 	bl	8000970 <HAL_InitTick>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d003      	beq.n	800095c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	e001      	b.n	8000960 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff fed4 	bl	8000708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	781b      	ldrb	r3, [r3, #0]
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000978:	230f      	movs	r3, #15
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <HAL_InitTick+0x88>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d02b      	beq.n	80009e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000988:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <HAL_InitTick+0x8c>)
 800098a:	681c      	ldr	r4, [r3, #0]
 800098c:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <HAL_InitTick+0x88>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	0019      	movs	r1, r3
 8000992:	23fa      	movs	r3, #250	@ 0xfa
 8000994:	0098      	lsls	r0, r3, #2
 8000996:	f7ff fbb5 	bl	8000104 <__udivsi3>
 800099a:	0003      	movs	r3, r0
 800099c:	0019      	movs	r1, r3
 800099e:	0020      	movs	r0, r4
 80009a0:	f7ff fbb0 	bl	8000104 <__udivsi3>
 80009a4:	0003      	movs	r3, r0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f919 	bl	8000bde <HAL_SYSTICK_Config>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d112      	bne.n	80009d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d80a      	bhi.n	80009cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	2301      	movs	r3, #1
 80009ba:	425b      	negs	r3, r3
 80009bc:	2200      	movs	r2, #0
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f8e8 	bl	8000b94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <HAL_InitTick+0x90>)
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e00d      	b.n	80009e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009cc:	230f      	movs	r3, #15
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e008      	b.n	80009e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d6:	230f      	movs	r3, #15
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e003      	b.n	80009e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e0:	230f      	movs	r3, #15
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009e8:	230f      	movs	r3, #15
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	781b      	ldrb	r3, [r3, #0]
}
 80009ee:	0018      	movs	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b005      	add	sp, #20
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	18d2      	adds	r2, r2, r3
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a16:	601a      	str	r2, [r3, #0]
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000110 	.word	0x20000110

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	@ (8000a38 <HAL_GetTick+0x10>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	20000110 	.word	0x20000110

08000a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0002      	movs	r2, r0
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a4e:	d809      	bhi.n	8000a64 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	001a      	movs	r2, r3
 8000a56:	231f      	movs	r3, #31
 8000a58:	401a      	ands	r2, r3
 8000a5a:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <__NVIC_EnableIRQ+0x30>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4091      	lsls	r1, r2
 8000a60:	000a      	movs	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	0002      	movs	r2, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a84:	d828      	bhi.n	8000ad8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a86:	4a2f      	ldr	r2, [pc, #188]	@ (8000b44 <__NVIC_SetPriority+0xd4>)
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	33c0      	adds	r3, #192	@ 0xc0
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	589b      	ldr	r3, [r3, r2]
 8000a96:	1dfa      	adds	r2, r7, #7
 8000a98:	7812      	ldrb	r2, [r2, #0]
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	00d2      	lsls	r2, r2, #3
 8000aa2:	21ff      	movs	r1, #255	@ 0xff
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	43d2      	mvns	r2, r2
 8000aaa:	401a      	ands	r2, r3
 8000aac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	019b      	lsls	r3, r3, #6
 8000ab2:	22ff      	movs	r2, #255	@ 0xff
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0018      	movs	r0, r3
 8000abc:	2303      	movs	r3, #3
 8000abe:	4003      	ands	r3, r0
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac4:	481f      	ldr	r0, [pc, #124]	@ (8000b44 <__NVIC_SetPriority+0xd4>)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	089b      	lsrs	r3, r3, #2
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	33c0      	adds	r3, #192	@ 0xc0
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ad6:	e031      	b.n	8000b3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b48 <__NVIC_SetPriority+0xd8>)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0019      	movs	r1, r3
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	400b      	ands	r3, r1
 8000ae4:	3b08      	subs	r3, #8
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	3306      	adds	r3, #6
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	18d3      	adds	r3, r2, r3
 8000aee:	3304      	adds	r3, #4
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1dfa      	adds	r2, r7, #7
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	0011      	movs	r1, r2
 8000af8:	2203      	movs	r2, #3
 8000afa:	400a      	ands	r2, r1
 8000afc:	00d2      	lsls	r2, r2, #3
 8000afe:	21ff      	movs	r1, #255	@ 0xff
 8000b00:	4091      	lsls	r1, r2
 8000b02:	000a      	movs	r2, r1
 8000b04:	43d2      	mvns	r2, r2
 8000b06:	401a      	ands	r2, r3
 8000b08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	22ff      	movs	r2, #255	@ 0xff
 8000b10:	401a      	ands	r2, r3
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	0018      	movs	r0, r3
 8000b18:	2303      	movs	r3, #3
 8000b1a:	4003      	ands	r3, r0
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b20:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <__NVIC_SetPriority+0xd8>)
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	001c      	movs	r4, r3
 8000b28:	230f      	movs	r3, #15
 8000b2a:	4023      	ands	r3, r4
 8000b2c:	3b08      	subs	r3, #8
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	430a      	orrs	r2, r1
 8000b32:	3306      	adds	r3, #6
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	18c3      	adds	r3, r0, r3
 8000b38:	3304      	adds	r3, #4
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b003      	add	sp, #12
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	1e5a      	subs	r2, r3, #1
 8000b58:	2380      	movs	r3, #128	@ 0x80
 8000b5a:	045b      	lsls	r3, r3, #17
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d301      	bcc.n	8000b64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b60:	2301      	movs	r3, #1
 8000b62:	e010      	b.n	8000b86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <SysTick_Config+0x44>)
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	3a01      	subs	r2, #1
 8000b6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	425b      	negs	r3, r3
 8000b70:	2103      	movs	r1, #3
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff ff7c 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <SysTick_Config+0x44>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <SysTick_Config+0x44>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	1c02      	adds	r2, r0, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ff5d 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	0002      	movs	r2, r0
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff ff33 	bl	8000a3c <__NVIC_EnableIRQ>
}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ffaf 	bl	8000b4c <SysTick_Config>
 8000bee:	0003      	movs	r3, r0
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	e147      	b.n	8000e98 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	4091      	lsls	r1, r2
 8000c12:	000a      	movs	r2, r1
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d100      	bne.n	8000c20 <HAL_GPIO_Init+0x28>
 8000c1e:	e138      	b.n	8000e92 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	4013      	ands	r3, r2
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d005      	beq.n	8000c38 <HAL_GPIO_Init+0x40>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2203      	movs	r2, #3
 8000c32:	4013      	ands	r3, r2
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d130      	bne.n	8000c9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	409a      	lsls	r2, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	43da      	mvns	r2, r3
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	2201      	movs	r2, #1
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d017      	beq.n	8000cd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2203      	movs	r2, #3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d123      	bne.n	8000d2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	58d3      	ldr	r3, [r2, r3]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	691a      	ldr	r2, [r3, #16]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	400b      	ands	r3, r1
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	08da      	lsrs	r2, r3, #3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	6939      	ldr	r1, [r7, #16]
 8000d28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	2203      	movs	r2, #3
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2203      	movs	r2, #3
 8000d48:	401a      	ands	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	23c0      	movs	r3, #192	@ 0xc0
 8000d64:	029b      	lsls	r3, r3, #10
 8000d66:	4013      	ands	r3, r2
 8000d68:	d100      	bne.n	8000d6c <HAL_GPIO_Init+0x174>
 8000d6a:	e092      	b.n	8000e92 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d6c:	4a50      	ldr	r2, [pc, #320]	@ (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3318      	adds	r3, #24
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	589b      	ldr	r3, [r3, r2]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	220f      	movs	r2, #15
 8000d84:	409a      	lsls	r2, r3
 8000d86:	0013      	movs	r3, r2
 8000d88:	43da      	mvns	r2, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	23a0      	movs	r3, #160	@ 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x1ca>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a45      	ldr	r2, [pc, #276]	@ (8000eb4 <HAL_GPIO_Init+0x2bc>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x1c6>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a44      	ldr	r2, [pc, #272]	@ (8000eb8 <HAL_GPIO_Init+0x2c0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x1c2>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a43      	ldr	r2, [pc, #268]	@ (8000ebc <HAL_GPIO_Init+0x2c4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x1be>
 8000db2:	2303      	movs	r3, #3
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x1cc>
 8000db6:	2305      	movs	r3, #5
 8000db8:	e004      	b.n	8000dc4 <HAL_GPIO_Init+0x1cc>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e002      	b.n	8000dc4 <HAL_GPIO_Init+0x1cc>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <HAL_GPIO_Init+0x1cc>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	400a      	ands	r2, r1
 8000dca:	00d2      	lsls	r2, r2, #3
 8000dcc:	4093      	lsls	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000dd4:	4936      	ldr	r1, [pc, #216]	@ (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3318      	adds	r3, #24
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000de2:	4b33      	ldr	r3, [pc, #204]	@ (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	2380      	movs	r3, #128	@ 0x80
 8000df8:	035b      	lsls	r3, r3, #13
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43da      	mvns	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	039b      	lsls	r3, r3, #14
 8000e24:	4013      	ands	r3, r2
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e30:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e36:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e38:	2384      	movs	r3, #132	@ 0x84
 8000e3a:	58d3      	ldr	r3, [r2, r3]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43da      	mvns	r2, r3
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	2380      	movs	r3, #128	@ 0x80
 8000e4e:	029b      	lsls	r3, r3, #10
 8000e50:	4013      	ands	r3, r2
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e5c:	4914      	ldr	r1, [pc, #80]	@ (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e5e:	2284      	movs	r2, #132	@ 0x84
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e64:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e66:	2380      	movs	r3, #128	@ 0x80
 8000e68:	58d3      	ldr	r3, [r2, r3]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	2380      	movs	r3, #128	@ 0x80
 8000e7c:	025b      	lsls	r3, r3, #9
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e8a:	4909      	ldr	r1, [pc, #36]	@ (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e8c:	2280      	movs	r2, #128	@ 0x80
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	40da      	lsrs	r2, r3
 8000ea0:	1e13      	subs	r3, r2, #0
 8000ea2:	d000      	beq.n	8000ea6 <HAL_GPIO_Init+0x2ae>
 8000ea4:	e6b0      	b.n	8000c08 <HAL_GPIO_Init+0x10>
  }
}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b006      	add	sp, #24
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021800 	.word	0x40021800
 8000eb4:	50000400 	.word	0x50000400
 8000eb8:	50000800 	.word	0x50000800
 8000ebc:	50000c00 	.word	0x50000c00

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	0008      	movs	r0, r1
 8000eca:	0011      	movs	r1, r2
 8000ecc:	1cbb      	adds	r3, r7, #2
 8000ece:	1c02      	adds	r2, r0, #0
 8000ed0:	801a      	strh	r2, [r3, #0]
 8000ed2:	1c7b      	adds	r3, r7, #1
 8000ed4:	1c0a      	adds	r2, r1, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed8:	1c7b      	adds	r3, r7, #1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d004      	beq.n	8000eea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee0:	1cbb      	adds	r3, r7, #2
 8000ee2:	881a      	ldrh	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee8:	e003      	b.n	8000ef2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eea:	1cbb      	adds	r3, r7, #2
 8000eec:	881a      	ldrh	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	0002      	movs	r2, r0
 8000f04:	1dbb      	adds	r3, r7, #6
 8000f06:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000f08:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	1dba      	adds	r2, r7, #6
 8000f0e:	8812      	ldrh	r2, [r2, #0]
 8000f10:	4013      	ands	r3, r2
 8000f12:	d008      	beq.n	8000f26 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000f14:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f16:	1dba      	adds	r2, r7, #6
 8000f18:	8812      	ldrh	r2, [r2, #0]
 8000f1a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000f1c:	1dbb      	adds	r3, r7, #6
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	0018      	movs	r0, r3
 8000f22:	f000 f815 	bl	8000f50 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	1dba      	adds	r2, r7, #6
 8000f2c:	8812      	ldrh	r2, [r2, #0]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d008      	beq.n	8000f44 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f34:	1dba      	adds	r2, r7, #6
 8000f36:	8812      	ldrh	r2, [r2, #0]
 8000f38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000f3a:	1dbb      	adds	r3, r7, #6
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 f810 	bl	8000f64 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000f44:	46c0      	nop			@ (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021800 	.word	0x40021800

08000f50 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	0002      	movs	r2, r0
 8000f58:	1dbb      	adds	r3, r7, #6
 8000f5a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	1dbb      	adds	r3, r7, #6
 8000f6e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e08f      	b.n	80010aa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2241      	movs	r2, #65	@ 0x41
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d107      	bne.n	8000fa6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2240      	movs	r2, #64	@ 0x40
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff fbd5 	bl	8000750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2241      	movs	r2, #65	@ 0x41
 8000faa:	2124      	movs	r1, #36	@ 0x24
 8000fac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	438a      	bics	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	493b      	ldr	r1, [pc, #236]	@ (80010b4 <HAL_I2C_Init+0x13c>)
 8000fc8:	400a      	ands	r2, r1
 8000fca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4938      	ldr	r1, [pc, #224]	@ (80010b8 <HAL_I2C_Init+0x140>)
 8000fd8:	400a      	ands	r2, r1
 8000fda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d108      	bne.n	8000ff6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2180      	movs	r1, #128	@ 0x80
 8000fee:	0209      	lsls	r1, r1, #8
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	e007      	b.n	8001006 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2184      	movs	r1, #132	@ 0x84
 8001000:	0209      	lsls	r1, r1, #8
 8001002:	430a      	orrs	r2, r1
 8001004:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d109      	bne.n	8001022 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2180      	movs	r1, #128	@ 0x80
 800101a:	0109      	lsls	r1, r1, #4
 800101c:	430a      	orrs	r2, r1
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	e007      	b.n	8001032 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4923      	ldr	r1, [pc, #140]	@ (80010bc <HAL_I2C_Init+0x144>)
 800102e:	400a      	ands	r2, r1
 8001030:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4920      	ldr	r1, [pc, #128]	@ (80010c0 <HAL_I2C_Init+0x148>)
 800103e:	430a      	orrs	r2, r1
 8001040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	491a      	ldr	r1, [pc, #104]	@ (80010b8 <HAL_I2C_Init+0x140>)
 800104e:	400a      	ands	r2, r1
 8001050:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	431a      	orrs	r2, r3
 800105c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69d9      	ldr	r1, [r3, #28]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1a      	ldr	r2, [r3, #32]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	430a      	orrs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2101      	movs	r1, #1
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2241      	movs	r2, #65	@ 0x41
 8001096:	2120      	movs	r1, #32
 8001098:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2242      	movs	r2, #66	@ 0x42
 80010a4:	2100      	movs	r1, #0
 80010a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	f0ffffff 	.word	0xf0ffffff
 80010b8:	ffff7fff 	.word	0xffff7fff
 80010bc:	fffff7ff 	.word	0xfffff7ff
 80010c0:	02008000 	.word	0x02008000

080010c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2241      	movs	r2, #65	@ 0x41
 80010d2:	5c9b      	ldrb	r3, [r3, r2]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b20      	cmp	r3, #32
 80010d8:	d138      	bne.n	800114c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2240      	movs	r2, #64	@ 0x40
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e032      	b.n	800114e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2240      	movs	r2, #64	@ 0x40
 80010ec:	2101      	movs	r1, #1
 80010ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2241      	movs	r2, #65	@ 0x41
 80010f4:	2124      	movs	r1, #36	@ 0x24
 80010f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2101      	movs	r1, #1
 8001104:	438a      	bics	r2, r1
 8001106:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4911      	ldr	r1, [pc, #68]	@ (8001158 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6819      	ldr	r1, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2101      	movs	r1, #1
 8001134:	430a      	orrs	r2, r1
 8001136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2241      	movs	r2, #65	@ 0x41
 800113c:	2120      	movs	r1, #32
 800113e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2240      	movs	r2, #64	@ 0x40
 8001144:	2100      	movs	r1, #0
 8001146:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	e000      	b.n	800114e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800114c:	2302      	movs	r3, #2
  }
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	ffffefff 	.word	0xffffefff

0800115c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2241      	movs	r2, #65	@ 0x41
 800116a:	5c9b      	ldrb	r3, [r3, r2]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b20      	cmp	r3, #32
 8001170:	d139      	bne.n	80011e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2240      	movs	r2, #64	@ 0x40
 8001176:	5c9b      	ldrb	r3, [r3, r2]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800117c:	2302      	movs	r3, #2
 800117e:	e033      	b.n	80011e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2240      	movs	r2, #64	@ 0x40
 8001184:	2101      	movs	r1, #1
 8001186:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2241      	movs	r2, #65	@ 0x41
 800118c:	2124      	movs	r1, #36	@ 0x24
 800118e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2101      	movs	r1, #1
 800119c:	438a      	bics	r2, r1
 800119e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4a11      	ldr	r2, [pc, #68]	@ (80011f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2101      	movs	r1, #1
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2241      	movs	r2, #65	@ 0x41
 80011d6:	2120      	movs	r1, #32
 80011d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2240      	movs	r2, #64	@ 0x40
 80011de:	2100      	movs	r1, #0
 80011e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80011e6:	2302      	movs	r3, #2
  }
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b004      	add	sp, #16
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	fffff0ff 	.word	0xfffff0ff

080011f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a19      	ldr	r2, [pc, #100]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001202:	4013      	ands	r3, r2
 8001204:	0019      	movs	r1, r3
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	430a      	orrs	r2, r1
 800120c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	2380      	movs	r3, #128	@ 0x80
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	429a      	cmp	r2, r3
 8001216:	d11f      	bne.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	0013      	movs	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	189b      	adds	r3, r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4912      	ldr	r1, [pc, #72]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001226:	0018      	movs	r0, r3
 8001228:	f7fe ff6c 	bl	8000104 <__udivsi3>
 800122c:	0003      	movs	r3, r0
 800122e:	3301      	adds	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001232:	e008      	b.n	8001246 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3b01      	subs	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e001      	b.n	8001246 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e009      	b.n	800125a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	2380      	movs	r3, #128	@ 0x80
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	401a      	ands	r2, r3
 8001250:	2380      	movs	r3, #128	@ 0x80
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	429a      	cmp	r2, r3
 8001256:	d0ed      	beq.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	40007000 	.word	0x40007000
 8001268:	fffff9ff 	.word	0xfffff9ff
 800126c:	20000000 	.word	0x20000000
 8001270:	000f4240 	.word	0x000f4240

08001274 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <LL_RCC_GetAPB1Prescaler+0x14>)
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	23e0      	movs	r3, #224	@ 0xe0
 800127e:	01db      	lsls	r3, r3, #7
 8001280:	4013      	ands	r3, r2
}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e2fe      	b.n	800189c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2201      	movs	r2, #1
 80012a4:	4013      	ands	r3, r2
 80012a6:	d100      	bne.n	80012aa <HAL_RCC_OscConfig+0x1e>
 80012a8:	e07c      	b.n	80013a4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012aa:	4bc3      	ldr	r3, [pc, #780]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2238      	movs	r2, #56	@ 0x38
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b4:	4bc0      	ldr	r3, [pc, #768]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2203      	movs	r2, #3
 80012ba:	4013      	ands	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b10      	cmp	r3, #16
 80012c2:	d102      	bne.n	80012ca <HAL_RCC_OscConfig+0x3e>
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d002      	beq.n	80012d0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d10b      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	4bb9      	ldr	r3, [pc, #740]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	029b      	lsls	r3, r3, #10
 80012d8:	4013      	ands	r3, r2
 80012da:	d062      	beq.n	80013a2 <HAL_RCC_OscConfig+0x116>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d15e      	bne.n	80013a2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e2d9      	b.n	800189c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	025b      	lsls	r3, r3, #9
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d107      	bne.n	8001304 <HAL_RCC_OscConfig+0x78>
 80012f4:	4bb0      	ldr	r3, [pc, #704]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4baf      	ldr	r3, [pc, #700]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	2180      	movs	r1, #128	@ 0x80
 80012fc:	0249      	lsls	r1, r1, #9
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e020      	b.n	8001346 <HAL_RCC_OscConfig+0xba>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	23a0      	movs	r3, #160	@ 0xa0
 800130a:	02db      	lsls	r3, r3, #11
 800130c:	429a      	cmp	r2, r3
 800130e:	d10e      	bne.n	800132e <HAL_RCC_OscConfig+0xa2>
 8001310:	4ba9      	ldr	r3, [pc, #676]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4ba8      	ldr	r3, [pc, #672]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001316:	2180      	movs	r1, #128	@ 0x80
 8001318:	02c9      	lsls	r1, r1, #11
 800131a:	430a      	orrs	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	4ba6      	ldr	r3, [pc, #664]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4ba5      	ldr	r3, [pc, #660]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001324:	2180      	movs	r1, #128	@ 0x80
 8001326:	0249      	lsls	r1, r1, #9
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e00b      	b.n	8001346 <HAL_RCC_OscConfig+0xba>
 800132e:	4ba2      	ldr	r3, [pc, #648]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4ba1      	ldr	r3, [pc, #644]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001334:	49a1      	ldr	r1, [pc, #644]	@ (80015bc <HAL_RCC_OscConfig+0x330>)
 8001336:	400a      	ands	r2, r1
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	4b9f      	ldr	r3, [pc, #636]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b9e      	ldr	r3, [pc, #632]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001340:	499f      	ldr	r1, [pc, #636]	@ (80015c0 <HAL_RCC_OscConfig+0x334>)
 8001342:	400a      	ands	r2, r1
 8001344:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d014      	beq.n	8001378 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fb6b 	bl	8000a28 <HAL_GetTick>
 8001352:	0003      	movs	r3, r0
 8001354:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fb66 	bl	8000a28 <HAL_GetTick>
 800135c:	0002      	movs	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	@ 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e298      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800136a:	4b93      	ldr	r3, [pc, #588]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	029b      	lsls	r3, r3, #10
 8001372:	4013      	ands	r3, r2
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xcc>
 8001376:	e015      	b.n	80013a4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fb56 	bl	8000a28 <HAL_GetTick>
 800137c:	0003      	movs	r3, r0
 800137e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001382:	f7ff fb51 	bl	8000a28 <HAL_GetTick>
 8001386:	0002      	movs	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b64      	cmp	r3, #100	@ 0x64
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e283      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001394:	4b88      	ldr	r3, [pc, #544]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	029b      	lsls	r3, r3, #10
 800139c:	4013      	ands	r3, r2
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0xf6>
 80013a0:	e000      	b.n	80013a4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2202      	movs	r2, #2
 80013aa:	4013      	ands	r3, r2
 80013ac:	d100      	bne.n	80013b0 <HAL_RCC_OscConfig+0x124>
 80013ae:	e099      	b.n	80014e4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b0:	4b81      	ldr	r3, [pc, #516]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2238      	movs	r2, #56	@ 0x38
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ba:	4b7f      	ldr	r3, [pc, #508]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2203      	movs	r2, #3
 80013c0:	4013      	ands	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2b10      	cmp	r3, #16
 80013c8:	d102      	bne.n	80013d0 <HAL_RCC_OscConfig+0x144>
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d002      	beq.n	80013d6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d135      	bne.n	8001442 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d6:	4b78      	ldr	r3, [pc, #480]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	2380      	movs	r3, #128	@ 0x80
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4013      	ands	r3, r2
 80013e0:	d005      	beq.n	80013ee <HAL_RCC_OscConfig+0x162>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e256      	b.n	800189c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ee:	4b72      	ldr	r3, [pc, #456]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4a74      	ldr	r2, [pc, #464]	@ (80015c4 <HAL_RCC_OscConfig+0x338>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	0019      	movs	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	021a      	lsls	r2, r3, #8
 80013fe:	4b6e      	ldr	r3, [pc, #440]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d112      	bne.n	8001430 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800140a:	4b6b      	ldr	r3, [pc, #428]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6e      	ldr	r2, [pc, #440]	@ (80015c8 <HAL_RCC_OscConfig+0x33c>)
 8001410:	4013      	ands	r3, r2
 8001412:	0019      	movs	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	4b67      	ldr	r3, [pc, #412]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800141e:	4b66      	ldr	r3, [pc, #408]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0adb      	lsrs	r3, r3, #11
 8001424:	2207      	movs	r2, #7
 8001426:	4013      	ands	r3, r2
 8001428:	4a68      	ldr	r2, [pc, #416]	@ (80015cc <HAL_RCC_OscConfig+0x340>)
 800142a:	40da      	lsrs	r2, r3
 800142c:	4b68      	ldr	r3, [pc, #416]	@ (80015d0 <HAL_RCC_OscConfig+0x344>)
 800142e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001430:	4b68      	ldr	r3, [pc, #416]	@ (80015d4 <HAL_RCC_OscConfig+0x348>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff fa9b 	bl	8000970 <HAL_InitTick>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d051      	beq.n	80014e2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e22c      	b.n	800189c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d030      	beq.n	80014ac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800144a:	4b5b      	ldr	r3, [pc, #364]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a5e      	ldr	r2, [pc, #376]	@ (80015c8 <HAL_RCC_OscConfig+0x33c>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	4b57      	ldr	r3, [pc, #348]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800145e:	4b56      	ldr	r3, [pc, #344]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b55      	ldr	r3, [pc, #340]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001464:	2180      	movs	r1, #128	@ 0x80
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fadc 	bl	8000a28 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fad7 	bl	8000a28 <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e209      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001488:	4b4b      	ldr	r3, [pc, #300]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4013      	ands	r3, r2
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b48      	ldr	r3, [pc, #288]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a4a      	ldr	r2, [pc, #296]	@ (80015c4 <HAL_RCC_OscConfig+0x338>)
 800149a:	4013      	ands	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	021a      	lsls	r2, r3, #8
 80014a4:	4b44      	ldr	r3, [pc, #272]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80014a6:	430a      	orrs	r2, r1
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	e01b      	b.n	80014e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014ac:	4b42      	ldr	r3, [pc, #264]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b41      	ldr	r3, [pc, #260]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80014b2:	4949      	ldr	r1, [pc, #292]	@ (80015d8 <HAL_RCC_OscConfig+0x34c>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fab6 	bl	8000a28 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c2:	f7ff fab1 	bl	8000a28 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1e3      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d4:	4b38      	ldr	r3, [pc, #224]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4013      	ands	r3, r2
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x236>
 80014e0:	e000      	b.n	80014e4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2208      	movs	r2, #8
 80014ea:	4013      	ands	r3, r2
 80014ec:	d047      	beq.n	800157e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014ee:	4b32      	ldr	r3, [pc, #200]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2238      	movs	r2, #56	@ 0x38
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b18      	cmp	r3, #24
 80014f8:	d10a      	bne.n	8001510 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014fa:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d03c      	beq.n	800157e <HAL_RCC_OscConfig+0x2f2>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d138      	bne.n	800157e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e1c5      	b.n	800189c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d019      	beq.n	800154c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001518:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800151a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800151c:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fa80 	bl	8000a28 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152e:	f7ff fa7b 	bl	8000a28 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1ad      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001544:	2202      	movs	r2, #2
 8001546:	4013      	ands	r3, r2
 8001548:	d0f1      	beq.n	800152e <HAL_RCC_OscConfig+0x2a2>
 800154a:	e018      	b.n	800157e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800154e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001550:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001552:	2101      	movs	r1, #1
 8001554:	438a      	bics	r2, r1
 8001556:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fa66 	bl	8000a28 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001562:	f7ff fa61 	bl	8000a28 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e193      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001574:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001578:	2202      	movs	r2, #2
 800157a:	4013      	ands	r3, r2
 800157c:	d1f1      	bne.n	8001562 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2204      	movs	r2, #4
 8001584:	4013      	ands	r3, r2
 8001586:	d100      	bne.n	800158a <HAL_RCC_OscConfig+0x2fe>
 8001588:	e0c6      	b.n	8001718 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158a:	231f      	movs	r3, #31
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2238      	movs	r2, #56	@ 0x38
 8001598:	4013      	ands	r3, r2
 800159a:	2b20      	cmp	r3, #32
 800159c:	d11e      	bne.n	80015dc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80015a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d100      	bne.n	80015aa <HAL_RCC_OscConfig+0x31e>
 80015a8:	e0b6      	b.n	8001718 <HAL_RCC_OscConfig+0x48c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d000      	beq.n	80015b4 <HAL_RCC_OscConfig+0x328>
 80015b2:	e0b1      	b.n	8001718 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e171      	b.n	800189c <HAL_RCC_OscConfig+0x610>
 80015b8:	40021000 	.word	0x40021000
 80015bc:	fffeffff 	.word	0xfffeffff
 80015c0:	fffbffff 	.word	0xfffbffff
 80015c4:	ffff80ff 	.word	0xffff80ff
 80015c8:	ffffc7ff 	.word	0xffffc7ff
 80015cc:	00f42400 	.word	0x00f42400
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000004 	.word	0x20000004
 80015d8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015dc:	4bb1      	ldr	r3, [pc, #708]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80015de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	055b      	lsls	r3, r3, #21
 80015e4:	4013      	ands	r3, r2
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_OscConfig+0x360>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x362>
 80015ec:	2300      	movs	r3, #0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d011      	beq.n	8001616 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4bac      	ldr	r3, [pc, #688]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80015f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015f6:	4bab      	ldr	r3, [pc, #684]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80015f8:	2180      	movs	r1, #128	@ 0x80
 80015fa:	0549      	lsls	r1, r1, #21
 80015fc:	430a      	orrs	r2, r1
 80015fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001600:	4ba8      	ldr	r3, [pc, #672]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001602:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	055b      	lsls	r3, r3, #21
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800160e:	231f      	movs	r3, #31
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001616:	4ba4      	ldr	r3, [pc, #656]	@ (80018a8 <HAL_RCC_OscConfig+0x61c>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	2380      	movs	r3, #128	@ 0x80
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4013      	ands	r3, r2
 8001620:	d11a      	bne.n	8001658 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001622:	4ba1      	ldr	r3, [pc, #644]	@ (80018a8 <HAL_RCC_OscConfig+0x61c>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4ba0      	ldr	r3, [pc, #640]	@ (80018a8 <HAL_RCC_OscConfig+0x61c>)
 8001628:	2180      	movs	r1, #128	@ 0x80
 800162a:	0049      	lsls	r1, r1, #1
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001630:	f7ff f9fa 	bl	8000a28 <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff f9f5 	bl	8000a28 <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e127      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164c:	4b96      	ldr	r3, [pc, #600]	@ (80018a8 <HAL_RCC_OscConfig+0x61c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4013      	ands	r3, r2
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x3e2>
 8001660:	4b90      	ldr	r3, [pc, #576]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001662:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001664:	4b8f      	ldr	r3, [pc, #572]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001666:	2101      	movs	r1, #1
 8001668:	430a      	orrs	r2, r1
 800166a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800166c:	e01c      	b.n	80016a8 <HAL_RCC_OscConfig+0x41c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x404>
 8001676:	4b8b      	ldr	r3, [pc, #556]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001678:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800167a:	4b8a      	ldr	r3, [pc, #552]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 800167c:	2104      	movs	r1, #4
 800167e:	430a      	orrs	r2, r1
 8001680:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001682:	4b88      	ldr	r3, [pc, #544]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001684:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001686:	4b87      	ldr	r3, [pc, #540]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001688:	2101      	movs	r1, #1
 800168a:	430a      	orrs	r2, r1
 800168c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0x41c>
 8001690:	4b84      	ldr	r3, [pc, #528]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001692:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001694:	4b83      	ldr	r3, [pc, #524]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001696:	2101      	movs	r1, #1
 8001698:	438a      	bics	r2, r1
 800169a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800169c:	4b81      	ldr	r3, [pc, #516]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 800169e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016a0:	4b80      	ldr	r3, [pc, #512]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80016a2:	2104      	movs	r1, #4
 80016a4:	438a      	bics	r2, r1
 80016a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d014      	beq.n	80016da <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff f9ba 	bl	8000a28 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b8:	e009      	b.n	80016ce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff f9b5 	bl	8000a28 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	4a79      	ldr	r2, [pc, #484]	@ (80018ac <HAL_RCC_OscConfig+0x620>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0e6      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ce:	4b75      	ldr	r3, [pc, #468]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80016d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d2:	2202      	movs	r2, #2
 80016d4:	4013      	ands	r3, r2
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x42e>
 80016d8:	e013      	b.n	8001702 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016da:	f7ff f9a5 	bl	8000a28 <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e2:	e009      	b.n	80016f8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff f9a0 	bl	8000a28 <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	4a6f      	ldr	r2, [pc, #444]	@ (80018ac <HAL_RCC_OscConfig+0x620>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e0d1      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f8:	4b6a      	ldr	r3, [pc, #424]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80016fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fc:	2202      	movs	r2, #2
 80016fe:	4013      	ands	r3, r2
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001702:	231f      	movs	r3, #31
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d105      	bne.n	8001718 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800170c:	4b65      	ldr	r3, [pc, #404]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 800170e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001710:	4b64      	ldr	r3, [pc, #400]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001712:	4967      	ldr	r1, [pc, #412]	@ (80018b0 <HAL_RCC_OscConfig+0x624>)
 8001714:	400a      	ands	r2, r1
 8001716:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d100      	bne.n	8001722 <HAL_RCC_OscConfig+0x496>
 8001720:	e0bb      	b.n	800189a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001722:	4b60      	ldr	r3, [pc, #384]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2238      	movs	r2, #56	@ 0x38
 8001728:	4013      	ands	r3, r2
 800172a:	2b10      	cmp	r3, #16
 800172c:	d100      	bne.n	8001730 <HAL_RCC_OscConfig+0x4a4>
 800172e:	e07b      	b.n	8001828 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d156      	bne.n	80017e6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001738:	4b5a      	ldr	r3, [pc, #360]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b59      	ldr	r3, [pc, #356]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 800173e:	495d      	ldr	r1, [pc, #372]	@ (80018b4 <HAL_RCC_OscConfig+0x628>)
 8001740:	400a      	ands	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff f970 	bl	8000a28 <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff f96b 	bl	8000a28 <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e09d      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001760:	4b50      	ldr	r3, [pc, #320]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	049b      	lsls	r3, r3, #18
 8001768:	4013      	ands	r3, r2
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176c:	4b4d      	ldr	r3, [pc, #308]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4a51      	ldr	r2, [pc, #324]	@ (80018b8 <HAL_RCC_OscConfig+0x62c>)
 8001772:	4013      	ands	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1a      	ldr	r2, [r3, #32]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001798:	431a      	orrs	r2, r3
 800179a:	4b42      	ldr	r3, [pc, #264]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 800179c:	430a      	orrs	r2, r1
 800179e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a0:	4b40      	ldr	r3, [pc, #256]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b3f      	ldr	r3, [pc, #252]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80017a6:	2180      	movs	r1, #128	@ 0x80
 80017a8:	0449      	lsls	r1, r1, #17
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017ae:	4b3d      	ldr	r3, [pc, #244]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	4b3c      	ldr	r3, [pc, #240]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80017b4:	2180      	movs	r1, #128	@ 0x80
 80017b6:	0549      	lsls	r1, r1, #21
 80017b8:	430a      	orrs	r2, r1
 80017ba:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff f934 	bl	8000a28 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff f92f 	bl	8000a28 <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e061      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d8:	4b32      	ldr	r3, [pc, #200]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	049b      	lsls	r3, r3, #18
 80017e0:	4013      	ands	r3, r2
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x53a>
 80017e4:	e059      	b.n	800189a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b2f      	ldr	r3, [pc, #188]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b2e      	ldr	r3, [pc, #184]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 80017ec:	4931      	ldr	r1, [pc, #196]	@ (80018b4 <HAL_RCC_OscConfig+0x628>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff f919 	bl	8000a28 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f914 	bl	8000a28 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e046      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180e:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	@ 0x80
 8001814:	049b      	lsls	r3, r3, #18
 8001816:	4013      	ands	r3, r2
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800181a:	4b22      	ldr	r3, [pc, #136]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001820:	4926      	ldr	r1, [pc, #152]	@ (80018bc <HAL_RCC_OscConfig+0x630>)
 8001822:	400a      	ands	r2, r1
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	e038      	b.n	800189a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e033      	b.n	800189c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <HAL_RCC_OscConfig+0x618>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2203      	movs	r2, #3
 800183e:	401a      	ands	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	429a      	cmp	r2, r3
 8001846:	d126      	bne.n	8001896 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2270      	movs	r2, #112	@ 0x70
 800184c:	401a      	ands	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d11f      	bne.n	8001896 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	23fe      	movs	r3, #254	@ 0xfe
 800185a:	01db      	lsls	r3, r3, #7
 800185c:	401a      	ands	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001862:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d116      	bne.n	8001896 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	23f8      	movs	r3, #248	@ 0xf8
 800186c:	039b      	lsls	r3, r3, #14
 800186e:	401a      	ands	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d10e      	bne.n	8001896 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	23e0      	movs	r3, #224	@ 0xe0
 800187c:	051b      	lsls	r3, r3, #20
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	0f5b      	lsrs	r3, r3, #29
 800188c:	075a      	lsls	r2, r3, #29
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	b008      	add	sp, #32
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40007000 	.word	0x40007000
 80018ac:	00001388 	.word	0x00001388
 80018b0:	efffffff 	.word	0xefffffff
 80018b4:	feffffff 	.word	0xfeffffff
 80018b8:	11c1808c 	.word	0x11c1808c
 80018bc:	eefefffc 	.word	0xeefefffc

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0e9      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b76      	ldr	r3, [pc, #472]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2207      	movs	r2, #7
 80018da:	4013      	ands	r3, r2
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d91e      	bls.n	8001920 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b73      	ldr	r3, [pc, #460]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2207      	movs	r2, #7
 80018e8:	4393      	bics	r3, r2
 80018ea:	0019      	movs	r1, r3
 80018ec:	4b70      	ldr	r3, [pc, #448]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018f4:	f7ff f898 	bl	8000a28 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018fc:	e009      	b.n	8001912 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fe:	f7ff f893 	bl	8000a28 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	4a6a      	ldr	r2, [pc, #424]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0ca      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001912:	4b67      	ldr	r3, [pc, #412]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2207      	movs	r2, #7
 8001918:	4013      	ands	r3, r2
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d1ee      	bne.n	80018fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2202      	movs	r2, #2
 8001926:	4013      	ands	r3, r2
 8001928:	d015      	beq.n	8001956 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2204      	movs	r2, #4
 8001930:	4013      	ands	r3, r2
 8001932:	d006      	beq.n	8001942 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001934:	4b60      	ldr	r3, [pc, #384]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 800193a:	21e0      	movs	r1, #224	@ 0xe0
 800193c:	01c9      	lsls	r1, r1, #7
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001942:	4b5d      	ldr	r3, [pc, #372]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4a5d      	ldr	r2, [pc, #372]	@ (8001abc <HAL_RCC_ClockConfig+0x1fc>)
 8001948:	4013      	ands	r3, r2
 800194a:	0019      	movs	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	4b59      	ldr	r3, [pc, #356]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8001952:	430a      	orrs	r2, r1
 8001954:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	4013      	ands	r3, r2
 800195e:	d057      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d107      	bne.n	8001978 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001968:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	029b      	lsls	r3, r3, #10
 8001970:	4013      	ands	r3, r2
 8001972:	d12b      	bne.n	80019cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e097      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d107      	bne.n	8001990 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001980:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	049b      	lsls	r3, r3, #18
 8001988:	4013      	ands	r3, r2
 800198a:	d11f      	bne.n	80019cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e08b      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001998:	4b47      	ldr	r3, [pc, #284]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2380      	movs	r3, #128	@ 0x80
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4013      	ands	r3, r2
 80019a2:	d113      	bne.n	80019cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e07f      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d106      	bne.n	80019be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b0:	4b41      	ldr	r3, [pc, #260]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 80019b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b4:	2202      	movs	r2, #2
 80019b6:	4013      	ands	r3, r2
 80019b8:	d108      	bne.n	80019cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e074      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019be:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 80019c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e06d      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019cc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2207      	movs	r2, #7
 80019d2:	4393      	bics	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	4b37      	ldr	r3, [pc, #220]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 80019dc:	430a      	orrs	r2, r1
 80019de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019e0:	f7ff f822 	bl	8000a28 <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e8:	e009      	b.n	80019fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ea:	f7ff f81d 	bl	8000a28 <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e054      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2238      	movs	r2, #56	@ 0x38
 8001a04:	401a      	ands	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d1ec      	bne.n	80019ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a10:	4b27      	ldr	r3, [pc, #156]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2207      	movs	r2, #7
 8001a16:	4013      	ands	r3, r2
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d21e      	bcs.n	8001a5c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2207      	movs	r2, #7
 8001a24:	4393      	bics	r3, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a30:	f7fe fffa 	bl	8000a28 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a38:	e009      	b.n	8001a4e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3a:	f7fe fff5 	bl	8000a28 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e02c      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a4e:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2207      	movs	r2, #7
 8001a54:	4013      	ands	r3, r2
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1ee      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2204      	movs	r2, #4
 8001a62:	4013      	ands	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a66:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4a15      	ldr	r2, [pc, #84]	@ (8001ac0 <HAL_RCC_ClockConfig+0x200>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a7a:	f000 f829 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a7e:	0001      	movs	r1, r0
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	220f      	movs	r2, #15
 8001a88:	401a      	ands	r2, r3
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <HAL_RCC_ClockConfig+0x204>)
 8001a8c:	0092      	lsls	r2, r2, #2
 8001a8e:	58d3      	ldr	r3, [r2, r3]
 8001a90:	221f      	movs	r2, #31
 8001a92:	4013      	ands	r3, r2
 8001a94:	000a      	movs	r2, r1
 8001a96:	40da      	lsrs	r2, r3
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <HAL_RCC_ClockConfig+0x208>)
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <HAL_RCC_ClockConfig+0x20c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7fe ff65 	bl	8000970 <HAL_InitTick>
 8001aa6:	0003      	movs	r3, r0
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b004      	add	sp, #16
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40022000 	.word	0x40022000
 8001ab4:	00001388 	.word	0x00001388
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	fffff0ff 	.word	0xfffff0ff
 8001ac0:	ffff8fff 	.word	0xffff8fff
 8001ac4:	08002688 	.word	0x08002688
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2238      	movs	r2, #56	@ 0x38
 8001adc:	4013      	ands	r3, r2
 8001ade:	d10f      	bne.n	8001b00 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ae0:	4b39      	ldr	r3, [pc, #228]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0adb      	lsrs	r3, r3, #11
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2201      	movs	r2, #1
 8001aec:	409a      	lsls	r2, r3
 8001aee:	0013      	movs	r3, r2
 8001af0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001af2:	6839      	ldr	r1, [r7, #0]
 8001af4:	4835      	ldr	r0, [pc, #212]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001af6:	f7fe fb05 	bl	8000104 <__udivsi3>
 8001afa:	0003      	movs	r3, r0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	e05d      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b00:	4b31      	ldr	r3, [pc, #196]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2238      	movs	r2, #56	@ 0x38
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b0c:	4b30      	ldr	r3, [pc, #192]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	e054      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b12:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2238      	movs	r2, #56	@ 0x38
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d138      	bne.n	8001b90 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2203      	movs	r2, #3
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b28:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	2207      	movs	r2, #7
 8001b30:	4013      	ands	r3, r2
 8001b32:	3301      	adds	r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d10d      	bne.n	8001b58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	4824      	ldr	r0, [pc, #144]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b40:	f7fe fae0 	bl	8000104 <__udivsi3>
 8001b44:	0003      	movs	r3, r0
 8001b46:	0019      	movs	r1, r3
 8001b48:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	227f      	movs	r2, #127	@ 0x7f
 8001b50:	4013      	ands	r3, r2
 8001b52:	434b      	muls	r3, r1
 8001b54:	617b      	str	r3, [r7, #20]
        break;
 8001b56:	e00d      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	481c      	ldr	r0, [pc, #112]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b5c:	f7fe fad2 	bl	8000104 <__udivsi3>
 8001b60:	0003      	movs	r3, r0
 8001b62:	0019      	movs	r1, r3
 8001b64:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	227f      	movs	r2, #127	@ 0x7f
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	434b      	muls	r3, r1
 8001b70:	617b      	str	r3, [r7, #20]
        break;
 8001b72:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0f5b      	lsrs	r3, r3, #29
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	3301      	adds	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	6978      	ldr	r0, [r7, #20]
 8001b86:	f7fe fabd 	bl	8000104 <__udivsi3>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	e015      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b90:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2238      	movs	r2, #56	@ 0x38
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d103      	bne.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2238      	movs	r2, #56	@ 0x38
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b18      	cmp	r3, #24
 8001bae:	d103      	bne.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bb0:	23fa      	movs	r3, #250	@ 0xfa
 8001bb2:	01db      	lsls	r3, r3, #7
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e001      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bbc:	693b      	ldr	r3, [r7, #16]
}
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b006      	add	sp, #24
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	00f42400 	.word	0x00f42400
 8001bd0:	007a1200 	.word	0x007a1200

08001bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd8:	4b02      	ldr	r3, [pc, #8]	@ (8001be4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	20000000 	.word	0x20000000

08001be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001bec:	f7ff fff2 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001bf0:	0004      	movs	r4, r0
 8001bf2:	f7ff fb3f 	bl	8001274 <LL_RCC_GetAPB1Prescaler>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	0b1a      	lsrs	r2, r3, #12
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	58d3      	ldr	r3, [r2, r3]
 8001c00:	221f      	movs	r2, #31
 8001c02:	4013      	ands	r3, r2
 8001c04:	40dc      	lsrs	r4, r3
 8001c06:	0023      	movs	r3, r4
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	080026c8 	.word	0x080026c8

08001c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e046      	b.n	8001cb4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2288      	movs	r2, #136	@ 0x88
 8001c2a:	589b      	ldr	r3, [r3, r2]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2284      	movs	r2, #132	@ 0x84
 8001c34:	2100      	movs	r1, #0
 8001c36:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7fe fdd4 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2288      	movs	r2, #136	@ 0x88
 8001c44:	2124      	movs	r1, #36	@ 0x24
 8001c46:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2101      	movs	r1, #1
 8001c54:	438a      	bics	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 faa4 	bl	80021b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 f828 	bl	8001cc0 <UART_SetConfig>
 8001c70:	0003      	movs	r3, r0
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e01c      	b.n	8001cb4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	490d      	ldr	r1, [pc, #52]	@ (8001cbc <HAL_UART_Init+0xa8>)
 8001c86:	400a      	ands	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	212a      	movs	r1, #42	@ 0x2a
 8001c96:	438a      	bics	r2, r1
 8001c98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0018      	movs	r0, r3
 8001cae:	f000 fb33 	bl	8002318 <UART_CheckIdleState>
 8001cb2:	0003      	movs	r3, r0
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	ffffb7ff 	.word	0xffffb7ff

08001cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	b090      	sub	sp, #64	@ 0x40
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cc8:	231a      	movs	r3, #26
 8001cca:	2220      	movs	r2, #32
 8001ccc:	189b      	adds	r3, r3, r2
 8001cce:	19db      	adds	r3, r3, r7
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4ac4      	ldr	r2, [pc, #784]	@ (8002004 <UART_SetConfig+0x344>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4abf      	ldr	r2, [pc, #764]	@ (8002008 <UART_SetConfig+0x348>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	68d9      	ldr	r1, [r3, #12]
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	0003      	movs	r3, r0
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4ab9      	ldr	r2, [pc, #740]	@ (800200c <UART_SetConfig+0x34c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d004      	beq.n	8001d36 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d32:	4313      	orrs	r3, r2
 8001d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4ab4      	ldr	r2, [pc, #720]	@ (8002010 <UART_SetConfig+0x350>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	220f      	movs	r2, #15
 8001d54:	4393      	bics	r3, r2
 8001d56:	0018      	movs	r0, r3
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	0003      	movs	r3, r0
 8001d62:	430b      	orrs	r3, r1
 8001d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4aaa      	ldr	r2, [pc, #680]	@ (8002014 <UART_SetConfig+0x354>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d131      	bne.n	8001dd4 <UART_SetConfig+0x114>
 8001d70:	4ba9      	ldr	r3, [pc, #676]	@ (8002018 <UART_SetConfig+0x358>)
 8001d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d74:	2203      	movs	r2, #3
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d01d      	beq.n	8001db8 <UART_SetConfig+0xf8>
 8001d7c:	d823      	bhi.n	8001dc6 <UART_SetConfig+0x106>
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d00c      	beq.n	8001d9c <UART_SetConfig+0xdc>
 8001d82:	d820      	bhi.n	8001dc6 <UART_SetConfig+0x106>
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <UART_SetConfig+0xce>
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d00e      	beq.n	8001daa <UART_SetConfig+0xea>
 8001d8c:	e01b      	b.n	8001dc6 <UART_SetConfig+0x106>
 8001d8e:	231b      	movs	r3, #27
 8001d90:	2220      	movs	r2, #32
 8001d92:	189b      	adds	r3, r3, r2
 8001d94:	19db      	adds	r3, r3, r7
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e071      	b.n	8001e80 <UART_SetConfig+0x1c0>
 8001d9c:	231b      	movs	r3, #27
 8001d9e:	2220      	movs	r2, #32
 8001da0:	189b      	adds	r3, r3, r2
 8001da2:	19db      	adds	r3, r3, r7
 8001da4:	2202      	movs	r2, #2
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e06a      	b.n	8001e80 <UART_SetConfig+0x1c0>
 8001daa:	231b      	movs	r3, #27
 8001dac:	2220      	movs	r2, #32
 8001dae:	189b      	adds	r3, r3, r2
 8001db0:	19db      	adds	r3, r3, r7
 8001db2:	2204      	movs	r2, #4
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	e063      	b.n	8001e80 <UART_SetConfig+0x1c0>
 8001db8:	231b      	movs	r3, #27
 8001dba:	2220      	movs	r2, #32
 8001dbc:	189b      	adds	r3, r3, r2
 8001dbe:	19db      	adds	r3, r3, r7
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	e05c      	b.n	8001e80 <UART_SetConfig+0x1c0>
 8001dc6:	231b      	movs	r3, #27
 8001dc8:	2220      	movs	r2, #32
 8001dca:	189b      	adds	r3, r3, r2
 8001dcc:	19db      	adds	r3, r3, r7
 8001dce:	2210      	movs	r2, #16
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e055      	b.n	8001e80 <UART_SetConfig+0x1c0>
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a90      	ldr	r2, [pc, #576]	@ (800201c <UART_SetConfig+0x35c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d106      	bne.n	8001dec <UART_SetConfig+0x12c>
 8001dde:	231b      	movs	r3, #27
 8001de0:	2220      	movs	r2, #32
 8001de2:	189b      	adds	r3, r3, r2
 8001de4:	19db      	adds	r3, r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e049      	b.n	8001e80 <UART_SetConfig+0x1c0>
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a86      	ldr	r2, [pc, #536]	@ (800200c <UART_SetConfig+0x34c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d13e      	bne.n	8001e74 <UART_SetConfig+0x1b4>
 8001df6:	4b88      	ldr	r3, [pc, #544]	@ (8002018 <UART_SetConfig+0x358>)
 8001df8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001dfa:	23c0      	movs	r3, #192	@ 0xc0
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	4013      	ands	r3, r2
 8001e00:	22c0      	movs	r2, #192	@ 0xc0
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d027      	beq.n	8001e58 <UART_SetConfig+0x198>
 8001e08:	22c0      	movs	r2, #192	@ 0xc0
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d82a      	bhi.n	8001e66 <UART_SetConfig+0x1a6>
 8001e10:	2280      	movs	r2, #128	@ 0x80
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d011      	beq.n	8001e3c <UART_SetConfig+0x17c>
 8001e18:	2280      	movs	r2, #128	@ 0x80
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d822      	bhi.n	8001e66 <UART_SetConfig+0x1a6>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <UART_SetConfig+0x16e>
 8001e24:	2280      	movs	r2, #128	@ 0x80
 8001e26:	00d2      	lsls	r2, r2, #3
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00e      	beq.n	8001e4a <UART_SetConfig+0x18a>
 8001e2c:	e01b      	b.n	8001e66 <UART_SetConfig+0x1a6>
 8001e2e:	231b      	movs	r3, #27
 8001e30:	2220      	movs	r2, #32
 8001e32:	189b      	adds	r3, r3, r2
 8001e34:	19db      	adds	r3, r3, r7
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e021      	b.n	8001e80 <UART_SetConfig+0x1c0>
 8001e3c:	231b      	movs	r3, #27
 8001e3e:	2220      	movs	r2, #32
 8001e40:	189b      	adds	r3, r3, r2
 8001e42:	19db      	adds	r3, r3, r7
 8001e44:	2202      	movs	r2, #2
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	e01a      	b.n	8001e80 <UART_SetConfig+0x1c0>
 8001e4a:	231b      	movs	r3, #27
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	189b      	adds	r3, r3, r2
 8001e50:	19db      	adds	r3, r3, r7
 8001e52:	2204      	movs	r2, #4
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	e013      	b.n	8001e80 <UART_SetConfig+0x1c0>
 8001e58:	231b      	movs	r3, #27
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	189b      	adds	r3, r3, r2
 8001e5e:	19db      	adds	r3, r3, r7
 8001e60:	2208      	movs	r2, #8
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e00c      	b.n	8001e80 <UART_SetConfig+0x1c0>
 8001e66:	231b      	movs	r3, #27
 8001e68:	2220      	movs	r2, #32
 8001e6a:	189b      	adds	r3, r3, r2
 8001e6c:	19db      	adds	r3, r3, r7
 8001e6e:	2210      	movs	r2, #16
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e005      	b.n	8001e80 <UART_SetConfig+0x1c0>
 8001e74:	231b      	movs	r3, #27
 8001e76:	2220      	movs	r2, #32
 8001e78:	189b      	adds	r3, r3, r2
 8001e7a:	19db      	adds	r3, r3, r7
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a61      	ldr	r2, [pc, #388]	@ (800200c <UART_SetConfig+0x34c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d000      	beq.n	8001e8c <UART_SetConfig+0x1cc>
 8001e8a:	e092      	b.n	8001fb2 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001e8c:	231b      	movs	r3, #27
 8001e8e:	2220      	movs	r2, #32
 8001e90:	189b      	adds	r3, r3, r2
 8001e92:	19db      	adds	r3, r3, r7
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d015      	beq.n	8001ec6 <UART_SetConfig+0x206>
 8001e9a:	dc18      	bgt.n	8001ece <UART_SetConfig+0x20e>
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d00d      	beq.n	8001ebc <UART_SetConfig+0x1fc>
 8001ea0:	dc15      	bgt.n	8001ece <UART_SetConfig+0x20e>
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <UART_SetConfig+0x1ec>
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d005      	beq.n	8001eb6 <UART_SetConfig+0x1f6>
 8001eaa:	e010      	b.n	8001ece <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001eac:	f7ff fe9c 	bl	8001be8 <HAL_RCC_GetPCLK1Freq>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001eb4:	e014      	b.n	8001ee0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001eb6:	4b5a      	ldr	r3, [pc, #360]	@ (8002020 <UART_SetConfig+0x360>)
 8001eb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001eba:	e011      	b.n	8001ee0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ebc:	f7ff fe08 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001ec4:	e00c      	b.n	8001ee0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ec6:	2380      	movs	r3, #128	@ 0x80
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001ecc:	e008      	b.n	8001ee0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8001ed2:	231a      	movs	r3, #26
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	189b      	adds	r3, r3, r2
 8001ed8:	19db      	adds	r3, r3, r7
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
        break;
 8001ede:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d100      	bne.n	8001ee8 <UART_SetConfig+0x228>
 8001ee6:	e147      	b.n	8002178 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eec:	4b4d      	ldr	r3, [pc, #308]	@ (8002024 <UART_SetConfig+0x364>)
 8001eee:	0052      	lsls	r2, r2, #1
 8001ef0:	5ad3      	ldrh	r3, [r2, r3]
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001ef6:	f7fe f905 	bl	8000104 <__udivsi3>
 8001efa:	0003      	movs	r3, r0
 8001efc:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	0013      	movs	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	189b      	adds	r3, r3, r2
 8001f08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d305      	bcc.n	8001f1a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001f14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d906      	bls.n	8001f28 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8001f1a:	231a      	movs	r3, #26
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	189b      	adds	r3, r3, r2
 8001f20:	19db      	adds	r3, r3, r7
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	e127      	b.n	8002178 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f34:	4b3b      	ldr	r3, [pc, #236]	@ (8002024 <UART_SetConfig+0x364>)
 8001f36:	0052      	lsls	r2, r2, #1
 8001f38:	5ad3      	ldrh	r3, [r2, r3]
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	69b8      	ldr	r0, [r7, #24]
 8001f46:	69f9      	ldr	r1, [r7, #28]
 8001f48:	f7fe f968 	bl	800021c <__aeabi_uldivmod>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	000b      	movs	r3, r1
 8001f50:	0e11      	lsrs	r1, r2, #24
 8001f52:	021d      	lsls	r5, r3, #8
 8001f54:	430d      	orrs	r5, r1
 8001f56:	0214      	lsls	r4, r2, #8
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68b8      	ldr	r0, [r7, #8]
 8001f66:	68f9      	ldr	r1, [r7, #12]
 8001f68:	1900      	adds	r0, r0, r4
 8001f6a:	4169      	adcs	r1, r5
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f7fe f94f 	bl	800021c <__aeabi_uldivmod>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	000b      	movs	r3, r1
 8001f82:	0013      	movs	r3, r2
 8001f84:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f88:	23c0      	movs	r3, #192	@ 0xc0
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d309      	bcc.n	8001fa4 <UART_SetConfig+0x2e4>
 8001f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f92:	2380      	movs	r3, #128	@ 0x80
 8001f94:	035b      	lsls	r3, r3, #13
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d204      	bcs.n	8001fa4 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	e0e9      	b.n	8002178 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8001fa4:	231a      	movs	r3, #26
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	189b      	adds	r3, r3, r2
 8001faa:	19db      	adds	r3, r3, r7
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	e0e2      	b.n	8002178 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d000      	beq.n	8001fc0 <UART_SetConfig+0x300>
 8001fbe:	e083      	b.n	80020c8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8001fc0:	231b      	movs	r3, #27
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	189b      	adds	r3, r3, r2
 8001fc6:	19db      	adds	r3, r3, r7
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d015      	beq.n	8001ffa <UART_SetConfig+0x33a>
 8001fce:	dc2b      	bgt.n	8002028 <UART_SetConfig+0x368>
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d00d      	beq.n	8001ff0 <UART_SetConfig+0x330>
 8001fd4:	dc28      	bgt.n	8002028 <UART_SetConfig+0x368>
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <UART_SetConfig+0x320>
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d005      	beq.n	8001fea <UART_SetConfig+0x32a>
 8001fde:	e023      	b.n	8002028 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fe0:	f7ff fe02 	bl	8001be8 <HAL_RCC_GetPCLK1Freq>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001fe8:	e027      	b.n	800203a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <UART_SetConfig+0x360>)
 8001fec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001fee:	e024      	b.n	800203a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ff0:	f7ff fd6e 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001ff8:	e01f      	b.n	800203a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002000:	e01b      	b.n	800203a <UART_SetConfig+0x37a>
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	cfff69f3 	.word	0xcfff69f3
 8002008:	ffffcfff 	.word	0xffffcfff
 800200c:	40008000 	.word	0x40008000
 8002010:	11fff4ff 	.word	0x11fff4ff
 8002014:	40013800 	.word	0x40013800
 8002018:	40021000 	.word	0x40021000
 800201c:	40004400 	.word	0x40004400
 8002020:	00f42400 	.word	0x00f42400
 8002024:	080026e8 	.word	0x080026e8
      default:
        pclk = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800202c:	231a      	movs	r3, #26
 800202e:	2220      	movs	r2, #32
 8002030:	189b      	adds	r3, r3, r2
 8002032:	19db      	adds	r3, r3, r7
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
        break;
 8002038:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800203a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203c:	2b00      	cmp	r3, #0
 800203e:	d100      	bne.n	8002042 <UART_SetConfig+0x382>
 8002040:	e09a      	b.n	8002178 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002046:	4b58      	ldr	r3, [pc, #352]	@ (80021a8 <UART_SetConfig+0x4e8>)
 8002048:	0052      	lsls	r2, r2, #1
 800204a:	5ad3      	ldrh	r3, [r2, r3]
 800204c:	0019      	movs	r1, r3
 800204e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002050:	f7fe f858 	bl	8000104 <__udivsi3>
 8002054:	0003      	movs	r3, r0
 8002056:	005a      	lsls	r2, r3, #1
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	18d2      	adds	r2, r2, r3
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	0019      	movs	r1, r3
 8002066:	0010      	movs	r0, r2
 8002068:	f7fe f84c 	bl	8000104 <__udivsi3>
 800206c:	0003      	movs	r3, r0
 800206e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002072:	2b0f      	cmp	r3, #15
 8002074:	d921      	bls.n	80020ba <UART_SetConfig+0x3fa>
 8002076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	025b      	lsls	r3, r3, #9
 800207c:	429a      	cmp	r2, r3
 800207e:	d21c      	bcs.n	80020ba <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002082:	b29a      	uxth	r2, r3
 8002084:	200e      	movs	r0, #14
 8002086:	2420      	movs	r4, #32
 8002088:	1903      	adds	r3, r0, r4
 800208a:	19db      	adds	r3, r3, r7
 800208c:	210f      	movs	r1, #15
 800208e:	438a      	bics	r2, r1
 8002090:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	b29b      	uxth	r3, r3
 8002098:	2207      	movs	r2, #7
 800209a:	4013      	ands	r3, r2
 800209c:	b299      	uxth	r1, r3
 800209e:	1903      	adds	r3, r0, r4
 80020a0:	19db      	adds	r3, r3, r7
 80020a2:	1902      	adds	r2, r0, r4
 80020a4:	19d2      	adds	r2, r2, r7
 80020a6:	8812      	ldrh	r2, [r2, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	1902      	adds	r2, r0, r4
 80020b2:	19d2      	adds	r2, r2, r7
 80020b4:	8812      	ldrh	r2, [r2, #0]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	e05e      	b.n	8002178 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80020ba:	231a      	movs	r3, #26
 80020bc:	2220      	movs	r2, #32
 80020be:	189b      	adds	r3, r3, r2
 80020c0:	19db      	adds	r3, r3, r7
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	e057      	b.n	8002178 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80020c8:	231b      	movs	r3, #27
 80020ca:	2220      	movs	r2, #32
 80020cc:	189b      	adds	r3, r3, r2
 80020ce:	19db      	adds	r3, r3, r7
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d015      	beq.n	8002102 <UART_SetConfig+0x442>
 80020d6:	dc18      	bgt.n	800210a <UART_SetConfig+0x44a>
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d00d      	beq.n	80020f8 <UART_SetConfig+0x438>
 80020dc:	dc15      	bgt.n	800210a <UART_SetConfig+0x44a>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <UART_SetConfig+0x428>
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d005      	beq.n	80020f2 <UART_SetConfig+0x432>
 80020e6:	e010      	b.n	800210a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020e8:	f7ff fd7e 	bl	8001be8 <HAL_RCC_GetPCLK1Freq>
 80020ec:	0003      	movs	r3, r0
 80020ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80020f0:	e014      	b.n	800211c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020f2:	4b2e      	ldr	r3, [pc, #184]	@ (80021ac <UART_SetConfig+0x4ec>)
 80020f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80020f6:	e011      	b.n	800211c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020f8:	f7ff fcea 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 80020fc:	0003      	movs	r3, r0
 80020fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002100:	e00c      	b.n	800211c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002108:	e008      	b.n	800211c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800210e:	231a      	movs	r3, #26
 8002110:	2220      	movs	r2, #32
 8002112:	189b      	adds	r3, r3, r2
 8002114:	19db      	adds	r3, r3, r7
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
        break;
 800211a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800211c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800211e:	2b00      	cmp	r3, #0
 8002120:	d02a      	beq.n	8002178 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002126:	4b20      	ldr	r3, [pc, #128]	@ (80021a8 <UART_SetConfig+0x4e8>)
 8002128:	0052      	lsls	r2, r2, #1
 800212a:	5ad3      	ldrh	r3, [r2, r3]
 800212c:	0019      	movs	r1, r3
 800212e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002130:	f7fd ffe8 	bl	8000104 <__udivsi3>
 8002134:	0003      	movs	r3, r0
 8002136:	001a      	movs	r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	18d2      	adds	r2, r2, r3
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	0019      	movs	r1, r3
 8002146:	0010      	movs	r0, r2
 8002148:	f7fd ffdc 	bl	8000104 <__udivsi3>
 800214c:	0003      	movs	r3, r0
 800214e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d90a      	bls.n	800216c <UART_SetConfig+0x4ac>
 8002156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002158:	2380      	movs	r3, #128	@ 0x80
 800215a:	025b      	lsls	r3, r3, #9
 800215c:	429a      	cmp	r2, r3
 800215e:	d205      	bcs.n	800216c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002162:	b29a      	uxth	r2, r3
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	e005      	b.n	8002178 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800216c:	231a      	movs	r3, #26
 800216e:	2220      	movs	r2, #32
 8002170:	189b      	adds	r3, r3, r2
 8002172:	19db      	adds	r3, r3, r7
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	226a      	movs	r2, #106	@ 0x6a
 800217c:	2101      	movs	r1, #1
 800217e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	2268      	movs	r2, #104	@ 0x68
 8002184:	2101      	movs	r1, #1
 8002186:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	2200      	movs	r2, #0
 800218c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	2200      	movs	r2, #0
 8002192:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002194:	231a      	movs	r3, #26
 8002196:	2220      	movs	r2, #32
 8002198:	189b      	adds	r3, r3, r2
 800219a:	19db      	adds	r3, r3, r7
 800219c:	781b      	ldrb	r3, [r3, #0]
}
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b010      	add	sp, #64	@ 0x40
 80021a4:	bdb0      	pop	{r4, r5, r7, pc}
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	080026e8 	.word	0x080026e8
 80021ac:	00f42400 	.word	0x00f42400

080021b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	2208      	movs	r2, #8
 80021be:	4013      	ands	r3, r2
 80021c0:	d00b      	beq.n	80021da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a4a      	ldr	r2, [pc, #296]	@ (80022f4 <UART_AdvFeatureConfig+0x144>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021de:	2201      	movs	r2, #1
 80021e0:	4013      	ands	r3, r2
 80021e2:	d00b      	beq.n	80021fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4a43      	ldr	r2, [pc, #268]	@ (80022f8 <UART_AdvFeatureConfig+0x148>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	2202      	movs	r2, #2
 8002202:	4013      	ands	r3, r2
 8002204:	d00b      	beq.n	800221e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4a3b      	ldr	r2, [pc, #236]	@ (80022fc <UART_AdvFeatureConfig+0x14c>)
 800220e:	4013      	ands	r3, r2
 8002210:	0019      	movs	r1, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	2204      	movs	r2, #4
 8002224:	4013      	ands	r3, r2
 8002226:	d00b      	beq.n	8002240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4a34      	ldr	r2, [pc, #208]	@ (8002300 <UART_AdvFeatureConfig+0x150>)
 8002230:	4013      	ands	r3, r2
 8002232:	0019      	movs	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002244:	2210      	movs	r2, #16
 8002246:	4013      	ands	r3, r2
 8002248:	d00b      	beq.n	8002262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a2c      	ldr	r2, [pc, #176]	@ (8002304 <UART_AdvFeatureConfig+0x154>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	2220      	movs	r2, #32
 8002268:	4013      	ands	r3, r2
 800226a:	d00b      	beq.n	8002284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	4a25      	ldr	r2, [pc, #148]	@ (8002308 <UART_AdvFeatureConfig+0x158>)
 8002274:	4013      	ands	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002288:	2240      	movs	r2, #64	@ 0x40
 800228a:	4013      	ands	r3, r2
 800228c:	d01d      	beq.n	80022ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a1d      	ldr	r2, [pc, #116]	@ (800230c <UART_AdvFeatureConfig+0x15c>)
 8002296:	4013      	ands	r3, r2
 8002298:	0019      	movs	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	035b      	lsls	r3, r3, #13
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d10b      	bne.n	80022ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a15      	ldr	r2, [pc, #84]	@ (8002310 <UART_AdvFeatureConfig+0x160>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	0019      	movs	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	2280      	movs	r2, #128	@ 0x80
 80022d0:	4013      	ands	r3, r2
 80022d2:	d00b      	beq.n	80022ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4a0e      	ldr	r2, [pc, #56]	@ (8002314 <UART_AdvFeatureConfig+0x164>)
 80022dc:	4013      	ands	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
  }
}
 80022ec:	46c0      	nop			@ (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	ffff7fff 	.word	0xffff7fff
 80022f8:	fffdffff 	.word	0xfffdffff
 80022fc:	fffeffff 	.word	0xfffeffff
 8002300:	fffbffff 	.word	0xfffbffff
 8002304:	ffffefff 	.word	0xffffefff
 8002308:	ffffdfff 	.word	0xffffdfff
 800230c:	ffefffff 	.word	0xffefffff
 8002310:	ff9fffff 	.word	0xff9fffff
 8002314:	fff7ffff 	.word	0xfff7ffff

08002318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b092      	sub	sp, #72	@ 0x48
 800231c:	af02      	add	r7, sp, #8
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2290      	movs	r2, #144	@ 0x90
 8002324:	2100      	movs	r1, #0
 8002326:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002328:	f7fe fb7e 	bl	8000a28 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2208      	movs	r2, #8
 8002338:	4013      	ands	r3, r2
 800233a:	2b08      	cmp	r3, #8
 800233c:	d12d      	bne.n	800239a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800233e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002340:	2280      	movs	r2, #128	@ 0x80
 8002342:	0391      	lsls	r1, r2, #14
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	4a47      	ldr	r2, [pc, #284]	@ (8002464 <UART_CheckIdleState+0x14c>)
 8002348:	9200      	str	r2, [sp, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	f000 f88e 	bl	800246c <UART_WaitOnFlagUntilTimeout>
 8002350:	1e03      	subs	r3, r0, #0
 8002352:	d022      	beq.n	800239a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002354:	f3ef 8310 	mrs	r3, PRIMASK
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800235c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800235e:	2301      	movs	r3, #1
 8002360:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002364:	f383 8810 	msr	PRIMASK, r3
}
 8002368:	46c0      	nop			@ (mov r8, r8)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2180      	movs	r1, #128	@ 0x80
 8002376:	438a      	bics	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800237c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800237e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002380:	f383 8810 	msr	PRIMASK, r3
}
 8002384:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2288      	movs	r2, #136	@ 0x88
 800238a:	2120      	movs	r1, #32
 800238c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2284      	movs	r2, #132	@ 0x84
 8002392:	2100      	movs	r1, #0
 8002394:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e060      	b.n	800245c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2204      	movs	r2, #4
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d146      	bne.n	8002436 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023aa:	2280      	movs	r2, #128	@ 0x80
 80023ac:	03d1      	lsls	r1, r2, #15
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002464 <UART_CheckIdleState+0x14c>)
 80023b2:	9200      	str	r2, [sp, #0]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f000 f859 	bl	800246c <UART_WaitOnFlagUntilTimeout>
 80023ba:	1e03      	subs	r3, r0, #0
 80023bc:	d03b      	beq.n	8002436 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023be:	f3ef 8310 	mrs	r3, PRIMASK
 80023c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80023c4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80023c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023c8:	2301      	movs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f383 8810 	msr	PRIMASK, r3
}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4922      	ldr	r1, [pc, #136]	@ (8002468 <UART_CheckIdleState+0x150>)
 80023e0:	400a      	ands	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f383 8810 	msr	PRIMASK, r3
}
 80023ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023f0:	f3ef 8310 	mrs	r3, PRIMASK
 80023f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80023f6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023fa:	2301      	movs	r3, #1
 80023fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f383 8810 	msr	PRIMASK, r3
}
 8002404:	46c0      	nop			@ (mov r8, r8)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	438a      	bics	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002418:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	f383 8810 	msr	PRIMASK, r3
}
 8002420:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	228c      	movs	r2, #140	@ 0x8c
 8002426:	2120      	movs	r1, #32
 8002428:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2284      	movs	r2, #132	@ 0x84
 800242e:	2100      	movs	r1, #0
 8002430:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e012      	b.n	800245c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2288      	movs	r2, #136	@ 0x88
 800243a:	2120      	movs	r1, #32
 800243c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	228c      	movs	r2, #140	@ 0x8c
 8002442:	2120      	movs	r1, #32
 8002444:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2284      	movs	r2, #132	@ 0x84
 8002456:	2100      	movs	r1, #0
 8002458:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b010      	add	sp, #64	@ 0x40
 8002462:	bd80      	pop	{r7, pc}
 8002464:	01ffffff 	.word	0x01ffffff
 8002468:	fffffedf 	.word	0xfffffedf

0800246c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	1dfb      	adds	r3, r7, #7
 800247a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800247c:	e051      	b.n	8002522 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	3301      	adds	r3, #1
 8002482:	d04e      	beq.n	8002522 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002484:	f7fe fad0 	bl	8000a28 <HAL_GetTick>
 8002488:	0002      	movs	r2, r0
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	429a      	cmp	r2, r3
 8002492:	d302      	bcc.n	800249a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e051      	b.n	8002542 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2204      	movs	r2, #4
 80024a6:	4013      	ands	r3, r2
 80024a8:	d03b      	beq.n	8002522 <UART_WaitOnFlagUntilTimeout+0xb6>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b80      	cmp	r3, #128	@ 0x80
 80024ae:	d038      	beq.n	8002522 <UART_WaitOnFlagUntilTimeout+0xb6>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b40      	cmp	r3, #64	@ 0x40
 80024b4:	d035      	beq.n	8002522 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	2208      	movs	r2, #8
 80024be:	4013      	ands	r3, r2
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d111      	bne.n	80024e8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2208      	movs	r2, #8
 80024ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 f83c 	bl	800254c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2290      	movs	r2, #144	@ 0x90
 80024d8:	2108      	movs	r1, #8
 80024da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2284      	movs	r2, #132	@ 0x84
 80024e0:	2100      	movs	r1, #0
 80024e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e02c      	b.n	8002542 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69da      	ldr	r2, [r3, #28]
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	401a      	ands	r2, r3
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d112      	bne.n	8002522 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2280      	movs	r2, #128	@ 0x80
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 f81f 	bl	800254c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2290      	movs	r2, #144	@ 0x90
 8002512:	2120      	movs	r1, #32
 8002514:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2284      	movs	r2, #132	@ 0x84
 800251a:	2100      	movs	r1, #0
 800251c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e00f      	b.n	8002542 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	4013      	ands	r3, r2
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	425a      	negs	r2, r3
 8002532:	4153      	adcs	r3, r2
 8002534:	b2db      	uxtb	r3, r3
 8002536:	001a      	movs	r2, r3
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d09e      	beq.n	800247e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b004      	add	sp, #16
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08e      	sub	sp, #56	@ 0x38
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002554:	f3ef 8310 	mrs	r3, PRIMASK
 8002558:	617b      	str	r3, [r7, #20]
  return(result);
 800255a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
 800255e:	2301      	movs	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f383 8810 	msr	PRIMASK, r3
}
 8002568:	46c0      	nop			@ (mov r8, r8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4926      	ldr	r1, [pc, #152]	@ (8002610 <UART_EndRxTransfer+0xc4>)
 8002576:	400a      	ands	r2, r1
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f383 8810 	msr	PRIMASK, r3
}
 8002584:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002586:	f3ef 8310 	mrs	r3, PRIMASK
 800258a:	623b      	str	r3, [r7, #32]
  return(result);
 800258c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800258e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002590:	2301      	movs	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	f383 8810 	msr	PRIMASK, r3
}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	491b      	ldr	r1, [pc, #108]	@ (8002614 <UART_EndRxTransfer+0xc8>)
 80025a8:	400a      	ands	r2, r1
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b2:	f383 8810 	msr	PRIMASK, r3
}
 80025b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d118      	bne.n	80025f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c0:	f3ef 8310 	mrs	r3, PRIMASK
 80025c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80025c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ca:	2301      	movs	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f383 8810 	msr	PRIMASK, r3
}
 80025d4:	46c0      	nop			@ (mov r8, r8)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2110      	movs	r1, #16
 80025e2:	438a      	bics	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f383 8810 	msr	PRIMASK, r3
}
 80025f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	228c      	movs	r2, #140	@ 0x8c
 80025f6:	2120      	movs	r1, #32
 80025f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002606:	46c0      	nop			@ (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	b00e      	add	sp, #56	@ 0x38
 800260c:	bd80      	pop	{r7, pc}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	fffffedf 	.word	0xfffffedf
 8002614:	effffffe 	.word	0xeffffffe

08002618 <memset>:
 8002618:	0003      	movs	r3, r0
 800261a:	1882      	adds	r2, r0, r2
 800261c:	4293      	cmp	r3, r2
 800261e:	d100      	bne.n	8002622 <memset+0xa>
 8002620:	4770      	bx	lr
 8002622:	7019      	strb	r1, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	e7f9      	b.n	800261c <memset+0x4>

08002628 <__libc_init_array>:
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	2600      	movs	r6, #0
 800262c:	4c0c      	ldr	r4, [pc, #48]	@ (8002660 <__libc_init_array+0x38>)
 800262e:	4d0d      	ldr	r5, [pc, #52]	@ (8002664 <__libc_init_array+0x3c>)
 8002630:	1b64      	subs	r4, r4, r5
 8002632:	10a4      	asrs	r4, r4, #2
 8002634:	42a6      	cmp	r6, r4
 8002636:	d109      	bne.n	800264c <__libc_init_array+0x24>
 8002638:	2600      	movs	r6, #0
 800263a:	f000 f819 	bl	8002670 <_init>
 800263e:	4c0a      	ldr	r4, [pc, #40]	@ (8002668 <__libc_init_array+0x40>)
 8002640:	4d0a      	ldr	r5, [pc, #40]	@ (800266c <__libc_init_array+0x44>)
 8002642:	1b64      	subs	r4, r4, r5
 8002644:	10a4      	asrs	r4, r4, #2
 8002646:	42a6      	cmp	r6, r4
 8002648:	d105      	bne.n	8002656 <__libc_init_array+0x2e>
 800264a:	bd70      	pop	{r4, r5, r6, pc}
 800264c:	00b3      	lsls	r3, r6, #2
 800264e:	58eb      	ldr	r3, [r5, r3]
 8002650:	4798      	blx	r3
 8002652:	3601      	adds	r6, #1
 8002654:	e7ee      	b.n	8002634 <__libc_init_array+0xc>
 8002656:	00b3      	lsls	r3, r6, #2
 8002658:	58eb      	ldr	r3, [r5, r3]
 800265a:	4798      	blx	r3
 800265c:	3601      	adds	r6, #1
 800265e:	e7f2      	b.n	8002646 <__libc_init_array+0x1e>
 8002660:	08002708 	.word	0x08002708
 8002664:	08002708 	.word	0x08002708
 8002668:	0800270c 	.word	0x0800270c
 800266c:	08002708 	.word	0x08002708

08002670 <_init>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr

0800267c <_fini>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr

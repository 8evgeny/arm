<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="usbd__conf_8c" kind="file" language="C++">
    <compoundname>usbd_conf.c</compoundname>
    <includes refid="stm32f1xx_8h" local="yes">stm32f1xx.h</includes>
    <includes refid="stm32f1xx__hal_8h" local="yes">stm32f1xx_hal.h</includes>
    <includes refid="usbd__def_8h" local="yes">usbd_def.h</includes>
    <includes refid="usbd__core_8h" local="yes">usbd_core.h</includes>
    <includes refid="usbd__cdc_8h" local="yes">usbd_cdc.h</includes>
    <incdepgraph>
      <node id="15">
        <label>stm32f1xx_hal_flash.h</label>
        <link refid="stm32f1xx__hal__flash_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>stm32f1xx_hal_tim_ex.h</label>
        <link refid="stm32f1xx__hal__tim__ex_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>stm32f1xx_hal_pcd.h</label>
        <link refid="stm32f1xx__hal__pcd_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>stdint.h</label>
      </node>
      <node id="25">
        <label>stdlib.h</label>
      </node>
      <node id="14">
        <label>stm32f1xx_hal_cortex.h</label>
        <link refid="stm32f1xx__hal__cortex_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>usbd_def.h</label>
        <link refid="usbd__def_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>stm32f1xx_ll_usb.h</label>
        <link refid="stm32f1xx__ll__usb_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>usbd_cdc.h</label>
        <link refid="usbd__cdc_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>buzzer.h</label>
        <link refid="buzzer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stm32f1xx_hal.h</label>
        <link refid="stm32f1xx__hal_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="17">
        <label>stm32f1xx_hal_pwr.h</label>
        <link refid="stm32f1xx__hal__pwr_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Src/usbd_conf.c</label>
        <link refid="usbd__conf_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stm32f1xx_hal_rcc.h</label>
        <link refid="stm32f1xx__hal__rcc_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stm32f1xx_hal_dma_ex.h</label>
        <link refid="stm32f1xx__hal__dma__ex_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stm32f1xx.h</label>
        <link refid="stm32f1xx_8h"/>
      </node>
      <node id="26">
        <label>string.h</label>
      </node>
      <node id="16">
        <label>stm32f1xx_hal_flash_ex.h</label>
        <link refid="stm32f1xx__hal__flash__ex_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stm32f1xx_hal_dma.h</label>
        <link refid="stm32f1xx__hal__dma_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>usbd_core.h</label>
        <link refid="usbd__core_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>led.h</label>
        <link refid="led_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>stm32f1xx_hal_tim.h</label>
        <link refid="stm32f1xx__hal__tim_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stm32f1xx_hal_rcc_ex.h</label>
        <link refid="stm32f1xx__hal__rcc__ex_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>hd44780.h</label>
        <link refid="hd44780_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stm32f1xx_hal_conf.h</label>
        <link refid="stm32f1xx__hal__conf_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stm32f1xx_hal_gpio.h</label>
        <link refid="stm32f1xx__hal__gpio_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>usbd_conf.h</label>
        <link refid="usbd__conf_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>usbd_ctlreq.h</label>
        <link refid="usbd__ctlreq_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stm32f1xx_hal_gpio_ex.h</label>
        <link refid="stm32f1xx__hal__gpio__ex_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stm32f1xx_hal_def.h</label>
        <link refid="stm32f1xx__hal__def_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>display.h</label>
        <link refid="display_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>stdio.h</label>
      </node>
      <node id="11">
        <label>stm32f1xx_hal_exti.h</label>
        <link refid="stm32f1xx__hal__exti_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>usbd_ioreq.h</label>
        <link refid="usbd__ioreq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="usbd__conf_8c_1afabb8e1d05154a3b694f4f4d150b194f" prot="public" static="no" mutable="no">
        <type>PCD_HandleTypeDef</type>
        <definition>PCD_HandleTypeDef hpcd_USB_FS</definition>
        <argsstring></argsstring>
        <name>hpcd_USB_FS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="42" column="19" bodyfile="Src/usbd_conf.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="usbd__conf_8c_1a1730ffe1e560465665eb47d9264826f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Error_Handler</definition>
        <argsstring>(void)</argsstring>
        <name>Error_Handler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>FreeRTOS error handler function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is executed in case of error occurrence. User can add his own implementation to report the HAL error return state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="43" column="6" bodyfile="Src/main.c" bodystart="277" bodyend="280" declfile="Src/usbd_conf.c" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a71e72e29fe464c7f3be4edf36806355e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_Get_USB_Status</definition>
        <argsstring>(HAL_StatusTypeDef hal_status)</argsstring>
        <name>USBD_Get_USB_Status</name>
        <param>
          <type><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref></type>
          <declname>hal_status</declname>
        </param>
        <briefdescription>
<para>Retuns the USB status depending on the HAL status: </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hal_status</parametername>
</parameternamelist>
<parameterdescription>
<para>HAL status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USB</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="638" column="20" bodyfile="Src/usbd_conf.c" bodystart="638" bodyend="661" declfile="Src/usbd_conf.c" declline="55" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1ab88e6d72062dc5d478ab12b435695ccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_MspInit</definition>
        <argsstring>(PCD_HandleTypeDef *pcdHandle)</argsstring>
        <name>HAL_PCD_MspInit</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>pcdHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="70" column="6" bodyfile="Src/usbd_conf.c" bodystart="70" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a0a53f3c7c744fcfa7bdba6e9badc70d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_MspDeInit</definition>
        <argsstring>(PCD_HandleTypeDef *pcdHandle)</argsstring>
        <name>HAL_PCD_MspDeInit</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>pcdHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="89" column="6" bodyfile="Src/usbd_conf.c" bodystart="89" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a9d72aa4d3d984b164047b081d4566f6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_SetupStageCallback</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd)</argsstring>
        <name>HAL_PCD_SetupStageCallback</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <briefdescription>
<para>Setup stage callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="116" column="6" bodyfile="Src/usbd_conf.c" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a2f1ac834d9677dcae7d8973828f81149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_DataOutStageCallback</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd, uint8_t epnum)</argsstring>
        <name>HAL_PCD_DataOutStageCallback</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>epnum</declname>
        </param>
        <briefdescription>
<para>Data Out stage callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epnum</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="131" column="6" bodyfile="Src/usbd_conf.c" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a1679f5c50539a3dfca1391557e7a757b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_DataInStageCallback</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd, uint8_t epnum)</argsstring>
        <name>HAL_PCD_DataInStageCallback</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>epnum</declname>
        </param>
        <briefdescription>
<para>Data In stage callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epnum</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="146" column="6" bodyfile="Src/usbd_conf.c" bodystart="146" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a85c99eeb4aa17d8ff5298efff92ac28e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_SOFCallback</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd)</argsstring>
        <name>HAL_PCD_SOFCallback</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <briefdescription>
<para>SOF callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="160" column="6" bodyfile="Src/usbd_conf.c" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1af4fbef977092aa525c6b1668ffbec77b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_ResetCallback</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd)</argsstring>
        <name>HAL_PCD_ResetCallback</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <briefdescription>
<para>Reset callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="174" column="6" bodyfile="Src/usbd_conf.c" bodystart="174" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a0e14acd4564979743bc0a89aa5f15428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_SuspendCallback</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd)</argsstring>
        <name>HAL_PCD_SuspendCallback</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <briefdescription>
<para>Suspend callback. When Low power mode is enabled the debug cannot be used (IAR, Keil doesn&apos;t support it) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="199" column="6" bodyfile="Src/usbd_conf.c" bodystart="199" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a0386a36b921cd51dd6e50103c3cd33b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_ResumeCallback</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd)</argsstring>
        <name>HAL_PCD_ResumeCallback</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <briefdescription>
<para>Resume callback. When Low power mode is enabled the debug cannot be used (IAR, Keil doesn&apos;t support it) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="223" column="6" bodyfile="Src/usbd_conf.c" bodystart="223" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a4274f129d782f0a3c9a10b5bbe022cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_ISOOUTIncompleteCallback</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd, uint8_t epnum)</argsstring>
        <name>HAL_PCD_ISOOUTIncompleteCallback</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>epnum</declname>
        </param>
        <briefdescription>
<para>ISOOUTIncomplete callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epnum</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="241" column="6" bodyfile="Src/usbd_conf.c" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a8f4041d553ef2fb326c6e483797f99a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_ISOINIncompleteCallback</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd, uint8_t epnum)</argsstring>
        <name>HAL_PCD_ISOINIncompleteCallback</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>epnum</declname>
        </param>
        <briefdescription>
<para>ISOINIncomplete callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epnum</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="256" column="6" bodyfile="Src/usbd_conf.c" bodystart="256" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a0c449541523759cf62be9c9d47540c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_ConnectCallback</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd)</argsstring>
        <name>HAL_PCD_ConnectCallback</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <briefdescription>
<para>Connect callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="270" column="6" bodyfile="Src/usbd_conf.c" bodystart="270" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a25f930b5fe696224f8e71dacf5f324b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCD_DisconnectCallback</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd)</argsstring>
        <name>HAL_PCD_DisconnectCallback</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <briefdescription>
<para>Disconnect callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="284" column="6" bodyfile="Src/usbd_conf.c" bodystart="284" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga24b61e95db7e4c7ad30a835e8d905943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_Init</definition>
        <argsstring>(USBD_HandleTypeDef *pdev)</argsstring>
        <name>USBD_LL_Init</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <briefdescription>
<para>Initializes the low level portion of the device driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="299" column="20" bodyfile="Src/usbd_conf.c" bodystart="299" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gaae9bfb6a27b11f232fc55a1d1b28be24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_DeInit</definition>
        <argsstring>(USBD_HandleTypeDef *pdev)</argsstring>
        <name>USBD_LL_DeInit</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <briefdescription>
<para>De-Initializes the low level portion of the device driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="349" column="20" bodyfile="Src/usbd_conf.c" bodystart="349" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga43e53e424e9850d8261e1f9a1be53348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_Start</definition>
        <argsstring>(USBD_HandleTypeDef *pdev)</argsstring>
        <name>USBD_LL_Start</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <briefdescription>
<para>Starts the low level portion of the device driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="366" column="20" bodyfile="Src/usbd_conf.c" bodystart="366" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gac522b28139c1868a2e24d044fc8288fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_Stop</definition>
        <argsstring>(USBD_HandleTypeDef *pdev)</argsstring>
        <name>USBD_LL_Stop</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <briefdescription>
<para>Stops the low level portion of the device driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="383" column="20" bodyfile="Src/usbd_conf.c" bodystart="383" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gad96254d74d95496ffb5f6f2248585cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_OpenEP</definition>
        <argsstring>(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)</argsstring>
        <name>USBD_LL_OpenEP</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep_type</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>ep_mps</declname>
        </param>
        <briefdescription>
<para>Opens an endpoint of the low level driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_mps</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint max packet size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="403" column="20" bodyfile="Src/usbd_conf.c" bodystart="403" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gae12e7de3c398d5663976bf11faa63572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_CloseEP</definition>
        <argsstring>(USBD_HandleTypeDef *pdev, uint8_t ep_addr)</argsstring>
        <name>USBD_LL_CloseEP</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep_addr</declname>
        </param>
        <briefdescription>
<para>Closes an endpoint of the low level driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="421" column="20" bodyfile="Src/usbd_conf.c" bodystart="421" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga10080ed9555110afba809de968314985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_FlushEP</definition>
        <argsstring>(USBD_HandleTypeDef *pdev, uint8_t ep_addr)</argsstring>
        <name>USBD_LL_FlushEP</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep_addr</declname>
        </param>
        <briefdescription>
<para>Flushes an endpoint of the Low Level Driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="439" column="20" bodyfile="Src/usbd_conf.c" bodystart="439" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gabc2b4a7c8307e04955b015fd32057ec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_StallEP</definition>
        <argsstring>(USBD_HandleTypeDef *pdev, uint8_t ep_addr)</argsstring>
        <name>USBD_LL_StallEP</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep_addr</declname>
        </param>
        <briefdescription>
<para>Sets a Stall condition on an endpoint of the Low Level Driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="457" column="20" bodyfile="Src/usbd_conf.c" bodystart="457" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gad4fa6f2eeefe95d07148c6c53d111eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_ClearStallEP</definition>
        <argsstring>(USBD_HandleTypeDef *pdev, uint8_t ep_addr)</argsstring>
        <name>USBD_LL_ClearStallEP</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep_addr</declname>
        </param>
        <briefdescription>
<para>Clears a Stall condition on an endpoint of the Low Level Driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="475" column="20" bodyfile="Src/usbd_conf.c" bodystart="475" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga2a0f10f93cc4246272b63661051a64b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t USBD_LL_IsStallEP</definition>
        <argsstring>(USBD_HandleTypeDef *pdev, uint8_t ep_addr)</argsstring>
        <name>USBD_LL_IsStallEP</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep_addr</declname>
        </param>
        <briefdescription>
<para>Returns Stall condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Stall</parametername>
</parameternamelist>
<parameterdescription>
<para>(1: Yes, 0: No) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="493" column="9" bodyfile="Src/usbd_conf.c" bodystart="493" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gad3674ea3c4a9c4bbe7c73192727f922f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_SetUSBAddress</definition>
        <argsstring>(USBD_HandleTypeDef *pdev, uint8_t dev_addr)</argsstring>
        <name>USBD_LL_SetUSBAddress</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dev_addr</declname>
        </param>
        <briefdescription>
<para>Assigns a USB address to the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="513" column="20" bodyfile="Src/usbd_conf.c" bodystart="513" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gab87eb9f3d4d9f8956d2c6b77230f265c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_Transmit</definition>
        <argsstring>(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)</argsstring>
        <name>USBD_LL_Transmit</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep_addr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pbuf</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Transmits data over an endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to be sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="533" column="20" bodyfile="Src/usbd_conf.c" bodystart="533" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga259b00707b333065b66be515dd019428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USBD_StatusTypeDef</type>
        <definition>USBD_StatusTypeDef USBD_LL_PrepareReceive</definition>
        <argsstring>(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)</argsstring>
        <name>USBD_LL_PrepareReceive</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep_addr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pbuf</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Prepares an endpoint for reception. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to be received </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USBD</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="553" column="20" bodyfile="Src/usbd_conf.c" bodystart="553" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gaeb80f50482e04c046ba41f5ea58a1b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t USBD_LL_GetRxDataSize</definition>
        <argsstring>(USBD_HandleTypeDef *pdev, uint8_t ep_addr)</argsstring>
        <name>USBD_LL_GetRxDataSize</name>
        <param>
          <type><ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref> *</type>
          <declname>pdev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep_addr</declname>
        </param>
        <briefdescription>
<para>Returns the last transfered packet size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Recived</parametername>
</parameternamelist>
<parameterdescription>
<para>Data Size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="571" column="10" bodyfile="Src/usbd_conf.c" bodystart="571" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga383d9a41089cf426cdc61b5b24e2ca0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USBD_LL_Delay</definition>
        <argsstring>(uint32_t Delay)</argsstring>
        <name>USBD_LL_Delay</name>
        <param>
          <type>uint32_t</type>
          <declname>Delay</declname>
        </param>
        <briefdescription>
<para>Delays routine for the USB device library. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay in ms </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="581" column="6" bodyfile="Src/usbd_conf.c" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_n_f___exported___macros_1ga2df01b9aae6026e9f6b55da3b1e72aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* USBD_static_malloc</definition>
        <argsstring>(uint32_t size)</argsstring>
        <name>USBD_static_malloc</name>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Static single allocation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of allocated memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="591" column="6" bodyfile="Src/usbd_conf.c" bodystart="591" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="group___u_s_b_d___c_o_n_f___exported___macros_1ga92ed1214efe53f54b3586a6233cfa5a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USBD_static_free</definition>
        <argsstring>(void *p)</argsstring>
        <name>USBD_static_free</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Dummy memory free. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocated memory address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="602" column="6" bodyfile="Src/usbd_conf.c" bodystart="602" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="usbd__conf_8c_1a3d04e2831c0a46d0e6719c1a2caba5b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_PCDEx_SetConnectionState</definition>
        <argsstring>(PCD_HandleTypeDef *hpcd, uint8_t state)</argsstring>
        <name>HAL_PCDEx_SetConnectionState</name>
        <param>
          <type>PCD_HandleTypeDef *</type>
          <declname>hpcd</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Software Device Connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpcd</parametername>
</parameternamelist>
<parameterdescription>
<para>PCD handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection state (0: disconnected / 1: connected) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/usbd_conf.c" line="616" column="6" bodyfile="Src/usbd_conf.c" bodystart="616" bodyend="631"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>: This file implements the board support package for the USB device library </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="version"><para>: v2.0_Cube</para>
</simplesect>
<simplesect kind="attention"><para></para>
</simplesect>
<heading level="2"><center><copy/> Copyright (c) 2019 Donskih Dmitriy. All rights reserved.</center></heading>
</para>
<para>This software component is licensed by Donskih Dmitriy under BSD 3-Clause license, the &quot;License&quot;; You may not use this file except in compliance with the License. You may obtain a copy of the License at: opensource.org/licenses/BSD-3-Clause </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>Header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>Header<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Includes<sp/>------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f1xx_8h" kindref="compound">stm32f1xx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f1xx__hal_8h" kindref="compound">stm32f1xx_hal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="usbd__def_8h" kindref="compound">usbd_def.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="usbd__core_8h" kindref="compound">usbd_core.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="usbd__cdc_8h" kindref="compound">usbd_cdc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>Includes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>Includes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>typedef<sp/>-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>define<sp/>------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>macro<sp/>-------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>PV<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>variables<sp/>---------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>PV<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">PCD_HandleTypeDef<sp/>hpcd_USB_FS;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a1730ffe1e560465665eb47d9264826f9" kindref="member">Error_Handler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>PFP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>function<sp/>prototypes<sp/>-----------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>PFP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>functions<sp/>---------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>USBD_StatusTypeDef<sp/>USBD_Get_USB_Status(<ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCDEx_SetConnectionState(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>state);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a3d04e2831c0a46d0e6719c1a2caba5b1" kindref="member">HAL_PCDEx_SetConnectionState</ref>(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>state);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LL<sp/>Driver<sp/>Callbacks<sp/>(PCD<sp/>-&gt;<sp/>USB<sp/>Device<sp/>Library)</highlight></codeline>
<codeline lineno="67"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MSP<sp/>Init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HAL_PCD_MspInit(PCD_HandleTypeDef*<sp/>pcdHandle)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pcdHandle-&gt;Instance==USB)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>USB_MspInit<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>USB_MspInit<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Peripheral<sp/>clock<sp/>enable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_RCC_USB_CLK_ENABLE();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Peripheral<sp/>interrupt<sp/>init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_NVIC_SetPriority(<ref refid="group___peripheral__interrupt__number__definition_1gga7e1129cd8a196f4284d41db3e82ad5c8a44d80f3b50a6e2526b806ddc87c4ce86" kindref="member">USB_LP_CAN1_RX0_IRQn</ref>,<sp/>5,<sp/>0);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_NVIC_EnableIRQ(<ref refid="group___peripheral__interrupt__number__definition_1gga7e1129cd8a196f4284d41db3e82ad5c8a44d80f3b50a6e2526b806ddc87c4ce86" kindref="member">USB_LP_CAN1_RX0_IRQn</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>USB_MspInit<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>USB_MspInit<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HAL_PCD_MspDeInit(PCD_HandleTypeDef*<sp/>pcdHandle)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pcdHandle-&gt;Instance==USB)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>USB_MspDeInit<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>USB_MspDeInit<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Peripheral<sp/>clock<sp/>disable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_RCC_USB_CLK_DISABLE();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Peripheral<sp/>interrupt<sp/>Deinit*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_NVIC_DisableIRQ(<ref refid="group___peripheral__interrupt__number__definition_1gga7e1129cd8a196f4284d41db3e82ad5c8a44d80f3b50a6e2526b806ddc87c4ce86" kindref="member">USB_LP_CAN1_RX0_IRQn</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>USB_MspDeInit<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>USB_MspDeInit<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCD_SetupStageCallback(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a9d72aa4d3d984b164047b081d4566f6d" kindref="member">HAL_PCD_SetupStageCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gabdcdfefaffa1651c77a38d08eb3a82ce" kindref="member">USBD_LL_SetupStage</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData,<sp/>(uint8_t<sp/>*)hpcd-&gt;Setup);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCD_DataOutStageCallback(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a2f1ac834d9677dcae7d8973828f81149" kindref="member">HAL_PCD_DataOutStageCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga1ab0439714328647692719a2b1c9e689" kindref="member">USBD_LL_DataOutStage</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData,<sp/>epnum,<sp/>hpcd-&gt;OUT_ep[epnum].xfer_buff);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCD_DataInStageCallback(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a1679f5c50539a3dfca1391557e7a757b" kindref="member">HAL_PCD_DataInStageCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga09597f0a303e0148d9f291477f7c4439" kindref="member">USBD_LL_DataInStage</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData,<sp/>epnum,<sp/>hpcd-&gt;IN_ep[epnum].xfer_buff);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCD_SOFCallback(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a85c99eeb4aa17d8ff5298efff92ac28e" kindref="member">HAL_PCD_SOFCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gacf5d847096b6b8d9b1880dab9cd1726d" kindref="member">USBD_LL_SOF</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCD_ResetCallback(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1af4fbef977092aa525c6b1668ffbec77b" kindref="member">HAL_PCD_ResetCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>USBD_SpeedTypeDef<sp/>speed<sp/>=<sp/>USBD_SPEED_FULL;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hpcd-&gt;Init.speed<sp/>!=<sp/>PCD_SPEED_FULL)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="usbd__conf_8c_1a1730ffe1e560465665eb47d9264826f9" kindref="member">Error_Handler</ref>();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>Speed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gaaf2f9695af26bad9d0f66746fcca3243" kindref="member">USBD_LL_SetSpeed</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData,<sp/>speed);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>Device.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga9cd02ae070a18ea3395346c56639412b" kindref="member">USBD_LL_Reset</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCD_SuspendCallback(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a0e14acd4564979743bc0a89aa5f15428" kindref="member">HAL_PCD_SuspendCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Inform<sp/>USB<sp/>library<sp/>that<sp/>core<sp/>enters<sp/>in<sp/>suspend<sp/>Mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga907b2335773fcc0856e4ab6972c04020" kindref="member">USBD_LL_Suspend</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enter<sp/>in<sp/>STOP<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hpcd-&gt;Init.low_power_enable)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>SLEEPDEEP<sp/>bit<sp/>and<sp/>SleepOnExit<sp/>of<sp/>Cortex<sp/>System<sp/>Control<sp/>Register.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___c_m_s_i_s__core__base_1gaaaf6477c2bde2f00f99e3c2fd1060b01" kindref="member">SCB</ref>-&gt;SCR<sp/>|=<sp/>(uint32_t)((uint32_t)(<ref refid="group___c_m_s_i_s___s_c_b_1ga77c06a69c63f4b3f6ec1032e911e18e7" kindref="member">SCB_SCR_SLEEPDEEP_Msk</ref><sp/>|<sp/><ref refid="group___c_m_s_i_s___s_c_b_1ga50a243e317b9a70781b02758d45b05ee" kindref="member">SCB_SCR_SLEEPONEXIT_Msk</ref>));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCD_ResumeCallback(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a0386a36b921cd51dd6e50103c3cd33b1" kindref="member">HAL_PCD_ResumeCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gacfd270cf295f13943dd6a591b366246c" kindref="member">USBD_LL_Resume</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData);</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a4274f129d782f0a3c9a10b5bbe022cd4" kindref="member">HAL_PCD_ISOOUTIncompleteCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga1b6905ac966d81f6a2ce165e57dacd80" kindref="member">USBD_LL_IsoOUTIncomplete</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData,<sp/>epnum);</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCD_ISOINIncompleteCallback(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a8f4041d553ef2fb326c6e483797f99a8" kindref="member">HAL_PCD_ISOINIncompleteCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga8f70c097aa7377ec6841d2581bccfa7e" kindref="member">USBD_LL_IsoINIncomplete</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData,<sp/>epnum);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCD_ConnectCallback(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a0c449541523759cf62be9c9d47540c5d" kindref="member">HAL_PCD_ConnectCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gaaf76b06413044241868c6828ec7fc51c" kindref="member">USBD_LL_DevConnected</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCD_DisconnectCallback(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a25f930b5fe696224f8e71dacf5f324b4" kindref="member">HAL_PCD_DisconnectCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga07b5fe60c6f1cf9f485e0191a605b9a1" kindref="member">USBD_LL_DevDisconnected</ref>((<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref>*)hpcd-&gt;pData);</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LL<sp/>Driver<sp/>Interface<sp/>(USB<sp/>Device<sp/>Library<sp/>--&gt;<sp/>PCD)</highlight></codeline>
<codeline lineno="292"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga24b61e95db7e4c7ad30a835e8d905943" kindref="member">USBD_LL_Init</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Init<sp/>USB<sp/>Ip.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Link<sp/>the<sp/>driver<sp/>to<sp/>the<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>hpcd_USB_FS.pData<sp/>=<sp/>pdev;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>pdev-&gt;pData<sp/>=<sp/>&amp;hpcd_USB_FS;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>hpcd_USB_FS.Instance<sp/>=<sp/>USB;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>hpcd_USB_FS.Init.dev_endpoints<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>hpcd_USB_FS.Init.speed<sp/>=<sp/>PCD_SPEED_FULL;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>hpcd_USB_FS.Init.low_power_enable<sp/>=<sp/>DISABLE;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>hpcd_USB_FS.Init.lpm_enable<sp/>=<sp/>DISABLE;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>hpcd_USB_FS.Init.battery_charging_enable<sp/>=<sp/>DISABLE;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_PCD_Init(&amp;hpcd_USB_FS)<sp/>!=<sp/>HAL_OK)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="usbd__conf_8c_1a1730ffe1e560465665eb47d9264826f9" kindref="member">Error_Handler</ref>(<sp/>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Register<sp/>USB<sp/>PCD<sp/>CallBacks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>HAL_PCD_RegisterCallback(&amp;hpcd_USB_FS,<sp/>HAL_PCD_SOF_CB_ID,<sp/>PCD_SOFCallback);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>HAL_PCD_RegisterCallback(&amp;hpcd_USB_FS,<sp/>HAL_PCD_SETUPSTAGE_CB_ID,<sp/>PCD_SetupStageCallback);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>HAL_PCD_RegisterCallback(&amp;hpcd_USB_FS,<sp/>HAL_PCD_RESET_CB_ID,<sp/>PCD_ResetCallback);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>HAL_PCD_RegisterCallback(&amp;hpcd_USB_FS,<sp/>HAL_PCD_SUSPEND_CB_ID,<sp/>PCD_SuspendCallback);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>HAL_PCD_RegisterCallback(&amp;hpcd_USB_FS,<sp/>HAL_PCD_RESUME_CB_ID,<sp/>PCD_ResumeCallback);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>HAL_PCD_RegisterCallback(&amp;hpcd_USB_FS,<sp/>HAL_PCD_CONNECT_CB_ID,<sp/>PCD_ConnectCallback);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>HAL_PCD_RegisterCallback(&amp;hpcd_USB_FS,<sp/>HAL_PCD_DISCONNECT_CB_ID,<sp/>PCD_DisconnectCallback);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>HAL_PCD_RegisterDataOutStageCallback(&amp;hpcd_USB_FS,<sp/>PCD_DataOutStageCallback);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>HAL_PCD_RegisterDataInStageCallback(&amp;hpcd_USB_FS,<sp/>PCD_DataInStageCallback);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>HAL_PCD_RegisterIsoOutIncpltCallback(&amp;hpcd_USB_FS,<sp/>PCD_ISOOUTIncompleteCallback);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>HAL_PCD_RegisterIsoInIncpltCallback(&amp;hpcd_USB_FS,<sp/>PCD_ISOINIncompleteCallback);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>EndPoint_Configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev-&gt;pData<sp/>,<sp/>0x00<sp/>,<sp/>PCD_SNG_BUF,<sp/>0x18);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev-&gt;pData<sp/>,<sp/>0x80<sp/>,<sp/>PCD_SNG_BUF,<sp/>0x58);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>EndPoint_Configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>EndPoint_Configuration_CDC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev-&gt;pData<sp/>,<sp/>0x81<sp/>,<sp/>PCD_SNG_BUF,<sp/>0xC0);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev-&gt;pData<sp/>,<sp/>0x01<sp/>,<sp/>PCD_SNG_BUF,<sp/>0x110);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev-&gt;pData<sp/>,<sp/>0x82<sp/>,<sp/>PCD_SNG_BUF,<sp/>0x100);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>EndPoint_Configuration_CDC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>USBD_OK;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gaae9bfb6a27b11f232fc55a1d1b28be24" kindref="member">USBD_LL_DeInit</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status<sp/>=<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>hal_status<sp/>=<sp/>HAL_PCD_DeInit(pdev-&gt;pData);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>usb_status<sp/>=<sp/><sp/>USBD_Get_USB_Status(hal_status);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;<sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga43e53e424e9850d8261e1f9a1be53348" kindref="member">USBD_LL_Start</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status<sp/>=<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>hal_status<sp/>=<sp/>HAL_PCD_Start(pdev-&gt;pData);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>usb_status<sp/>=<sp/><sp/>USBD_Get_USB_Status(hal_status);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gac522b28139c1868a2e24d044fc8288fd" kindref="member">USBD_LL_Stop</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev)</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status<sp/>=<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>hal_status<sp/>=<sp/>HAL_PCD_Stop(pdev-&gt;pData);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>usb_status<sp/>=<sp/><sp/>USBD_Get_USB_Status(hal_status);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gad96254d74d95496ffb5f6f2248585cb0" kindref="member">USBD_LL_OpenEP</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev,<sp/>uint8_t<sp/>ep_addr,<sp/>uint8_t<sp/>ep_type,<sp/>uint16_t<sp/>ep_mps)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status<sp/>=<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>hal_status<sp/>=<sp/>HAL_PCD_EP_Open(pdev-&gt;pData,<sp/>ep_addr,<sp/>ep_mps,<sp/>ep_type);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>usb_status<sp/>=<sp/><sp/>USBD_Get_USB_Status(hal_status);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gae12e7de3c398d5663976bf11faa63572" kindref="member">USBD_LL_CloseEP</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev,<sp/>uint8_t<sp/>ep_addr)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status<sp/>=<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>hal_status<sp/>=<sp/>HAL_PCD_EP_Close(pdev-&gt;pData,<sp/>ep_addr);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>usb_status<sp/>=<sp/><sp/>USBD_Get_USB_Status(hal_status);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;<sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga10080ed9555110afba809de968314985" kindref="member">USBD_LL_FlushEP</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev,<sp/>uint8_t<sp/>ep_addr)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status<sp/>=<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>hal_status<sp/>=<sp/>HAL_PCD_EP_Flush(pdev-&gt;pData,<sp/>ep_addr);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>usb_status<sp/>=<sp/><sp/>USBD_Get_USB_Status(hal_status);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;<sp/><sp/></highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gabc2b4a7c8307e04955b015fd32057ec7" kindref="member">USBD_LL_StallEP</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev,<sp/>uint8_t<sp/>ep_addr)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status<sp/>=<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>hal_status<sp/>=<sp/>HAL_PCD_EP_SetStall(pdev-&gt;pData,<sp/>ep_addr);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>usb_status<sp/>=<sp/><sp/>USBD_Get_USB_Status(hal_status);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;<sp/><sp/></highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gad4fa6f2eeefe95d07148c6c53d111eae" kindref="member">USBD_LL_ClearStallEP</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev,<sp/>uint8_t<sp/>ep_addr)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status<sp/>=<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>hal_status<sp/>=<sp/>HAL_PCD_EP_ClrStall(pdev-&gt;pData,<sp/>ep_addr);<sp/><sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>usb_status<sp/>=<sp/><sp/>USBD_Get_USB_Status(hal_status);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;<sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">uint8_t<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga2a0f10f93cc4246272b63661051a64b7" kindref="member">USBD_LL_IsStallEP</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev,<sp/>uint8_t<sp/>ep_addr)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>PCD_HandleTypeDef<sp/>*hpcd<sp/>=<sp/>(PCD_HandleTypeDef*)<sp/>pdev-&gt;pData;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((ep_addr<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0x80)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hpcd-&gt;IN_ep[ep_addr<sp/>&amp;<sp/>0x7F].is_stall;<sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hpcd-&gt;OUT_ep[ep_addr<sp/>&amp;<sp/>0x7F].is_stall;<sp/></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gad3674ea3c4a9c4bbe7c73192727f922f" kindref="member">USBD_LL_SetUSBAddress</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev,<sp/>uint8_t<sp/>dev_addr)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status<sp/>=<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>hal_status<sp/>=<sp/>HAL_PCD_SetAddress(pdev-&gt;pData,<sp/>dev_addr);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>usb_status<sp/>=<sp/><sp/>USBD_Get_USB_Status(hal_status);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;<sp/><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gab87eb9f3d4d9f8956d2c6b77230f265c" kindref="member">USBD_LL_Transmit</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev,<sp/>uint8_t<sp/>ep_addr,<sp/>uint8_t<sp/>*pbuf,<sp/>uint16_t<sp/>size)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status<sp/>=<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>hal_status<sp/>=<sp/>HAL_PCD_EP_Transmit(pdev-&gt;pData,<sp/>ep_addr,<sp/>pbuf,<sp/>size);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>usb_status<sp/>=<sp/><sp/>USBD_Get_USB_Status(hal_status);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal">USBD_StatusTypeDef<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga259b00707b333065b66be515dd019428" kindref="member">USBD_LL_PrepareReceive</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev,<sp/>uint8_t<sp/>ep_addr,<sp/>uint8_t<sp/>*pbuf,<sp/>uint16_t<sp/>size)</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status<sp/>=<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>hal_status<sp/>=<sp/>HAL_PCD_EP_Receive(pdev-&gt;pData,<sp/>ep_addr,<sp/>pbuf,<sp/>size);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>usb_status<sp/>=<sp/><sp/>USBD_Get_USB_Status(hal_status);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;<sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">uint32_t<sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1gaeb80f50482e04c046ba41f5ea58a1b2b" kindref="member">USBD_LL_GetRxDataSize</ref>(<ref refid="struct___u_s_b_d___handle_type_def" kindref="compound">USBD_HandleTypeDef</ref><sp/>*pdev,<sp/>uint8_t<sp/>ep_addr)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*)<sp/>pdev-&gt;pData,<sp/>ep_addr);</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_b_d___c_o_r_e___exported___functions_prototype_1ga383d9a41089cf426cdc61b5b24e2ca0a" kindref="member">USBD_LL_Delay</ref>(uint32_t<sp/>Delay)</highlight></codeline>
<codeline lineno="582"><highlight class="normal">{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>HAL_Delay(Delay);</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group___u_s_b_d___c_o_n_f___exported___macros_1ga2df01b9aae6026e9f6b55da3b1e72aee" kindref="member">USBD_static_malloc</ref>(uint32_t<sp/>size)</highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>mem[(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_u_s_b_d___c_d_c___handle_type_def" kindref="compound">USBD_CDC_HandleTypeDef</ref>)/4)+1];</highlight><highlight class="comment">/*<sp/>On<sp/>32-bit<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_b_d___c_o_n_f___exported___macros_1ga92ed1214efe53f54b3586a6233cfa5a6" kindref="member">USBD_static_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PCDEx_SetConnectionState(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>state)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a3d04e2831c0a46d0e6719c1a2caba5b1" kindref="member">HAL_PCDEx_SetConnectionState</ref>(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>state)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>BEGIN<sp/>6<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>Low<sp/>connection<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>High<sp/>connection<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USER<sp/>CODE<sp/>END<sp/>6<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal">USBD_StatusTypeDef<sp/>USBD_Get_USB_Status(<ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>hal_status)</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>USBD_StatusTypeDef<sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(hal_status)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>HAL_OK<sp/>:</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usb_status<sp/>=<sp/>USBD_OK;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>HAL_ERROR<sp/>:</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usb_status<sp/>=<sp/>USBD_FAIL;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>HAL_BUSY<sp/>:</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usb_status<sp/>=<sp/>USBD_BUSY;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>HAL_TIMEOUT<sp/>:</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usb_status<sp/>=<sp/>USBD_FAIL;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>default<sp/>:</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usb_status<sp/>=<sp/>USBD_FAIL;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usb_status;</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">/************************<sp/>(C)<sp/>COPYRIGHT<sp/>STMicroelectronics<sp/>*****END<sp/>OF<sp/>FILE****/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Src/usbd_conf.c"/>
  </compounddef>
</doxygen>

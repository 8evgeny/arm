<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__x_message_buffer_create" kind="group">
    <compoundname>xMessageBufferCreate</compoundname>
    <title>xMessageBufferCreate</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="message__buffer_8h_source" kindref="compound">message_buffer.h</ref></para>
<para><preformatted>
MessageBufferHandle_t xMessageBufferCreate( size_t xBufferSizeBytes );
</preformatted></para>
<para>Creates a new message buffer using dynamically allocated memory. See xMessageBufferCreateStatic() for a version that uses statically allocated memory (memory that is allocated at compile time).</para>
<para>configSUPPORT_DYNAMIC_ALLOCATION must be set to 1 or left undefined in <ref refid="_free_r_t_o_s_config_8h_source" kindref="compound">FreeRTOSConfig.h</ref> for xMessageBufferCreate() to be available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xBufferSizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of bytes (not messages) the message buffer will be able to hold at any one time. When a message is written to the message buffer an additional sizeof( size_t ) bytes are also written to store the message&apos;s length. sizeof( size_t ) is typically 4 bytes on a 32-bit architecture, so on most 32-bit architectures a 10 byte message will take up 14 bytes of message buffer space.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If NULL is returned, then the message buffer cannot be created because there is insufficient heap memory available for FreeRTOS to allocate the message buffer data structures and storage area. A non-NULL value being returned indicates that the message buffer has been created successfully - the returned value should be stored as the handle to the created message buffer.</para>
</simplesect>
Example use: <preformatted>

void vAFunction( void )
{
MessageBufferHandle_t xMessageBuffer;
const size_t xMessageBufferSizeBytes = 100;

    // Create a message buffer that can hold 100 bytes.  The memory used to hold
    // both the message buffer structure and the messages themselves is allocated
    // dynamically.  Each message added to the buffer consumes an additional 4
    // bytes which are used to hold the lengh of the message.
    xMessageBuffer = xMessageBufferCreate( xMessageBufferSizeBytes );

    if( xMessageBuffer == NULL )
    {
        // There was not enough heap memory space available to create the
        // message buffer.
    }
    else
    {
        // The message buffer was created successfully and can now be used.
    }

</preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>

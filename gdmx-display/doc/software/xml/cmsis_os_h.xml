<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="cmsis_os_h" kind="page">
    <compoundname>cmsis_os_h</compoundname>
    <title>Header File Template: cmsis_os.h</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The file <bold><ref refid="cmsis__os_8h_source" kindref="compound">cmsis_os.h</ref></bold> is a template header file for a CMSIS-RTOS compliant Real-Time Operating System (RTOS). Each RTOS that is compliant with CMSIS-RTOS shall provide a specific <bold><ref refid="cmsis__os_8h_source" kindref="compound">cmsis_os.h</ref></bold> header file that represents its implementation.</para>
<para>The file <ref refid="cmsis__os_8h_source" kindref="compound">cmsis_os.h</ref> contains:<itemizedlist>
<listitem><para>CMSIS-RTOS API function definitions</para>
</listitem><listitem><para>struct definitions for parameters and return types</para>
</listitem><listitem><para>status and priority values used by CMSIS-RTOS API functions</para>
</listitem><listitem><para>macros for defining threads and other kernel objects</para>
</listitem></itemizedlist>
</para>
<para><bold>Name conventions and header file modifications</bold></para>
<para>All definitions are prefixed with <bold>os</bold> to give an unique name space for CMSIS-RTOS functions. Definitions that are prefixed <bold>os_</bold> are not used in the application code but local to this header file. All definitions and functions that belong to a module are grouped and have a common prefix, i.e. <bold>osThread</bold>.</para>
<para>Definitions that are marked with <bold>CAN BE CHANGED</bold> can be adapted towards the needs of the actual CMSIS-RTOS implementation. These definitions can be specific to the underlying RTOS kernel.</para>
<para>Definitions that are marked with <bold>MUST REMAIN UNCHANGED</bold> cannot be altered. Otherwise the CMSIS-RTOS implementation is no longer compliant to the standard. Note that some functions are optional and need not to be provided by every CMSIS-RTOS implementation.</para>
<para><bold>Function calls from interrupt service routines</bold></para>
<para>The following CMSIS-RTOS functions can be called from threads and interrupt service routines (ISR):<itemizedlist>
<listitem><para>osSignalSet</para>
</listitem><listitem><para>osSemaphoreRelease</para>
</listitem><listitem><para>osPoolAlloc, osPoolCAlloc, osPoolFree</para>
</listitem><listitem><para>osMessagePut, osMessageGet</para>
</listitem><listitem><para>osMailAlloc, osMailCAlloc, osMailGet, osMailPut, osMailFree</para>
</listitem></itemizedlist>
</para>
<para>Functions that cannot be called from an ISR are verifying the interrupt status and return in case that they are called from an ISR context the status code <bold>osErrorISR</bold>. In some implementations this condition might be caught using the HARD FAULT vector.</para>
<para>Some CMSIS-RTOS implementations support CMSIS-RTOS function calls from multiple ISR at the same time. If this is impossible, the CMSIS-RTOS rejects calls by nested ISR functions with the status code <bold>osErrorISRRecursive</bold>.</para>
<para><bold>Define and reference object definitions</bold></para>
<para>With <bold>#define osObjectsExternal</bold> objects are defined as external symbols. This allows to create a consistent header file that is used throughout a project as shown below:</para>
<para><emphasis>Header File</emphasis> <programlisting><codeline><highlight class="normal">#include<sp/>&lt;cmsis_os.h&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>CMSIS<sp/>RTOS<sp/>header<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Thread<sp/>definition</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>void<sp/>thread_sample<sp/>(void<sp/>const<sp/>*argument);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>function<sp/>prototype</highlight></codeline>
<codeline><highlight class="normal">osThreadDef<sp/>(thread_sample,<sp/>osPriorityBelowNormal,<sp/>1,<sp/>100);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Pool<sp/>definition</highlight></codeline>
<codeline><highlight class="normal">osPoolDef(MyPool,<sp/>10,<sp/>long);</highlight></codeline>
</programlisting></para>
<para>This header file defines all objects when included in a C/C++ source file. When <bold>#define osObjectsExternal</bold> is present before the header file, the objects are defined as external symbols. A single consistent header file can therefore be used throughout the whole project.</para>
<para><emphasis>Example</emphasis> <programlisting><codeline><highlight class="normal">#include<sp/>&quot;osObjects.h&quot;<sp/><sp/><sp/><sp/><sp/>//<sp/>Definition<sp/>of<sp/>the<sp/>CMSIS-RTOS<sp/>objects</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">#define<sp/>osObjectExternal<sp/><sp/><sp/>//<sp/>Objects<sp/>will<sp/>be<sp/>defined<sp/>as<sp/>external<sp/>symbols</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;osObjects.h&quot;<sp/><sp/><sp/><sp/><sp/>//<sp/>Reference<sp/>to<sp/>the<sp/>CMSIS-RTOS<sp/>objects</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"/>
  </compounddef>
</doxygen>

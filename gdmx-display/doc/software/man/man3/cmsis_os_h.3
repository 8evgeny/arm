.TH "cmsis_os_h" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cmsis_os_h \- Header File Template: \fBcmsis_os\&.h\fP 
The file \fB\fBcmsis_os\&.h\fP\fP is a template header file for a CMSIS-RTOS compliant Real-Time Operating System (RTOS)\&. Each RTOS that is compliant with CMSIS-RTOS shall provide a specific \fB\fBcmsis_os\&.h\fP\fP header file that represents its implementation\&.
.PP
The file \fBcmsis_os\&.h\fP contains:
.IP "\(bu" 2
CMSIS-RTOS API function definitions
.IP "\(bu" 2
struct definitions for parameters and return types
.IP "\(bu" 2
status and priority values used by CMSIS-RTOS API functions
.IP "\(bu" 2
macros for defining threads and other kernel objects
.PP
.PP
\fBName conventions and header file modifications\fP
.PP
All definitions are prefixed with \fBos\fP to give an unique name space for CMSIS-RTOS functions\&. Definitions that are prefixed \fBos_\fP are not used in the application code but local to this header file\&. All definitions and functions that belong to a module are grouped and have a common prefix, i\&.e\&. \fBosThread\fP\&.
.PP
Definitions that are marked with \fBCAN BE CHANGED\fP can be adapted towards the needs of the actual CMSIS-RTOS implementation\&. These definitions can be specific to the underlying RTOS kernel\&.
.PP
Definitions that are marked with \fBMUST REMAIN UNCHANGED\fP cannot be altered\&. Otherwise the CMSIS-RTOS implementation is no longer compliant to the standard\&. Note that some functions are optional and need not to be provided by every CMSIS-RTOS implementation\&.
.PP
\fBFunction calls from interrupt service routines\fP
.PP
The following CMSIS-RTOS functions can be called from threads and interrupt service routines (ISR):
.IP "\(bu" 2
\fBosSignalSet\fP
.IP "\(bu" 2
\fBosSemaphoreRelease\fP
.IP "\(bu" 2
\fBosPoolAlloc\fP, \fBosPoolCAlloc\fP, \fBosPoolFree\fP
.IP "\(bu" 2
\fBosMessagePut\fP, \fBosMessageGet\fP
.IP "\(bu" 2
\fBosMailAlloc\fP, \fBosMailCAlloc\fP, \fBosMailGet\fP, \fBosMailPut\fP, \fBosMailFree\fP
.PP
.PP
Functions that cannot be called from an ISR are verifying the interrupt status and return in case that they are called from an ISR context the status code \fBosErrorISR\fP\&. In some implementations this condition might be caught using the HARD FAULT vector\&.
.PP
Some CMSIS-RTOS implementations support CMSIS-RTOS function calls from multiple ISR at the same time\&. If this is impossible, the CMSIS-RTOS rejects calls by nested ISR functions with the status code \fBosErrorISRRecursive\fP\&.
.PP
\fBDefine and reference object definitions\fP
.PP
With \fB#define osObjectsExternal\fP objects are defined as external symbols\&. This allows to create a consistent header file that is used throughout a project as shown below:
.PP
\fIHeader File\fP 
.PP
.nf
#include <cmsis_os\&.h>                                         // CMSIS RTOS header file

// Thread definition
extern void thread_sample (void const *argument);             // function prototype
osThreadDef (thread_sample, osPriorityBelowNormal, 1, 100);

// Pool definition
osPoolDef(MyPool, 10, long);

.fi
.PP
.PP
This header file defines all objects when included in a C/C++ source file\&. When \fB#define osObjectsExternal\fP is present before the header file, the objects are defined as external symbols\&. A single consistent header file can therefore be used throughout the whole project\&.
.PP
\fIExample\fP 
.PP
.nf
#include "osObjects\&.h"     // Definition of the CMSIS-RTOS objects

.fi
.PP
.PP
.PP
.nf
#define osObjectExternal   // Objects will be defined as external symbols
#include "osObjects\&.h"     // Reference to the CMSIS-RTOS objects
.fi
.PP
 

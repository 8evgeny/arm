.TH "xSemaphoreCreateBinary" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xSemaphoreCreateBinary \- xSemaphoreCreateBinary
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
semphr\&. h 
.PP
.nf
SemaphoreHandle_t xSemaphoreCreateBinary( void )
.fi
.PP
.PP
Creates a new binary semaphore instance, and returns a handle by which the new semaphore can be referenced\&.
.PP
In many usage scenarios it is faster and more memory efficient to use a direct to task notification in place of a binary semaphore! http://www.freertos.org/RTOS-task-notifications.html
.PP
Internally, within the FreeRTOS implementation, binary semaphores use a block of memory, in which the semaphore structure is stored\&. If a binary semaphore is created using xSemaphoreCreateBinary() then the required memory is automatically dynamically allocated inside the xSemaphoreCreateBinary() function\&. (see http://www.freertos.org/a00111.html)\&. If a binary semaphore is created using xSemaphoreCreateBinaryStatic() then the application writer must provide the memory\&. xSemaphoreCreateBinaryStatic() therefore allows a binary semaphore to be created without using any dynamic memory allocation\&.
.PP
The old vSemaphoreCreateBinary() macro is now deprecated in favour of this xSemaphoreCreateBinary() function\&. Note that binary semaphores created using the vSemaphoreCreateBinary() macro are created in a state such that the first call to 'take' the semaphore would pass, whereas binary semaphores created using xSemaphoreCreateBinary() are created in a state such that the the semaphore must first be 'given' before it can be 'taken'\&.
.PP
This type of semaphore can be used for pure synchronisation between tasks or between an interrupt and a task\&. The semaphore need not be given back once obtained, so one task/interrupt can continuously 'give' the semaphore while another continuously 'takes' the semaphore\&. For this reason this type of semaphore does not use a priority inheritance mechanism\&. For an alternative that does use priority inheritance see xSemaphoreCreateMutex()\&.
.PP
\fBReturns\fP
.RS 4
Handle to the created semaphore, or NULL if the memory required to hold the semaphore's data structures could not be allocated\&.
.RE
.PP
Example usage: 
.PP
.nf

SemaphoreHandle_t xSemaphore = NULL;

void vATask( void * pvParameters )
{
   // Semaphore cannot be used before a call to xSemaphoreCreateBinary()\&.
   // This is a macro so pass the variable in directly\&.
   xSemaphore = xSemaphoreCreateBinary();

   if( xSemaphore != NULL )
   {
       // The semaphore was created successfully\&.
       // The semaphore can now be used\&.
   }
}
.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.

.TH "vTaskSuspendAll" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vTaskSuspendAll \- vTaskSuspendAll
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
task\&. h 
.PP
.nf
void vTaskSuspendAll( void );
.fi
.PP
.PP
Suspends the scheduler without disabling interrupts\&. Context switches will not occur while the scheduler is suspended\&.
.PP
After calling vTaskSuspendAll () the calling task will continue to execute without risk of being swapped out until a call to xTaskResumeAll () has been made\&.
.PP
API functions that have the potential to cause a context switch (for example, vTaskDelayUntil(), xQueueSend(), etc\&.) must not be called while the scheduler is suspended\&.
.PP
Example usage: 
.PP
.nf

void vTask1( void * pvParameters )
{
    for( ;; )
    {
     // Task code goes here\&.

     // \&.\&.\&.

     // At some point the task wants to perform a long operation during
     // which it does not want to get swapped out\&.  It cannot use
     // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the
     // operation may cause interrupts to be missed - including the
     // ticks\&.

     // Prevent the real time kernel swapping out the task\&.
     vTaskSuspendAll ();

     // Perform the operation here\&.  There is no need to use critical
     // sections as we have all the microcontroller processing time\&.
     // During this time interrupts will still operate and the kernel
     // tick count will be maintained\&.

     // \&.\&.\&.

     // The operation is complete\&.  Restart the kernel\&.
     xTaskResumeAll ();
    }
}
  
.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.

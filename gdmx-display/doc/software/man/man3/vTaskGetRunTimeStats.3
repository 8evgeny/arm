.TH "vTaskGetRunTimeStats" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vTaskGetRunTimeStats \- vTaskGetRunTimeStats
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
task\&. h 
.PP
.nf
void vTaskGetRunTimeStats( char *pcWriteBuffer );
.fi
.PP
.PP
configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS must both be defined as 1 for this function to be available\&. The application must also then provide definitions for portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE() to configure a peripheral timer/counter and return the timers current count value respectively\&. The counter should be at least 10 times the frequency of the tick count\&.
.PP
NOTE 1: This function will disable interrupts for its duration\&. It is not intended for normal application runtime use but as a debug aid\&.
.PP
Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total accumulated execution time being stored for each task\&. The resolution of the accumulated time value depends on the frequency of the timer configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro\&. Calling vTaskGetRunTimeStats() writes the total execution time of each task into a buffer, both as an absolute count value and as a percentage of the total system execution time\&.
.PP
NOTE 2:
.PP
This function is provided for convenience only, and is used by many of the demo applications\&. Do not consider it to be part of the scheduler\&.
.PP
vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the uxTaskGetSystemState() output into a human readable table that displays the amount of time each task has spent in the Running state in both absolute and percentage terms\&.
.PP
vTaskGetRunTimeStats() has a dependency on the sprintf() C library function that might bloat the code size, use a lot of stack, and provide different results on different platforms\&. An alternative, tiny, third party, and limited functionality implementation of sprintf() is provided in many of the FreeRTOS/Demo sub-directories in a file called printf-stdarg\&.c (note printf-stdarg\&.c does not provide a full snprintf() implementation!)\&.
.PP
It is recommended that production systems call uxTaskGetSystemState() directly to get access to raw stats data, rather than indirectly through a call to vTaskGetRunTimeStats()\&.
.PP
\fBParameters\fP
.RS 4
\fIpcWriteBuffer\fP A buffer into which the execution times will be written, in ASCII form\&. This buffer is assumed to be large enough to contain the generated report\&. Approximately 40 bytes per task should be sufficient\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.

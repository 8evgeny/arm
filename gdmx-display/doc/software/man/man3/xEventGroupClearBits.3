.TH "xEventGroupClearBits" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xEventGroupClearBits \- xEventGroupClearBits
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
\fBevent_groups\&.h\fP 
.PP
.nf

   EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear );
.fi
.PP
.PP
Clear bits within an event group\&. This function cannot be called from an interrupt\&.
.PP
\fBParameters\fP
.RS 4
\fIxEventGroup\fP The event group in which the bits are to be cleared\&.
.br
\fIuxBitsToClear\fP A bitwise value that indicates the bit or bits to clear in the event group\&. For example, to clear bit 3 only, set uxBitsToClear to 0x08\&. To clear bit 3 and bit 0 set uxBitsToClear to 0x09\&.
.RE
.PP
\fBReturns\fP
.RS 4
The value of the event group before the specified bits were cleared\&.
.RE
.PP
Example usage: 
.PP
.nf

  #define BIT_0 ( 1 << 0 )
  #define BIT_4 ( 1 << 4 )

  void aFunction( EventGroupHandle_t xEventGroup )
  {
  EventBits_t uxBits;

    // Clear bit 0 and bit 4 in xEventGroup\&.
    uxBits = xEventGroupClearBits(
                            xEventGroup,    // The event group being updated\&.
                            BIT_0 | BIT_4 );// The bits being cleared\&.

    if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
    {
        // Both bit 0 and bit 4 were set before xEventGroupClearBits() was
        // called\&.  Both will now be clear (not set)\&.
    }
    else if( ( uxBits & BIT_0 ) != 0 )
    {
        // Bit 0 was set before xEventGroupClearBits() was called\&.  It will
        // now be clear\&.
    }
    else if( ( uxBits & BIT_4 ) != 0 )
    {
        // Bit 4 was set before xEventGroupClearBits() was called\&.  It will
        // now be clear\&.
    }
    else
    {
        // Neither bit 0 nor bit 4 were set in the first place\&.
    }
  }
  
.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.

.TH "xSemaphoreCreateRecursiveMutexStatic" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xSemaphoreCreateRecursiveMutexStatic \- xSemaphoreCreateRecursiveMutexStatic
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
semphr\&. h 
.PP
.nf
SemaphoreHandle_t xSemaphoreCreateRecursiveMutexStatic( StaticSemaphore_t *pxMutexBuffer )
.fi
.PP
.PP
Creates a new recursive mutex type semaphore instance, and returns a handle by which the new recursive mutex can be referenced\&.
.PP
Internally, within the FreeRTOS implementation, recursive mutexs use a block of memory, in which the mutex structure is stored\&. If a recursive mutex is created using xSemaphoreCreateRecursiveMutex() then the required memory is automatically dynamically allocated inside the xSemaphoreCreateRecursiveMutex() function\&. (see http://www.freertos.org/a00111.html)\&. If a recursive mutex is created using xSemaphoreCreateRecursiveMutexStatic() then the application writer must provide the memory that will get used by the mutex\&. xSemaphoreCreateRecursiveMutexStatic() therefore allows a recursive mutex to be created without using any dynamic memory allocation\&.
.PP
Mutexes created using this macro can be accessed using the xSemaphoreTakeRecursive() and xSemaphoreGiveRecursive() macros\&. The xSemaphoreTake() and xSemaphoreGive() macros must not be used\&.
.PP
A mutex used recursively can be 'taken' repeatedly by the owner\&. The mutex doesn't become available again until the owner has called xSemaphoreGiveRecursive() for each successful 'take' request\&. For example, if a task successfully 'takes' the same mutex 5 times then the mutex will not be available to any other task until it has also 'given' the mutex back exactly five times\&.
.PP
This type of semaphore uses a priority inheritance mechanism so a task 'taking' a semaphore MUST ALWAYS 'give' the semaphore back once the semaphore it is no longer required\&.
.PP
Mutex type semaphores cannot be used from within interrupt service routines\&.
.PP
See xSemaphoreCreateBinary() for an alternative implementation that can be used for pure synchronisation (where one task or interrupt always 'gives' the semaphore and another always 'takes' the semaphore) and from within interrupt service routines\&.
.PP
\fBParameters\fP
.RS 4
\fIpxMutexBuffer\fP Must point to a variable of type StaticSemaphore_t, which will then be used to hold the recursive mutex's data structure, removing the need for the memory to be allocated dynamically\&.
.RE
.PP
\fBReturns\fP
.RS 4
If the recursive mutex was successfully created then a handle to the created recursive mutex is returned\&. If pxMutexBuffer was NULL then NULL is returned\&.
.RE
.PP
Example usage: 
.PP
.nf

SemaphoreHandle_t xSemaphore;
StaticSemaphore_t xMutexBuffer;

void vATask( void * pvParameters )
{
   // A recursive semaphore cannot be used before it is created\&.  Here a
   // recursive mutex is created using xSemaphoreCreateRecursiveMutexStatic()\&.
   // The address of xMutexBuffer is passed into the function, and will hold
   // the mutexes data structures - so no dynamic memory allocation will be
   // attempted\&.
   xSemaphore = xSemaphoreCreateRecursiveMutexStatic( &xMutexBuffer );

   // As no dynamic memory allocation was performed, xSemaphore cannot be NULL,
   // so there is no need to check it\&.
}
.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.

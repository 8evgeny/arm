<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__cr_s_t_a_r_t" xml:lang="en-US">
<title>crSTART</title>
<indexterm><primary>crSTART</primary></indexterm>

<para>croutine. h <literallayout>
crSTART( CoRoutineHandle_t xHandle );</literallayout></para>

<para>This macro MUST always be called at the start of a co-routine function.</para>

<para>Example usage: <literallayout>
// Co-routine to be created.
void vACoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )
{
// Variables in co-routines must be declared static if they must maintain value across a blocking call.
static int32_t ulAVariable;

    // Must start every co-routine with a call to crSTART();
    crSTART( xHandle );

    for( ;; )
    {
         // Co-routine functionality goes here.
    }

    // Must end every co-routine with a call to crEND();
    crEND();
}</literallayout></para>

<para>croutine. h <literallayout>
crEND();</literallayout></para>

<para>This macro MUST always be called at the end of a co-routine function.</para>

<para>Example usage: <literallayout>
// Co-routine to be created.
void vACoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )
{
// Variables in co-routines must be declared static if they must maintain value across a blocking call.
static int32_t ulAVariable;

    // Must start every co-routine with a call to crSTART();
    crSTART( xHandle );

    for( ;; )
    {
         // Co-routine functionality goes here.
    }

    // Must end every co-routine with a call to crEND();
    crEND();
}</literallayout> </para>
</section>

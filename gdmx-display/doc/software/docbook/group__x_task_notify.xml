<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_task_notify" xml:lang="en-US">
<title>xTaskNotify</title>
<indexterm><primary>xTaskNotify</primary></indexterm>

<para>task. h <literallayout>BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );</literallayout></para>

<para>configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.</para>

<para>When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private &quot;notification value&quot;, which is a 32-bit unsigned integer (uint32_t).</para>

<para>Events can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.</para>

<para>A notification sent to a task can optionally perform an action, such as update, overwrite or increment the task&apos;s notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.</para>

<para>A notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.</para>

<para>A task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.</para>

<para>See <link xlink:href="http://www.FreeRTOS.org/RTOS-task-notifications.html">http://www.FreeRTOS.org/RTOS-task-notifications.html</link> for details.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>xTaskToNotify</entry>
                                <entry>
<para>The handle of the task being notified. The handle to a task can be returned from the xTaskCreate() API function used to create the task, and the handle of the currently running task can be obtained by calling xTaskGetCurrentTaskHandle().</para>
</entry>
                            </row>
                            <row>
                                <entry>ulValue</entry>
                                <entry>
<para>Data that can be sent with the notification. How the data is used depends on the value of the eAction parameter.</para>
</entry>
                            </row>
                            <row>
                                <entry>eAction</entry>
                                <entry>
<para>Specifies how the notification updates the task&apos;s notification value, if at all. Valid values for eAction are as follows:</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                eSetBits - The task&apos;s notification value is bitwise ORed with ulValue. xTaskNofify() always returns pdPASS in this case.</para>

<para>eIncrement - The task&apos;s notification value is incremented. ulValue is not used and xTaskNotify() always returns pdPASS in this case.</para>

<para>eSetValueWithOverwrite - The task&apos;s notification value is set to the value of ulValue, even if the task being notified had not yet processed the previous notification (the task already had a notification pending). xTaskNotify() always returns pdPASS in this case.</para>

<para>eSetValueWithoutOverwrite - If the task being notified did not already have a notification pending then the task&apos;s notification value is set to ulValue and xTaskNotify() will return pdPASS. If the task being notified already had a notification pending then no action is performed and pdFAIL is returned.</para>

<para>eNoAction - The task receives a notification without its notification value being updated. ulValue is not used and xTaskNotify() always returns pdPASS in this case.</para>

<para>pulPreviousNotificationValue - Can be used to pass out the subject task&apos;s notification value before any bits are modified by the notify function.</para>

<para><formalpara><title>Returns</title>

<para>Dependent on the value of eAction. See the description of the eAction parameter.</para>
</formalpara>
task. h <literallayout>BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );</literallayout></para>

<para>configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.</para>

<para>When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private &quot;notification value&quot;, which is a 32-bit unsigned integer (uint32_t).</para>

<para>A version of xTaskNotify() that can be used from an interrupt service routine (ISR).</para>

<para>Events can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.</para>

<para>A notification sent to a task can optionally perform an action, such as update, overwrite or increment the task&apos;s notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.</para>

<para>A notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.</para>

<para>A task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.</para>

<para>See <link xlink:href="http://www.FreeRTOS.org/RTOS-task-notifications.html">http://www.FreeRTOS.org/RTOS-task-notifications.html</link> for details.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>xTaskToNotify</entry>
                                <entry>
<para>The handle of the task being notified. The handle to a task can be returned from the xTaskCreate() API function used to create the task, and the handle of the currently running task can be obtained by calling xTaskGetCurrentTaskHandle().</para>
</entry>
                            </row>
                            <row>
                                <entry>ulValue</entry>
                                <entry>
<para>Data that can be sent with the notification. How the data is used depends on the value of the eAction parameter.</para>
</entry>
                            </row>
                            <row>
                                <entry>eAction</entry>
                                <entry>
<para>Specifies how the notification updates the task&apos;s notification value, if at all. Valid values for eAction are as follows:</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                eSetBits - The task&apos;s notification value is bitwise ORed with ulValue. xTaskNofify() always returns pdPASS in this case.</para>

<para>eIncrement - The task&apos;s notification value is incremented. ulValue is not used and xTaskNotify() always returns pdPASS in this case.</para>

<para>eSetValueWithOverwrite - The task&apos;s notification value is set to the value of ulValue, even if the task being notified had not yet processed the previous notification (the task already had a notification pending). xTaskNotify() always returns pdPASS in this case.</para>

<para>eSetValueWithoutOverwrite - If the task being notified did not already have a notification pending then the task&apos;s notification value is set to ulValue and xTaskNotify() will return pdPASS. If the task being notified already had a notification pending then no action is performed and pdFAIL is returned.</para>

<para>eNoAction - The task receives a notification without its notification value being updated. ulValue is not used and xTaskNotify() always returns pdPASS in this case.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>pxHigherPriorityTaskWoken</entry>
                                <entry>
<para>xTaskNotifyFromISR() will set *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the task to which the notification was sent to leave the Blocked state, and the unblocked task has a priority higher than the currently running task. If xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should be requested before the interrupt is exited. How a context switch is requested from an ISR is dependent on the port - see the documentation page for the port in use.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Dependent on the value of eAction. See the description of the eAction parameter. </para>
</formalpara>
</para>
</section>


64_HAL_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002940  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b18  08002b18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b20  08002b20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08002b34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200000e4  08002b34  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080b5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017bb  00000000  00000000  000280f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  000298b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00029fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000016fd  00000000  00000000  0002a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008663  00000000  00000000  0002bce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deda0  00000000  00000000  00034348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001130e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae4  00000000  00000000  0011313c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002af0 	.word	0x08002af0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002af0 	.word	0x08002af0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000504:	f3bf 8f4f 	dsb	sy
}
 8000508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800050a:	f3bf 8f6f 	isb	sy
}
 800050e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <SCB_EnableICache+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000518:	f3bf 8f4f 	dsb	sy
}
 800051c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051e:	f3bf 8f6f 	isb	sy
}
 8000522:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SCB_EnableICache+0x48>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <SCB_EnableICache+0x48>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000536:	f3bf 8f6f 	isb	sy
}
 800053a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
}
 800055e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000566:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	0b5b      	lsrs	r3, r3, #13
 800056c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000570:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800057a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	015a      	lsls	r2, r3, #5
 8000580:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000584:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058a:	4911      	ldr	r1, [pc, #68]	; (80005d0 <SCB_EnableDCache+0x84>)
 800058c:	4313      	orrs	r3, r2
 800058e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	60ba      	str	r2, [r7, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1ef      	bne.n	800057c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	60fa      	str	r2, [r7, #12]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1e5      	bne.n	8000572 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005d8:	f000 f9e4 	bl	80009a4 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80005dc:	f7ff ff90 	bl	8000500 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80005e0:	f7ff ffb4 	bl	800054c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fb7b 	bl	8000cde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f80a 	bl	8000600 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005ec:	f000 f876 	bl	80006dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f934 	bl	800085c <MX_GPIO_Init>
  MX_LTDC_Init();
 80005f4:	f000 f89c 	bl	8000730 <MX_LTDC_Init>
  MX_RNG_Init();
 80005f8:	f000 f91c 	bl	8000834 <MX_RNG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x28>
	...

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fa66 	bl	8002ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <SystemClock_Config+0xd4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a2a      	ldr	r2, [pc, #168]	; (80006d4 <SystemClock_Config+0xd4>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xd4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <SystemClock_Config+0xd8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <SystemClock_Config+0xd8>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xd8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000668:	2319      	movs	r3, #25
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800066c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000670:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000676:	2308      	movs	r3, #8
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	4618      	mov	r0, r3
 8000680:	f001 f9aa 	bl	80019d8 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800068a:	f000 f9b9 	bl	8000a00 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800068e:	f001 f953 	bl	8001938 <HAL_PWREx_EnableOverDrive>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000698:	f000 f9b2 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2106      	movs	r1, #6
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fc30 	bl	8001f20 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006c6:	f000 f99b 	bl	8000a00 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b0a2      	sub	sp, #136	; 0x88
 80006e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2284      	movs	r2, #132	; 0x84
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 f9f9 	bl	8002ae0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <PeriphCommonClock_Config+0x50>)
 80006f0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80006f2:	23c0      	movs	r3, #192	; 0xc0
 80006f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80006fe:	2301      	movs	r3, #1
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000702:	2301      	movs	r3, #1
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000706:	2300      	movs	r3, #0
 8000708:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800070a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800070e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fda5 	bl	8002264 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8000720:	f000 f96e 	bl	8000a00 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3788      	adds	r7, #136	; 0x88
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	00200008 	.word	0x00200008

08000730 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2234      	movs	r2, #52	; 0x34
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f002 f9cf 	bl	8002ae0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000742:	4b3a      	ldr	r3, [pc, #232]	; (800082c <MX_LTDC_Init+0xfc>)
 8000744:	4a3a      	ldr	r2, [pc, #232]	; (8000830 <MX_LTDC_Init+0x100>)
 8000746:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000748:	4b38      	ldr	r3, [pc, #224]	; (800082c <MX_LTDC_Init+0xfc>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <MX_LTDC_Init+0xfc>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000754:	4b35      	ldr	r3, [pc, #212]	; (800082c <MX_LTDC_Init+0xfc>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <MX_LTDC_Init+0xfc>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000760:	4b32      	ldr	r3, [pc, #200]	; (800082c <MX_LTDC_Init+0xfc>)
 8000762:	2228      	movs	r2, #40	; 0x28
 8000764:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000766:	4b31      	ldr	r3, [pc, #196]	; (800082c <MX_LTDC_Init+0xfc>)
 8000768:	2209      	movs	r2, #9
 800076a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800076c:	4b2f      	ldr	r3, [pc, #188]	; (800082c <MX_LTDC_Init+0xfc>)
 800076e:	2235      	movs	r2, #53	; 0x35
 8000770:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <MX_LTDC_Init+0xfc>)
 8000774:	220b      	movs	r2, #11
 8000776:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000778:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_LTDC_Init+0xfc>)
 800077a:	f240 2215 	movw	r2, #533	; 0x215
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000780:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_LTDC_Init+0xfc>)
 8000782:	f240 121b 	movw	r2, #283	; 0x11b
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_LTDC_Init+0xfc>)
 800078a:	f240 2235 	movw	r2, #565	; 0x235
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_LTDC_Init+0xfc>)
 8000792:	f240 121d 	movw	r2, #285	; 0x11d
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_LTDC_Init+0xfc>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_LTDC_Init+0xfc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007a8:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_LTDC_Init+0xfc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007b0:	481e      	ldr	r0, [pc, #120]	; (800082c <MX_LTDC_Init+0xfc>)
 80007b2:	f000 fe19 	bl	80013e8 <HAL_LTDC_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80007bc:	f000 f920 	bl	8000a00 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80007c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007c8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80007ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007d2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007d4:	2302      	movs	r3, #2
 80007d6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80007d8:	23ff      	movs	r3, #255	; 0xff
 80007da:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007e6:	2305      	movs	r3, #5
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80007ee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80007f4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_LTDC_Init+0xfc>)
 8000814:	f000 feb8 	bl	8001588 <HAL_LTDC_ConfigLayer>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 800081e:	f000 f8ef 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3738      	adds	r7, #56	; 0x38
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000028 	.word	0x20000028
 8000830:	40016800 	.word	0x40016800

08000834 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_RNG_Init+0x20>)
 800083a:	4a07      	ldr	r2, [pc, #28]	; (8000858 <MX_RNG_Init+0x24>)
 800083c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_RNG_Init+0x20>)
 8000840:	f002 f900 	bl	8002a44 <HAL_RNG_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800084a:	f000 f8d9 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000d0 	.word	0x200000d0
 8000858:	50060800 	.word	0x50060800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000872:	4b49      	ldr	r3, [pc, #292]	; (8000998 <MX_GPIO_Init+0x13c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a48      	ldr	r2, [pc, #288]	; (8000998 <MX_GPIO_Init+0x13c>)
 8000878:	f043 0310 	orr.w	r3, r3, #16
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b46      	ldr	r3, [pc, #280]	; (8000998 <MX_GPIO_Init+0x13c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0310 	and.w	r3, r3, #16
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b43      	ldr	r3, [pc, #268]	; (8000998 <MX_GPIO_Init+0x13c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a42      	ldr	r2, [pc, #264]	; (8000998 <MX_GPIO_Init+0x13c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b40      	ldr	r3, [pc, #256]	; (8000998 <MX_GPIO_Init+0x13c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80008a2:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a3c      	ldr	r2, [pc, #240]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b3a      	ldr	r3, [pc, #232]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008ba:	4b37      	ldr	r3, [pc, #220]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a36      	ldr	r2, [pc, #216]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d2:	4b31      	ldr	r3, [pc, #196]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a30      	ldr	r2, [pc, #192]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008ea:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a2a      	ldr	r2, [pc, #168]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b28      	ldr	r3, [pc, #160]	; (8000998 <MX_GPIO_Init+0x13c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	4b25      	ldr	r3, [pc, #148]	; (8000998 <MX_GPIO_Init+0x13c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a24      	ldr	r2, [pc, #144]	; (8000998 <MX_GPIO_Init+0x13c>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_GPIO_Init+0x13c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	2108      	movs	r1, #8
 800091e:	481f      	ldr	r0, [pc, #124]	; (800099c <MX_GPIO_Init+0x140>)
 8000920:	f000 fd48 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2102      	movs	r1, #2
 8000928:	481d      	ldr	r0, [pc, #116]	; (80009a0 <MX_GPIO_Init+0x144>)
 800092a:	f000 fd43 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000934:	481a      	ldr	r0, [pc, #104]	; (80009a0 <MX_GPIO_Init+0x144>)
 8000936:	f000 fd3d 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800093a:	2308      	movs	r3, #8
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	2302      	movs	r3, #2
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4812      	ldr	r0, [pc, #72]	; (800099c <MX_GPIO_Init+0x140>)
 8000952:	f000 fb83 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000956:	2302      	movs	r3, #2
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_GPIO_Init+0x144>)
 800096e:	f000 fb75 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000980:	2302      	movs	r3, #2
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_GPIO_Init+0x144>)
 800098c:	f000 fb66 	bl	800105c <HAL_GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3730      	adds	r7, #48	; 0x30
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40022800 	.word	0x40022800
 80009a0:	40022000 	.word	0x40022000

080009a4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009b6:	f000 fad5 	bl	8000f64 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009ba:	2301      	movs	r3, #1
 80009bc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009be:	2300      	movs	r3, #0
 80009c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MPU_Config+0x58>)
 80009c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80009c6:	2311      	movs	r3, #17
 80009c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80009d2:	2303      	movs	r3, #3
 80009d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80009de:	2301      	movs	r3, #1
 80009e0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009e6:	463b      	mov	r3, r7
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 faf3 	bl	8000fd4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009ee:	2004      	movs	r0, #4
 80009f0:	f000 fad0 	bl	8000f94 <HAL_MPU_Enable>

}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20010000 	.word	0x20010000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a51      	ldr	r2, [pc, #324]	; (8000bb8 <HAL_LTDC_MspInit+0x164>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	f040 809b 	bne.w	8000bae <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7c:	4a4f      	ldr	r2, [pc, #316]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000a7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a82:	6453      	str	r3, [r2, #68]	; 0x44
 8000a84:	4b4d      	ldr	r3, [pc, #308]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a8c:	623b      	str	r3, [r7, #32]
 8000a8e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a90:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	4a49      	ldr	r2, [pc, #292]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9c:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	61fb      	str	r3, [r7, #28]
 8000aa6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000aa8:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a43      	ldr	r2, [pc, #268]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a3d      	ldr	r2, [pc, #244]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
 8000acc:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad8:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	4a37      	ldr	r2, [pc, #220]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae4:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000af0:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	4a31      	ldr	r2, [pc, #196]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afa:	6313      	str	r3, [r2, #48]	; 0x30
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <HAL_LTDC_MspInit+0x168>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b08:	2310      	movs	r3, #16
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b14:	2302      	movs	r3, #2
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b18:	230e      	movs	r3, #14
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4827      	ldr	r0, [pc, #156]	; (8000bc0 <HAL_LTDC_MspInit+0x16c>)
 8000b24:	f000 fa9a 	bl	800105c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8000b28:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b36:	2302      	movs	r3, #2
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b3a:	230e      	movs	r3, #14
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	4619      	mov	r1, r3
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <HAL_LTDC_MspInit+0x170>)
 8000b46:	f000 fa89 	bl	800105c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000b4a:	23f7      	movs	r3, #247	; 0xf7
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b5a:	230e      	movs	r3, #14
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <HAL_LTDC_MspInit+0x174>)
 8000b66:	f000 fa79 	bl	800105c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b7c:	2309      	movs	r3, #9
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4811      	ldr	r0, [pc, #68]	; (8000bcc <HAL_LTDC_MspInit+0x178>)
 8000b88:	f000 fa68 	bl	800105c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8000b8c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b9e:	230e      	movs	r3, #14
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <HAL_LTDC_MspInit+0x17c>)
 8000baa:	f000 fa57 	bl	800105c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3738      	adds	r7, #56	; 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40016800 	.word	0x40016800
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40022400 	.word	0x40022400
 8000bc8:	40022800 	.word	0x40022800
 8000bcc:	40021800 	.word	0x40021800
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_RNG_MspInit+0x38>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d10b      	bne.n	8000bfe <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_RNG_MspInit+0x3c>)
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <HAL_RNG_MspInit+0x3c>)
 8000bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf0:	6353      	str	r3, [r2, #52]	; 0x34
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <HAL_RNG_MspInit+0x3c>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	50060800 	.word	0x50060800
 8000c10:	40023800 	.word	0x40023800

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f87a 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca8:	4c0b      	ldr	r4, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff ffd7 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f001 feed 	bl	8002a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fc89 	bl	80005d4 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cd0:	08002b28 	.word	0x08002b28
  ldr r2, =_sbss
 8000cd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cd8:	200000e4 	.word	0x200000e4

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>

08000cde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	f000 f90a 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f000 f805 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cee:	f7ff fe8d 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f917 	bl	8000f4a <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d34:	f000 f8ed 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	200000e0 	.word	0x200000e0

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200000e0 	.word	0x200000e0

08000d98 <__NVIC_SetPriorityGrouping>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00
 8000ddc:	05fa0000 	.word	0x05fa0000

08000de0 <__NVIC_GetPriorityGrouping>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_SetPriority>:
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff47 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff5c 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffb0 	bl	8000eb8 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f68:	f3bf 8f5f 	dmb	sy
}
 8000f6c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <HAL_MPU_Disable+0x28>)
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_MPU_Disable+0x28>)
 8000f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f78:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_MPU_Disable+0x2c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	e000ed90 	.word	0xe000ed90

08000f94 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <HAL_MPU_Enable+0x38>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_MPU_Enable+0x3c>)
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <HAL_MPU_Enable+0x3c>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb2:	f3bf 8f4f 	dsb	sy
}
 8000fb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb8:	f3bf 8f6f 	isb	sy
}
 8000fbc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed90 	.word	0xe000ed90
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	785a      	ldrb	r2, [r3, #1]
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_MPU_ConfigRegion+0x84>)
 8000fe2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d029      	beq.n	8001040 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000fec:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <HAL_MPU_ConfigRegion+0x84>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7b1b      	ldrb	r3, [r3, #12]
 8000ff8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7adb      	ldrb	r3, [r3, #11]
 8000ffe:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001000:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7a9b      	ldrb	r3, [r3, #10]
 8001006:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001008:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7b5b      	ldrb	r3, [r3, #13]
 800100e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001010:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7b9b      	ldrb	r3, [r3, #14]
 8001016:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001018:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7bdb      	ldrb	r3, [r3, #15]
 800101e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001020:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7a5b      	ldrb	r3, [r3, #9]
 8001026:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001028:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7a1b      	ldrb	r3, [r3, #8]
 800102e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001030:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800103a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800103c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800103e:	e005      	b.n	800104c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_MPU_ConfigRegion+0x84>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <HAL_MPU_ConfigRegion+0x84>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed90 	.word	0xe000ed90

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e175      	b.n	8001368 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8164 	bne.w	8001362 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d005      	beq.n	80010b2 <HAL_GPIO_Init+0x56>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d130      	bne.n	8001114 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d017      	beq.n	8001150 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80be 	beq.w	8001362 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b66      	ldr	r3, [pc, #408]	; (8001380 <HAL_GPIO_Init+0x324>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a65      	ldr	r2, [pc, #404]	; (8001380 <HAL_GPIO_Init+0x324>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b63      	ldr	r3, [pc, #396]	; (8001380 <HAL_GPIO_Init+0x324>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011fe:	4a61      	ldr	r2, [pc, #388]	; (8001384 <HAL_GPIO_Init+0x328>)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a58      	ldr	r2, [pc, #352]	; (8001388 <HAL_GPIO_Init+0x32c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d037      	beq.n	800129a <HAL_GPIO_Init+0x23e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a57      	ldr	r2, [pc, #348]	; (800138c <HAL_GPIO_Init+0x330>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d031      	beq.n	8001296 <HAL_GPIO_Init+0x23a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a56      	ldr	r2, [pc, #344]	; (8001390 <HAL_GPIO_Init+0x334>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02b      	beq.n	8001292 <HAL_GPIO_Init+0x236>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a55      	ldr	r2, [pc, #340]	; (8001394 <HAL_GPIO_Init+0x338>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x232>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a54      	ldr	r2, [pc, #336]	; (8001398 <HAL_GPIO_Init+0x33c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x22e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a53      	ldr	r2, [pc, #332]	; (800139c <HAL_GPIO_Init+0x340>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x22a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a52      	ldr	r2, [pc, #328]	; (80013a0 <HAL_GPIO_Init+0x344>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x226>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a51      	ldr	r2, [pc, #324]	; (80013a4 <HAL_GPIO_Init+0x348>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x222>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a50      	ldr	r2, [pc, #320]	; (80013a8 <HAL_GPIO_Init+0x34c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x21e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4f      	ldr	r2, [pc, #316]	; (80013ac <HAL_GPIO_Init+0x350>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x21a>
 8001272:	2309      	movs	r3, #9
 8001274:	e012      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001276:	230a      	movs	r3, #10
 8001278:	e010      	b.n	800129c <HAL_GPIO_Init+0x240>
 800127a:	2308      	movs	r3, #8
 800127c:	e00e      	b.n	800129c <HAL_GPIO_Init+0x240>
 800127e:	2307      	movs	r3, #7
 8001280:	e00c      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001282:	2306      	movs	r3, #6
 8001284:	e00a      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001286:	2305      	movs	r3, #5
 8001288:	e008      	b.n	800129c <HAL_GPIO_Init+0x240>
 800128a:	2304      	movs	r3, #4
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x240>
 800128e:	2303      	movs	r3, #3
 8001290:	e004      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001292:	2302      	movs	r3, #2
 8001294:	e002      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x240>
 800129a:	2300      	movs	r3, #0
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	f002 0203 	and.w	r2, r2, #3
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	4093      	lsls	r3, r2
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012ac:	4935      	ldr	r1, [pc, #212]	; (8001384 <HAL_GPIO_Init+0x328>)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ba:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <HAL_GPIO_Init+0x354>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012de:	4a34      	ldr	r2, [pc, #208]	; (80013b0 <HAL_GPIO_Init+0x354>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e4:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <HAL_GPIO_Init+0x354>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001308:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <HAL_GPIO_Init+0x354>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <HAL_GPIO_Init+0x354>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001332:	4a1f      	ldr	r2, [pc, #124]	; (80013b0 <HAL_GPIO_Init+0x354>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_GPIO_Init+0x354>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800135c:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <HAL_GPIO_Init+0x354>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3301      	adds	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b0f      	cmp	r3, #15
 800136c:	f67f ae86 	bls.w	800107c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40013800 	.word	0x40013800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40021400 	.word	0x40021400
 80013a0:	40021800 	.word	0x40021800
 80013a4:	40021c00 	.word	0x40021c00
 80013a8:	40022000 	.word	0x40022000
 80013ac:	40022400 	.word	0x40022400
 80013b0:	40013c00 	.word	0x40013c00

080013b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c4:	787b      	ldrb	r3, [r7, #1]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013d0:	e003      	b.n	80013da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	041a      	lsls	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	619a      	str	r2, [r3, #24]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0bf      	b.n	800157a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fb20 	bl	8000a54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800142a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6999      	ldr	r1, [r3, #24]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001440:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6899      	ldr	r1, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <HAL_LTDC_Init+0x19c>)
 800145c:	400b      	ands	r3, r1
 800145e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	041b      	lsls	r3, r3, #16
 8001466:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6899      	ldr	r1, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68d9      	ldr	r1, [r3, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_LTDC_Init+0x19c>)
 800148a:	400b      	ands	r3, r1
 800148c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	041b      	lsls	r3, r3, #16
 8001494:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68d9      	ldr	r1, [r3, #12]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6919      	ldr	r1, [r3, #16]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_LTDC_Init+0x19c>)
 80014b8:	400b      	ands	r3, r1
 80014ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6919      	ldr	r1, [r3, #16]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6959      	ldr	r1, [r3, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_LTDC_Init+0x19c>)
 80014e6:	400b      	ands	r3, r1
 80014e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6959      	ldr	r1, [r3, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0206 	orr.w	r2, r2, #6
 8001556:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	f000f800 	.word	0xf000f800

08001588 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_LTDC_ConfigLayer+0x1a>
 800159e:	2302      	movs	r3, #2
 80015a0:	e02c      	b.n	80015fc <HAL_LTDC_ConfigLayer+0x74>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2134      	movs	r1, #52	; 0x34
 80015b8:	fb01 f303 	mul.w	r3, r1, r3
 80015bc:	4413      	add	r3, r2
 80015be:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	4614      	mov	r4, r2
 80015c6:	461d      	mov	r5, r3
 80015c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f811 	bl	8001604 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2201      	movs	r2, #1
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bdb0      	pop	{r4, r5, r7, pc}

08001604 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	0c1b      	lsrs	r3, r3, #16
 800161c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001620:	4413      	add	r3, r2
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	01db      	lsls	r3, r3, #7
 8001630:	4413      	add	r3, r2
 8001632:	3384      	adds	r3, #132	; 0x84
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	4611      	mov	r1, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	01d2      	lsls	r2, r2, #7
 8001640:	440a      	add	r2, r1
 8001642:	3284      	adds	r2, #132	; 0x84
 8001644:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001648:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0c1b      	lsrs	r3, r3, #16
 8001656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165a:	4413      	add	r3, r2
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	01db      	lsls	r3, r3, #7
 8001668:	440b      	add	r3, r1
 800166a:	3384      	adds	r3, #132	; 0x84
 800166c:	4619      	mov	r1, r3
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001682:	4413      	add	r3, r2
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	01db      	lsls	r3, r3, #7
 8001692:	4413      	add	r3, r2
 8001694:	3384      	adds	r3, #132	; 0x84
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	4611      	mov	r1, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	01d2      	lsls	r2, r2, #7
 80016a2:	440a      	add	r2, r1
 80016a4:	3284      	adds	r2, #132	; 0x84
 80016a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80016aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ba:	4413      	add	r3, r2
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4619      	mov	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	01db      	lsls	r3, r3, #7
 80016c8:	440b      	add	r3, r1
 80016ca:	3384      	adds	r3, #132	; 0x84
 80016cc:	4619      	mov	r1, r3
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	01db      	lsls	r3, r3, #7
 80016de:	4413      	add	r3, r2
 80016e0:	3384      	adds	r3, #132	; 0x84
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	4611      	mov	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	01d2      	lsls	r2, r2, #7
 80016ee:	440a      	add	r2, r1
 80016f0:	3284      	adds	r2, #132	; 0x84
 80016f2:	f023 0307 	bic.w	r3, r3, #7
 80016f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	01db      	lsls	r3, r3, #7
 8001702:	4413      	add	r3, r2
 8001704:	3384      	adds	r3, #132	; 0x84
 8001706:	461a      	mov	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	061b      	lsls	r3, r3, #24
 8001728:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	01db      	lsls	r3, r3, #7
 8001734:	4413      	add	r3, r2
 8001736:	3384      	adds	r3, #132	; 0x84
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	01db      	lsls	r3, r3, #7
 8001744:	4413      	add	r3, r2
 8001746:	3384      	adds	r3, #132	; 0x84
 8001748:	461a      	mov	r2, r3
 800174a:	2300      	movs	r3, #0
 800174c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001754:	461a      	mov	r2, r3
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	431a      	orrs	r2, r3
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	431a      	orrs	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4619      	mov	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	01db      	lsls	r3, r3, #7
 8001768:	440b      	add	r3, r1
 800176a:	3384      	adds	r3, #132	; 0x84
 800176c:	4619      	mov	r1, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4313      	orrs	r3, r2
 8001772:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	01db      	lsls	r3, r3, #7
 800177e:	4413      	add	r3, r2
 8001780:	3384      	adds	r3, #132	; 0x84
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	4611      	mov	r1, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	01d2      	lsls	r2, r2, #7
 800178e:	440a      	add	r2, r1
 8001790:	3284      	adds	r2, #132	; 0x84
 8001792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001796:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	01db      	lsls	r3, r3, #7
 80017a2:	4413      	add	r3, r2
 80017a4:	3384      	adds	r3, #132	; 0x84
 80017a6:	461a      	mov	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	01db      	lsls	r3, r3, #7
 80017b8:	4413      	add	r3, r2
 80017ba:	3384      	adds	r3, #132	; 0x84
 80017bc:	69da      	ldr	r2, [r3, #28]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4619      	mov	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	01db      	lsls	r3, r3, #7
 80017c8:	440b      	add	r3, r1
 80017ca:	3384      	adds	r3, #132	; 0x84
 80017cc:	4619      	mov	r1, r3
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <LTDC_SetConfig+0x32c>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	69da      	ldr	r2, [r3, #28]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	6809      	ldr	r1, [r1, #0]
 80017e0:	4608      	mov	r0, r1
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	01c9      	lsls	r1, r1, #7
 80017e6:	4401      	add	r1, r0
 80017e8:	3184      	adds	r1, #132	; 0x84
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	01db      	lsls	r3, r3, #7
 80017f8:	4413      	add	r3, r2
 80017fa:	3384      	adds	r3, #132	; 0x84
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	01db      	lsls	r3, r3, #7
 8001808:	4413      	add	r3, r2
 800180a:	3384      	adds	r3, #132	; 0x84
 800180c:	461a      	mov	r2, r3
 800180e:	2300      	movs	r3, #0
 8001810:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	01db      	lsls	r3, r3, #7
 800181c:	4413      	add	r3, r2
 800181e:	3384      	adds	r3, #132	; 0x84
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8001830:	2304      	movs	r3, #4
 8001832:	61fb      	str	r3, [r7, #28]
 8001834:	e01b      	b.n	800186e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800183e:	2303      	movs	r3, #3
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e014      	b.n	800186e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b04      	cmp	r3, #4
 800184a:	d00b      	beq.n	8001864 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001850:	2b02      	cmp	r3, #2
 8001852:	d007      	beq.n	8001864 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001858:	2b03      	cmp	r3, #3
 800185a:	d003      	beq.n	8001864 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001860:	2b07      	cmp	r3, #7
 8001862:	d102      	bne.n	800186a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8001864:	2302      	movs	r3, #2
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	e001      	b.n	800186e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800186a:	2301      	movs	r3, #1
 800186c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	01db      	lsls	r3, r3, #7
 8001878:	4413      	add	r3, r2
 800187a:	3384      	adds	r3, #132	; 0x84
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	4611      	mov	r1, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	01d2      	lsls	r2, r2, #7
 8001888:	440a      	add	r2, r1
 800188a:	3284      	adds	r2, #132	; 0x84
 800188c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8001890:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	041a      	lsls	r2, r3, #16
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1acb      	subs	r3, r1, r3
 80018a8:	69f9      	ldr	r1, [r7, #28]
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	3303      	adds	r3, #3
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	6809      	ldr	r1, [r1, #0]
 80018b4:	4608      	mov	r0, r1
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	01c9      	lsls	r1, r1, #7
 80018ba:	4401      	add	r1, r0
 80018bc:	3184      	adds	r1, #132	; 0x84
 80018be:	4313      	orrs	r3, r2
 80018c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	01db      	lsls	r3, r3, #7
 80018cc:	4413      	add	r3, r2
 80018ce:	3384      	adds	r3, #132	; 0x84
 80018d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4619      	mov	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	01db      	lsls	r3, r3, #7
 80018dc:	440b      	add	r3, r1
 80018de:	3384      	adds	r3, #132	; 0x84
 80018e0:	4619      	mov	r1, r3
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <LTDC_SetConfig+0x330>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	01db      	lsls	r3, r3, #7
 80018f2:	4413      	add	r3, r2
 80018f4:	3384      	adds	r3, #132	; 0x84
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	01db      	lsls	r3, r3, #7
 8001908:	4413      	add	r3, r2
 800190a:	3384      	adds	r3, #132	; 0x84
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	4611      	mov	r1, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	01d2      	lsls	r2, r2, #7
 8001918:	440a      	add	r2, r1
 800191a:	3284      	adds	r2, #132	; 0x84
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6013      	str	r3, [r2, #0]
}
 8001922:	bf00      	nop
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	fffff8f8 	.word	0xfffff8f8
 8001934:	fffff800 	.word	0xfffff800

08001938 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a22      	ldr	r2, [pc, #136]	; (80019d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001966:	f7ff fa0b 	bl	8000d80 <HAL_GetTick>
 800196a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800196c:	e009      	b.n	8001982 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800196e:	f7ff fa07 	bl	8000d80 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800197c:	d901      	bls.n	8001982 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e022      	b.n	80019c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198e:	d1ee      	bne.n	800196e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800199c:	f7ff f9f0 	bl	8000d80 <HAL_GetTick>
 80019a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019a2:	e009      	b.n	80019b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019a4:	f7ff f9ec 	bl	8000d80 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019b2:	d901      	bls.n	80019b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e007      	b.n	80019c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019c4:	d1ee      	bne.n	80019a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40007000 	.word	0x40007000

080019d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e291      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8087 	beq.w	8001b0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019fc:	4b96      	ldr	r3, [pc, #600]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d00c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a08:	4b93      	ldr	r3, [pc, #588]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d112      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62>
 8001a14:	4b90      	ldr	r3, [pc, #576]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a20:	d10b      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a22:	4b8d      	ldr	r3, [pc, #564]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d06c      	beq.n	8001b08 <HAL_RCC_OscConfig+0x130>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d168      	bne.n	8001b08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e26b      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x7a>
 8001a44:	4b84      	ldr	r3, [pc, #528]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a83      	ldr	r2, [pc, #524]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	e02e      	b.n	8001ab0 <HAL_RCC_OscConfig+0xd8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x9c>
 8001a5a:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a7e      	ldr	r2, [pc, #504]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7b      	ldr	r2, [pc, #492]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e01d      	b.n	8001ab0 <HAL_RCC_OscConfig+0xd8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0xc0>
 8001a7e:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b73      	ldr	r3, [pc, #460]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a72      	ldr	r2, [pc, #456]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0xd8>
 8001a98:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a6e      	ldr	r2, [pc, #440]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b6c      	ldr	r3, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6b      	ldr	r2, [pc, #428]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d013      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f962 	bl	8000d80 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff f95e 	bl	8000d80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e21f      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xe8>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f94e 	bl	8000d80 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f94a 	bl	8000d80 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e20b      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x110>
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d069      	beq.n	8001bea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b16:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b22:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d11c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x190>
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d116      	bne.n	8001b68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x17a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e1df      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	493d      	ldr	r1, [pc, #244]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	e040      	b.n	8001bea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d023      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b70:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a38      	ldr	r2, [pc, #224]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f900 	bl	8000d80 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff f8fc 	bl	8000d80 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1bd      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4929      	ldr	r1, [pc, #164]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
 8001bb6:	e018      	b.n	8001bea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f8dc 	bl	8000d80 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f8d8 	bl	8000d80 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e199      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d038      	beq.n	8001c68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d019      	beq.n	8001c32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c02:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f8b9 	bl	8000d80 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c12:	f7ff f8b5 	bl	8000d80 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e176      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x23a>
 8001c30:	e01a      	b.n	8001c68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f89f 	bl	8000d80 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c46:	f7ff f89b 	bl	8000d80 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d903      	bls.n	8001c5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e15c      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
 8001c58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	4b91      	ldr	r3, [pc, #580]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ee      	bne.n	8001c46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80a4 	beq.w	8001dbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b8b      	ldr	r3, [pc, #556]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b88      	ldr	r3, [pc, #544]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a87      	ldr	r2, [pc, #540]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	4b82      	ldr	r3, [pc, #520]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001caa:	4b7f      	ldr	r3, [pc, #508]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a7e      	ldr	r2, [pc, #504]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f863 	bl	8000d80 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff f85f 	bl	8000d80 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	; 0x64
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e120      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd0:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x31a>
 8001ce4:	4b6f      	ldr	r3, [pc, #444]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a6e      	ldr	r2, [pc, #440]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	e02d      	b.n	8001d4e <HAL_RCC_OscConfig+0x376>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x33c>
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a69      	ldr	r2, [pc, #420]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a66      	ldr	r2, [pc, #408]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	e01c      	b.n	8001d4e <HAL_RCC_OscConfig+0x376>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x35e>
 8001d1c:	4b61      	ldr	r3, [pc, #388]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a60      	ldr	r2, [pc, #384]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
 8001d28:	4b5e      	ldr	r3, [pc, #376]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a5d      	ldr	r2, [pc, #372]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	e00b      	b.n	8001d4e <HAL_RCC_OscConfig+0x376>
 8001d36:	4b5b      	ldr	r3, [pc, #364]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a5a      	ldr	r2, [pc, #360]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	4b58      	ldr	r3, [pc, #352]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	4a57      	ldr	r2, [pc, #348]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d015      	beq.n	8001d82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d56:	f7ff f813 	bl	8000d80 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7ff f80f 	bl	8000d80 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0ce      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	4b4b      	ldr	r3, [pc, #300]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ee      	beq.n	8001d5e <HAL_RCC_OscConfig+0x386>
 8001d80:	e014      	b.n	8001dac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7fe fffd 	bl	8000d80 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7fe fff9 	bl	8000d80 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0b8      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ee      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a3b      	ldr	r2, [pc, #236]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80a4 	beq.w	8001f10 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d06b      	beq.n	8001eac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d149      	bne.n	8001e70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a30      	ldr	r2, [pc, #192]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7fe ffca 	bl	8000d80 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df0:	f7fe ffc6 	bl	8000d80 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e087      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e02:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69da      	ldr	r2, [r3, #28]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	019b      	lsls	r3, r3, #6
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	3b01      	subs	r3, #1
 8001e28:	041b      	lsls	r3, r3, #16
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	4313      	orrs	r3, r2
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe ff9a 	bl	8000d80 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe ff96 	bl	8000d80 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e057      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x478>
 8001e6e:	e04f      	b.n	8001f10 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe ff80 	bl	8000d80 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7fe ff7c 	bl	8000d80 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e03d      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4ac>
 8001ea2:	e035      	b.n	8001f10 <HAL_RCC_OscConfig+0x538>
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x544>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d028      	beq.n	8001f0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d121      	bne.n	8001f0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d11a      	bne.n	8001f0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ee2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d111      	bne.n	8001f0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d0      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f38:	4b6a      	ldr	r3, [pc, #424]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d910      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b67      	ldr	r3, [pc, #412]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 020f 	bic.w	r2, r3, #15
 8001f4e:	4965      	ldr	r1, [pc, #404]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f98:	4b53      	ldr	r3, [pc, #332]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	494d      	ldr	r1, [pc, #308]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d040      	beq.n	8002044 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d115      	bne.n	8002002 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e073      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06b      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f023 0203 	bic.w	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4936      	ldr	r1, [pc, #216]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002014:	f7fe feb4 	bl	8000d80 <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	e00a      	b.n	8002032 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201c:	f7fe feb0 	bl	8000d80 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	; 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e053      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 020c 	and.w	r2, r3, #12
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	429a      	cmp	r2, r3
 8002042:	d1eb      	bne.n	800201c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d210      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 020f 	bic.w	r2, r3, #15
 800205a:	4922      	ldr	r1, [pc, #136]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e032      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4916      	ldr	r1, [pc, #88]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	490e      	ldr	r1, [pc, #56]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b2:	f000 f821 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	490a      	ldr	r1, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x1cc>)
 80020c4:	5ccb      	ldrb	r3, [r1, r3]
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1d0>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1d4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fe10 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00
 80020e8:	40023800 	.word	0x40023800
 80020ec:	08002b08 	.word	0x08002b08
 80020f0:	20000000 	.word	0x20000000
 80020f4:	20000004 	.word	0x20000004

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020fe:	2100      	movs	r1, #0
 8002100:	6079      	str	r1, [r7, #4]
 8002102:	2100      	movs	r1, #0
 8002104:	60f9      	str	r1, [r7, #12]
 8002106:	2100      	movs	r1, #0
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800210a:	2100      	movs	r1, #0
 800210c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210e:	4952      	ldr	r1, [pc, #328]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 8002110:	6889      	ldr	r1, [r1, #8]
 8002112:	f001 010c 	and.w	r1, r1, #12
 8002116:	2908      	cmp	r1, #8
 8002118:	d00d      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0x3e>
 800211a:	2908      	cmp	r1, #8
 800211c:	f200 8094 	bhi.w	8002248 <HAL_RCC_GetSysClockFreq+0x150>
 8002120:	2900      	cmp	r1, #0
 8002122:	d002      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x32>
 8002124:	2904      	cmp	r1, #4
 8002126:	d003      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x38>
 8002128:	e08e      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800212a:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_RCC_GetSysClockFreq+0x164>)
 800212c:	60bb      	str	r3, [r7, #8]
      break;
 800212e:	e08e      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002130:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <HAL_RCC_GetSysClockFreq+0x168>)
 8002132:	60bb      	str	r3, [r7, #8]
      break;
 8002134:	e08b      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002136:	4948      	ldr	r1, [pc, #288]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 8002138:	6849      	ldr	r1, [r1, #4]
 800213a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800213e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002140:	4945      	ldr	r1, [pc, #276]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 8002142:	6849      	ldr	r1, [r1, #4]
 8002144:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002148:	2900      	cmp	r1, #0
 800214a:	d024      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214c:	4942      	ldr	r1, [pc, #264]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 800214e:	6849      	ldr	r1, [r1, #4]
 8002150:	0989      	lsrs	r1, r1, #6
 8002152:	4608      	mov	r0, r1
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	f240 14ff 	movw	r4, #511	; 0x1ff
 800215c:	f04f 0500 	mov.w	r5, #0
 8002160:	ea00 0204 	and.w	r2, r0, r4
 8002164:	ea01 0305 	and.w	r3, r1, r5
 8002168:	493d      	ldr	r1, [pc, #244]	; (8002260 <HAL_RCC_GetSysClockFreq+0x168>)
 800216a:	fb01 f003 	mul.w	r0, r1, r3
 800216e:	2100      	movs	r1, #0
 8002170:	fb01 f102 	mul.w	r1, r1, r2
 8002174:	1844      	adds	r4, r0, r1
 8002176:	493a      	ldr	r1, [pc, #232]	; (8002260 <HAL_RCC_GetSysClockFreq+0x168>)
 8002178:	fba2 0101 	umull	r0, r1, r2, r1
 800217c:	1863      	adds	r3, r4, r1
 800217e:	4619      	mov	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	461a      	mov	r2, r3
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	f7fe f83e 	bl	8000208 <__aeabi_uldivmod>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4613      	mov	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e04a      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002196:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	099b      	lsrs	r3, r3, #6
 800219c:	461a      	mov	r2, r3
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	ea02 0400 	and.w	r4, r2, r0
 80021ae:	ea03 0501 	and.w	r5, r3, r1
 80021b2:	4620      	mov	r0, r4
 80021b4:	4629      	mov	r1, r5
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	014b      	lsls	r3, r1, #5
 80021c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021c4:	0142      	lsls	r2, r0, #5
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	1b00      	subs	r0, r0, r4
 80021cc:	eb61 0105 	sbc.w	r1, r1, r5
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	018b      	lsls	r3, r1, #6
 80021da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021de:	0182      	lsls	r2, r0, #6
 80021e0:	1a12      	subs	r2, r2, r0
 80021e2:	eb63 0301 	sbc.w	r3, r3, r1
 80021e6:	f04f 0000 	mov.w	r0, #0
 80021ea:	f04f 0100 	mov.w	r1, #0
 80021ee:	00d9      	lsls	r1, r3, #3
 80021f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021f4:	00d0      	lsls	r0, r2, #3
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	1912      	adds	r2, r2, r4
 80021fc:	eb45 0303 	adc.w	r3, r5, r3
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	0299      	lsls	r1, r3, #10
 800220a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800220e:	0290      	lsls	r0, r2, #10
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	461a      	mov	r2, r3
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f7fd fff2 	bl	8000208 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4613      	mov	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	3301      	adds	r3, #1
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	60bb      	str	r3, [r7, #8]
      break;
 8002246:	e002      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_RCC_GetSysClockFreq+0x164>)
 800224a:	60bb      	str	r3, [r7, #8]
      break;
 800224c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224e:	68bb      	ldr	r3, [r7, #8]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bdb0      	pop	{r4, r5, r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	00f42400 	.word	0x00f42400
 8002260:	017d7840 	.word	0x017d7840

08002264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d012      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800228c:	4b69      	ldr	r3, [pc, #420]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4a68      	ldr	r2, [pc, #416]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002292:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002296:	6093      	str	r3, [r2, #8]
 8002298:	4b66      	ldr	r3, [pc, #408]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a0:	4964      	ldr	r1, [pc, #400]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d017      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022be:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	4959      	ldr	r1, [pc, #356]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022dc:	d101      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80022ea:	2301      	movs	r3, #1
 80022ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d017      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022fa:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002300:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	494a      	ldr	r1, [pc, #296]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002318:	d101      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800231a:	2301      	movs	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002336:	2301      	movs	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 808b 	beq.w	800245e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002348:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	4a39      	ldr	r2, [pc, #228]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002352:	6413      	str	r3, [r2, #64]	; 0x40
 8002354:	4b37      	ldr	r3, [pc, #220]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002360:	4b35      	ldr	r3, [pc, #212]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a34      	ldr	r2, [pc, #208]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800236c:	f7fe fd08 	bl	8000d80 <HAL_GetTick>
 8002370:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002374:	f7fe fd04 	bl	8000d80 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e357      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002392:	4b28      	ldr	r3, [pc, #160]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d035      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d02e      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b0:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ca:	4a1a      	ldr	r2, [pc, #104]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d114      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7fe fccc 	bl	8000d80 <HAL_GetTick>
 80023e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ea:	e00a      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7fe fcc8 	bl	8000d80 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e319      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ee      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800241a:	d111      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800242a:	400b      	ands	r3, r1
 800242c:	4901      	ldr	r1, [pc, #4]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
 8002432:	e00b      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002434:	40023800 	.word	0x40023800
 8002438:	40007000 	.word	0x40007000
 800243c:	0ffffcff 	.word	0x0ffffcff
 8002440:	4bb1      	ldr	r3, [pc, #708]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4ab0      	ldr	r2, [pc, #704]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002446:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800244a:	6093      	str	r3, [r2, #8]
 800244c:	4bae      	ldr	r3, [pc, #696]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800244e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002458:	49ab      	ldr	r1, [pc, #684]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d010      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800246a:	4ba7      	ldr	r3, [pc, #668]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800246c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002470:	4aa5      	ldr	r2, [pc, #660]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002476:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800247a:	4ba3      	ldr	r3, [pc, #652]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800247c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	49a0      	ldr	r1, [pc, #640]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002498:	4b9b      	ldr	r3, [pc, #620]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024a6:	4998      	ldr	r1, [pc, #608]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024ba:	4b93      	ldr	r3, [pc, #588]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024c8:	498f      	ldr	r1, [pc, #572]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024dc:	4b8a      	ldr	r3, [pc, #552]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ea:	4987      	ldr	r1, [pc, #540]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002504:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	497e      	ldr	r1, [pc, #504]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00a      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002520:	4b79      	ldr	r3, [pc, #484]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	f023 0203 	bic.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	4976      	ldr	r1, [pc, #472]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002542:	4b71      	ldr	r3, [pc, #452]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	f023 020c 	bic.w	r2, r3, #12
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002550:	496d      	ldr	r1, [pc, #436]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002564:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	4965      	ldr	r1, [pc, #404]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002586:	4b60      	ldr	r3, [pc, #384]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002594:	495c      	ldr	r1, [pc, #368]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025a8:	4b57      	ldr	r3, [pc, #348]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	4954      	ldr	r1, [pc, #336]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025ca:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	494b      	ldr	r1, [pc, #300]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025ec:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	4943      	ldr	r1, [pc, #268]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800260e:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002614:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261c:	493a      	ldr	r1, [pc, #232]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800263e:	4932      	ldr	r1, [pc, #200]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d011      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002660:	4929      	ldr	r1, [pc, #164]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800266c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002670:	d101      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002672:	2301      	movs	r3, #1
 8002674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002682:	2301      	movs	r3, #1
 8002684:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002698:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a0:	4919      	ldr	r1, [pc, #100]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c4:	4910      	ldr	r1, [pc, #64]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d006      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80d9 	beq.w	8002892 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ec:	f7fe fb48 	bl	8000d80 <HAL_GetTick>
 80026f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026f2:	e00b      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026f4:	f7fe fb44 	bl	8000d80 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d904      	bls.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e197      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800270c:	4b6c      	ldr	r3, [pc, #432]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ed      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d021      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002728:	2b00      	cmp	r3, #0
 800272a:	d11d      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800272c:	4b64      	ldr	r3, [pc, #400]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800272e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002732:	0c1b      	lsrs	r3, r3, #16
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800273a:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800273c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002740:	0e1b      	lsrs	r3, r3, #24
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	019a      	lsls	r2, r3, #6
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	431a      	orrs	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	061b      	lsls	r3, r3, #24
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	071b      	lsls	r3, r3, #28
 8002760:	4957      	ldr	r1, [pc, #348]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002786:	2b00      	cmp	r3, #0
 8002788:	d02e      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002792:	d129      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002794:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800279a:	0c1b      	lsrs	r3, r3, #16
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a8:	0f1b      	lsrs	r3, r3, #28
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	019a      	lsls	r2, r3, #6
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	431a      	orrs	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	071b      	lsls	r3, r3, #28
 80027c8:	493d      	ldr	r1, [pc, #244]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027d0:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d6:	f023 021f 	bic.w	r2, r3, #31
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	3b01      	subs	r3, #1
 80027e0:	4937      	ldr	r1, [pc, #220]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01d      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fa:	0e1b      	lsrs	r3, r3, #24
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002802:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002808:	0f1b      	lsrs	r3, r3, #28
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	019a      	lsls	r2, r3, #6
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	041b      	lsls	r3, r3, #16
 800281c:	431a      	orrs	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	431a      	orrs	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	071b      	lsls	r3, r3, #28
 8002828:	4925      	ldr	r1, [pc, #148]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d011      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	019a      	lsls	r2, r3, #6
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	061b      	lsls	r3, r3, #24
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	071b      	lsls	r3, r3, #28
 8002858:	4919      	ldr	r1, [pc, #100]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002860:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002866:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800286a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286c:	f7fe fa88 	bl	8000d80 <HAL_GetTick>
 8002870:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002874:	f7fe fa84 	bl	8000d80 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e0d7      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b01      	cmp	r3, #1
 8002896:	f040 80cd 	bne.w	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a6:	f7fe fa6b 	bl	8000d80 <HAL_GetTick>
 80028aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028ae:	f7fe fa67 	bl	8000d80 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b64      	cmp	r3, #100	; 0x64
 80028ba:	d903      	bls.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0ba      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80028c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028c4:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d0:	d0ed      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02e      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d12a      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028fa:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002908:	4b4d      	ldr	r3, [pc, #308]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	0f1b      	lsrs	r3, r3, #28
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	019a      	lsls	r2, r3, #6
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	061b      	lsls	r3, r3, #24
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	071b      	lsls	r3, r3, #28
 800292e:	4944      	ldr	r1, [pc, #272]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002936:	4b42      	ldr	r3, [pc, #264]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	3b01      	subs	r3, #1
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	493d      	ldr	r1, [pc, #244]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d022      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002964:	d11d      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	0e1b      	lsrs	r3, r3, #24
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	0f1b      	lsrs	r3, r3, #28
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	019a      	lsls	r2, r3, #6
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	431a      	orrs	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	061b      	lsls	r3, r3, #24
 8002994:	431a      	orrs	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	071b      	lsls	r3, r3, #28
 800299a:	4929      	ldr	r1, [pc, #164]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d028      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	0e1b      	lsrs	r3, r3, #24
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029bc:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	019a      	lsls	r2, r3, #6
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	431a      	orrs	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	071b      	lsls	r3, r3, #28
 80029e2:	4917      	ldr	r1, [pc, #92]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	4911      	ldr	r1, [pc, #68]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0c:	f7fe f9b8 	bl	8000d80 <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a14:	f7fe f9b4 	bl	8000d80 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e007      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a32:	d1ef      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800

08002a44 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e01c      	b.n	8002a90 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	795b      	ldrb	r3, [r3, #5]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fe f8b4 	bl	8000bd4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0204 	orr.w	r2, r2, #4
 8002a80:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <__libc_init_array>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	4d0d      	ldr	r5, [pc, #52]	; (8002ad0 <__libc_init_array+0x38>)
 8002a9c:	4c0d      	ldr	r4, [pc, #52]	; (8002ad4 <__libc_init_array+0x3c>)
 8002a9e:	1b64      	subs	r4, r4, r5
 8002aa0:	10a4      	asrs	r4, r4, #2
 8002aa2:	2600      	movs	r6, #0
 8002aa4:	42a6      	cmp	r6, r4
 8002aa6:	d109      	bne.n	8002abc <__libc_init_array+0x24>
 8002aa8:	4d0b      	ldr	r5, [pc, #44]	; (8002ad8 <__libc_init_array+0x40>)
 8002aaa:	4c0c      	ldr	r4, [pc, #48]	; (8002adc <__libc_init_array+0x44>)
 8002aac:	f000 f820 	bl	8002af0 <_init>
 8002ab0:	1b64      	subs	r4, r4, r5
 8002ab2:	10a4      	asrs	r4, r4, #2
 8002ab4:	2600      	movs	r6, #0
 8002ab6:	42a6      	cmp	r6, r4
 8002ab8:	d105      	bne.n	8002ac6 <__libc_init_array+0x2e>
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac0:	4798      	blx	r3
 8002ac2:	3601      	adds	r6, #1
 8002ac4:	e7ee      	b.n	8002aa4 <__libc_init_array+0xc>
 8002ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aca:	4798      	blx	r3
 8002acc:	3601      	adds	r6, #1
 8002ace:	e7f2      	b.n	8002ab6 <__libc_init_array+0x1e>
 8002ad0:	08002b20 	.word	0x08002b20
 8002ad4:	08002b20 	.word	0x08002b20
 8002ad8:	08002b20 	.word	0x08002b20
 8002adc:	08002b24 	.word	0x08002b24

08002ae0 <memset>:
 8002ae0:	4402      	add	r2, r0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d100      	bne.n	8002aea <memset+0xa>
 8002ae8:	4770      	bx	lr
 8002aea:	f803 1b01 	strb.w	r1, [r3], #1
 8002aee:	e7f9      	b.n	8002ae4 <memset+0x4>

08002af0 <_init>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr

08002afc <_fini>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr

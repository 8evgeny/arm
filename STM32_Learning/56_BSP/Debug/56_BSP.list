
56_BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d1c  08005d1c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d24  08005d24  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d28  08005d28  00015d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041c4  20000010  08005d3c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041d4  08005d3c  000241d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf4e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000364f  00000000  00000000  0003bf8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0003f5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  00040bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b36  00000000  00000000  00042068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fef  00000000  00000000  0006ab9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100627  00000000  00000000  00083b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001841b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c54  00000000  00000000  00184208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c1c 	.word	0x08005c1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08005c1c 	.word	0x08005c1c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c
 8000538:	20000080 	.word	0x20000080

0800053c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SCB_EnableICache+0x48>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SCB_EnableICache+0x48>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SCB_EnableICache+0x48>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000572:	f3bf 8f6f 	isb	sy
}
 8000576:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SCB_EnableDCache+0x84>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SCB_EnableDCache+0x84>)
 800059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0b5b      	lsrs	r3, r3, #13
 80005a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <SCB_EnableDCache+0x84>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ef      	bne.n	80005b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e5      	bne.n	80005ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableDCache+0x84>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableDCache+0x84>)
 80005ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b0a4      	sub	sp, #144	; 0x90
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000616:	f7ff ff91 	bl	800053c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800061a:	f7ff ffb5 	bl	8000588 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f001 f924 	bl	800186a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f87f 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 fa1b 	bl	8000a60 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800062a:	f000 f8e9 	bl	8000800 <MX_DMA2D_Init>
  MX_FMC_Init();
 800062e:	f000 f9c9 	bl	80009c4 <MX_FMC_Init>
  MX_LTDC_Init();
 8000632:	f000 f917 	bl	8000864 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8000636:	f000 f995 	bl	8000964 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1280);
 800063a:	4b30      	ldr	r3, [pc, #192]	; (80006fc <main+0xec>)
 800063c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800064e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f004 f890 	bl	800477a <osThreadCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a28      	ldr	r2, [pc, #160]	; (8000700 <main+0xf0>)
 800065e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <main+0xf4>)
 8000662:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000666:	461d      	mov	r5, r3
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000674:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 f87d 	bl	800477a <osThreadCreate>
 8000680:	4603      	mov	r3, r0
 8000682:	4a21      	ldr	r2, [pc, #132]	; (8000708 <main+0xf8>)
 8000684:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <main+0xfc>)
 8000688:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800069a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 f86a 	bl	800477a <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a19      	ldr	r2, [pc, #100]	; (8000710 <main+0x100>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <main+0x104>)
 80006ae:	f107 0420 	add.w	r4, r7, #32
 80006b2:	461d      	mov	r5, r3
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 f857 	bl	800477a <osThreadCreate>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <main+0x108>)
 80006d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityIdle, 0, 128);
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <main+0x10c>)
 80006d4:	1d3c      	adds	r4, r7, #4
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 f846 	bl	800477a <osThreadCreate>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <main+0x110>)
 80006f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006f4:	f004 f83a 	bl	800476c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <main+0xe8>
 80006fa:	bf00      	nop
 80006fc:	08005c70 	.word	0x08005c70
 8000700:	20003fd0 	.word	0x20003fd0
 8000704:	08005c8c 	.word	0x08005c8c
 8000708:	20004108 	.word	0x20004108
 800070c:	08005ca8 	.word	0x08005ca8
 8000710:	2000410c 	.word	0x2000410c
 8000714:	08005cc4 	.word	0x08005cc4
 8000718:	20003fd8 	.word	0x20003fd8
 800071c:	08005ce0 	.word	0x08005ce0
 8000720:	20003fd4 	.word	0x20003fd4

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f005 fa6a 	bl	8005c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <SystemClock_Config+0xd4>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <SystemClock_Config+0xd4>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <SystemClock_Config+0xd4>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	4b26      	ldr	r3, [pc, #152]	; (80007fc <SystemClock_Config+0xd8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a25      	ldr	r2, [pc, #148]	; (80007fc <SystemClock_Config+0xd8>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <SystemClock_Config+0xd8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800078c:	2319      	movs	r3, #25
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000790:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000794:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 ff0a 	bl	80025bc <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007ae:	f000 fd47 	bl	8001240 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b2:	f001 feb3 	bl	800251c <HAL_PWREx_EnableOverDrive>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007bc:	f000 fd40 	bl	8001240 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2107      	movs	r1, #7
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 f990 	bl	8002b04 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ea:	f000 fd29 	bl	8001240 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	; 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_DMA2D_Init+0x5c>)
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <MX_DMA2D_Init+0x60>)
 8000808:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_DMA2D_Init+0x5c>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_DMA2D_Init+0x5c>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_DMA2D_Init+0x5c>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_DMA2D_Init+0x5c>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_DMA2D_Init+0x5c>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_DMA2D_Init+0x5c>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_DMA2D_Init+0x5c>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <MX_DMA2D_Init+0x5c>)
 8000836:	f001 f927 	bl	8001a88 <HAL_DMA2D_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000840:	f000 fcfe 	bl	8001240 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000844:	2101      	movs	r1, #1
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_DMA2D_Init+0x5c>)
 8000848:	f001 f968 	bl	8001b1c <HAL_DMA2D_ConfigLayer>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000852:	f000 fcf5 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20004110 	.word	0x20004110
 8000860:	4002b000 	.word	0x4002b000

08000864 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08e      	sub	sp, #56	; 0x38
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2234      	movs	r2, #52	; 0x34
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f005 f9cb 	bl	8005c0c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000876:	4b39      	ldr	r3, [pc, #228]	; (800095c <MX_LTDC_Init+0xf8>)
 8000878:	4a39      	ldr	r2, [pc, #228]	; (8000960 <MX_LTDC_Init+0xfc>)
 800087a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800087c:	4b37      	ldr	r3, [pc, #220]	; (800095c <MX_LTDC_Init+0xf8>)
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000882:	4b36      	ldr	r3, [pc, #216]	; (800095c <MX_LTDC_Init+0xf8>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000888:	4b34      	ldr	r3, [pc, #208]	; (800095c <MX_LTDC_Init+0xf8>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800088e:	4b33      	ldr	r3, [pc, #204]	; (800095c <MX_LTDC_Init+0xf8>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000894:	4b31      	ldr	r3, [pc, #196]	; (800095c <MX_LTDC_Init+0xf8>)
 8000896:	2228      	movs	r2, #40	; 0x28
 8000898:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <MX_LTDC_Init+0xf8>)
 800089c:	2209      	movs	r2, #9
 800089e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80008a0:	4b2e      	ldr	r3, [pc, #184]	; (800095c <MX_LTDC_Init+0xf8>)
 80008a2:	2235      	movs	r2, #53	; 0x35
 80008a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <MX_LTDC_Init+0xf8>)
 80008a8:	220b      	movs	r2, #11
 80008aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80008ac:	4b2b      	ldr	r3, [pc, #172]	; (800095c <MX_LTDC_Init+0xf8>)
 80008ae:	f240 2215 	movw	r2, #533	; 0x215
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80008b4:	4b29      	ldr	r3, [pc, #164]	; (800095c <MX_LTDC_Init+0xf8>)
 80008b6:	f240 121b 	movw	r2, #283	; 0x11b
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_LTDC_Init+0xf8>)
 80008be:	f240 2235 	movw	r2, #565	; 0x235
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_LTDC_Init+0xf8>)
 80008c6:	f240 121d 	movw	r2, #285	; 0x11d
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <MX_LTDC_Init+0xf8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_LTDC_Init+0xf8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_LTDC_Init+0xf8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008e4:	481d      	ldr	r0, [pc, #116]	; (800095c <MX_LTDC_Init+0xf8>)
 80008e6:	f001 fb71 	bl	8001fcc <HAL_LTDC_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008f0:	f000 fca6 	bl	8001240 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80008f8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80008fc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000902:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000906:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000908:	2302      	movs	r3, #2
 800090a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800090c:	23ff      	movs	r3, #255	; 0xff
 800090e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000918:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800091a:	2305      	movs	r3, #5
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_LTDC_Init+0xf8>)
 8000944:	f001 fc12 	bl	800216c <HAL_LTDC_ConfigLayer>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800094e:	f000 fc77 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3738      	adds	r7, #56	; 0x38
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20003fdc 	.word	0x20003fdc
 8000960:	40016800 	.word	0x40016800

08000964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <MX_USART1_UART_Init+0x5c>)
 800096c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART1_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART1_UART_Init+0x58>)
 80009a8:	f003 f9b8 	bl	8003d1c <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009b2:	f000 fc45 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20004084 	.word	0x20004084
 80009c0:	40011000 	.word	0x40011000

080009c4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_FMC_Init+0x94>)
 80009de:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <MX_FMC_Init+0x98>)
 80009e0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_FMC_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_FMC_Init+0x94>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_FMC_Init+0x94>)
 80009f0:	2204      	movs	r2, #4
 80009f2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_FMC_Init+0x94>)
 80009f6:	2210      	movs	r2, #16
 80009f8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_FMC_Init+0x94>)
 80009fc:	2240      	movs	r2, #64	; 0x40
 80009fe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_FMC_Init+0x94>)
 8000a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a06:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_FMC_Init+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_FMC_Init+0x94>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_FMC_Init+0x94>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_FMC_Init+0x94>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000a24:	2306      	movs	r3, #6
 8000a26:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_FMC_Init+0x94>)
 8000a42:	f002 fe57 	bl	80036f4 <HAL_SDRAM_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_FMC_Init+0x8c>
  {
    Error_Handler( );
 8000a4c:	f000 fbf8 	bl	8001240 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20004150 	.word	0x20004150
 8000a5c:	a0000140 	.word	0xa0000140

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	; 0x40
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	4bad      	ldr	r3, [pc, #692]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4aac      	ldr	r2, [pc, #688]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000a7c:	f043 0310 	orr.w	r3, r3, #16
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4baa      	ldr	r3, [pc, #680]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8e:	4ba7      	ldr	r3, [pc, #668]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4aa6      	ldr	r2, [pc, #664]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4ba4      	ldr	r3, [pc, #656]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4ba1      	ldr	r3, [pc, #644]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4aa0      	ldr	r2, [pc, #640]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b9e      	ldr	r3, [pc, #632]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	623b      	str	r3, [r7, #32]
 8000abc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abe:	4b9b      	ldr	r3, [pc, #620]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a9a      	ldr	r2, [pc, #616]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b98      	ldr	r3, [pc, #608]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b95      	ldr	r3, [pc, #596]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a94      	ldr	r2, [pc, #592]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b92      	ldr	r3, [pc, #584]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b8f      	ldr	r3, [pc, #572]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a8e      	ldr	r2, [pc, #568]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b8c      	ldr	r3, [pc, #560]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b06:	4b89      	ldr	r3, [pc, #548]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a88      	ldr	r2, [pc, #544]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b86      	ldr	r3, [pc, #536]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b1e:	4b83      	ldr	r3, [pc, #524]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a82      	ldr	r2, [pc, #520]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b80      	ldr	r3, [pc, #512]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b36:	4b7d      	ldr	r3, [pc, #500]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a7c      	ldr	r2, [pc, #496]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b7a      	ldr	r3, [pc, #488]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4e:	4b77      	ldr	r3, [pc, #476]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a76      	ldr	r2, [pc, #472]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b74      	ldr	r3, [pc, #464]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	4b71      	ldr	r3, [pc, #452]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a70      	ldr	r2, [pc, #448]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b6e      	ldr	r3, [pc, #440]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2120      	movs	r1, #32
 8000b82:	486b      	ldr	r0, [pc, #428]	; (8000d30 <MX_GPIO_Init+0x2d0>)
 8000b84:	f001 fa08 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f241 010c 	movw	r1, #4108	; 0x100c
 8000b8e:	4869      	ldr	r0, [pc, #420]	; (8000d34 <MX_GPIO_Init+0x2d4>)
 8000b90:	f001 fa02 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2108      	movs	r1, #8
 8000b98:	4867      	ldr	r0, [pc, #412]	; (8000d38 <MX_GPIO_Init+0x2d8>)
 8000b9a:	f001 f9fd 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba4:	4865      	ldr	r0, [pc, #404]	; (8000d3c <MX_GPIO_Init+0x2dc>)
 8000ba6:	f001 f9f7 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	21c8      	movs	r1, #200	; 0xc8
 8000bae:	4864      	ldr	r0, [pc, #400]	; (8000d40 <MX_GPIO_Init+0x2e0>)
 8000bb0:	f001 f9f2 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	485f      	ldr	r0, [pc, #380]	; (8000d44 <MX_GPIO_Init+0x2e4>)
 8000bc8:	f001 f83a 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bdc:	2309      	movs	r3, #9
 8000bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be4:	4619      	mov	r1, r3
 8000be6:	4857      	ldr	r0, [pc, #348]	; (8000d44 <MX_GPIO_Init+0x2e4>)
 8000be8:	f001 f82a 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000bec:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfe:	230b      	movs	r3, #11
 8000c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c06:	4619      	mov	r1, r3
 8000c08:	484d      	ldr	r0, [pc, #308]	; (8000d40 <MX_GPIO_Init+0x2e0>)
 8000c0a:	f001 f819 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000c0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c14:	2312      	movs	r3, #18
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c20:	2304      	movs	r3, #4
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4847      	ldr	r0, [pc, #284]	; (8000d48 <MX_GPIO_Init+0x2e8>)
 8000c2c:	f001 f808 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000c30:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c42:	230a      	movs	r3, #10
 8000c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	483e      	ldr	r0, [pc, #248]	; (8000d48 <MX_GPIO_Init+0x2e8>)
 8000c4e:	f000 fff7 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000c52:	2310      	movs	r3, #16
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c62:	2302      	movs	r3, #2
 8000c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4836      	ldr	r0, [pc, #216]	; (8000d48 <MX_GPIO_Init+0x2e8>)
 8000c6e:	f000 ffe7 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000c82:	2308      	movs	r3, #8
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4828      	ldr	r0, [pc, #160]	; (8000d30 <MX_GPIO_Init+0x2d0>)
 8000c8e:	f000 ffd7 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000c92:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cac:	4619      	mov	r1, r3
 8000cae:	4827      	ldr	r0, [pc, #156]	; (8000d4c <MX_GPIO_Init+0x2ec>)
 8000cb0:	f000 ffc6 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481f      	ldr	r0, [pc, #124]	; (8000d50 <MX_GPIO_Init+0x2f0>)
 8000cd2:	f000 ffb5 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000cd6:	2360      	movs	r3, #96	; 0x60
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ce6:	230d      	movs	r3, #13
 8000ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4814      	ldr	r0, [pc, #80]	; (8000d44 <MX_GPIO_Init+0x2e4>)
 8000cf2:	f000 ffa5 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000cf6:	2340      	movs	r3, #64	; 0x40
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d06:	230a      	movs	r3, #10
 8000d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_GPIO_Init+0x2e8>)
 8000d12:	f000 ff95 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d28:	4619      	mov	r1, r3
 8000d2a:	e013      	b.n	8000d54 <MX_GPIO_Init+0x2f4>
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020c00 	.word	0x40020c00
 8000d34:	40022000 	.word	0x40022000
 8000d38:	40022800 	.word	0x40022800
 8000d3c:	40021c00 	.word	0x40021c00
 8000d40:	40021800 	.word	0x40021800
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020000 	.word	0x40020000
 8000d54:	48bb      	ldr	r0, [pc, #748]	; (8001044 <MX_GPIO_Init+0x5e4>)
 8000d56:	f000 ff73 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d5e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	48b6      	ldr	r0, [pc, #728]	; (8001048 <MX_GPIO_Init+0x5e8>)
 8000d70:	f000 ff66 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000d74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d86:	230a      	movs	r3, #10
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	48ae      	ldr	r0, [pc, #696]	; (800104c <MX_GPIO_Init+0x5ec>)
 8000d92:	f000 ff55 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000d96:	23f0      	movs	r3, #240	; 0xf0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000da6:	230a      	movs	r3, #10
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	48a7      	ldr	r0, [pc, #668]	; (8001050 <MX_GPIO_Init+0x5f0>)
 8000db2:	f000 ff45 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000dc8:	230a      	movs	r3, #10
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	48a0      	ldr	r0, [pc, #640]	; (8001054 <MX_GPIO_Init+0x5f4>)
 8000dd4:	f000 ff34 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dd8:	2320      	movs	r3, #32
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4896      	ldr	r0, [pc, #600]	; (8001048 <MX_GPIO_Init+0x5e8>)
 8000df0:	f000 ff26 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000df4:	2308      	movs	r3, #8
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e04:	230d      	movs	r3, #13
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	488e      	ldr	r0, [pc, #568]	; (8001048 <MX_GPIO_Init+0x5e8>)
 8000e10:	f000 ff16 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000e14:	f241 030c 	movw	r3, #4108	; 0x100c
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4888      	ldr	r0, [pc, #544]	; (8001050 <MX_GPIO_Init+0x5f0>)
 8000e2e:	f000 ff07 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e44:	4619      	mov	r1, r3
 8000e46:	4884      	ldr	r0, [pc, #528]	; (8001058 <MX_GPIO_Init+0x5f8>)
 8000e48:	f000 fefa 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e60:	4619      	mov	r1, r3
 8000e62:	487e      	ldr	r0, [pc, #504]	; (800105c <MX_GPIO_Init+0x5fc>)
 8000e64:	f000 feec 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e7a:	230d      	movs	r3, #13
 8000e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e82:	4619      	mov	r1, r3
 8000e84:	4873      	ldr	r0, [pc, #460]	; (8001054 <MX_GPIO_Init+0x5f4>)
 8000e86:	f000 fedb 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e8a:	2310      	movs	r3, #16
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	486a      	ldr	r0, [pc, #424]	; (8001048 <MX_GPIO_Init+0x5e8>)
 8000e9e:	f000 fecf 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000eb2:	230c      	movs	r3, #12
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4862      	ldr	r0, [pc, #392]	; (8001048 <MX_GPIO_Init+0x5e8>)
 8000ebe:	f000 febf 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000ec2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4862      	ldr	r0, [pc, #392]	; (8001060 <MX_GPIO_Init+0x600>)
 8000ed8:	f000 feb2 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000edc:	2302      	movs	r3, #2
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eec:	2305      	movs	r3, #5
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4856      	ldr	r0, [pc, #344]	; (8001050 <MX_GPIO_Init+0x5f0>)
 8000ef8:	f000 fea2 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	4852      	ldr	r0, [pc, #328]	; (8001060 <MX_GPIO_Init+0x600>)
 8000f16:	f000 fe93 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000f1a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f2c:	230d      	movs	r3, #13
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f34:	4619      	mov	r1, r3
 8000f36:	484a      	ldr	r0, [pc, #296]	; (8001060 <MX_GPIO_Init+0x600>)
 8000f38:	f000 fe82 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f54:	4619      	mov	r1, r3
 8000f56:	483e      	ldr	r0, [pc, #248]	; (8001050 <MX_GPIO_Init+0x5f0>)
 8000f58:	f000 fe72 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f76:	4619      	mov	r1, r3
 8000f78:	4834      	ldr	r0, [pc, #208]	; (800104c <MX_GPIO_Init+0x5ec>)
 8000f7a:	f000 fe61 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f84:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f92:	4619      	mov	r1, r3
 8000f94:	482e      	ldr	r0, [pc, #184]	; (8001050 <MX_GPIO_Init+0x5f0>)
 8000f96:	f000 fe53 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000f9a:	23c0      	movs	r3, #192	; 0xc0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000faa:	2308      	movs	r3, #8
 8000fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4828      	ldr	r0, [pc, #160]	; (8001058 <MX_GPIO_Init+0x5f8>)
 8000fb6:	f000 fe43 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000fba:	2310      	movs	r3, #16
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fca:	230a      	movs	r3, #10
 8000fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4822      	ldr	r0, [pc, #136]	; (8001060 <MX_GPIO_Init+0x600>)
 8000fd6:	f000 fe33 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000fda:	23c8      	movs	r3, #200	; 0xc8
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4818      	ldr	r0, [pc, #96]	; (8001054 <MX_GPIO_Init+0x5f4>)
 8000ff2:	f000 fe25 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000ff6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001008:	4619      	mov	r1, r3
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <MX_GPIO_Init+0x604>)
 800100c:	f000 fe18 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001010:	2305      	movs	r3, #5
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001020:	230a      	movs	r3, #10
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001028:	4619      	mov	r1, r3
 800102a:	480b      	ldr	r0, [pc, #44]	; (8001058 <MX_GPIO_Init+0x5f8>)
 800102c:	f000 fe08 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001030:	2332      	movs	r3, #50	; 0x32
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001040:	230b      	movs	r3, #11
 8001042:	e011      	b.n	8001068 <MX_GPIO_Init+0x608>
 8001044:	40022400 	.word	0x40022400
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40020000 	.word	0x40020000
 8001050:	40022000 	.word	0x40022000
 8001054:	40021800 	.word	0x40021800
 8001058:	40020800 	.word	0x40020800
 800105c:	40022800 	.word	0x40022800
 8001060:	40021c00 	.word	0x40021c00
 8001064:	40021400 	.word	0x40021400
 8001068:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106e:	4619      	mov	r1, r3
 8001070:	4850      	ldr	r0, [pc, #320]	; (80011b4 <MX_GPIO_Init+0x754>)
 8001072:	f000 fde5 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001076:	2304      	movs	r3, #4
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001086:	2309      	movs	r3, #9
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108e:	4619      	mov	r1, r3
 8001090:	4849      	ldr	r0, [pc, #292]	; (80011b8 <MX_GPIO_Init+0x758>)
 8001092:	f000 fdd5 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001096:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010a8:	2309      	movs	r3, #9
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b0:	4619      	mov	r1, r3
 80010b2:	4842      	ldr	r0, [pc, #264]	; (80011bc <MX_GPIO_Init+0x75c>)
 80010b4:	f000 fdc4 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80010b8:	2304      	movs	r3, #4
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c8:	4619      	mov	r1, r3
 80010ca:	483d      	ldr	r0, [pc, #244]	; (80011c0 <MX_GPIO_Init+0x760>)
 80010cc:	f000 fdb8 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010d0:	2386      	movs	r3, #134	; 0x86
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e0:	230b      	movs	r3, #11
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e8:	4619      	mov	r1, r3
 80010ea:	4836      	ldr	r0, [pc, #216]	; (80011c4 <MX_GPIO_Init+0x764>)
 80010ec:	f000 fda8 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f4:	2303      	movs	r3, #3
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001100:	4619      	mov	r1, r3
 8001102:	4830      	ldr	r0, [pc, #192]	; (80011c4 <MX_GPIO_Init+0x764>)
 8001104:	f000 fd9c 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001108:	2350      	movs	r3, #80	; 0x50
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001118:	230d      	movs	r3, #13
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	4619      	mov	r1, r3
 8001122:	4828      	ldr	r0, [pc, #160]	; (80011c4 <MX_GPIO_Init+0x764>)
 8001124:	f000 fd8c 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001128:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112e:	2312      	movs	r3, #18
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800113a:	2304      	movs	r3, #4
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800113e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001142:	4619      	mov	r1, r3
 8001144:	4820      	ldr	r0, [pc, #128]	; (80011c8 <MX_GPIO_Init+0x768>)
 8001146:	f000 fd7b 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800114a:	2328      	movs	r3, #40	; 0x28
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800115a:	230a      	movs	r3, #10
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001162:	4619      	mov	r1, r3
 8001164:	4817      	ldr	r0, [pc, #92]	; (80011c4 <MX_GPIO_Init+0x764>)
 8001166:	f000 fd6b 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800116a:	2340      	movs	r3, #64	; 0x40
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800117a:	2309      	movs	r3, #9
 800117c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001182:	4619      	mov	r1, r3
 8001184:	4810      	ldr	r0, [pc, #64]	; (80011c8 <MX_GPIO_Init+0x768>)
 8001186:	f000 fd5b 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800118a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800119c:	2305      	movs	r3, #5
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a4:	4619      	mov	r1, r3
 80011a6:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_GPIO_Init+0x758>)
 80011a8:	f000 fd4a 	bl	8001c40 <HAL_GPIO_Init>

}
 80011ac:	bf00      	nop
 80011ae:	3740      	adds	r7, #64	; 0x40
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021800 	.word	0x40021800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40021c00 	.word	0x40021c00

080011cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f003 fb1c 	bl	8004812 <osDelay>
 80011da:	e7fb      	b.n	80011d4 <StartDefaultTask+0x8>

080011dc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f003 fb14 	bl	8004812 <osDelay>
 80011ea:	e7fb      	b.n	80011e4 <StartTask02+0x8>

080011ec <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f003 fb0c 	bl	8004812 <osDelay>
 80011fa:	e7fb      	b.n	80011f4 <StartTask03+0x8>

080011fc <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f003 fb04 	bl	8004812 <osDelay>
 800120a:	e7fb      	b.n	8001204 <StartTask04+0x8>

0800120c <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f003 fafc 	bl	8004812 <osDelay>
 800121a:	e7fb      	b.n	8001214 <StartTask05+0x8>

0800121c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800122e:	f000 fb29 	bl	8001884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40010000 	.word	0x40010000

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_MspInit+0x4c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_MspInit+0x4c>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_MspInit+0x4c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	210f      	movs	r1, #15
 8001286:	f06f 0001 	mvn.w	r0, #1
 800128a:	f000 fbd3 	bl	8001a34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_DMA2D_MspInit+0x38>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10b      	bne.n	80012c6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_DMA2D_MspInit+0x3c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_DMA2D_MspInit+0x3c>)
 80012b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <HAL_DMA2D_MspInit+0x3c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	4002b000 	.word	0x4002b000
 80012d8:	40023800 	.word	0x40023800

080012dc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0ae      	sub	sp, #184	; 0xb8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	2284      	movs	r2, #132	; 0x84
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f004 fc85 	bl	8005c0c <memset>
  if(hltdc->Instance==LTDC)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a6a      	ldr	r2, [pc, #424]	; (80014b0 <HAL_LTDC_MspInit+0x1d4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	f040 80cd 	bne.w	80014a8 <HAL_LTDC_MspInit+0x1cc>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800130e:	2308      	movs	r3, #8
 8001310:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001312:	23c0      	movs	r3, #192	; 0xc0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001316:	2302      	movs	r3, #2
 8001318:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800131a:	2302      	movs	r3, #2
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800131e:	2300      	movs	r3, #0
 8001320:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001322:	2301      	movs	r3, #1
 8001324:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fdef 	bl	8002f14 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 800133c:	f7ff ff80 	bl	8001240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001340:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 8001346:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800134a:	6453      	str	r3, [r2, #68]	; 0x44
 800134c:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001358:	4b56      	ldr	r3, [pc, #344]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4a55      	ldr	r2, [pc, #340]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 800135e:	f043 0310 	orr.w	r3, r3, #16
 8001362:	6313      	str	r3, [r2, #48]	; 0x30
 8001364:	4b53      	ldr	r3, [pc, #332]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001370:	4b50      	ldr	r3, [pc, #320]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 8001376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b4d      	ldr	r3, [pc, #308]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001388:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a49      	ldr	r2, [pc, #292]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 800138e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001392:	6313      	str	r3, [r2, #48]	; 0x30
 8001394:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a0:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a43      	ldr	r2, [pc, #268]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 80013a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30
 80013ac:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013b8:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c2:	6313      	str	r3, [r2, #48]	; 0x30
 80013c4:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <HAL_LTDC_MspInit+0x1d8>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80013d0:	2310      	movs	r3, #16
 80013d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013e8:	230e      	movs	r3, #14
 80013ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4830      	ldr	r0, [pc, #192]	; (80014b8 <HAL_LTDC_MspInit+0x1dc>)
 80013f6:	f000 fc23 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80013fa:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80013fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001414:	230e      	movs	r3, #14
 8001416:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800141a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800141e:	4619      	mov	r1, r3
 8001420:	4826      	ldr	r0, [pc, #152]	; (80014bc <HAL_LTDC_MspInit+0x1e0>)
 8001422:	f000 fc0d 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001426:	23f7      	movs	r3, #247	; 0xf7
 8001428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800143e:	230e      	movs	r3, #14
 8001440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001444:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001448:	4619      	mov	r1, r3
 800144a:	481d      	ldr	r0, [pc, #116]	; (80014c0 <HAL_LTDC_MspInit+0x1e4>)
 800144c:	f000 fbf8 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800146a:	2309      	movs	r3, #9
 800146c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001474:	4619      	mov	r1, r3
 8001476:	4813      	ldr	r0, [pc, #76]	; (80014c4 <HAL_LTDC_MspInit+0x1e8>)
 8001478:	f000 fbe2 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800147c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001496:	230e      	movs	r3, #14
 8001498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800149c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4809      	ldr	r0, [pc, #36]	; (80014c8 <HAL_LTDC_MspInit+0x1ec>)
 80014a4:	f000 fbcc 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	37b8      	adds	r7, #184	; 0xb8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40016800 	.word	0x40016800
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40022400 	.word	0x40022400
 80014c0:	40022800 	.word	0x40022800
 80014c4:	40021800 	.word	0x40021800
 80014c8:	40022000 	.word	0x40022000

080014cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0ac      	sub	sp, #176	; 0xb0
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	2284      	movs	r2, #132	; 0x84
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 fb8d 	bl	8005c0c <memset>
  if(huart->Instance==USART1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <HAL_UART_MspInit+0xf4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d15c      	bne.n	80015b6 <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014fc:	2340      	movs	r3, #64	; 0x40
 80014fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001500:	2300      	movs	r3, #0
 8001502:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	4618      	mov	r0, r3
 800150a:	f001 fd03 	bl	8002f14 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001514:	f7ff fe94 	bl	8001240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <HAL_UART_MspInit+0xf8>)
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	4a29      	ldr	r2, [pc, #164]	; (80015c4 <HAL_UART_MspInit+0xf8>)
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	6453      	str	r3, [r2, #68]	; 0x44
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <HAL_UART_MspInit+0xf8>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_UART_MspInit+0xf8>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	4a23      	ldr	r2, [pc, #140]	; (80015c4 <HAL_UART_MspInit+0xf8>)
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	6313      	str	r3, [r2, #48]	; 0x30
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_UART_MspInit+0xf8>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_UART_MspInit+0xf8>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_UART_MspInit+0xf8>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6313      	str	r3, [r2, #48]	; 0x30
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_UART_MspInit+0xf8>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001578:	2307      	movs	r3, #7
 800157a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001582:	4619      	mov	r1, r3
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 8001586:	f000 fb5b 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800158a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a4:	2307      	movs	r3, #7
 80015a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015ae:	4619      	mov	r1, r3
 80015b0:	4806      	ldr	r0, [pc, #24]	; (80015cc <HAL_UART_MspInit+0x100>)
 80015b2:	f000 fb45 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	37b0      	adds	r7, #176	; 0xb0
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015e4:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_FMC_MspInit+0x100>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d16d      	bne.n	80016c8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80015ec:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_FMC_MspInit+0x100>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_FMC_MspInit+0x104>)
 80015f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f6:	4a37      	ldr	r2, [pc, #220]	; (80016d4 <HAL_FMC_MspInit+0x104>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6393      	str	r3, [r2, #56]	; 0x38
 80015fe:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <HAL_FMC_MspInit+0x104>)
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800160a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800160e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800161c:	230c      	movs	r3, #12
 800161e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	482c      	ldr	r0, [pc, #176]	; (80016d8 <HAL_FMC_MspInit+0x108>)
 8001626:	f000 fb0b 	bl	8001c40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800162a:	f248 1333 	movw	r3, #33075	; 0x8133
 800162e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800163c:	230c      	movs	r3, #12
 800163e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4825      	ldr	r0, [pc, #148]	; (80016dc <HAL_FMC_MspInit+0x10c>)
 8001646:	f000 fafb 	bl	8001c40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800164a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800164e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800165c:	230c      	movs	r3, #12
 800165e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	4619      	mov	r1, r3
 8001664:	481e      	ldr	r0, [pc, #120]	; (80016e0 <HAL_FMC_MspInit+0x110>)
 8001666:	f000 faeb 	bl	8001c40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800166a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800166e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800167c:	230c      	movs	r3, #12
 800167e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4817      	ldr	r0, [pc, #92]	; (80016e4 <HAL_FMC_MspInit+0x114>)
 8001686:	f000 fadb 	bl	8001c40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800168a:	2328      	movs	r3, #40	; 0x28
 800168c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800169a:	230c      	movs	r3, #12
 800169c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4811      	ldr	r0, [pc, #68]	; (80016e8 <HAL_FMC_MspInit+0x118>)
 80016a4:	f000 facc 	bl	8001c40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80016a8:	2308      	movs	r3, #8
 80016aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b8:	230c      	movs	r3, #12
 80016ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	4619      	mov	r1, r3
 80016c0:	480a      	ldr	r0, [pc, #40]	; (80016ec <HAL_FMC_MspInit+0x11c>)
 80016c2:	f000 fabd 	bl	8001c40 <HAL_GPIO_Init>
 80016c6:	e000      	b.n	80016ca <HAL_FMC_MspInit+0xfa>
    return;
 80016c8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000280 	.word	0x20000280
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40021800 	.word	0x40021800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40021400 	.word	0x40021400
 80016e8:	40021c00 	.word	0x40021c00
 80016ec:	40020800 	.word	0x40020800

080016f0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016f8:	f7ff ff6a 	bl	80015d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	2019      	movs	r0, #25
 800171a:	f000 f98b 	bl	8001a34 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800171e:	2019      	movs	r0, #25
 8001720:	f000 f9a4 	bl	8001a6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_InitTick+0xa0>)
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <HAL_InitTick+0xa0>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6453      	str	r3, [r2, #68]	; 0x44
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_InitTick+0xa0>)
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800173c:	f107 0210 	add.w	r2, r7, #16
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fbb2 	bl	8002eb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800174c:	f001 fb9c 	bl	8002e88 <HAL_RCC_GetPCLK2Freq>
 8001750:	4603      	mov	r3, r0
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <HAL_InitTick+0xa4>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0c9b      	lsrs	r3, r3, #18
 8001760:	3b01      	subs	r3, #1
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_InitTick+0xa8>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <HAL_InitTick+0xac>)
 8001768:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_InitTick+0xa8>)
 800176c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001770:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_InitTick+0xa8>)
 8001774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001776:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_InitTick+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_InitTick+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001784:	4809      	ldr	r0, [pc, #36]	; (80017ac <HAL_InitTick+0xa8>)
 8001786:	f001 ffe9 	bl	800375c <HAL_TIM_Base_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d104      	bne.n	800179a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001790:	4806      	ldr	r0, [pc, #24]	; (80017ac <HAL_InitTick+0xa8>)
 8001792:	f002 f845 	bl	8003820 <HAL_TIM_Base_Start_IT>
 8001796:	4603      	mov	r3, r0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3730      	adds	r7, #48	; 0x30
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	20004184 	.word	0x20004184
 80017b0:	40010000 	.word	0x40010000

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017e6:	f002 f893 	bl	8003910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20004184 	.word	0x20004184

080017f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001834:	4c0b      	ldr	r4, [pc, #44]	; (8001864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001842:	f7ff ffd7 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f004 f9bd 	bl	8005bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7fe fee1 	bl	8000610 <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800185c:	08005d2c 	.word	0x08005d2c
  ldr r2, =_sbss
 8001860:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001864:	200041d4 	.word	0x200041d4

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>

0800186a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186e:	2003      	movs	r0, #3
 8001870:	f000 f8d5 	bl	8001a1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001874:	200f      	movs	r0, #15
 8001876:	f7ff ff45 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187a:	f7ff fce7 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008
 80018a8:	200041d0 	.word	0x200041d0

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	200041d0 	.word	0x200041d0

080018c4 <__NVIC_SetPriorityGrouping>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <__NVIC_SetPriorityGrouping+0x40>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x40>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00
 8001908:	05fa0000 	.word	0x05fa0000

0800190c <__NVIC_GetPriorityGrouping>:
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff4c 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a46:	f7ff ff61 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	6978      	ldr	r0, [r7, #20]
 8001a52:	f7ff ffb1 	bl	80019b8 <NVIC_EncodePriority>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff80 	bl	8001964 <__NVIC_SetPriority>
}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff54 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e039      	b.n	8001b0e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fbf4 	bl	800129c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad8:	f023 0107 	bic.w	r1, r3, #7
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_DMA2D_Init+0x90>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68d1      	ldr	r1, [r2, #12]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	430b      	orrs	r3, r1
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	ffffc000 	.word	0xffffc000

08001b1c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_DMA2D_ConfigLayer+0x20>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e079      	b.n	8001c30 <HAL_DMA2D_ConfigLayer+0x114>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	3318      	adds	r3, #24
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	4313      	orrs	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_DMA2D_ConfigLayer+0x120>)
 8001b68:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b0a      	cmp	r3, #10
 8001b70:	d003      	beq.n	8001b7a <HAL_DMA2D_ConfigLayer+0x5e>
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b09      	cmp	r3, #9
 8001b78:	d107      	bne.n	8001b8a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e005      	b.n	8001b96 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	061b      	lsls	r3, r3, #24
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d120      	bne.n	8001bde <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	ea02 0103 	and.w	r1, r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b0a      	cmp	r3, #10
 8001bc4:	d003      	beq.n	8001bce <HAL_DMA2D_ConfigLayer+0xb2>
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b09      	cmp	r3, #9
 8001bcc:	d127      	bne.n	8001c1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
 8001bdc:	e01f      	b.n	8001c1e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69da      	ldr	r2, [r3, #28]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	ea02 0103 	and.w	r1, r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b0a      	cmp	r3, #10
 8001c06:	d003      	beq.n	8001c10 <HAL_DMA2D_ConfigLayer+0xf4>
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b09      	cmp	r3, #9
 8001c0e:	d106      	bne.n	8001c1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c1c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	ff03000f 	.word	0xff03000f

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e175      	b.n	8001f4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 8164 	bne.w	8001f46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d005      	beq.n	8001c96 <HAL_GPIO_Init+0x56>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d130      	bne.n	8001cf8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 0201 	and.w	r2, r3, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d017      	beq.n	8001d34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d123      	bne.n	8001d88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	69b9      	ldr	r1, [r7, #24]
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80be 	beq.w	8001f46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a65      	ldr	r2, [pc, #404]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001de2:	4a61      	ldr	r2, [pc, #388]	; (8001f68 <HAL_GPIO_Init+0x328>)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <HAL_GPIO_Init+0x32c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d037      	beq.n	8001e7e <HAL_GPIO_Init+0x23e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a57      	ldr	r2, [pc, #348]	; (8001f70 <HAL_GPIO_Init+0x330>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d031      	beq.n	8001e7a <HAL_GPIO_Init+0x23a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a56      	ldr	r2, [pc, #344]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d02b      	beq.n	8001e76 <HAL_GPIO_Init+0x236>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a55      	ldr	r2, [pc, #340]	; (8001f78 <HAL_GPIO_Init+0x338>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d025      	beq.n	8001e72 <HAL_GPIO_Init+0x232>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a54      	ldr	r2, [pc, #336]	; (8001f7c <HAL_GPIO_Init+0x33c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d01f      	beq.n	8001e6e <HAL_GPIO_Init+0x22e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a53      	ldr	r2, [pc, #332]	; (8001f80 <HAL_GPIO_Init+0x340>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d019      	beq.n	8001e6a <HAL_GPIO_Init+0x22a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a52      	ldr	r2, [pc, #328]	; (8001f84 <HAL_GPIO_Init+0x344>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_GPIO_Init+0x226>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a51      	ldr	r2, [pc, #324]	; (8001f88 <HAL_GPIO_Init+0x348>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00d      	beq.n	8001e62 <HAL_GPIO_Init+0x222>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a50      	ldr	r2, [pc, #320]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d007      	beq.n	8001e5e <HAL_GPIO_Init+0x21e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_GPIO_Init+0x21a>
 8001e56:	2309      	movs	r3, #9
 8001e58:	e012      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	e010      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e5e:	2308      	movs	r3, #8
 8001e60:	e00e      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e62:	2307      	movs	r3, #7
 8001e64:	e00c      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00a      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	e008      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e6e:	2304      	movs	r3, #4
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e72:	2303      	movs	r3, #3
 8001e74:	e004      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_GPIO_Init+0x240>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	f002 0203 	and.w	r2, r2, #3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	4093      	lsls	r3, r2
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e90:	4935      	ldr	r1, [pc, #212]	; (8001f68 <HAL_GPIO_Init+0x328>)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec2:	4a34      	ldr	r2, [pc, #208]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec8:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eec:	4a29      	ldr	r2, [pc, #164]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f16:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_GPIO_Init+0x354>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	f67f ae86 	bls.w	8001c60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40021400 	.word	0x40021400
 8001f84:	40021800 	.word	0x40021800
 8001f88:	40021c00 	.word	0x40021c00
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40022400 	.word	0x40022400
 8001f94:	40013c00 	.word	0x40013c00

08001f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa8:	787b      	ldrb	r3, [r7, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fb4:	e003      	b.n	8001fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	041a      	lsls	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	619a      	str	r2, [r3, #24]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0bf      	b.n	800215e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff f972 	bl	80012dc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800200e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6999      	ldr	r1, [r3, #24]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002024:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b4a      	ldr	r3, [pc, #296]	; (8002168 <HAL_LTDC_Init+0x19c>)
 8002040:	400b      	ands	r3, r1
 8002042:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68d9      	ldr	r1, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b3e      	ldr	r3, [pc, #248]	; (8002168 <HAL_LTDC_Init+0x19c>)
 800206e:	400b      	ands	r3, r1
 8002070:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	041b      	lsls	r3, r3, #16
 8002078:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68d9      	ldr	r1, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6919      	ldr	r1, [r3, #16]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_LTDC_Init+0x19c>)
 800209c:	400b      	ands	r3, r1
 800209e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	041b      	lsls	r3, r3, #16
 80020a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6919      	ldr	r1, [r3, #16]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6959      	ldr	r1, [r3, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_LTDC_Init+0x19c>)
 80020ca:	400b      	ands	r3, r1
 80020cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	041b      	lsls	r3, r3, #16
 80020d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6959      	ldr	r1, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0206 	orr.w	r2, r2, #6
 800213a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699a      	ldr	r2, [r3, #24]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	f000f800 	.word	0xf000f800

0800216c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800216c:	b5b0      	push	{r4, r5, r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_LTDC_ConfigLayer+0x1a>
 8002182:	2302      	movs	r3, #2
 8002184:	e02c      	b.n	80021e0 <HAL_LTDC_ConfigLayer+0x74>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2202      	movs	r2, #2
 8002192:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2134      	movs	r1, #52	; 0x34
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4614      	mov	r4, r2
 80021aa:	461d      	mov	r5, r3
 80021ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f811 	bl	80021e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2201      	movs	r2, #1
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bdb0      	pop	{r4, r5, r7, pc}

080021e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	0c1b      	lsrs	r3, r3, #16
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	4413      	add	r3, r2
 8002206:	041b      	lsls	r3, r3, #16
 8002208:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	01db      	lsls	r3, r3, #7
 8002214:	4413      	add	r3, r2
 8002216:	3384      	adds	r3, #132	; 0x84
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	4611      	mov	r1, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	01d2      	lsls	r2, r2, #7
 8002224:	440a      	add	r2, r1
 8002226:	3284      	adds	r2, #132	; 0x84
 8002228:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800222c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223e:	4413      	add	r3, r2
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4619      	mov	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	01db      	lsls	r3, r3, #7
 800224c:	440b      	add	r3, r1
 800224e:	3384      	adds	r3, #132	; 0x84
 8002250:	4619      	mov	r1, r3
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002266:	4413      	add	r3, r2
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	01db      	lsls	r3, r3, #7
 8002276:	4413      	add	r3, r2
 8002278:	3384      	adds	r3, #132	; 0x84
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	4611      	mov	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	01d2      	lsls	r2, r2, #7
 8002286:	440a      	add	r2, r1
 8002288:	3284      	adds	r2, #132	; 0x84
 800228a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800228e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800229e:	4413      	add	r3, r2
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4619      	mov	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	01db      	lsls	r3, r3, #7
 80022ac:	440b      	add	r3, r1
 80022ae:	3384      	adds	r3, #132	; 0x84
 80022b0:	4619      	mov	r1, r3
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	01db      	lsls	r3, r3, #7
 80022c2:	4413      	add	r3, r2
 80022c4:	3384      	adds	r3, #132	; 0x84
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	4611      	mov	r1, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	01d2      	lsls	r2, r2, #7
 80022d2:	440a      	add	r2, r1
 80022d4:	3284      	adds	r2, #132	; 0x84
 80022d6:	f023 0307 	bic.w	r3, r3, #7
 80022da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	01db      	lsls	r3, r3, #7
 80022e6:	4413      	add	r3, r2
 80022e8:	3384      	adds	r3, #132	; 0x84
 80022ea:	461a      	mov	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002302:	041b      	lsls	r3, r3, #16
 8002304:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	061b      	lsls	r3, r3, #24
 800230c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	01db      	lsls	r3, r3, #7
 8002318:	4413      	add	r3, r2
 800231a:	3384      	adds	r3, #132	; 0x84
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	01db      	lsls	r3, r3, #7
 8002328:	4413      	add	r3, r2
 800232a:	3384      	adds	r3, #132	; 0x84
 800232c:	461a      	mov	r2, r3
 800232e:	2300      	movs	r3, #0
 8002330:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002338:	461a      	mov	r2, r3
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	431a      	orrs	r2, r3
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	431a      	orrs	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4619      	mov	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	01db      	lsls	r3, r3, #7
 800234c:	440b      	add	r3, r1
 800234e:	3384      	adds	r3, #132	; 0x84
 8002350:	4619      	mov	r1, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	01db      	lsls	r3, r3, #7
 8002362:	4413      	add	r3, r2
 8002364:	3384      	adds	r3, #132	; 0x84
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	4611      	mov	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	01d2      	lsls	r2, r2, #7
 8002372:	440a      	add	r2, r1
 8002374:	3284      	adds	r2, #132	; 0x84
 8002376:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800237a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	01db      	lsls	r3, r3, #7
 8002386:	4413      	add	r3, r2
 8002388:	3384      	adds	r3, #132	; 0x84
 800238a:	461a      	mov	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	01db      	lsls	r3, r3, #7
 800239c:	4413      	add	r3, r2
 800239e:	3384      	adds	r3, #132	; 0x84
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	01db      	lsls	r3, r3, #7
 80023ac:	440b      	add	r3, r1
 80023ae:	3384      	adds	r3, #132	; 0x84
 80023b0:	4619      	mov	r1, r3
 80023b2:	4b58      	ldr	r3, [pc, #352]	; (8002514 <LTDC_SetConfig+0x32c>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	6809      	ldr	r1, [r1, #0]
 80023c4:	4608      	mov	r0, r1
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	01c9      	lsls	r1, r1, #7
 80023ca:	4401      	add	r1, r0
 80023cc:	3184      	adds	r1, #132	; 0x84
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	01db      	lsls	r3, r3, #7
 80023dc:	4413      	add	r3, r2
 80023de:	3384      	adds	r3, #132	; 0x84
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	01db      	lsls	r3, r3, #7
 80023ec:	4413      	add	r3, r2
 80023ee:	3384      	adds	r3, #132	; 0x84
 80023f0:	461a      	mov	r2, r3
 80023f2:	2300      	movs	r3, #0
 80023f4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	01db      	lsls	r3, r3, #7
 8002400:	4413      	add	r3, r2
 8002402:	3384      	adds	r3, #132	; 0x84
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002414:	2304      	movs	r3, #4
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	e01b      	b.n	8002452 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d102      	bne.n	8002428 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002422:	2303      	movs	r3, #3
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e014      	b.n	8002452 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2b04      	cmp	r3, #4
 800242e:	d00b      	beq.n	8002448 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002434:	2b02      	cmp	r3, #2
 8002436:	d007      	beq.n	8002448 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800243c:	2b03      	cmp	r3, #3
 800243e:	d003      	beq.n	8002448 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002444:	2b07      	cmp	r3, #7
 8002446:	d102      	bne.n	800244e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002448:	2302      	movs	r3, #2
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	e001      	b.n	8002452 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800244e:	2301      	movs	r3, #1
 8002450:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	01db      	lsls	r3, r3, #7
 800245c:	4413      	add	r3, r2
 800245e:	3384      	adds	r3, #132	; 0x84
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	4611      	mov	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	01d2      	lsls	r2, r2, #7
 800246c:	440a      	add	r2, r1
 800246e:	3284      	adds	r2, #132	; 0x84
 8002470:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002474:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	1acb      	subs	r3, r1, r3
 800248c:	69f9      	ldr	r1, [r7, #28]
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	3303      	adds	r3, #3
 8002494:	68f9      	ldr	r1, [r7, #12]
 8002496:	6809      	ldr	r1, [r1, #0]
 8002498:	4608      	mov	r0, r1
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	01c9      	lsls	r1, r1, #7
 800249e:	4401      	add	r1, r0
 80024a0:	3184      	adds	r1, #132	; 0x84
 80024a2:	4313      	orrs	r3, r2
 80024a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	01db      	lsls	r3, r3, #7
 80024b0:	4413      	add	r3, r2
 80024b2:	3384      	adds	r3, #132	; 0x84
 80024b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	01db      	lsls	r3, r3, #7
 80024c0:	440b      	add	r3, r1
 80024c2:	3384      	adds	r3, #132	; 0x84
 80024c4:	4619      	mov	r1, r3
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <LTDC_SetConfig+0x330>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	01db      	lsls	r3, r3, #7
 80024d6:	4413      	add	r3, r2
 80024d8:	3384      	adds	r3, #132	; 0x84
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	01db      	lsls	r3, r3, #7
 80024ec:	4413      	add	r3, r2
 80024ee:	3384      	adds	r3, #132	; 0x84
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	4611      	mov	r1, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	01d2      	lsls	r2, r2, #7
 80024fc:	440a      	add	r2, r1
 80024fe:	3284      	adds	r2, #132	; 0x84
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6013      	str	r3, [r2, #0]
}
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	fffff8f8 	.word	0xfffff8f8
 8002518:	fffff800 	.word	0xfffff800

0800251c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800254a:	f7ff f9af 	bl	80018ac <HAL_GetTick>
 800254e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002550:	e009      	b.n	8002566 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002552:	f7ff f9ab 	bl	80018ac <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002560:	d901      	bls.n	8002566 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e022      	b.n	80025ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002572:	d1ee      	bne.n	8002552 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800257a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002580:	f7ff f994 	bl	80018ac <HAL_GetTick>
 8002584:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002586:	e009      	b.n	800259c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002588:	f7ff f990 	bl	80018ac <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002596:	d901      	bls.n	800259c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e007      	b.n	80025ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025a8:	d1ee      	bne.n	8002588 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40007000 	.word	0x40007000

080025bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e291      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8087 	beq.w	80026ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e0:	4b96      	ldr	r3, [pc, #600]	; (800283c <HAL_RCC_OscConfig+0x280>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d00c      	beq.n	8002606 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ec:	4b93      	ldr	r3, [pc, #588]	; (800283c <HAL_RCC_OscConfig+0x280>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d112      	bne.n	800261e <HAL_RCC_OscConfig+0x62>
 80025f8:	4b90      	ldr	r3, [pc, #576]	; (800283c <HAL_RCC_OscConfig+0x280>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002604:	d10b      	bne.n	800261e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002606:	4b8d      	ldr	r3, [pc, #564]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d06c      	beq.n	80026ec <HAL_RCC_OscConfig+0x130>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d168      	bne.n	80026ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e26b      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x7a>
 8002628:	4b84      	ldr	r3, [pc, #528]	; (800283c <HAL_RCC_OscConfig+0x280>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a83      	ldr	r2, [pc, #524]	; (800283c <HAL_RCC_OscConfig+0x280>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e02e      	b.n	8002694 <HAL_RCC_OscConfig+0xd8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x9c>
 800263e:	4b7f      	ldr	r3, [pc, #508]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a7e      	ldr	r2, [pc, #504]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b7c      	ldr	r3, [pc, #496]	; (800283c <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a7b      	ldr	r2, [pc, #492]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e01d      	b.n	8002694 <HAL_RCC_OscConfig+0xd8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0xc0>
 8002662:	4b76      	ldr	r3, [pc, #472]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a75      	ldr	r2, [pc, #468]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b73      	ldr	r3, [pc, #460]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a72      	ldr	r2, [pc, #456]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0xd8>
 800267c:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_OscConfig+0x280>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a6e      	ldr	r2, [pc, #440]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b6c      	ldr	r3, [pc, #432]	; (800283c <HAL_RCC_OscConfig+0x280>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6b      	ldr	r2, [pc, #428]	; (800283c <HAL_RCC_OscConfig+0x280>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7ff f906 	bl	80018ac <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7ff f902 	bl	80018ac <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e21f      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	4b61      	ldr	r3, [pc, #388]	; (800283c <HAL_RCC_OscConfig+0x280>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe8>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7ff f8f2 	bl	80018ac <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7ff f8ee 	bl	80018ac <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e20b      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	4b57      	ldr	r3, [pc, #348]	; (800283c <HAL_RCC_OscConfig+0x280>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x110>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d069      	beq.n	80027ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fa:	4b50      	ldr	r3, [pc, #320]	; (800283c <HAL_RCC_OscConfig+0x280>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002706:	4b4d      	ldr	r3, [pc, #308]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	d11c      	bne.n	800274c <HAL_RCC_OscConfig+0x190>
 8002712:	4b4a      	ldr	r3, [pc, #296]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d116      	bne.n	800274c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x17a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e1df      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b41      	ldr	r3, [pc, #260]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	493d      	ldr	r1, [pc, #244]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	e040      	b.n	80027ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d023      	beq.n	800279c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002754:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a38      	ldr	r2, [pc, #224]	; (800283c <HAL_RCC_OscConfig+0x280>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7ff f8a4 	bl	80018ac <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002768:	f7ff f8a0 	bl	80018ac <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1bd      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_RCC_OscConfig+0x280>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4929      	ldr	r1, [pc, #164]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
 800279a:	e018      	b.n	80027ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_RCC_OscConfig+0x280>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a26      	ldr	r2, [pc, #152]	; (800283c <HAL_RCC_OscConfig+0x280>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7ff f880 	bl	80018ac <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b0:	f7ff f87c 	bl	80018ac <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e199      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <HAL_RCC_OscConfig+0x280>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d038      	beq.n	800284c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d019      	beq.n	8002816 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <HAL_RCC_OscConfig+0x280>)
 80027e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e6:	4a15      	ldr	r2, [pc, #84]	; (800283c <HAL_RCC_OscConfig+0x280>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ee:	f7ff f85d 	bl	80018ac <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f6:	f7ff f859 	bl	80018ac <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e176      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_RCC_OscConfig+0x280>)
 800280a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x23a>
 8002814:	e01a      	b.n	800284c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_OscConfig+0x280>)
 8002818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <HAL_RCC_OscConfig+0x280>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7ff f843 	bl	80018ac <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282a:	f7ff f83f 	bl	80018ac <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d903      	bls.n	8002840 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e15c      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
 800283c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002840:	4b91      	ldr	r3, [pc, #580]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ee      	bne.n	800282a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80a4 	beq.w	80029a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285a:	4b8b      	ldr	r3, [pc, #556]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10d      	bne.n	8002882 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a87      	ldr	r2, [pc, #540]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b85      	ldr	r3, [pc, #532]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287e:	2301      	movs	r3, #1
 8002880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002882:	4b82      	ldr	r3, [pc, #520]	; (8002a8c <HAL_RCC_OscConfig+0x4d0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d118      	bne.n	80028c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800288e:	4b7f      	ldr	r3, [pc, #508]	; (8002a8c <HAL_RCC_OscConfig+0x4d0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7e      	ldr	r2, [pc, #504]	; (8002a8c <HAL_RCC_OscConfig+0x4d0>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289a:	f7ff f807 	bl	80018ac <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a2:	f7ff f803 	bl	80018ac <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b64      	cmp	r3, #100	; 0x64
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e120      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b4:	4b75      	ldr	r3, [pc, #468]	; (8002a8c <HAL_RCC_OscConfig+0x4d0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x31a>
 80028c8:	4b6f      	ldr	r3, [pc, #444]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	4a6e      	ldr	r2, [pc, #440]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	; 0x70
 80028d4:	e02d      	b.n	8002932 <HAL_RCC_OscConfig+0x376>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x33c>
 80028de:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a69      	ldr	r2, [pc, #420]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a66      	ldr	r2, [pc, #408]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 80028f0:	f023 0304 	bic.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	e01c      	b.n	8002932 <HAL_RCC_OscConfig+0x376>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d10c      	bne.n	800291a <HAL_RCC_OscConfig+0x35e>
 8002900:	4b61      	ldr	r3, [pc, #388]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a60      	ldr	r2, [pc, #384]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002906:	f043 0304 	orr.w	r3, r3, #4
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
 800290c:	4b5e      	ldr	r3, [pc, #376]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a5d      	ldr	r2, [pc, #372]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
 8002918:	e00b      	b.n	8002932 <HAL_RCC_OscConfig+0x376>
 800291a:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a5a      	ldr	r2, [pc, #360]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
 8002926:	4b58      	ldr	r3, [pc, #352]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	4a57      	ldr	r2, [pc, #348]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 800292c:	f023 0304 	bic.w	r3, r3, #4
 8002930:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d015      	beq.n	8002966 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293a:	f7fe ffb7 	bl	80018ac <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002942:	f7fe ffb3 	bl	80018ac <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e0ce      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	4b4b      	ldr	r3, [pc, #300]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0ee      	beq.n	8002942 <HAL_RCC_OscConfig+0x386>
 8002964:	e014      	b.n	8002990 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002966:	f7fe ffa1 	bl	80018ac <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296c:	e00a      	b.n	8002984 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe ff9d 	bl	80018ac <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	; 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e0b8      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	4b40      	ldr	r3, [pc, #256]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1ee      	bne.n	800296e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d105      	bne.n	80029a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002996:	4b3c      	ldr	r3, [pc, #240]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a3b      	ldr	r2, [pc, #236]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 800299c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 80a4 	beq.w	8002af4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ac:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d06b      	beq.n	8002a90 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d149      	bne.n	8002a54 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c0:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a30      	ldr	r2, [pc, #192]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 80029c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe ff6e 	bl	80018ac <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe ff6a 	bl	80018ac <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e087      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	019b      	lsls	r3, r3, #6
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	061b      	lsls	r3, r3, #24
 8002a16:	4313      	orrs	r3, r2
 8002a18:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002a1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a1e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe ff3e 	bl	80018ac <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe ff3a 	bl	80018ac <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e057      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x478>
 8002a52:	e04f      	b.n	8002af4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe ff24 	bl	80018ac <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe ff20 	bl	80018ac <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e03d      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4ac>
 8002a86:	e035      	b.n	8002af4 <HAL_RCC_OscConfig+0x538>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_RCC_OscConfig+0x544>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d028      	beq.n	8002af0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d121      	bne.n	8002af0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d11a      	bne.n	8002af0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ac6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d111      	bne.n	8002af0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800

08002b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0d0      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d910      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b67      	ldr	r3, [pc, #412]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 020f 	bic.w	r2, r3, #15
 8002b32:	4965      	ldr	r1, [pc, #404]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b63      	ldr	r3, [pc, #396]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0b8      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b64:	4b59      	ldr	r3, [pc, #356]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b7c:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	494d      	ldr	r1, [pc, #308]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d040      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d115      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e07f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e073      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e06b      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4936      	ldr	r1, [pc, #216]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fe58 	bl	80018ac <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fe fe54 	bl	80018ac <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e053      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d210      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 020f 	bic.w	r2, r3, #15
 8002c3e:	4922      	ldr	r1, [pc, #136]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e032      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4916      	ldr	r1, [pc, #88]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	490e      	ldr	r1, [pc, #56]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c96:	f000 f821 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	490a      	ldr	r1, [pc, #40]	; (8002cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ca8:	5ccb      	ldrb	r3, [r1, r3]
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCC_ClockConfig+0x1d4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fd24 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023c00 	.word	0x40023c00
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08005d04 	.word	0x08005d04
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	20000004 	.word	0x20000004

08002cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cdc:	b5b0      	push	{r4, r5, r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	6079      	str	r1, [r7, #4]
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	60f9      	str	r1, [r7, #12]
 8002cea:	2100      	movs	r1, #0
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002cee:	2100      	movs	r1, #0
 8002cf0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf2:	4952      	ldr	r1, [pc, #328]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002cf4:	6889      	ldr	r1, [r1, #8]
 8002cf6:	f001 010c 	and.w	r1, r1, #12
 8002cfa:	2908      	cmp	r1, #8
 8002cfc:	d00d      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x3e>
 8002cfe:	2908      	cmp	r1, #8
 8002d00:	f200 8094 	bhi.w	8002e2c <HAL_RCC_GetSysClockFreq+0x150>
 8002d04:	2900      	cmp	r1, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x32>
 8002d08:	2904      	cmp	r1, #4
 8002d0a:	d003      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x38>
 8002d0c:	e08e      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d0e:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d10:	60bb      	str	r3, [r7, #8]
      break;
 8002d12:	e08e      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d14:	4b4b      	ldr	r3, [pc, #300]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d16:	60bb      	str	r3, [r7, #8]
      break;
 8002d18:	e08b      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d1a:	4948      	ldr	r1, [pc, #288]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d1c:	6849      	ldr	r1, [r1, #4]
 8002d1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002d22:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d24:	4945      	ldr	r1, [pc, #276]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d26:	6849      	ldr	r1, [r1, #4]
 8002d28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002d2c:	2900      	cmp	r1, #0
 8002d2e:	d024      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d30:	4942      	ldr	r1, [pc, #264]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d32:	6849      	ldr	r1, [r1, #4]
 8002d34:	0989      	lsrs	r1, r1, #6
 8002d36:	4608      	mov	r0, r1
 8002d38:	f04f 0100 	mov.w	r1, #0
 8002d3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002d40:	f04f 0500 	mov.w	r5, #0
 8002d44:	ea00 0204 	and.w	r2, r0, r4
 8002d48:	ea01 0305 	and.w	r3, r1, r5
 8002d4c:	493d      	ldr	r1, [pc, #244]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d4e:	fb01 f003 	mul.w	r0, r1, r3
 8002d52:	2100      	movs	r1, #0
 8002d54:	fb01 f102 	mul.w	r1, r1, r2
 8002d58:	1844      	adds	r4, r0, r1
 8002d5a:	493a      	ldr	r1, [pc, #232]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d5c:	fba2 0101 	umull	r0, r1, r2, r1
 8002d60:	1863      	adds	r3, r4, r1
 8002d62:	4619      	mov	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	f7fd fa50 	bl	8000210 <__aeabi_uldivmod>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4613      	mov	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e04a      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7a:	4b30      	ldr	r3, [pc, #192]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	099b      	lsrs	r3, r3, #6
 8002d80:	461a      	mov	r2, r3
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	ea02 0400 	and.w	r4, r2, r0
 8002d92:	ea03 0501 	and.w	r5, r3, r1
 8002d96:	4620      	mov	r0, r4
 8002d98:	4629      	mov	r1, r5
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	014b      	lsls	r3, r1, #5
 8002da4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002da8:	0142      	lsls	r2, r0, #5
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	1b00      	subs	r0, r0, r4
 8002db0:	eb61 0105 	sbc.w	r1, r1, r5
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	018b      	lsls	r3, r1, #6
 8002dbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dc2:	0182      	lsls	r2, r0, #6
 8002dc4:	1a12      	subs	r2, r2, r0
 8002dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dca:	f04f 0000 	mov.w	r0, #0
 8002dce:	f04f 0100 	mov.w	r1, #0
 8002dd2:	00d9      	lsls	r1, r3, #3
 8002dd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dd8:	00d0      	lsls	r0, r2, #3
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	1912      	adds	r2, r2, r4
 8002de0:	eb45 0303 	adc.w	r3, r5, r3
 8002de4:	f04f 0000 	mov.w	r0, #0
 8002de8:	f04f 0100 	mov.w	r1, #0
 8002dec:	0299      	lsls	r1, r3, #10
 8002dee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002df2:	0290      	lsls	r0, r2, #10
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	f7fd fa04 	bl	8000210 <__aeabi_uldivmod>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	60bb      	str	r3, [r7, #8]
      break;
 8002e2a:	e002      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x164>)
 8002e2e:	60bb      	str	r3, [r7, #8]
      break;
 8002e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e32:	68bb      	ldr	r3, [r7, #8]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	00f42400 	.word	0x00f42400
 8002e44:	017d7840 	.word	0x017d7840

08002e48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000000 	.word	0x20000000

08002e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e64:	f7ff fff0 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0a9b      	lsrs	r3, r3, #10
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4903      	ldr	r1, [pc, #12]	; (8002e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08005d14 	.word	0x08005d14

08002e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e8c:	f7ff ffdc 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0b5b      	lsrs	r3, r3, #13
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4903      	ldr	r1, [pc, #12]	; (8002eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	08005d14 	.word	0x08005d14

08002eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0203 	and.w	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ef2:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <HAL_RCC_GetClockConfig+0x60>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 020f 	and.w	r2, r3, #15
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	601a      	str	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40023c00 	.word	0x40023c00

08002f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d012      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f3c:	4b69      	ldr	r3, [pc, #420]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a68      	ldr	r2, [pc, #416]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f46:	6093      	str	r3, [r2, #8]
 8002f48:	4b66      	ldr	r3, [pc, #408]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	4964      	ldr	r1, [pc, #400]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d017      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f6e:	4b5d      	ldr	r3, [pc, #372]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	4959      	ldr	r1, [pc, #356]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d017      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002faa:	4b4e      	ldr	r3, [pc, #312]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	494a      	ldr	r1, [pc, #296]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc8:	d101      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 808b 	beq.w	800310e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	4a39      	ldr	r2, [pc, #228]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003002:	6413      	str	r3, [r2, #64]	; 0x40
 8003004:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003010:	4b35      	ldr	r3, [pc, #212]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a34      	ldr	r2, [pc, #208]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301c:	f7fe fc46 	bl	80018ac <HAL_GetTick>
 8003020:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003024:	f7fe fc42 	bl	80018ac <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e357      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d035      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	429a      	cmp	r2, r3
 800305e:	d02e      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003060:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003068:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003080:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003082:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d114      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fc0a 	bl	80018ac <HAL_GetTick>
 8003098:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309a:	e00a      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7fe fc06 	bl	80018ac <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e319      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0ee      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ca:	d111      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030da:	400b      	ands	r3, r1
 80030dc:	4901      	ldr	r1, [pc, #4]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
 80030e2:	e00b      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40007000 	.word	0x40007000
 80030ec:	0ffffcff 	.word	0x0ffffcff
 80030f0:	4bb1      	ldr	r3, [pc, #708]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4ab0      	ldr	r2, [pc, #704]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030fa:	6093      	str	r3, [r2, #8]
 80030fc:	4bae      	ldr	r3, [pc, #696]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003108:	49ab      	ldr	r1, [pc, #684]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d010      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800311a:	4ba7      	ldr	r3, [pc, #668]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800311c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003120:	4aa5      	ldr	r2, [pc, #660]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003126:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800312a:	4ba3      	ldr	r3, [pc, #652]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800312c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	49a0      	ldr	r1, [pc, #640]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003148:	4b9b      	ldr	r3, [pc, #620]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003156:	4998      	ldr	r1, [pc, #608]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800316a:	4b93      	ldr	r3, [pc, #588]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003170:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003178:	498f      	ldr	r1, [pc, #572]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800318c:	4b8a      	ldr	r3, [pc, #552]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319a:	4987      	ldr	r1, [pc, #540]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031ae:	4b82      	ldr	r3, [pc, #520]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	497e      	ldr	r1, [pc, #504]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d0:	4b79      	ldr	r3, [pc, #484]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	4976      	ldr	r1, [pc, #472]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031f2:	4b71      	ldr	r3, [pc, #452]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f023 020c 	bic.w	r2, r3, #12
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003200:	496d      	ldr	r1, [pc, #436]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003214:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003222:	4965      	ldr	r1, [pc, #404]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003236:	4b60      	ldr	r3, [pc, #384]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003244:	495c      	ldr	r1, [pc, #368]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003258:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	4954      	ldr	r1, [pc, #336]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800327a:	4b4f      	ldr	r3, [pc, #316]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003288:	494b      	ldr	r1, [pc, #300]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800329c:	4b46      	ldr	r3, [pc, #280]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	4943      	ldr	r1, [pc, #268]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032be:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032cc:	493a      	ldr	r1, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032e0:	4b35      	ldr	r3, [pc, #212]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ee:	4932      	ldr	r1, [pc, #200]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d011      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003302:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003310:	4929      	ldr	r1, [pc, #164]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800331c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003320:	d101      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003322:	2301      	movs	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003332:	2301      	movs	r3, #1
 8003334:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003342:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003350:	4919      	ldr	r1, [pc, #100]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003374:	4910      	ldr	r1, [pc, #64]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d006      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80d9 	beq.w	8003542 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003396:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800339a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339c:	f7fe fa86 	bl	80018ac <HAL_GetTick>
 80033a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033a2:	e00b      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033a4:	f7fe fa82 	bl	80018ac <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d904      	bls.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e197      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033bc:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ed      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d021      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d11d      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033dc:	4b64      	ldr	r3, [pc, #400]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033ea:	4b61      	ldr	r3, [pc, #388]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f0:	0e1b      	lsrs	r3, r3, #24
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	019a      	lsls	r2, r3, #6
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	061b      	lsls	r3, r3, #24
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	071b      	lsls	r3, r3, #28
 8003410:	4957      	ldr	r1, [pc, #348]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02e      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003442:	d129      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003444:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003452:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003458:	0f1b      	lsrs	r3, r3, #28
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	019a      	lsls	r2, r3, #6
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	071b      	lsls	r3, r3, #28
 8003478:	493d      	ldr	r1, [pc, #244]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003480:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003486:	f023 021f 	bic.w	r2, r3, #31
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	3b01      	subs	r3, #1
 8003490:	4937      	ldr	r1, [pc, #220]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01d      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034a4:	4b32      	ldr	r3, [pc, #200]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034aa:	0e1b      	lsrs	r3, r3, #24
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b8:	0f1b      	lsrs	r3, r3, #28
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	019a      	lsls	r2, r3, #6
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	041b      	lsls	r3, r3, #16
 80034cc:	431a      	orrs	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	431a      	orrs	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	071b      	lsls	r3, r3, #28
 80034d8:	4925      	ldr	r1, [pc, #148]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d011      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	019a      	lsls	r2, r3, #6
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	071b      	lsls	r3, r3, #28
 8003508:	4919      	ldr	r1, [pc, #100]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003510:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a16      	ldr	r2, [pc, #88]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003516:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800351a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800351c:	f7fe f9c6 	bl	80018ac <HAL_GetTick>
 8003520:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003524:	f7fe f9c2 	bl	80018ac <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0d7      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	f040 80cd 	bne.w	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003556:	f7fe f9a9 	bl	80018ac <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800355e:	f7fe f9a5 	bl	80018ac <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b64      	cmp	r3, #100	; 0x64
 800356a:	d903      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0ba      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003570:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003574:	4b5e      	ldr	r3, [pc, #376]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800357c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003580:	d0ed      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d02e      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d12a      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035aa:	4b51      	ldr	r3, [pc, #324]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035b8:	4b4d      	ldr	r3, [pc, #308]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	0f1b      	lsrs	r3, r3, #28
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	019a      	lsls	r2, r3, #6
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	061b      	lsls	r3, r3, #24
 80035d8:	431a      	orrs	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	071b      	lsls	r3, r3, #28
 80035de:	4944      	ldr	r1, [pc, #272]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035e6:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	3b01      	subs	r3, #1
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	493d      	ldr	r1, [pc, #244]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d022      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003614:	d11d      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003616:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	0e1b      	lsrs	r3, r3, #24
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003624:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	0f1b      	lsrs	r3, r3, #28
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	019a      	lsls	r2, r3, #6
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	431a      	orrs	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	061b      	lsls	r3, r3, #24
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	071b      	lsls	r3, r3, #28
 800364a:	4929      	ldr	r1, [pc, #164]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d028      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003664:	0e1b      	lsrs	r3, r3, #24
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800366c:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	0c1b      	lsrs	r3, r3, #16
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	019a      	lsls	r2, r3, #6
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	431a      	orrs	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	071b      	lsls	r3, r3, #28
 8003692:	4917      	ldr	r1, [pc, #92]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800369c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4911      	ldr	r1, [pc, #68]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036bc:	f7fe f8f6 	bl	80018ac <HAL_GetTick>
 80036c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036c4:	f7fe f8f2 	bl	80018ac <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e007      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e2:	d1ef      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e025      	b.n	8003754 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fd ffe7 	bl	80016f0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	4619      	mov	r1, r3
 8003734:	4610      	mov	r0, r2
 8003736:	f000 ff3b 	bl	80045b0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	461a      	mov	r2, r3
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	f000 ff8f 	bl	8004668 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e049      	b.n	8003802 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f841 	bl	800380a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	4619      	mov	r1, r3
 800379a:	4610      	mov	r0, r2
 800379c:	f000 fa00 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d001      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e054      	b.n	80038e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a26      	ldr	r2, [pc, #152]	; (80038f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x80>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d01d      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x80>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a22      	ldr	r2, [pc, #136]	; (80038f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d018      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x80>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x80>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <HAL_TIM_Base_Start_IT+0xdc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00e      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x80>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_TIM_Base_Start_IT+0xe0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x80>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <HAL_TIM_Base_Start_IT+0xe4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x80>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_TIM_Base_Start_IT+0xe8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d115      	bne.n	80038cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	4b19      	ldr	r3, [pc, #100]	; (800390c <HAL_TIM_Base_Start_IT+0xec>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d015      	beq.n	80038de <HAL_TIM_Base_Start_IT+0xbe>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b8:	d011      	beq.n	80038de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ca:	e008      	b.n	80038de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	e000      	b.n	80038e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40010000 	.word	0x40010000
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800
 80038fc:	40000c00 	.word	0x40000c00
 8003900:	40010400 	.word	0x40010400
 8003904:	40014000 	.word	0x40014000
 8003908:	40001800 	.word	0x40001800
 800390c:	00010007 	.word	0x00010007

08003910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b02      	cmp	r3, #2
 8003924:	d122      	bne.n	800396c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b02      	cmp	r3, #2
 8003932:	d11b      	bne.n	800396c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0202 	mvn.w	r2, #2
 800393c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f905 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 8003958:	e005      	b.n	8003966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f8f7 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f908 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b04      	cmp	r3, #4
 8003978:	d122      	bne.n	80039c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b04      	cmp	r3, #4
 8003986:	d11b      	bne.n	80039c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0204 	mvn.w	r2, #4
 8003990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f8db 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 80039ac:	e005      	b.n	80039ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8cd 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f8de 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d122      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d11b      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0208 	mvn.w	r2, #8
 80039e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2204      	movs	r2, #4
 80039ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f8b1 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 8003a00:	e005      	b.n	8003a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f8a3 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8b4 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d122      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d11b      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0210 	mvn.w	r2, #16
 8003a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f887 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 8003a54:	e005      	b.n	8003a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f879 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f88a 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d10e      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0201 	mvn.w	r2, #1
 8003a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fbc4 	bl	800121c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b80      	cmp	r3, #128	; 0x80
 8003aa0:	d10e      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aac:	2b80      	cmp	r3, #128	; 0x80
 8003aae:	d107      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f91a 	bl	8003cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ace:	d10e      	bne.n	8003aee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ada:	2b80      	cmp	r3, #128	; 0x80
 8003adc:	d107      	bne.n	8003aee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f90d 	bl	8003d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d10e      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d107      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f838 	bl	8003b8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d10e      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d107      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f06f 0220 	mvn.w	r2, #32
 8003b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8cd 	bl	8003ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a40      	ldr	r2, [pc, #256]	; (8003cb4 <TIM_Base_SetConfig+0x114>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d00f      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3d      	ldr	r2, [pc, #244]	; (8003cb8 <TIM_Base_SetConfig+0x118>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3c      	ldr	r2, [pc, #240]	; (8003cbc <TIM_Base_SetConfig+0x11c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d007      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <TIM_Base_SetConfig+0x120>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3a      	ldr	r2, [pc, #232]	; (8003cc4 <TIM_Base_SetConfig+0x124>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d108      	bne.n	8003bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2f      	ldr	r2, [pc, #188]	; (8003cb4 <TIM_Base_SetConfig+0x114>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d027      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2c      	ldr	r2, [pc, #176]	; (8003cb8 <TIM_Base_SetConfig+0x118>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d023      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <TIM_Base_SetConfig+0x11c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01f      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <TIM_Base_SetConfig+0x120>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a29      	ldr	r2, [pc, #164]	; (8003cc4 <TIM_Base_SetConfig+0x124>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d017      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <TIM_Base_SetConfig+0x128>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a27      	ldr	r2, [pc, #156]	; (8003ccc <TIM_Base_SetConfig+0x12c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00f      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <TIM_Base_SetConfig+0x130>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a25      	ldr	r2, [pc, #148]	; (8003cd4 <TIM_Base_SetConfig+0x134>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a24      	ldr	r2, [pc, #144]	; (8003cd8 <TIM_Base_SetConfig+0x138>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <TIM_Base_SetConfig+0x13c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <TIM_Base_SetConfig+0x114>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0xf8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <TIM_Base_SetConfig+0x124>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d103      	bne.n	8003ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	615a      	str	r2, [r3, #20]
}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40000c00 	.word	0x40000c00
 8003cc4:	40010400 	.word	0x40010400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800
 8003cd4:	40001800 	.word	0x40001800
 8003cd8:	40001c00 	.word	0x40001c00
 8003cdc:	40002000 	.word	0x40002000

08003ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e040      	b.n	8003db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fd fbc4 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2224      	movs	r2, #36	; 0x24
 8003d48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0201 	bic.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f82c 	bl	8003db8 <UART_SetConfig>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e022      	b.n	8003db0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa82 	bl	800427c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fb09 	bl	80043c0 <UART_CheckIdleState>
 8003dae:	4603      	mov	r3, r0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4ba7      	ldr	r3, [pc, #668]	; (8004080 <UART_SetConfig+0x2c8>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a95      	ldr	r2, [pc, #596]	; (8004084 <UART_SetConfig+0x2cc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d120      	bne.n	8003e76 <UART_SetConfig+0xbe>
 8003e34:	4b94      	ldr	r3, [pc, #592]	; (8004088 <UART_SetConfig+0x2d0>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d816      	bhi.n	8003e70 <UART_SetConfig+0xb8>
 8003e42:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <UART_SetConfig+0x90>)
 8003e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e48:	08003e59 	.word	0x08003e59
 8003e4c:	08003e65 	.word	0x08003e65
 8003e50:	08003e5f 	.word	0x08003e5f
 8003e54:	08003e6b 	.word	0x08003e6b
 8003e58:	2301      	movs	r3, #1
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e14f      	b.n	80040fe <UART_SetConfig+0x346>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e14c      	b.n	80040fe <UART_SetConfig+0x346>
 8003e64:	2304      	movs	r3, #4
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e149      	b.n	80040fe <UART_SetConfig+0x346>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e146      	b.n	80040fe <UART_SetConfig+0x346>
 8003e70:	2310      	movs	r3, #16
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e143      	b.n	80040fe <UART_SetConfig+0x346>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a84      	ldr	r2, [pc, #528]	; (800408c <UART_SetConfig+0x2d4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d132      	bne.n	8003ee6 <UART_SetConfig+0x12e>
 8003e80:	4b81      	ldr	r3, [pc, #516]	; (8004088 <UART_SetConfig+0x2d0>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b0c      	cmp	r3, #12
 8003e8c:	d828      	bhi.n	8003ee0 <UART_SetConfig+0x128>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <UART_SetConfig+0xdc>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ec9 	.word	0x08003ec9
 8003e98:	08003ee1 	.word	0x08003ee1
 8003e9c:	08003ee1 	.word	0x08003ee1
 8003ea0:	08003ee1 	.word	0x08003ee1
 8003ea4:	08003ed5 	.word	0x08003ed5
 8003ea8:	08003ee1 	.word	0x08003ee1
 8003eac:	08003ee1 	.word	0x08003ee1
 8003eb0:	08003ee1 	.word	0x08003ee1
 8003eb4:	08003ecf 	.word	0x08003ecf
 8003eb8:	08003ee1 	.word	0x08003ee1
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003ee1 	.word	0x08003ee1
 8003ec4:	08003edb 	.word	0x08003edb
 8003ec8:	2300      	movs	r3, #0
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e117      	b.n	80040fe <UART_SetConfig+0x346>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	e114      	b.n	80040fe <UART_SetConfig+0x346>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e111      	b.n	80040fe <UART_SetConfig+0x346>
 8003eda:	2308      	movs	r3, #8
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e10e      	b.n	80040fe <UART_SetConfig+0x346>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e10b      	b.n	80040fe <UART_SetConfig+0x346>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a69      	ldr	r2, [pc, #420]	; (8004090 <UART_SetConfig+0x2d8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d120      	bne.n	8003f32 <UART_SetConfig+0x17a>
 8003ef0:	4b65      	ldr	r3, [pc, #404]	; (8004088 <UART_SetConfig+0x2d0>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003efa:	2b30      	cmp	r3, #48	; 0x30
 8003efc:	d013      	beq.n	8003f26 <UART_SetConfig+0x16e>
 8003efe:	2b30      	cmp	r3, #48	; 0x30
 8003f00:	d814      	bhi.n	8003f2c <UART_SetConfig+0x174>
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d009      	beq.n	8003f1a <UART_SetConfig+0x162>
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d810      	bhi.n	8003f2c <UART_SetConfig+0x174>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <UART_SetConfig+0x15c>
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d006      	beq.n	8003f20 <UART_SetConfig+0x168>
 8003f12:	e00b      	b.n	8003f2c <UART_SetConfig+0x174>
 8003f14:	2300      	movs	r3, #0
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e0f1      	b.n	80040fe <UART_SetConfig+0x346>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	77fb      	strb	r3, [r7, #31]
 8003f1e:	e0ee      	b.n	80040fe <UART_SetConfig+0x346>
 8003f20:	2304      	movs	r3, #4
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e0eb      	b.n	80040fe <UART_SetConfig+0x346>
 8003f26:	2308      	movs	r3, #8
 8003f28:	77fb      	strb	r3, [r7, #31]
 8003f2a:	e0e8      	b.n	80040fe <UART_SetConfig+0x346>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e0e5      	b.n	80040fe <UART_SetConfig+0x346>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a57      	ldr	r2, [pc, #348]	; (8004094 <UART_SetConfig+0x2dc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d120      	bne.n	8003f7e <UART_SetConfig+0x1c6>
 8003f3c:	4b52      	ldr	r3, [pc, #328]	; (8004088 <UART_SetConfig+0x2d0>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f46:	2bc0      	cmp	r3, #192	; 0xc0
 8003f48:	d013      	beq.n	8003f72 <UART_SetConfig+0x1ba>
 8003f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f4c:	d814      	bhi.n	8003f78 <UART_SetConfig+0x1c0>
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d009      	beq.n	8003f66 <UART_SetConfig+0x1ae>
 8003f52:	2b80      	cmp	r3, #128	; 0x80
 8003f54:	d810      	bhi.n	8003f78 <UART_SetConfig+0x1c0>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <UART_SetConfig+0x1a8>
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d006      	beq.n	8003f6c <UART_SetConfig+0x1b4>
 8003f5e:	e00b      	b.n	8003f78 <UART_SetConfig+0x1c0>
 8003f60:	2300      	movs	r3, #0
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e0cb      	b.n	80040fe <UART_SetConfig+0x346>
 8003f66:	2302      	movs	r3, #2
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e0c8      	b.n	80040fe <UART_SetConfig+0x346>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e0c5      	b.n	80040fe <UART_SetConfig+0x346>
 8003f72:	2308      	movs	r3, #8
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e0c2      	b.n	80040fe <UART_SetConfig+0x346>
 8003f78:	2310      	movs	r3, #16
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e0bf      	b.n	80040fe <UART_SetConfig+0x346>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a45      	ldr	r2, [pc, #276]	; (8004098 <UART_SetConfig+0x2e0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d125      	bne.n	8003fd4 <UART_SetConfig+0x21c>
 8003f88:	4b3f      	ldr	r3, [pc, #252]	; (8004088 <UART_SetConfig+0x2d0>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f96:	d017      	beq.n	8003fc8 <UART_SetConfig+0x210>
 8003f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f9c:	d817      	bhi.n	8003fce <UART_SetConfig+0x216>
 8003f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa2:	d00b      	beq.n	8003fbc <UART_SetConfig+0x204>
 8003fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa8:	d811      	bhi.n	8003fce <UART_SetConfig+0x216>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <UART_SetConfig+0x1fe>
 8003fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb2:	d006      	beq.n	8003fc2 <UART_SetConfig+0x20a>
 8003fb4:	e00b      	b.n	8003fce <UART_SetConfig+0x216>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e0a0      	b.n	80040fe <UART_SetConfig+0x346>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e09d      	b.n	80040fe <UART_SetConfig+0x346>
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e09a      	b.n	80040fe <UART_SetConfig+0x346>
 8003fc8:	2308      	movs	r3, #8
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e097      	b.n	80040fe <UART_SetConfig+0x346>
 8003fce:	2310      	movs	r3, #16
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e094      	b.n	80040fe <UART_SetConfig+0x346>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a30      	ldr	r2, [pc, #192]	; (800409c <UART_SetConfig+0x2e4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d125      	bne.n	800402a <UART_SetConfig+0x272>
 8003fde:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <UART_SetConfig+0x2d0>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fec:	d017      	beq.n	800401e <UART_SetConfig+0x266>
 8003fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ff2:	d817      	bhi.n	8004024 <UART_SetConfig+0x26c>
 8003ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff8:	d00b      	beq.n	8004012 <UART_SetConfig+0x25a>
 8003ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffe:	d811      	bhi.n	8004024 <UART_SetConfig+0x26c>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <UART_SetConfig+0x254>
 8004004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004008:	d006      	beq.n	8004018 <UART_SetConfig+0x260>
 800400a:	e00b      	b.n	8004024 <UART_SetConfig+0x26c>
 800400c:	2301      	movs	r3, #1
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	e075      	b.n	80040fe <UART_SetConfig+0x346>
 8004012:	2302      	movs	r3, #2
 8004014:	77fb      	strb	r3, [r7, #31]
 8004016:	e072      	b.n	80040fe <UART_SetConfig+0x346>
 8004018:	2304      	movs	r3, #4
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e06f      	b.n	80040fe <UART_SetConfig+0x346>
 800401e:	2308      	movs	r3, #8
 8004020:	77fb      	strb	r3, [r7, #31]
 8004022:	e06c      	b.n	80040fe <UART_SetConfig+0x346>
 8004024:	2310      	movs	r3, #16
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	e069      	b.n	80040fe <UART_SetConfig+0x346>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <UART_SetConfig+0x2e8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d137      	bne.n	80040a4 <UART_SetConfig+0x2ec>
 8004034:	4b14      	ldr	r3, [pc, #80]	; (8004088 <UART_SetConfig+0x2d0>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800403e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004042:	d017      	beq.n	8004074 <UART_SetConfig+0x2bc>
 8004044:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004048:	d817      	bhi.n	800407a <UART_SetConfig+0x2c2>
 800404a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404e:	d00b      	beq.n	8004068 <UART_SetConfig+0x2b0>
 8004050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004054:	d811      	bhi.n	800407a <UART_SetConfig+0x2c2>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <UART_SetConfig+0x2aa>
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405e:	d006      	beq.n	800406e <UART_SetConfig+0x2b6>
 8004060:	e00b      	b.n	800407a <UART_SetConfig+0x2c2>
 8004062:	2300      	movs	r3, #0
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e04a      	b.n	80040fe <UART_SetConfig+0x346>
 8004068:	2302      	movs	r3, #2
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e047      	b.n	80040fe <UART_SetConfig+0x346>
 800406e:	2304      	movs	r3, #4
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e044      	b.n	80040fe <UART_SetConfig+0x346>
 8004074:	2308      	movs	r3, #8
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e041      	b.n	80040fe <UART_SetConfig+0x346>
 800407a:	2310      	movs	r3, #16
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e03e      	b.n	80040fe <UART_SetConfig+0x346>
 8004080:	efff69f3 	.word	0xefff69f3
 8004084:	40011000 	.word	0x40011000
 8004088:	40023800 	.word	0x40023800
 800408c:	40004400 	.word	0x40004400
 8004090:	40004800 	.word	0x40004800
 8004094:	40004c00 	.word	0x40004c00
 8004098:	40005000 	.word	0x40005000
 800409c:	40011400 	.word	0x40011400
 80040a0:	40007800 	.word	0x40007800
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a71      	ldr	r2, [pc, #452]	; (8004270 <UART_SetConfig+0x4b8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d125      	bne.n	80040fa <UART_SetConfig+0x342>
 80040ae:	4b71      	ldr	r3, [pc, #452]	; (8004274 <UART_SetConfig+0x4bc>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040bc:	d017      	beq.n	80040ee <UART_SetConfig+0x336>
 80040be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040c2:	d817      	bhi.n	80040f4 <UART_SetConfig+0x33c>
 80040c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c8:	d00b      	beq.n	80040e2 <UART_SetConfig+0x32a>
 80040ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ce:	d811      	bhi.n	80040f4 <UART_SetConfig+0x33c>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <UART_SetConfig+0x324>
 80040d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d8:	d006      	beq.n	80040e8 <UART_SetConfig+0x330>
 80040da:	e00b      	b.n	80040f4 <UART_SetConfig+0x33c>
 80040dc:	2300      	movs	r3, #0
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e00d      	b.n	80040fe <UART_SetConfig+0x346>
 80040e2:	2302      	movs	r3, #2
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e00a      	b.n	80040fe <UART_SetConfig+0x346>
 80040e8:	2304      	movs	r3, #4
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e007      	b.n	80040fe <UART_SetConfig+0x346>
 80040ee:	2308      	movs	r3, #8
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e004      	b.n	80040fe <UART_SetConfig+0x346>
 80040f4:	2310      	movs	r3, #16
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e001      	b.n	80040fe <UART_SetConfig+0x346>
 80040fa:	2310      	movs	r3, #16
 80040fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004106:	d15a      	bne.n	80041be <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004108:	7ffb      	ldrb	r3, [r7, #31]
 800410a:	2b08      	cmp	r3, #8
 800410c:	d827      	bhi.n	800415e <UART_SetConfig+0x3a6>
 800410e:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <UART_SetConfig+0x35c>)
 8004110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004114:	08004139 	.word	0x08004139
 8004118:	08004141 	.word	0x08004141
 800411c:	08004149 	.word	0x08004149
 8004120:	0800415f 	.word	0x0800415f
 8004124:	0800414f 	.word	0x0800414f
 8004128:	0800415f 	.word	0x0800415f
 800412c:	0800415f 	.word	0x0800415f
 8004130:	0800415f 	.word	0x0800415f
 8004134:	08004157 	.word	0x08004157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004138:	f7fe fe92 	bl	8002e60 <HAL_RCC_GetPCLK1Freq>
 800413c:	61b8      	str	r0, [r7, #24]
        break;
 800413e:	e013      	b.n	8004168 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004140:	f7fe fea2 	bl	8002e88 <HAL_RCC_GetPCLK2Freq>
 8004144:	61b8      	str	r0, [r7, #24]
        break;
 8004146:	e00f      	b.n	8004168 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004148:	4b4b      	ldr	r3, [pc, #300]	; (8004278 <UART_SetConfig+0x4c0>)
 800414a:	61bb      	str	r3, [r7, #24]
        break;
 800414c:	e00c      	b.n	8004168 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800414e:	f7fe fdc5 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8004152:	61b8      	str	r0, [r7, #24]
        break;
 8004154:	e008      	b.n	8004168 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800415a:	61bb      	str	r3, [r7, #24]
        break;
 800415c:	e004      	b.n	8004168 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	77bb      	strb	r3, [r7, #30]
        break;
 8004166:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d074      	beq.n	8004258 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	005a      	lsls	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	441a      	add	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b0f      	cmp	r3, #15
 8004188:	d916      	bls.n	80041b8 <UART_SetConfig+0x400>
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004190:	d212      	bcs.n	80041b8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f023 030f 	bic.w	r3, r3, #15
 800419a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	89fa      	ldrh	r2, [r7, #14]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	e04f      	b.n	8004258 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	77bb      	strb	r3, [r7, #30]
 80041bc:	e04c      	b.n	8004258 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041be:	7ffb      	ldrb	r3, [r7, #31]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d828      	bhi.n	8004216 <UART_SetConfig+0x45e>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x414>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004217 	.word	0x08004217
 80041dc:	08004207 	.word	0x08004207
 80041e0:	08004217 	.word	0x08004217
 80041e4:	08004217 	.word	0x08004217
 80041e8:	08004217 	.word	0x08004217
 80041ec:	0800420f 	.word	0x0800420f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7fe fe36 	bl	8002e60 <HAL_RCC_GetPCLK1Freq>
 80041f4:	61b8      	str	r0, [r7, #24]
        break;
 80041f6:	e013      	b.n	8004220 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f8:	f7fe fe46 	bl	8002e88 <HAL_RCC_GetPCLK2Freq>
 80041fc:	61b8      	str	r0, [r7, #24]
        break;
 80041fe:	e00f      	b.n	8004220 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004200:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <UART_SetConfig+0x4c0>)
 8004202:	61bb      	str	r3, [r7, #24]
        break;
 8004204:	e00c      	b.n	8004220 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004206:	f7fe fd69 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 800420a:	61b8      	str	r0, [r7, #24]
        break;
 800420c:	e008      	b.n	8004220 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	61bb      	str	r3, [r7, #24]
        break;
 8004214:	e004      	b.n	8004220 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	77bb      	strb	r3, [r7, #30]
        break;
 800421e:	bf00      	nop
    }

    if (pclk != 0U)
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d018      	beq.n	8004258 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	085a      	lsrs	r2, r3, #1
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	441a      	add	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b0f      	cmp	r3, #15
 800423e:	d909      	bls.n	8004254 <UART_SetConfig+0x49c>
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004246:	d205      	bcs.n	8004254 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	e001      	b.n	8004258 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004264:	7fbb      	ldrb	r3, [r7, #30]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40007c00 	.word	0x40007c00
 8004274:	40023800 	.word	0x40023800
 8004278:	00f42400 	.word	0x00f42400

0800427c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01a      	beq.n	8004392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437a:	d10a      	bne.n	8004392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]
  }
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043d0:	f7fd fa6c 	bl	80018ac <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d10e      	bne.n	8004402 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f817 	bl	8004426 <UART_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e00d      	b.n	800441e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b09c      	sub	sp, #112	; 0x70
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004436:	e0a5      	b.n	8004584 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800443e:	f000 80a1 	beq.w	8004584 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fd fa33 	bl	80018ac <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <UART_WaitOnFlagUntilTimeout+0x32>
 8004452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004454:	2b00      	cmp	r3, #0
 8004456:	d13e      	bne.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004468:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800446c:	667b      	str	r3, [r7, #100]	; 0x64
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004476:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004478:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800447c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e6      	bne.n	8004458 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3308      	adds	r3, #8
 8004490:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	663b      	str	r3, [r7, #96]	; 0x60
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3308      	adds	r3, #8
 80044a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80044ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e5      	bne.n	800448a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e067      	b.n	80045a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d04f      	beq.n	8004584 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f2:	d147      	bne.n	8004584 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
 800451e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e6      	bne.n	80044fe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3308      	adds	r3, #8
 8004536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	613b      	str	r3, [r7, #16]
   return(result);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	66bb      	str	r3, [r7, #104]	; 0x68
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3308      	adds	r3, #8
 800454e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004550:	623a      	str	r2, [r7, #32]
 8004552:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	69f9      	ldr	r1, [r7, #28]
 8004556:	6a3a      	ldr	r2, [r7, #32]
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	61bb      	str	r3, [r7, #24]
   return(result);
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e5      	bne.n	8004530 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e010      	b.n	80045a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4013      	ands	r3, r2
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	429a      	cmp	r2, r3
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	461a      	mov	r2, r3
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	429a      	cmp	r2, r3
 80045a0:	f43f af4a 	beq.w	8004438 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3770      	adds	r7, #112	; 0x70
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d121      	bne.n	8004606 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b27      	ldr	r3, [pc, #156]	; (8004664 <FMC_SDRAM_Init+0xb4>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	6851      	ldr	r1, [r2, #4]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	6892      	ldr	r2, [r2, #8]
 80045d2:	4311      	orrs	r1, r2
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	68d2      	ldr	r2, [r2, #12]
 80045d8:	4311      	orrs	r1, r2
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	6912      	ldr	r2, [r2, #16]
 80045de:	4311      	orrs	r1, r2
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	6952      	ldr	r2, [r2, #20]
 80045e4:	4311      	orrs	r1, r2
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	6992      	ldr	r2, [r2, #24]
 80045ea:	4311      	orrs	r1, r2
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	69d2      	ldr	r2, [r2, #28]
 80045f0:	4311      	orrs	r1, r2
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	6a12      	ldr	r2, [r2, #32]
 80045f6:	4311      	orrs	r1, r2
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045fc:	430a      	orrs	r2, r1
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e026      	b.n	8004654 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	69d9      	ldr	r1, [r3, #28]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	4319      	orrs	r1, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	430b      	orrs	r3, r1
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <FMC_SDRAM_Init+0xb4>)
 800462a:	4013      	ands	r3, r2
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	6851      	ldr	r1, [r2, #4]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	6892      	ldr	r2, [r2, #8]
 8004634:	4311      	orrs	r1, r2
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	68d2      	ldr	r2, [r2, #12]
 800463a:	4311      	orrs	r1, r2
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	6912      	ldr	r2, [r2, #16]
 8004640:	4311      	orrs	r1, r2
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	6952      	ldr	r2, [r2, #20]
 8004646:	4311      	orrs	r1, r2
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	6992      	ldr	r2, [r2, #24]
 800464c:	430a      	orrs	r2, r1
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	ffff8000 	.word	0xffff8000

08004668 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d128      	bne.n	80046cc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1e59      	subs	r1, r3, #1
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	3b01      	subs	r3, #1
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	4319      	orrs	r1, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	3b01      	subs	r3, #1
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	4319      	orrs	r1, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	031b      	lsls	r3, r3, #12
 80046a4:	4319      	orrs	r1, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	4319      	orrs	r1, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	051b      	lsls	r3, r3, #20
 80046b8:	4319      	orrs	r1, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	3b01      	subs	r3, #1
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	430b      	orrs	r3, r1
 80046c4:	431a      	orrs	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	609a      	str	r2, [r3, #8]
 80046ca:	e02d      	b.n	8004728 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <FMC_SDRAM_Timing_Init+0xd0>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	68d2      	ldr	r2, [r2, #12]
 80046d8:	3a01      	subs	r2, #1
 80046da:	0311      	lsls	r1, r2, #12
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	6952      	ldr	r2, [r2, #20]
 80046e0:	3a01      	subs	r2, #1
 80046e2:	0512      	lsls	r2, r2, #20
 80046e4:	430a      	orrs	r2, r1
 80046e6:	431a      	orrs	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	1e59      	subs	r1, r3, #1
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	3b01      	subs	r3, #1
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	4319      	orrs	r1, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	3b01      	subs	r3, #1
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	4319      	orrs	r1, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	3b01      	subs	r3, #1
 8004714:	041b      	lsls	r3, r3, #16
 8004716:	4319      	orrs	r1, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	3b01      	subs	r3, #1
 800471e:	061b      	lsls	r3, r3, #24
 8004720:	430b      	orrs	r3, r1
 8004722:	431a      	orrs	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	ff0f0fff 	.word	0xff0f0fff

0800473c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800474a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800474e:	2b84      	cmp	r3, #132	; 0x84
 8004750:	d005      	beq.n	800475e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	3303      	adds	r3, #3
 800475c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800475e:	68fb      	ldr	r3, [r7, #12]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004770:	f000 fae8 	bl	8004d44 <vTaskStartScheduler>
  
  return osOK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	bd80      	pop	{r7, pc}

0800477a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800477a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477c:	b089      	sub	sp, #36	; 0x24
 800477e:	af04      	add	r7, sp, #16
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <osThreadCreate+0x54>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01c      	beq.n	80047ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685c      	ldr	r4, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681d      	ldr	r5, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691e      	ldr	r6, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ffc8 	bl	800473c <makeFreeRtosPriority>
 80047ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047b6:	9202      	str	r2, [sp, #8]
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	9100      	str	r1, [sp, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	4632      	mov	r2, r6
 80047c0:	4629      	mov	r1, r5
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 f8ed 	bl	80049a2 <xTaskCreateStatic>
 80047c8:	4603      	mov	r3, r0
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e01c      	b.n	8004808 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685c      	ldr	r4, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047da:	b29e      	uxth	r6, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff ffaa 	bl	800473c <makeFreeRtosPriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f107 030c 	add.w	r3, r7, #12
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	9200      	str	r2, [sp, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	4632      	mov	r2, r6
 80047f6:	4629      	mov	r1, r5
 80047f8:	4620      	mov	r0, r4
 80047fa:	f000 f935 	bl	8004a68 <xTaskCreate>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004808:	68fb      	ldr	r3, [r7, #12]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004812 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <osDelay+0x16>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	e000      	b.n	800482a <osDelay+0x18>
 8004828:	2301      	movs	r3, #1
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fa54 	bl	8004cd8 <vTaskDelay>
  
  return osOK;
 8004830:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f103 0208 	add.w	r2, r3, #8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004852:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f103 0208 	add.w	r2, r3, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f103 0208 	add.w	r2, r3, #8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f2:	d103      	bne.n	80048fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	e00c      	b.n	8004916 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3308      	adds	r3, #8
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	e002      	b.n	800490a <vListInsert+0x2e>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	429a      	cmp	r2, r3
 8004914:	d2f6      	bcs.n	8004904 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	601a      	str	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6892      	ldr	r2, [r2, #8]
 8004964:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6852      	ldr	r2, [r2, #4]
 800496e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	d103      	bne.n	8004982 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	1e5a      	subs	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b08e      	sub	sp, #56	; 0x38
 80049a6:	af04      	add	r7, sp, #16
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10c      	bne.n	80049d0 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	b672      	cpsid	i
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	b662      	cpsie	i
 80049ca:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80049d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10c      	bne.n	80049f0 <xTaskCreateStatic+0x4e>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	b672      	cpsid	i
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	b662      	cpsie	i
 80049ea:	61fb      	str	r3, [r7, #28]
}
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049f0:	2354      	movs	r3, #84	; 0x54
 80049f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b54      	cmp	r3, #84	; 0x54
 80049f8:	d00c      	beq.n	8004a14 <xTaskCreateStatic+0x72>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	b672      	cpsid	i
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	b662      	cpsie	i
 8004a0e:	61bb      	str	r3, [r7, #24]
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01e      	beq.n	8004a5a <xTaskCreateStatic+0xb8>
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01b      	beq.n	8004a5a <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a34:	2300      	movs	r3, #0
 8004a36:	9303      	str	r3, [sp, #12]
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	9302      	str	r3, [sp, #8]
 8004a3c:	f107 0314 	add.w	r3, r7, #20
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f850 	bl	8004af2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a54:	f000 f8d6 	bl	8004c04 <prvAddNewTaskToReadyList>
 8004a58:	e001      	b.n	8004a5e <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a5e:	697b      	ldr	r3, [r7, #20]
	}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3728      	adds	r7, #40	; 0x28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08c      	sub	sp, #48	; 0x30
 8004a6c:	af04      	add	r7, sp, #16
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	4613      	mov	r3, r2
 8004a76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a78:	88fb      	ldrh	r3, [r7, #6]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 febd 	bl	80057fc <pvPortMalloc>
 8004a82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00e      	beq.n	8004aa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a8a:	2054      	movs	r0, #84	; 0x54
 8004a8c:	f000 feb6 	bl	80057fc <pvPortMalloc>
 8004a90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a9e:	e005      	b.n	8004aac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004aa0:	6978      	ldr	r0, [r7, #20]
 8004aa2:	f000 ff75 	bl	8005990 <vPortFree>
 8004aa6:	e001      	b.n	8004aac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d017      	beq.n	8004ae2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	2300      	movs	r3, #0
 8004abe:	9303      	str	r3, [sp, #12]
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	9302      	str	r3, [sp, #8]
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f80e 	bl	8004af2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ad6:	69f8      	ldr	r0, [r7, #28]
 8004ad8:	f000 f894 	bl	8004c04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004adc:	2301      	movs	r3, #1
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	e002      	b.n	8004ae8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ae6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ae8:	69bb      	ldr	r3, [r7, #24]
	}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3720      	adds	r7, #32
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b088      	sub	sp, #32
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004b0a:	440b      	add	r3, r1
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f023 0307 	bic.w	r3, r3, #7
 8004b18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00c      	beq.n	8004b3e <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	b672      	cpsid	i
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	b662      	cpsie	i
 8004b38:	617b      	str	r3, [r7, #20]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01f      	beq.n	8004b84 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	e012      	b.n	8004b70 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	7819      	ldrb	r1, [r3, #0]
 8004b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	4413      	add	r3, r2
 8004b58:	3334      	adds	r3, #52	; 0x34
 8004b5a:	460a      	mov	r2, r1
 8004b5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	4413      	add	r3, r2
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d006      	beq.n	8004b78 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	2b0f      	cmp	r3, #15
 8004b74:	d9e9      	bls.n	8004b4a <prvInitialiseNewTask+0x58>
 8004b76:	e000      	b.n	8004b7a <prvInitialiseNewTask+0x88>
			{
				break;
 8004b78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b82:	e003      	b.n	8004b8c <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d901      	bls.n	8004b96 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b92:	2306      	movs	r3, #6
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ba0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	3304      	adds	r3, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fe64 	bl	800487a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	3318      	adds	r3, #24
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fe5f 	bl	800487a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	f1c3 0207 	rsb	r2, r3, #7
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	68f9      	ldr	r1, [r7, #12]
 8004be4:	69b8      	ldr	r0, [r7, #24]
 8004be6:	f000 fc13 	bl	8005410 <pxPortInitialiseStack>
 8004bea:	4602      	mov	r2, r0
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bfc:	bf00      	nop
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c0c:	f000 fd0e 	bl	800562c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c10:	4b2a      	ldr	r3, [pc, #168]	; (8004cbc <prvAddNewTaskToReadyList+0xb8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3301      	adds	r3, #1
 8004c16:	4a29      	ldr	r2, [pc, #164]	; (8004cbc <prvAddNewTaskToReadyList+0xb8>)
 8004c18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c1a:	4b29      	ldr	r3, [pc, #164]	; (8004cc0 <prvAddNewTaskToReadyList+0xbc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c22:	4a27      	ldr	r2, [pc, #156]	; (8004cc0 <prvAddNewTaskToReadyList+0xbc>)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c28:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <prvAddNewTaskToReadyList+0xb8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d110      	bne.n	8004c52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c30:	f000 fac8 	bl	80051c4 <prvInitialiseTaskLists>
 8004c34:	e00d      	b.n	8004c52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c36:	4b23      	ldr	r3, [pc, #140]	; (8004cc4 <prvAddNewTaskToReadyList+0xc0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c3e:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <prvAddNewTaskToReadyList+0xbc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d802      	bhi.n	8004c52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c4c:	4a1c      	ldr	r2, [pc, #112]	; (8004cc0 <prvAddNewTaskToReadyList+0xbc>)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <prvAddNewTaskToReadyList+0xc4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3301      	adds	r3, #1
 8004c58:	4a1b      	ldr	r2, [pc, #108]	; (8004cc8 <prvAddNewTaskToReadyList+0xc4>)
 8004c5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	2201      	movs	r2, #1
 8004c62:	409a      	lsls	r2, r3
 8004c64:	4b19      	ldr	r3, [pc, #100]	; (8004ccc <prvAddNewTaskToReadyList+0xc8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <prvAddNewTaskToReadyList+0xc8>)
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <prvAddNewTaskToReadyList+0xcc>)
 8004c7c:	441a      	add	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3304      	adds	r3, #4
 8004c82:	4619      	mov	r1, r3
 8004c84:	4610      	mov	r0, r2
 8004c86:	f7ff fe05 	bl	8004894 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c8a:	f000 fd03 	bl	8005694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <prvAddNewTaskToReadyList+0xc0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00e      	beq.n	8004cb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <prvAddNewTaskToReadyList+0xbc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d207      	bcs.n	8004cb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <prvAddNewTaskToReadyList+0xd0>)
 8004ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000384 	.word	0x20000384
 8004cc0:	20000284 	.word	0x20000284
 8004cc4:	20000390 	.word	0x20000390
 8004cc8:	200003a0 	.word	0x200003a0
 8004ccc:	2000038c 	.word	0x2000038c
 8004cd0:	20000288 	.word	0x20000288
 8004cd4:	e000ed04 	.word	0xe000ed04

08004cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d019      	beq.n	8004d1e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004cea:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <vTaskDelay+0x64>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <vTaskDelay+0x34>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	b672      	cpsid	i
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	b662      	cpsie	i
 8004d06:	60bb      	str	r3, [r7, #8]
}
 8004d08:	bf00      	nop
 8004d0a:	e7fe      	b.n	8004d0a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004d0c:	f000 f87e 	bl	8004e0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d10:	2100      	movs	r1, #0
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fb16 	bl	8005344 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d18:	f000 f886 	bl	8004e28 <xTaskResumeAll>
 8004d1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d107      	bne.n	8004d34 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <vTaskDelay+0x68>)
 8004d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	200003ac 	.word	0x200003ac
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d52:	463a      	mov	r2, r7
 8004d54:	1d39      	adds	r1, r7, #4
 8004d56:	f107 0308 	add.w	r3, r7, #8
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb fbd4 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	9202      	str	r2, [sp, #8]
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	460a      	mov	r2, r1
 8004d72:	4920      	ldr	r1, [pc, #128]	; (8004df4 <vTaskStartScheduler+0xb0>)
 8004d74:	4820      	ldr	r0, [pc, #128]	; (8004df8 <vTaskStartScheduler+0xb4>)
 8004d76:	f7ff fe14 	bl	80049a2 <xTaskCreateStatic>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <vTaskStartScheduler+0xb8>)
 8004d7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d80:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <vTaskStartScheduler+0xb8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e001      	b.n	8004d92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d118      	bne.n	8004dca <vTaskStartScheduler+0x86>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	b672      	cpsid	i
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	b662      	cpsie	i
 8004dac:	613b      	str	r3, [r7, #16]
}
 8004dae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004db0:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <vTaskStartScheduler+0xbc>)
 8004db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004db6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <vTaskStartScheduler+0xc0>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <vTaskStartScheduler+0xc4>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dc4:	f000 fbb4 	bl	8005530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dc8:	e010      	b.n	8004dec <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd0:	d10c      	bne.n	8004dec <vTaskStartScheduler+0xa8>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	b672      	cpsid	i
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	b662      	cpsie	i
 8004de6:	60fb      	str	r3, [r7, #12]
}
 8004de8:	bf00      	nop
 8004dea:	e7fe      	b.n	8004dea <vTaskStartScheduler+0xa6>
}
 8004dec:	bf00      	nop
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	08005cfc 	.word	0x08005cfc
 8004df8:	08005195 	.word	0x08005195
 8004dfc:	200003a8 	.word	0x200003a8
 8004e00:	200003a4 	.word	0x200003a4
 8004e04:	20000390 	.word	0x20000390
 8004e08:	20000388 	.word	0x20000388

08004e0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <vTaskSuspendAll+0x18>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	4a03      	ldr	r2, [pc, #12]	; (8004e24 <vTaskSuspendAll+0x18>)
 8004e18:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004e1a:	bf00      	nop
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	200003ac 	.word	0x200003ac

08004e28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e36:	4b42      	ldr	r3, [pc, #264]	; (8004f40 <xTaskResumeAll+0x118>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10c      	bne.n	8004e58 <xTaskResumeAll+0x30>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	b672      	cpsid	i
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	b662      	cpsie	i
 8004e52:	603b      	str	r3, [r7, #0]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e58:	f000 fbe8 	bl	800562c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e5c:	4b38      	ldr	r3, [pc, #224]	; (8004f40 <xTaskResumeAll+0x118>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	4a37      	ldr	r2, [pc, #220]	; (8004f40 <xTaskResumeAll+0x118>)
 8004e64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e66:	4b36      	ldr	r3, [pc, #216]	; (8004f40 <xTaskResumeAll+0x118>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d161      	bne.n	8004f32 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e6e:	4b35      	ldr	r3, [pc, #212]	; (8004f44 <xTaskResumeAll+0x11c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d05d      	beq.n	8004f32 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e76:	e02e      	b.n	8004ed6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e78:	4b33      	ldr	r3, [pc, #204]	; (8004f48 <xTaskResumeAll+0x120>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3318      	adds	r3, #24
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff fd62 	bl	800494e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fd5d 	bl	800494e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	2201      	movs	r2, #1
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	4b2b      	ldr	r3, [pc, #172]	; (8004f4c <xTaskResumeAll+0x124>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	4a2a      	ldr	r2, [pc, #168]	; (8004f4c <xTaskResumeAll+0x124>)
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4a27      	ldr	r2, [pc, #156]	; (8004f50 <xTaskResumeAll+0x128>)
 8004eb4:	441a      	add	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	f7ff fce9 	bl	8004894 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	4b23      	ldr	r3, [pc, #140]	; (8004f54 <xTaskResumeAll+0x12c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d302      	bcc.n	8004ed6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004ed0:	4b21      	ldr	r3, [pc, #132]	; (8004f58 <xTaskResumeAll+0x130>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <xTaskResumeAll+0x120>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1cc      	bne.n	8004e78 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ee4:	f000 fa0e 	bl	8005304 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ee8:	4b1c      	ldr	r3, [pc, #112]	; (8004f5c <xTaskResumeAll+0x134>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d010      	beq.n	8004f16 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ef4:	f000 f836 	bl	8004f64 <xTaskIncrementTick>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004efe:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <xTaskResumeAll+0x130>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f1      	bne.n	8004ef4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004f10:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <xTaskResumeAll+0x134>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f16:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <xTaskResumeAll+0x130>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <xTaskResumeAll+0x138>)
 8004f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f32:	f000 fbaf 	bl	8005694 <vPortExitCritical>

	return xAlreadyYielded;
 8004f36:	68bb      	ldr	r3, [r7, #8]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	200003ac 	.word	0x200003ac
 8004f44:	20000384 	.word	0x20000384
 8004f48:	20000344 	.word	0x20000344
 8004f4c:	2000038c 	.word	0x2000038c
 8004f50:	20000288 	.word	0x20000288
 8004f54:	20000284 	.word	0x20000284
 8004f58:	20000398 	.word	0x20000398
 8004f5c:	20000394 	.word	0x20000394
 8004f60:	e000ed04 	.word	0xe000ed04

08004f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f6e:	4b4f      	ldr	r3, [pc, #316]	; (80050ac <xTaskIncrementTick+0x148>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 808a 	bne.w	800508c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f78:	4b4d      	ldr	r3, [pc, #308]	; (80050b0 <xTaskIncrementTick+0x14c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f80:	4a4b      	ldr	r2, [pc, #300]	; (80050b0 <xTaskIncrementTick+0x14c>)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d122      	bne.n	8004fd2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f8c:	4b49      	ldr	r3, [pc, #292]	; (80050b4 <xTaskIncrementTick+0x150>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00c      	beq.n	8004fb0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	b672      	cpsid	i
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	b662      	cpsie	i
 8004faa:	603b      	str	r3, [r7, #0]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <xTaskIncrementTick+0x4a>
 8004fb0:	4b40      	ldr	r3, [pc, #256]	; (80050b4 <xTaskIncrementTick+0x150>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	4b40      	ldr	r3, [pc, #256]	; (80050b8 <xTaskIncrementTick+0x154>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a3e      	ldr	r2, [pc, #248]	; (80050b4 <xTaskIncrementTick+0x150>)
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4a3e      	ldr	r2, [pc, #248]	; (80050b8 <xTaskIncrementTick+0x154>)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <xTaskIncrementTick+0x158>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	4a3c      	ldr	r2, [pc, #240]	; (80050bc <xTaskIncrementTick+0x158>)
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	f000 f999 	bl	8005304 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	; (80050c0 <xTaskIncrementTick+0x15c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d348      	bcc.n	800506e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fdc:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <xTaskIncrementTick+0x150>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d104      	bne.n	8004ff0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe6:	4b36      	ldr	r3, [pc, #216]	; (80050c0 <xTaskIncrementTick+0x15c>)
 8004fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fec:	601a      	str	r2, [r3, #0]
					break;
 8004fee:	e03e      	b.n	800506e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff0:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <xTaskIncrementTick+0x150>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	d203      	bcs.n	8005010 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005008:	4a2d      	ldr	r2, [pc, #180]	; (80050c0 <xTaskIncrementTick+0x15c>)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800500e:	e02e      	b.n	800506e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	3304      	adds	r3, #4
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff fc9a 	bl	800494e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	2b00      	cmp	r3, #0
 8005020:	d004      	beq.n	800502c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	3318      	adds	r3, #24
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fc91 	bl	800494e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	2201      	movs	r2, #1
 8005032:	409a      	lsls	r2, r3
 8005034:	4b23      	ldr	r3, [pc, #140]	; (80050c4 <xTaskIncrementTick+0x160>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4313      	orrs	r3, r2
 800503a:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <xTaskIncrementTick+0x160>)
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <xTaskIncrementTick+0x164>)
 800504c:	441a      	add	r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	3304      	adds	r3, #4
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f7ff fc1d 	bl	8004894 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505e:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <xTaskIncrementTick+0x168>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	429a      	cmp	r2, r3
 8005066:	d3b9      	bcc.n	8004fdc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005068:	2301      	movs	r3, #1
 800506a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800506c:	e7b6      	b.n	8004fdc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800506e:	4b17      	ldr	r3, [pc, #92]	; (80050cc <xTaskIncrementTick+0x168>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005074:	4914      	ldr	r1, [pc, #80]	; (80050c8 <xTaskIncrementTick+0x164>)
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d907      	bls.n	8005096 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005086:	2301      	movs	r3, #1
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e004      	b.n	8005096 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800508c:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <xTaskIncrementTick+0x16c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	4a0f      	ldr	r2, [pc, #60]	; (80050d0 <xTaskIncrementTick+0x16c>)
 8005094:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005096:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <xTaskIncrementTick+0x170>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800509e:	2301      	movs	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80050a2:	697b      	ldr	r3, [r7, #20]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	200003ac 	.word	0x200003ac
 80050b0:	20000388 	.word	0x20000388
 80050b4:	2000033c 	.word	0x2000033c
 80050b8:	20000340 	.word	0x20000340
 80050bc:	2000039c 	.word	0x2000039c
 80050c0:	200003a4 	.word	0x200003a4
 80050c4:	2000038c 	.word	0x2000038c
 80050c8:	20000288 	.word	0x20000288
 80050cc:	20000284 	.word	0x20000284
 80050d0:	20000394 	.word	0x20000394
 80050d4:	20000398 	.word	0x20000398

080050d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050de:	4b28      	ldr	r3, [pc, #160]	; (8005180 <vTaskSwitchContext+0xa8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050e6:	4b27      	ldr	r3, [pc, #156]	; (8005184 <vTaskSwitchContext+0xac>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050ec:	e041      	b.n	8005172 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80050ee:	4b25      	ldr	r3, [pc, #148]	; (8005184 <vTaskSwitchContext+0xac>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f4:	4b24      	ldr	r3, [pc, #144]	; (8005188 <vTaskSwitchContext+0xb0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	fab3 f383 	clz	r3, r3
 8005100:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005102:	7afb      	ldrb	r3, [r7, #11]
 8005104:	f1c3 031f 	rsb	r3, r3, #31
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	4920      	ldr	r1, [pc, #128]	; (800518c <vTaskSwitchContext+0xb4>)
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10c      	bne.n	8005138 <vTaskSwitchContext+0x60>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	b672      	cpsid	i
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	b662      	cpsie	i
 8005132:	607b      	str	r3, [r7, #4]
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <vTaskSwitchContext+0x5e>
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <vTaskSwitchContext+0xb4>)
 8005144:	4413      	add	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	3308      	adds	r3, #8
 800515a:	429a      	cmp	r2, r3
 800515c:	d104      	bne.n	8005168 <vTaskSwitchContext+0x90>
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	605a      	str	r2, [r3, #4]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	4a08      	ldr	r2, [pc, #32]	; (8005190 <vTaskSwitchContext+0xb8>)
 8005170:	6013      	str	r3, [r2, #0]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	200003ac 	.word	0x200003ac
 8005184:	20000398 	.word	0x20000398
 8005188:	2000038c 	.word	0x2000038c
 800518c:	20000288 	.word	0x20000288
 8005190:	20000284 	.word	0x20000284

08005194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800519c:	f000 f852 	bl	8005244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <prvIdleTask+0x28>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d9f9      	bls.n	800519c <prvIdleTask+0x8>
			{
				taskYIELD();
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <prvIdleTask+0x2c>)
 80051aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051b8:	e7f0      	b.n	800519c <prvIdleTask+0x8>
 80051ba:	bf00      	nop
 80051bc:	20000288 	.word	0x20000288
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ca:	2300      	movs	r3, #0
 80051cc:	607b      	str	r3, [r7, #4]
 80051ce:	e00c      	b.n	80051ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4a12      	ldr	r2, [pc, #72]	; (8005224 <prvInitialiseTaskLists+0x60>)
 80051dc:	4413      	add	r3, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fb2b 	bl	800483a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3301      	adds	r3, #1
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b06      	cmp	r3, #6
 80051ee:	d9ef      	bls.n	80051d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051f0:	480d      	ldr	r0, [pc, #52]	; (8005228 <prvInitialiseTaskLists+0x64>)
 80051f2:	f7ff fb22 	bl	800483a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051f6:	480d      	ldr	r0, [pc, #52]	; (800522c <prvInitialiseTaskLists+0x68>)
 80051f8:	f7ff fb1f 	bl	800483a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051fc:	480c      	ldr	r0, [pc, #48]	; (8005230 <prvInitialiseTaskLists+0x6c>)
 80051fe:	f7ff fb1c 	bl	800483a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005202:	480c      	ldr	r0, [pc, #48]	; (8005234 <prvInitialiseTaskLists+0x70>)
 8005204:	f7ff fb19 	bl	800483a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005208:	480b      	ldr	r0, [pc, #44]	; (8005238 <prvInitialiseTaskLists+0x74>)
 800520a:	f7ff fb16 	bl	800483a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <prvInitialiseTaskLists+0x78>)
 8005210:	4a05      	ldr	r2, [pc, #20]	; (8005228 <prvInitialiseTaskLists+0x64>)
 8005212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <prvInitialiseTaskLists+0x7c>)
 8005216:	4a05      	ldr	r2, [pc, #20]	; (800522c <prvInitialiseTaskLists+0x68>)
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000288 	.word	0x20000288
 8005228:	20000314 	.word	0x20000314
 800522c:	20000328 	.word	0x20000328
 8005230:	20000344 	.word	0x20000344
 8005234:	20000358 	.word	0x20000358
 8005238:	20000370 	.word	0x20000370
 800523c:	2000033c 	.word	0x2000033c
 8005240:	20000340 	.word	0x20000340

08005244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800524a:	e019      	b.n	8005280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800524c:	f000 f9ee 	bl	800562c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005250:	4b10      	ldr	r3, [pc, #64]	; (8005294 <prvCheckTasksWaitingTermination+0x50>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fb76 	bl	800494e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <prvCheckTasksWaitingTermination+0x54>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3b01      	subs	r3, #1
 8005268:	4a0b      	ldr	r2, [pc, #44]	; (8005298 <prvCheckTasksWaitingTermination+0x54>)
 800526a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3b01      	subs	r3, #1
 8005272:	4a0a      	ldr	r2, [pc, #40]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 8005274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005276:	f000 fa0d 	bl	8005694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f810 	bl	80052a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e1      	bne.n	800524c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000358 	.word	0x20000358
 8005298:	20000384 	.word	0x20000384
 800529c:	2000036c 	.word	0x2000036c

080052a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d108      	bne.n	80052c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fb6a 	bl	8005990 <vPortFree>
				vPortFree( pxTCB );
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fb67 	bl	8005990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052c2:	e01a      	b.n	80052fa <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d103      	bne.n	80052d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fb5e 	bl	8005990 <vPortFree>
	}
 80052d4:	e011      	b.n	80052fa <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d00c      	beq.n	80052fa <prvDeleteTCB+0x5a>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	b672      	cpsid	i
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	b662      	cpsie	i
 80052f4:	60fb      	str	r3, [r7, #12]
}
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <prvDeleteTCB+0x58>
	}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800530a:	4b0c      	ldr	r3, [pc, #48]	; (800533c <prvResetNextTaskUnblockTime+0x38>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <prvResetNextTaskUnblockTime+0x3c>)
 8005316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800531a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800531c:	e008      	b.n	8005330 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <prvResetNextTaskUnblockTime+0x38>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a04      	ldr	r2, [pc, #16]	; (8005340 <prvResetNextTaskUnblockTime+0x3c>)
 800532e:	6013      	str	r3, [r2, #0]
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	2000033c 	.word	0x2000033c
 8005340:	200003a4 	.word	0x200003a4

08005344 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800534e:	4b29      	ldr	r3, [pc, #164]	; (80053f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005354:	4b28      	ldr	r3, [pc, #160]	; (80053f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3304      	adds	r3, #4
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff faf7 	bl	800494e <uxListRemove>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10b      	bne.n	800537e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005366:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	2201      	movs	r2, #1
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	43da      	mvns	r2, r3
 8005374:	4b21      	ldr	r3, [pc, #132]	; (80053fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4013      	ands	r3, r2
 800537a:	4a20      	ldr	r2, [pc, #128]	; (80053fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800537c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005384:	d10a      	bne.n	800539c <prvAddCurrentTaskToDelayedList+0x58>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800538c:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3304      	adds	r3, #4
 8005392:	4619      	mov	r1, r3
 8005394:	481a      	ldr	r0, [pc, #104]	; (8005400 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005396:	f7ff fa7d 	bl	8004894 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800539a:	e026      	b.n	80053ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4413      	add	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053a4:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d209      	bcs.n	80053c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053b4:	4b13      	ldr	r3, [pc, #76]	; (8005404 <prvAddCurrentTaskToDelayedList+0xc0>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3304      	adds	r3, #4
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f7ff fa8b 	bl	80048dc <vListInsert>
}
 80053c6:	e010      	b.n	80053ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053c8:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <prvAddCurrentTaskToDelayedList+0xc4>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3304      	adds	r3, #4
 80053d2:	4619      	mov	r1, r3
 80053d4:	4610      	mov	r0, r2
 80053d6:	f7ff fa81 	bl	80048dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053da:	4b0c      	ldr	r3, [pc, #48]	; (800540c <prvAddCurrentTaskToDelayedList+0xc8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d202      	bcs.n	80053ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80053e4:	4a09      	ldr	r2, [pc, #36]	; (800540c <prvAddCurrentTaskToDelayedList+0xc8>)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	6013      	str	r3, [r2, #0]
}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000388 	.word	0x20000388
 80053f8:	20000284 	.word	0x20000284
 80053fc:	2000038c 	.word	0x2000038c
 8005400:	20000370 	.word	0x20000370
 8005404:	20000340 	.word	0x20000340
 8005408:	2000033c 	.word	0x2000033c
 800540c:	200003a4 	.word	0x200003a4

08005410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3b04      	subs	r3, #4
 8005420:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3b04      	subs	r3, #4
 800542e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f023 0201 	bic.w	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3b04      	subs	r3, #4
 800543e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005440:	4a0c      	ldr	r2, [pc, #48]	; (8005474 <pxPortInitialiseStack+0x64>)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3b14      	subs	r3, #20
 800544a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3b04      	subs	r3, #4
 8005456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f06f 0202 	mvn.w	r2, #2
 800545e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3b20      	subs	r3, #32
 8005464:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005466:	68fb      	ldr	r3, [r7, #12]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	08005479 	.word	0x08005479

08005478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005482:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <prvTaskExitError+0x5c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800548a:	d00c      	beq.n	80054a6 <prvTaskExitError+0x2e>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	b672      	cpsid	i
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	b662      	cpsie	i
 80054a0:	60fb      	str	r3, [r7, #12]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <prvTaskExitError+0x2c>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	b672      	cpsid	i
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	b662      	cpsie	i
 80054ba:	60bb      	str	r3, [r7, #8]
}
 80054bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054be:	bf00      	nop
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0fc      	beq.n	80054c0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	2000000c 	.word	0x2000000c
	...

080054e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <pxCurrentTCBConst2>)
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	6808      	ldr	r0, [r1, #0]
 80054e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ea:	f380 8809 	msr	PSP, r0
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f04f 0000 	mov.w	r0, #0
 80054f6:	f380 8811 	msr	BASEPRI, r0
 80054fa:	4770      	bx	lr
 80054fc:	f3af 8000 	nop.w

08005500 <pxCurrentTCBConst2>:
 8005500:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop

08005508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005508:	4808      	ldr	r0, [pc, #32]	; (800552c <prvPortStartFirstTask+0x24>)
 800550a:	6800      	ldr	r0, [r0, #0]
 800550c:	6800      	ldr	r0, [r0, #0]
 800550e:	f380 8808 	msr	MSP, r0
 8005512:	f04f 0000 	mov.w	r0, #0
 8005516:	f380 8814 	msr	CONTROL, r0
 800551a:	b662      	cpsie	i
 800551c:	b661      	cpsie	f
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	df00      	svc	0
 8005528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800552a:	bf00      	nop
 800552c:	e000ed08 	.word	0xe000ed08

08005530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005536:	4b37      	ldr	r3, [pc, #220]	; (8005614 <xPortStartScheduler+0xe4>)
 8005538:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	22ff      	movs	r2, #255	; 0xff
 8005546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005558:	b2da      	uxtb	r2, r3
 800555a:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <xPortStartScheduler+0xe8>)
 800555c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800555e:	4b2f      	ldr	r3, [pc, #188]	; (800561c <xPortStartScheduler+0xec>)
 8005560:	2207      	movs	r2, #7
 8005562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005564:	e009      	b.n	800557a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005566:	4b2d      	ldr	r3, [pc, #180]	; (800561c <xPortStartScheduler+0xec>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3b01      	subs	r3, #1
 800556c:	4a2b      	ldr	r2, [pc, #172]	; (800561c <xPortStartScheduler+0xec>)
 800556e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	b2db      	uxtb	r3, r3
 8005578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d0ef      	beq.n	8005566 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005586:	4b25      	ldr	r3, [pc, #148]	; (800561c <xPortStartScheduler+0xec>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f1c3 0307 	rsb	r3, r3, #7
 800558e:	2b04      	cmp	r3, #4
 8005590:	d00c      	beq.n	80055ac <xPortStartScheduler+0x7c>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	b672      	cpsid	i
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	b662      	cpsie	i
 80055a6:	60bb      	str	r3, [r7, #8]
}
 80055a8:	bf00      	nop
 80055aa:	e7fe      	b.n	80055aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055ac:	4b1b      	ldr	r3, [pc, #108]	; (800561c <xPortStartScheduler+0xec>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	4a1a      	ldr	r2, [pc, #104]	; (800561c <xPortStartScheduler+0xec>)
 80055b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055b6:	4b19      	ldr	r3, [pc, #100]	; (800561c <xPortStartScheduler+0xec>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055be:	4a17      	ldr	r2, [pc, #92]	; (800561c <xPortStartScheduler+0xec>)
 80055c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <xPortStartScheduler+0xf0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a14      	ldr	r2, [pc, #80]	; (8005620 <xPortStartScheduler+0xf0>)
 80055d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <xPortStartScheduler+0xf0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a11      	ldr	r2, [pc, #68]	; (8005620 <xPortStartScheduler+0xf0>)
 80055dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055e2:	f000 f8dd 	bl	80057a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055e6:	4b0f      	ldr	r3, [pc, #60]	; (8005624 <xPortStartScheduler+0xf4>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055ec:	f000 f8fc 	bl	80057e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055f0:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <xPortStartScheduler+0xf8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a0c      	ldr	r2, [pc, #48]	; (8005628 <xPortStartScheduler+0xf8>)
 80055f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055fc:	f7ff ff84 	bl	8005508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005600:	f7ff fd6a 	bl	80050d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005604:	f7ff ff38 	bl	8005478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	e000e400 	.word	0xe000e400
 8005618:	200003b0 	.word	0x200003b0
 800561c:	200003b4 	.word	0x200003b4
 8005620:	e000ed20 	.word	0xe000ed20
 8005624:	2000000c 	.word	0x2000000c
 8005628:	e000ef34 	.word	0xe000ef34

0800562c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	b672      	cpsid	i
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	b662      	cpsie	i
 8005646:	607b      	str	r3, [r7, #4]
}
 8005648:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800564a:	4b10      	ldr	r3, [pc, #64]	; (800568c <vPortEnterCritical+0x60>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	4a0e      	ldr	r2, [pc, #56]	; (800568c <vPortEnterCritical+0x60>)
 8005652:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005654:	4b0d      	ldr	r3, [pc, #52]	; (800568c <vPortEnterCritical+0x60>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d111      	bne.n	8005680 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800565c:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <vPortEnterCritical+0x64>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00c      	beq.n	8005680 <vPortEnterCritical+0x54>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	b672      	cpsid	i
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	b662      	cpsie	i
 800567a:	603b      	str	r3, [r7, #0]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <vPortEnterCritical+0x52>
	}
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	2000000c 	.word	0x2000000c
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <vPortExitCritical+0x54>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10c      	bne.n	80056bc <vPortExitCritical+0x28>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	b672      	cpsid	i
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	b662      	cpsie	i
 80056b6:	607b      	str	r3, [r7, #4]
}
 80056b8:	bf00      	nop
 80056ba:	e7fe      	b.n	80056ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80056bc:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <vPortExitCritical+0x54>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	4a09      	ldr	r2, [pc, #36]	; (80056e8 <vPortExitCritical+0x54>)
 80056c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056c6:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <vPortExitCritical+0x54>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d105      	bne.n	80056da <vPortExitCritical+0x46>
 80056ce:	2300      	movs	r3, #0
 80056d0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	2000000c 	.word	0x2000000c
 80056ec:	00000000 	.word	0x00000000

080056f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056f0:	f3ef 8009 	mrs	r0, PSP
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	4b15      	ldr	r3, [pc, #84]	; (8005750 <pxCurrentTCBConst>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	f01e 0f10 	tst.w	lr, #16
 8005700:	bf08      	it	eq
 8005702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570a:	6010      	str	r0, [r2, #0]
 800570c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005714:	b672      	cpsid	i
 8005716:	f380 8811 	msr	BASEPRI, r0
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	b662      	cpsie	i
 8005724:	f7ff fcd8 	bl	80050d8 <vTaskSwitchContext>
 8005728:	f04f 0000 	mov.w	r0, #0
 800572c:	f380 8811 	msr	BASEPRI, r0
 8005730:	bc09      	pop	{r0, r3}
 8005732:	6819      	ldr	r1, [r3, #0]
 8005734:	6808      	ldr	r0, [r1, #0]
 8005736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573a:	f01e 0f10 	tst.w	lr, #16
 800573e:	bf08      	it	eq
 8005740:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005744:	f380 8809 	msr	PSP, r0
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop

08005750 <pxCurrentTCBConst>:
 8005750:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop

08005758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	b672      	cpsid	i
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	b662      	cpsie	i
 8005772:	607b      	str	r3, [r7, #4]
}
 8005774:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005776:	f7ff fbf5 	bl	8004f64 <xTaskIncrementTick>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005780:	4b06      	ldr	r3, [pc, #24]	; (800579c <SysTick_Handler+0x44>)
 8005782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	2300      	movs	r3, #0
 800578a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	f383 8811 	msr	BASEPRI, r3
}
 8005792:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	e000ed04 	.word	0xe000ed04

080057a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057a4:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <vPortSetupTimerInterrupt+0x34>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057aa:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <vPortSetupTimerInterrupt+0x38>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057b0:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <vPortSetupTimerInterrupt+0x3c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <vPortSetupTimerInterrupt+0x40>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	099b      	lsrs	r3, r3, #6
 80057bc:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <vPortSetupTimerInterrupt+0x44>)
 80057be:	3b01      	subs	r3, #1
 80057c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057c2:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <vPortSetupTimerInterrupt+0x34>)
 80057c4:	2207      	movs	r2, #7
 80057c6:	601a      	str	r2, [r3, #0]
}
 80057c8:	bf00      	nop
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	e000e010 	.word	0xe000e010
 80057d8:	e000e018 	.word	0xe000e018
 80057dc:	20000000 	.word	0x20000000
 80057e0:	10624dd3 	.word	0x10624dd3
 80057e4:	e000e014 	.word	0xe000e014

080057e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057f8 <vPortEnableVFP+0x10>
 80057ec:	6801      	ldr	r1, [r0, #0]
 80057ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057f2:	6001      	str	r1, [r0, #0]
 80057f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057f6:	bf00      	nop
 80057f8:	e000ed88 	.word	0xe000ed88

080057fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005804:	2300      	movs	r3, #0
 8005806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005808:	f7ff fb00 	bl	8004e0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800580c:	4b5b      	ldr	r3, [pc, #364]	; (800597c <pvPortMalloc+0x180>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005814:	f000 f91a 	bl	8005a4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005818:	4b59      	ldr	r3, [pc, #356]	; (8005980 <pvPortMalloc+0x184>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	f040 8092 	bne.w	800594a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01f      	beq.n	800586c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800582c:	2208      	movs	r2, #8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4413      	add	r3, r2
 8005832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	2b00      	cmp	r3, #0
 800583c:	d016      	beq.n	800586c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f023 0307 	bic.w	r3, r3, #7
 8005844:	3308      	adds	r3, #8
 8005846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00c      	beq.n	800586c <pvPortMalloc+0x70>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	b672      	cpsid	i
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	b662      	cpsie	i
 8005866:	617b      	str	r3, [r7, #20]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d06b      	beq.n	800594a <pvPortMalloc+0x14e>
 8005872:	4b44      	ldr	r3, [pc, #272]	; (8005984 <pvPortMalloc+0x188>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d866      	bhi.n	800594a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800587c:	4b42      	ldr	r3, [pc, #264]	; (8005988 <pvPortMalloc+0x18c>)
 800587e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005880:	4b41      	ldr	r3, [pc, #260]	; (8005988 <pvPortMalloc+0x18c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005886:	e004      	b.n	8005892 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d903      	bls.n	80058a4 <pvPortMalloc+0xa8>
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1f1      	bne.n	8005888 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058a4:	4b35      	ldr	r3, [pc, #212]	; (800597c <pvPortMalloc+0x180>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d04d      	beq.n	800594a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2208      	movs	r2, #8
 80058b4:	4413      	add	r3, r2
 80058b6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	1ad2      	subs	r2, r2, r3
 80058c8:	2308      	movs	r3, #8
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d921      	bls.n	8005914 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4413      	add	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00c      	beq.n	80058fc <pvPortMalloc+0x100>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	b672      	cpsid	i
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	b662      	cpsie	i
 80058f6:	613b      	str	r3, [r7, #16]
}
 80058f8:	bf00      	nop
 80058fa:	e7fe      	b.n	80058fa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	1ad2      	subs	r2, r2, r3
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800590e:	69b8      	ldr	r0, [r7, #24]
 8005910:	f000 f8fe 	bl	8005b10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005914:	4b1b      	ldr	r3, [pc, #108]	; (8005984 <pvPortMalloc+0x188>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	4a19      	ldr	r2, [pc, #100]	; (8005984 <pvPortMalloc+0x188>)
 8005920:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005922:	4b18      	ldr	r3, [pc, #96]	; (8005984 <pvPortMalloc+0x188>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b19      	ldr	r3, [pc, #100]	; (800598c <pvPortMalloc+0x190>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d203      	bcs.n	8005936 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800592e:	4b15      	ldr	r3, [pc, #84]	; (8005984 <pvPortMalloc+0x188>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a16      	ldr	r2, [pc, #88]	; (800598c <pvPortMalloc+0x190>)
 8005934:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	4b11      	ldr	r3, [pc, #68]	; (8005980 <pvPortMalloc+0x184>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	431a      	orrs	r2, r3
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800594a:	f7ff fa6d 	bl	8004e28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00c      	beq.n	8005972 <pvPortMalloc+0x176>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	b672      	cpsid	i
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	b662      	cpsie	i
 800596c:	60fb      	str	r3, [r7, #12]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <pvPortMalloc+0x174>
	return pvReturn;
 8005972:	69fb      	ldr	r3, [r7, #28]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3728      	adds	r7, #40	; 0x28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20003fc0 	.word	0x20003fc0
 8005980:	20003fcc 	.word	0x20003fcc
 8005984:	20003fc4 	.word	0x20003fc4
 8005988:	20003fb8 	.word	0x20003fb8
 800598c:	20003fc8 	.word	0x20003fc8

08005990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d04c      	beq.n	8005a3c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059a2:	2308      	movs	r3, #8
 80059a4:	425b      	negs	r3, r3
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4413      	add	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	4b23      	ldr	r3, [pc, #140]	; (8005a44 <vPortFree+0xb4>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10c      	bne.n	80059d8 <vPortFree+0x48>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	b672      	cpsid	i
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	b662      	cpsie	i
 80059d2:	60fb      	str	r3, [r7, #12]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00c      	beq.n	80059fa <vPortFree+0x6a>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	b672      	cpsid	i
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	b662      	cpsie	i
 80059f4:	60bb      	str	r3, [r7, #8]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <vPortFree+0xb4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4013      	ands	r3, r2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d019      	beq.n	8005a3c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d115      	bne.n	8005a3c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <vPortFree+0xb4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	401a      	ands	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a20:	f7ff f9f4 	bl	8004e0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <vPortFree+0xb8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	4a06      	ldr	r2, [pc, #24]	; (8005a48 <vPortFree+0xb8>)
 8005a30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a32:	6938      	ldr	r0, [r7, #16]
 8005a34:	f000 f86c 	bl	8005b10 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a38:	f7ff f9f6 	bl	8004e28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a3c:	bf00      	nop
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	20003fcc 	.word	0x20003fcc
 8005a48:	20003fc4 	.word	0x20003fc4

08005a4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a52:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a58:	4b27      	ldr	r3, [pc, #156]	; (8005af8 <prvHeapInit+0xac>)
 8005a5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3307      	adds	r3, #7
 8005a6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0307 	bic.w	r3, r3, #7
 8005a72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <prvHeapInit+0xac>)
 8005a7c:	4413      	add	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a84:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <prvHeapInit+0xb0>)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a8a:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <prvHeapInit+0xb0>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4413      	add	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a98:	2208      	movs	r2, #8
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0307 	bic.w	r3, r3, #7
 8005aa6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4a15      	ldr	r2, [pc, #84]	; (8005b00 <prvHeapInit+0xb4>)
 8005aac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005aae:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <prvHeapInit+0xb4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <prvHeapInit+0xb4>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005acc:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <prvHeapInit+0xb4>)
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <prvHeapInit+0xb8>)
 8005ada:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <prvHeapInit+0xbc>)
 8005ae2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <prvHeapInit+0xc0>)
 8005ae6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005aea:	601a      	str	r2, [r3, #0]
}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	200003b8 	.word	0x200003b8
 8005afc:	20003fb8 	.word	0x20003fb8
 8005b00:	20003fc0 	.word	0x20003fc0
 8005b04:	20003fc8 	.word	0x20003fc8
 8005b08:	20003fc4 	.word	0x20003fc4
 8005b0c:	20003fcc 	.word	0x20003fcc

08005b10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b18:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <prvInsertBlockIntoFreeList+0xac>)
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e002      	b.n	8005b24 <prvInsertBlockIntoFreeList+0x14>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d8f7      	bhi.n	8005b1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	4413      	add	r3, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d108      	bne.n	8005b52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	441a      	add	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	441a      	add	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d118      	bne.n	8005b98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <prvInsertBlockIntoFreeList+0xb0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d00d      	beq.n	8005b8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	441a      	add	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	e008      	b.n	8005ba0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <prvInsertBlockIntoFreeList+0xb0>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	e003      	b.n	8005ba0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d002      	beq.n	8005bae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20003fb8 	.word	0x20003fb8
 8005bc0:	20003fc0 	.word	0x20003fc0

08005bc4 <__libc_init_array>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	4d0d      	ldr	r5, [pc, #52]	; (8005bfc <__libc_init_array+0x38>)
 8005bc8:	4c0d      	ldr	r4, [pc, #52]	; (8005c00 <__libc_init_array+0x3c>)
 8005bca:	1b64      	subs	r4, r4, r5
 8005bcc:	10a4      	asrs	r4, r4, #2
 8005bce:	2600      	movs	r6, #0
 8005bd0:	42a6      	cmp	r6, r4
 8005bd2:	d109      	bne.n	8005be8 <__libc_init_array+0x24>
 8005bd4:	4d0b      	ldr	r5, [pc, #44]	; (8005c04 <__libc_init_array+0x40>)
 8005bd6:	4c0c      	ldr	r4, [pc, #48]	; (8005c08 <__libc_init_array+0x44>)
 8005bd8:	f000 f820 	bl	8005c1c <_init>
 8005bdc:	1b64      	subs	r4, r4, r5
 8005bde:	10a4      	asrs	r4, r4, #2
 8005be0:	2600      	movs	r6, #0
 8005be2:	42a6      	cmp	r6, r4
 8005be4:	d105      	bne.n	8005bf2 <__libc_init_array+0x2e>
 8005be6:	bd70      	pop	{r4, r5, r6, pc}
 8005be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bec:	4798      	blx	r3
 8005bee:	3601      	adds	r6, #1
 8005bf0:	e7ee      	b.n	8005bd0 <__libc_init_array+0xc>
 8005bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf6:	4798      	blx	r3
 8005bf8:	3601      	adds	r6, #1
 8005bfa:	e7f2      	b.n	8005be2 <__libc_init_array+0x1e>
 8005bfc:	08005d24 	.word	0x08005d24
 8005c00:	08005d24 	.word	0x08005d24
 8005c04:	08005d24 	.word	0x08005d24
 8005c08:	08005d28 	.word	0x08005d28

08005c0c <memset>:
 8005c0c:	4402      	add	r2, r0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d100      	bne.n	8005c16 <memset+0xa>
 8005c14:	4770      	bx	lr
 8005c16:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1a:	e7f9      	b.n	8005c10 <memset+0x4>

08005c1c <_init>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	bf00      	nop
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr

08005c28 <_fini>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	bf00      	nop
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr

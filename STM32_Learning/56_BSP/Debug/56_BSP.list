
56_BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ba8  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800892c  0800892c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800892c  0800892c  0001892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008934  08008934  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008934  08008934  00018934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008938  08008938  00018938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800893c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000440c  2000001c  08008958  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004428  08008958  00024428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe33  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003deb  00000000  00000000  0003fe7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00043c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001738  00000000  00000000  00045530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002976e  00000000  00000000  00046c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0f7  00000000  00000000  000703d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001030e1  00000000  00000000  0008c4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f5ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000684c  00000000  00000000  0018f604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d6c 	.word	0x08006d6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08006d6c 	.word	0x08006d6c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000038 	.word	0x20000038
 8000538:	2000008c 	.word	0x2000008c

0800053c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SCB_EnableICache+0x48>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SCB_EnableICache+0x48>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SCB_EnableICache+0x48>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000572:	f3bf 8f6f 	isb	sy
}
 8000576:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SCB_EnableDCache+0x84>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SCB_EnableDCache+0x84>)
 800059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0b5b      	lsrs	r3, r3, #13
 80005a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <SCB_EnableDCache+0x84>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ef      	bne.n	80005b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e5      	bne.n	80005ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableDCache+0x84>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableDCache+0x84>)
 80005ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b0a4      	sub	sp, #144	; 0x90
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000616:	f7ff ff91 	bl	800053c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800061a:	f7ff ffb5 	bl	8000588 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f001 fd95 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f88f 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 fa2b 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800062a:	f000 f8f9 	bl	8000820 <MX_DMA2D_Init>
  MX_FMC_Init();
 800062e:	f000 f9d9 	bl	80009e4 <MX_FMC_Init>
  MX_LTDC_Init();
 8000632:	f000 f927 	bl	8000884 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8000636:	f000 f9a5 	bl	8000984 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800063a:	f001 f927 	bl	800188c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER,LCD_FRAME_BUFFER);
 800063e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000642:	2001      	movs	r0, #1
 8000644:	f001 f9ba 	bl	80019bc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8000648:	2001      	movs	r0, #1
 800064a:	f001 fa17 	bl	8001a7c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 800064e:	f001 fa67 	bl	8001b20 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8000652:	4831      	ldr	r0, [pc, #196]	; (8000718 <main+0x108>)
 8000654:	f001 fa3c 	bl	8001ad0 <BSP_LCD_Clear>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1280);
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <main+0x10c>)
 800065a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800065e:	461d      	mov	r5, r3
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800066c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 f92b 	bl	80058ce <osThreadCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a29      	ldr	r2, [pc, #164]	; (8000720 <main+0x110>)
 800067c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <main+0x114>)
 8000680:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000684:	461d      	mov	r5, r3
 8000686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000692:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f005 f918 	bl	80058ce <osThreadCreate>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <main+0x118>)
 80006a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <main+0x11c>)
 80006a6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80006b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 f905 	bl	80058ce <osThreadCreate>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <main+0x120>)
 80006c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <main+0x124>)
 80006cc:	f107 0420 	add.w	r4, r7, #32
 80006d0:	461d      	mov	r5, r3
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f005 f8f2 	bl	80058ce <osThreadCreate>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <main+0x128>)
 80006ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityIdle, 0, 128);
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <main+0x12c>)
 80006f2:	1d3c      	adds	r4, r7, #4
 80006f4:	461d      	mov	r5, r3
 80006f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 f8e1 	bl	80058ce <osThreadCreate>
 800070c:	4603      	mov	r3, r0
 800070e:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <main+0x130>)
 8000710:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000712:	f005 f8d5 	bl	80058c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000716:	e7fe      	b.n	8000716 <main+0x106>
 8000718:	ffff0000 	.word	0xffff0000
 800071c:	08006dc0 	.word	0x08006dc0
 8000720:	20004148 	.word	0x20004148
 8000724:	08006ddc 	.word	0x08006ddc
 8000728:	20004280 	.word	0x20004280
 800072c:	08006df8 	.word	0x08006df8
 8000730:	20004284 	.word	0x20004284
 8000734:	08006e14 	.word	0x08006e14
 8000738:	20004150 	.word	0x20004150
 800073c:	08006e30 	.word	0x08006e30
 8000740:	2000414c 	.word	0x2000414c

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f006 fb02 	bl	8006d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <SystemClock_Config+0xd4>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <SystemClock_Config+0xd4>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <SystemClock_Config+0xd4>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000780:	4b26      	ldr	r3, [pc, #152]	; (800081c <SystemClock_Config+0xd8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a25      	ldr	r2, [pc, #148]	; (800081c <SystemClock_Config+0xd8>)
 8000786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b23      	ldr	r3, [pc, #140]	; (800081c <SystemClock_Config+0xd8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007ac:	2319      	movs	r3, #25
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80007b0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 ff0c 	bl	80035e0 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007ce:	f000 fd47 	bl	8001260 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d2:	f002 feb5 	bl	8003540 <HAL_PWREx_EnableOverDrive>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007dc:	f000 fd40 	bl	8001260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2107      	movs	r1, #7
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 f992 	bl	8003b28 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800080a:	f000 fd29 	bl	8001260 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	; 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <MX_DMA2D_Init+0x60>)
 8000828:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_DMA2D_Init+0x5c>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_DMA2D_Init+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DMA2D_Init+0x5c>)
 800084a:	2200      	movs	r2, #0
 800084c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000850:	2200      	movs	r2, #0
 8000852:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000856:	f001 ff6b 	bl	8002730 <HAL_DMA2D_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000860:	f000 fcfe 	bl	8001260 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000864:	2101      	movs	r1, #1
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000868:	f002 f8c0 	bl	80029ec <HAL_DMA2D_ConfigLayer>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000872:	f000 fcf5 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20004288 	.word	0x20004288
 8000880:	4002b000 	.word	0x4002b000

08000884 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	; 0x38
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2234      	movs	r2, #52	; 0x34
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f006 fa63 	bl	8006d5c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000896:	4b39      	ldr	r3, [pc, #228]	; (800097c <MX_LTDC_Init+0xf8>)
 8000898:	4a39      	ldr	r2, [pc, #228]	; (8000980 <MX_LTDC_Init+0xfc>)
 800089a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <MX_LTDC_Init+0xf8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008a2:	4b36      	ldr	r3, [pc, #216]	; (800097c <MX_LTDC_Init+0xf8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008a8:	4b34      	ldr	r3, [pc, #208]	; (800097c <MX_LTDC_Init+0xf8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <MX_LTDC_Init+0xf8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80008b4:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_LTDC_Init+0xf8>)
 80008b6:	2228      	movs	r2, #40	; 0x28
 80008b8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_LTDC_Init+0xf8>)
 80008bc:	2209      	movs	r2, #9
 80008be:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_LTDC_Init+0xf8>)
 80008c2:	2235      	movs	r2, #53	; 0x35
 80008c4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_LTDC_Init+0xf8>)
 80008c8:	220b      	movs	r2, #11
 80008ca:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_LTDC_Init+0xf8>)
 80008ce:	f240 2215 	movw	r2, #533	; 0x215
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_LTDC_Init+0xf8>)
 80008d6:	f240 121b 	movw	r2, #283	; 0x11b
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_LTDC_Init+0xf8>)
 80008de:	f240 2235 	movw	r2, #565	; 0x235
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_LTDC_Init+0xf8>)
 80008e6:	f240 121d 	movw	r2, #285	; 0x11d
 80008ea:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_LTDC_Init+0xf8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_LTDC_Init+0xf8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_LTDC_Init+0xf8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000904:	481d      	ldr	r0, [pc, #116]	; (800097c <MX_LTDC_Init+0xf8>)
 8000906:	f002 fb65 	bl	8002fd4 <HAL_LTDC_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000910:	f000 fca6 	bl	8001260 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000918:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800091c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000922:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000926:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000928:	2302      	movs	r3, #2
 800092a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800092c:	23ff      	movs	r3, #255	; 0xff
 800092e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800093a:	2305      	movs	r3, #5
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	4619      	mov	r1, r3
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <MX_LTDC_Init+0xf8>)
 8000964:	f002 fc06 	bl	8003174 <HAL_LTDC_ConfigLayer>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800096e:	f000 fc77 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	3738      	adds	r7, #56	; 0x38
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20004154 	.word	0x20004154
 8000980:	40016800 	.word	0x40016800

08000984 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART1_UART_Init+0x58>)
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_USART1_UART_Init+0x5c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART1_UART_Init+0x58>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_USART1_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009c8:	f004 fa16 	bl	8004df8 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 fc45 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200041fc 	.word	0x200041fc
 80009e0:	40011000 	.word	0x40011000

080009e4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_FMC_Init+0x94>)
 80009fe:	4a1f      	ldr	r2, [pc, #124]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a00:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_FMC_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_FMC_Init+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_FMC_Init+0x94>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_FMC_Init+0x94>)
 8000a16:	2210      	movs	r2, #16
 8000a18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_FMC_Init+0x94>)
 8000a1c:	2240      	movs	r2, #64	; 0x40
 8000a1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_FMC_Init+0x94>)
 8000a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_FMC_Init+0x94>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_FMC_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_FMC_Init+0x94>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_FMC_Init+0x94>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000a44:	2306      	movs	r3, #6
 8000a46:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_FMC_Init+0x94>)
 8000a62:	f003 fe59 	bl	8004718 <HAL_SDRAM_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_FMC_Init+0x8c>
  {
    Error_Handler( );
 8000a6c:	f000 fbf8 	bl	8001260 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200042c8 	.word	0x200042c8
 8000a7c:	a0000140 	.word	0xa0000140

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b090      	sub	sp, #64	; 0x40
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a96:	4bad      	ldr	r3, [pc, #692]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4aac      	ldr	r2, [pc, #688]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4baa      	ldr	r3, [pc, #680]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aae:	4ba7      	ldr	r3, [pc, #668]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4aa6      	ldr	r2, [pc, #664]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4ba4      	ldr	r3, [pc, #656]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4ba1      	ldr	r3, [pc, #644]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4aa0      	ldr	r2, [pc, #640]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b9e      	ldr	r3, [pc, #632]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	623b      	str	r3, [r7, #32]
 8000adc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	4b9b      	ldr	r3, [pc, #620]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a9a      	ldr	r2, [pc, #616]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b98      	ldr	r3, [pc, #608]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b95      	ldr	r3, [pc, #596]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a94      	ldr	r2, [pc, #592]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b92      	ldr	r3, [pc, #584]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b8f      	ldr	r3, [pc, #572]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a8e      	ldr	r2, [pc, #568]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b8c      	ldr	r3, [pc, #560]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b26:	4b89      	ldr	r3, [pc, #548]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a88      	ldr	r2, [pc, #544]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b86      	ldr	r3, [pc, #536]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b3e:	4b83      	ldr	r3, [pc, #524]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a82      	ldr	r2, [pc, #520]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b80      	ldr	r3, [pc, #512]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b56:	4b7d      	ldr	r3, [pc, #500]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a7c      	ldr	r2, [pc, #496]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b7a      	ldr	r3, [pc, #488]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6e:	4b77      	ldr	r3, [pc, #476]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a76      	ldr	r2, [pc, #472]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b74:	f043 0320 	orr.w	r3, r3, #32
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b74      	ldr	r3, [pc, #464]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	4b71      	ldr	r3, [pc, #452]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a70      	ldr	r2, [pc, #448]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b6e      	ldr	r3, [pc, #440]	; (8000d4c <MX_GPIO_Init+0x2cc>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	486b      	ldr	r0, [pc, #428]	; (8000d50 <MX_GPIO_Init+0x2d0>)
 8000ba4:	f002 f9fc 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f241 010c 	movw	r1, #4108	; 0x100c
 8000bae:	4869      	ldr	r0, [pc, #420]	; (8000d54 <MX_GPIO_Init+0x2d4>)
 8000bb0:	f002 f9f6 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	4867      	ldr	r0, [pc, #412]	; (8000d58 <MX_GPIO_Init+0x2d8>)
 8000bba:	f002 f9f1 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc4:	4865      	ldr	r0, [pc, #404]	; (8000d5c <MX_GPIO_Init+0x2dc>)
 8000bc6:	f002 f9eb 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	21c8      	movs	r1, #200	; 0xc8
 8000bce:	4864      	ldr	r0, [pc, #400]	; (8000d60 <MX_GPIO_Init+0x2e0>)
 8000bd0:	f002 f9e6 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be4:	4619      	mov	r1, r3
 8000be6:	485f      	ldr	r0, [pc, #380]	; (8000d64 <MX_GPIO_Init+0x2e4>)
 8000be8:	f002 f82e 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000bec:	2304      	movs	r3, #4
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bfc:	2309      	movs	r3, #9
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c04:	4619      	mov	r1, r3
 8000c06:	4857      	ldr	r0, [pc, #348]	; (8000d64 <MX_GPIO_Init+0x2e4>)
 8000c08:	f002 f81e 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000c0c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1e:	230b      	movs	r3, #11
 8000c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c26:	4619      	mov	r1, r3
 8000c28:	484d      	ldr	r0, [pc, #308]	; (8000d60 <MX_GPIO_Init+0x2e0>)
 8000c2a:	f002 f80d 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000c2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c34:	2312      	movs	r3, #18
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c40:	2304      	movs	r3, #4
 8000c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4847      	ldr	r0, [pc, #284]	; (8000d68 <MX_GPIO_Init+0x2e8>)
 8000c4c:	f001 fffc 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000c50:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c62:	230a      	movs	r3, #10
 8000c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	483e      	ldr	r0, [pc, #248]	; (8000d68 <MX_GPIO_Init+0x2e8>)
 8000c6e:	f001 ffeb 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000c72:	2310      	movs	r3, #16
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4836      	ldr	r0, [pc, #216]	; (8000d68 <MX_GPIO_Init+0x2e8>)
 8000c8e:	f001 ffdb 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000caa:	4619      	mov	r1, r3
 8000cac:	4828      	ldr	r0, [pc, #160]	; (8000d50 <MX_GPIO_Init+0x2d0>)
 8000cae:	f001 ffcb 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000cb2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4827      	ldr	r0, [pc, #156]	; (8000d6c <MX_GPIO_Init+0x2ec>)
 8000cd0:	f001 ffba 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000cd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481f      	ldr	r0, [pc, #124]	; (8000d70 <MX_GPIO_Init+0x2f0>)
 8000cf2:	f001 ffa9 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000cf6:	2360      	movs	r3, #96	; 0x60
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d06:	230d      	movs	r3, #13
 8000d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4814      	ldr	r0, [pc, #80]	; (8000d64 <MX_GPIO_Init+0x2e4>)
 8000d12:	f001 ff99 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000d16:	2340      	movs	r3, #64	; 0x40
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d26:	230a      	movs	r3, #10
 8000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_GPIO_Init+0x2e8>)
 8000d32:	f001 ff89 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d48:	4619      	mov	r1, r3
 8000d4a:	e013      	b.n	8000d74 <MX_GPIO_Init+0x2f4>
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020c00 	.word	0x40020c00
 8000d54:	40022000 	.word	0x40022000
 8000d58:	40022800 	.word	0x40022800
 8000d5c:	40021c00 	.word	0x40021c00
 8000d60:	40021800 	.word	0x40021800
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	48bb      	ldr	r0, [pc, #748]	; (8001064 <MX_GPIO_Init+0x5e4>)
 8000d76:	f001 ff67 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000d7a:	2340      	movs	r3, #64	; 0x40
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d7e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	48b6      	ldr	r0, [pc, #728]	; (8001068 <MX_GPIO_Init+0x5e8>)
 8000d90:	f001 ff5a 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000d94:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da6:	230a      	movs	r3, #10
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	48ae      	ldr	r0, [pc, #696]	; (800106c <MX_GPIO_Init+0x5ec>)
 8000db2:	f001 ff49 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000db6:	23f0      	movs	r3, #240	; 0xf0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	48a7      	ldr	r0, [pc, #668]	; (8001070 <MX_GPIO_Init+0x5f0>)
 8000dd2:	f001 ff39 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000de8:	230a      	movs	r3, #10
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df0:	4619      	mov	r1, r3
 8000df2:	48a0      	ldr	r0, [pc, #640]	; (8001074 <MX_GPIO_Init+0x5f4>)
 8000df4:	f001 ff28 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000df8:	2320      	movs	r3, #32
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4896      	ldr	r0, [pc, #600]	; (8001068 <MX_GPIO_Init+0x5e8>)
 8000e10:	f001 ff1a 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000e14:	2308      	movs	r3, #8
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e24:	230d      	movs	r3, #13
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	488e      	ldr	r0, [pc, #568]	; (8001068 <MX_GPIO_Init+0x5e8>)
 8000e30:	f001 ff0a 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000e34:	f241 030c 	movw	r3, #4108	; 0x100c
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4888      	ldr	r0, [pc, #544]	; (8001070 <MX_GPIO_Init+0x5f0>)
 8000e4e:	f001 fefb 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e64:	4619      	mov	r1, r3
 8000e66:	4884      	ldr	r0, [pc, #528]	; (8001078 <MX_GPIO_Init+0x5f8>)
 8000e68:	f001 feee 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	487e      	ldr	r0, [pc, #504]	; (800107c <MX_GPIO_Init+0x5fc>)
 8000e84:	f001 fee0 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e9a:	230d      	movs	r3, #13
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4873      	ldr	r0, [pc, #460]	; (8001074 <MX_GPIO_Init+0x5f4>)
 8000ea6:	f001 fecf 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	486a      	ldr	r0, [pc, #424]	; (8001068 <MX_GPIO_Init+0x5e8>)
 8000ebe:	f001 fec3 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eda:	4619      	mov	r1, r3
 8000edc:	4862      	ldr	r0, [pc, #392]	; (8001068 <MX_GPIO_Init+0x5e8>)
 8000ede:	f001 feb3 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000ee2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4862      	ldr	r0, [pc, #392]	; (8001080 <MX_GPIO_Init+0x600>)
 8000ef8:	f001 fea6 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000efc:	2302      	movs	r3, #2
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f0c:	2305      	movs	r3, #5
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f14:	4619      	mov	r1, r3
 8000f16:	4856      	ldr	r0, [pc, #344]	; (8001070 <MX_GPIO_Init+0x5f0>)
 8000f18:	f001 fe96 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000f1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f32:	4619      	mov	r1, r3
 8000f34:	4852      	ldr	r0, [pc, #328]	; (8001080 <MX_GPIO_Init+0x600>)
 8000f36:	f001 fe87 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000f3a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f4c:	230d      	movs	r3, #13
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f54:	4619      	mov	r1, r3
 8000f56:	484a      	ldr	r0, [pc, #296]	; (8001080 <MX_GPIO_Init+0x600>)
 8000f58:	f001 fe76 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f74:	4619      	mov	r1, r3
 8000f76:	483e      	ldr	r0, [pc, #248]	; (8001070 <MX_GPIO_Init+0x5f0>)
 8000f78:	f001 fe66 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f96:	4619      	mov	r1, r3
 8000f98:	4834      	ldr	r0, [pc, #208]	; (800106c <MX_GPIO_Init+0x5ec>)
 8000f9a:	f001 fe55 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fa4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	482e      	ldr	r0, [pc, #184]	; (8001070 <MX_GPIO_Init+0x5f0>)
 8000fb6:	f001 fe47 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000fba:	23c0      	movs	r3, #192	; 0xc0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4828      	ldr	r0, [pc, #160]	; (8001078 <MX_GPIO_Init+0x5f8>)
 8000fd6:	f001 fe37 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fea:	230a      	movs	r3, #10
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4822      	ldr	r0, [pc, #136]	; (8001080 <MX_GPIO_Init+0x600>)
 8000ff6:	f001 fe27 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000ffa:	23c8      	movs	r3, #200	; 0xc8
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100e:	4619      	mov	r1, r3
 8001010:	4818      	ldr	r0, [pc, #96]	; (8001074 <MX_GPIO_Init+0x5f4>)
 8001012:	f001 fe19 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001016:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101c:	2303      	movs	r3, #3
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001028:	4619      	mov	r1, r3
 800102a:	4816      	ldr	r0, [pc, #88]	; (8001084 <MX_GPIO_Init+0x604>)
 800102c:	f001 fe0c 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001030:	2305      	movs	r3, #5
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001040:	230a      	movs	r3, #10
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001048:	4619      	mov	r1, r3
 800104a:	480b      	ldr	r0, [pc, #44]	; (8001078 <MX_GPIO_Init+0x5f8>)
 800104c:	f001 fdfc 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001050:	2332      	movs	r3, #50	; 0x32
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001060:	230b      	movs	r3, #11
 8001062:	e011      	b.n	8001088 <MX_GPIO_Init+0x608>
 8001064:	40022400 	.word	0x40022400
 8001068:	40020c00 	.word	0x40020c00
 800106c:	40020000 	.word	0x40020000
 8001070:	40022000 	.word	0x40022000
 8001074:	40021800 	.word	0x40021800
 8001078:	40020800 	.word	0x40020800
 800107c:	40022800 	.word	0x40022800
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40021400 	.word	0x40021400
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108e:	4619      	mov	r1, r3
 8001090:	4850      	ldr	r0, [pc, #320]	; (80011d4 <MX_GPIO_Init+0x754>)
 8001092:	f001 fdd9 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001096:	2304      	movs	r3, #4
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010a6:	2309      	movs	r3, #9
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4849      	ldr	r0, [pc, #292]	; (80011d8 <MX_GPIO_Init+0x758>)
 80010b2:	f001 fdc9 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80010b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010c8:	2309      	movs	r3, #9
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	4842      	ldr	r0, [pc, #264]	; (80011dc <MX_GPIO_Init+0x75c>)
 80010d4:	f001 fdb8 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80010d8:	2304      	movs	r3, #4
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e8:	4619      	mov	r1, r3
 80010ea:	483d      	ldr	r0, [pc, #244]	; (80011e0 <MX_GPIO_Init+0x760>)
 80010ec:	f001 fdac 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010f0:	2386      	movs	r3, #134	; 0x86
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001100:	230b      	movs	r3, #11
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001108:	4619      	mov	r1, r3
 800110a:	4836      	ldr	r0, [pc, #216]	; (80011e4 <MX_GPIO_Init+0x764>)
 800110c:	f001 fd9c 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001110:	2301      	movs	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001114:	2303      	movs	r3, #3
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	4619      	mov	r1, r3
 8001122:	4830      	ldr	r0, [pc, #192]	; (80011e4 <MX_GPIO_Init+0x764>)
 8001124:	f001 fd90 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001128:	2350      	movs	r3, #80	; 0x50
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001138:	230d      	movs	r3, #13
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001140:	4619      	mov	r1, r3
 8001142:	4828      	ldr	r0, [pc, #160]	; (80011e4 <MX_GPIO_Init+0x764>)
 8001144:	f001 fd80 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001148:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114e:	2312      	movs	r3, #18
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800115a:	2304      	movs	r3, #4
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800115e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001162:	4619      	mov	r1, r3
 8001164:	4820      	ldr	r0, [pc, #128]	; (80011e8 <MX_GPIO_Init+0x768>)
 8001166:	f001 fd6f 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800116a:	2328      	movs	r3, #40	; 0x28
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800117a:	230a      	movs	r3, #10
 800117c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001182:	4619      	mov	r1, r3
 8001184:	4817      	ldr	r0, [pc, #92]	; (80011e4 <MX_GPIO_Init+0x764>)
 8001186:	f001 fd5f 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800118a:	2340      	movs	r3, #64	; 0x40
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800119a:	2309      	movs	r3, #9
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a2:	4619      	mov	r1, r3
 80011a4:	4810      	ldr	r0, [pc, #64]	; (80011e8 <MX_GPIO_Init+0x768>)
 80011a6:	f001 fd4f 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80011aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011bc:	2305      	movs	r3, #5
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c4:	4619      	mov	r1, r3
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_GPIO_Init+0x758>)
 80011c8:	f001 fd3e 	bl	8002c48 <HAL_GPIO_Init>

}
 80011cc:	bf00      	nop
 80011ce:	3740      	adds	r7, #64	; 0x40
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40021800 	.word	0x40021800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40021c00 	.word	0x40021c00

080011ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f004 fbb6 	bl	8005966 <osDelay>
 80011fa:	e7fb      	b.n	80011f4 <StartDefaultTask+0x8>

080011fc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f004 fbae 	bl	8005966 <osDelay>
 800120a:	e7fb      	b.n	8001204 <StartTask02+0x8>

0800120c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f004 fba6 	bl	8005966 <osDelay>
 800121a:	e7fb      	b.n	8001214 <StartTask03+0x8>

0800121c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f004 fb9e 	bl	8005966 <osDelay>
 800122a:	e7fb      	b.n	8001224 <StartTask04+0x8>

0800122c <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f004 fb96 	bl	8005966 <osDelay>
 800123a:	e7fb      	b.n	8001234 <StartTask05+0x8>

0800123c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800124e:	f000 ff8b 	bl	8002168 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40010000 	.word	0x40010000

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>
	...

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <HAL_MspInit+0x4c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_MspInit+0x4c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	210f      	movs	r1, #15
 80012a6:	f06f 0001 	mvn.w	r0, #1
 80012aa:	f001 f859 	bl	8002360 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_DMA2D_MspInit+0x38>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10b      	bne.n	80012e6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_DMA2D_MspInit+0x3c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <HAL_DMA2D_MspInit+0x3c>)
 80012d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_DMA2D_MspInit+0x3c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	4002b000 	.word	0x4002b000
 80012f8:	40023800 	.word	0x40023800

080012fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0ae      	sub	sp, #184	; 0xb8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	2284      	movs	r2, #132	; 0x84
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f005 fd1d 	bl	8006d5c <memset>
  if(hltdc->Instance==LTDC)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6a      	ldr	r2, [pc, #424]	; (80014d0 <HAL_LTDC_MspInit+0x1d4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	f040 80cd 	bne.w	80014c8 <HAL_LTDC_MspInit+0x1cc>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800132e:	2308      	movs	r3, #8
 8001330:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001336:	2302      	movs	r3, #2
 8001338:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800133a:	2302      	movs	r3, #2
 800133c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800133e:	2300      	movs	r3, #0
 8001340:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fdf1 	bl	8003f38 <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 800135c:	f7ff ff80 	bl	8001260 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001360:	4b5c      	ldr	r3, [pc, #368]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	4a5b      	ldr	r2, [pc, #364]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 8001366:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800136a:	6453      	str	r3, [r2, #68]	; 0x44
 800136c:	4b59      	ldr	r3, [pc, #356]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001378:	4b56      	ldr	r3, [pc, #344]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	4a55      	ldr	r2, [pc, #340]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	6313      	str	r3, [r2, #48]	; 0x30
 8001384:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001390:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4a4f      	ldr	r2, [pc, #316]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139a:	6313      	str	r3, [r2, #48]	; 0x30
 800139c:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80013a8:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	4a49      	ldr	r2, [pc, #292]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 80013ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b2:	6313      	str	r3, [r2, #48]	; 0x30
 80013b4:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	4a43      	ldr	r2, [pc, #268]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 80013c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ca:	6313      	str	r3, [r2, #48]	; 0x30
 80013cc:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013d8:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a3d      	ldr	r2, [pc, #244]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 80013de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <HAL_LTDC_MspInit+0x1d8>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80013f0:	2310      	movs	r3, #16
 80013f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001408:	230e      	movs	r3, #14
 800140a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001412:	4619      	mov	r1, r3
 8001414:	4830      	ldr	r0, [pc, #192]	; (80014d8 <HAL_LTDC_MspInit+0x1dc>)
 8001416:	f001 fc17 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800141a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800141e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001434:	230e      	movs	r3, #14
 8001436:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800143a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800143e:	4619      	mov	r1, r3
 8001440:	4826      	ldr	r0, [pc, #152]	; (80014dc <HAL_LTDC_MspInit+0x1e0>)
 8001442:	f001 fc01 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001446:	23f7      	movs	r3, #247	; 0xf7
 8001448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800145e:	230e      	movs	r3, #14
 8001460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001464:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001468:	4619      	mov	r1, r3
 800146a:	481d      	ldr	r0, [pc, #116]	; (80014e0 <HAL_LTDC_MspInit+0x1e4>)
 800146c:	f001 fbec 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800148a:	2309      	movs	r3, #9
 800148c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001494:	4619      	mov	r1, r3
 8001496:	4813      	ldr	r0, [pc, #76]	; (80014e4 <HAL_LTDC_MspInit+0x1e8>)
 8001498:	f001 fbd6 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800149c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80014a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014b6:	230e      	movs	r3, #14
 80014b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <HAL_LTDC_MspInit+0x1ec>)
 80014c4:	f001 fbc0 	bl	8002c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	37b8      	adds	r7, #184	; 0xb8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40016800 	.word	0x40016800
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40022400 	.word	0x40022400
 80014e0:	40022800 	.word	0x40022800
 80014e4:	40021800 	.word	0x40021800
 80014e8:	40022000 	.word	0x40022000

080014ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0ac      	sub	sp, #176	; 0xb0
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	2284      	movs	r2, #132	; 0x84
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f005 fc25 	bl	8006d5c <memset>
  if(huart->Instance==USART1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_UART_MspInit+0xf4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d15c      	bne.n	80015d6 <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800151c:	2340      	movs	r3, #64	; 0x40
 800151e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001520:	2300      	movs	r3, #0
 8001522:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fd05 	bl	8003f38 <HAL_RCCEx_PeriphCLKConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001534:	f7ff fe94 	bl	8001260 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_UART_MspInit+0xf8>)
 800153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153c:	4a29      	ldr	r2, [pc, #164]	; (80015e4 <HAL_UART_MspInit+0xf8>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	6453      	str	r3, [r2, #68]	; 0x44
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <HAL_UART_MspInit+0xf8>)
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <HAL_UART_MspInit+0xf8>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <HAL_UART_MspInit+0xf8>)
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	6313      	str	r3, [r2, #48]	; 0x30
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <HAL_UART_MspInit+0xf8>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_UART_MspInit+0xf8>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <HAL_UART_MspInit+0xf8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6313      	str	r3, [r2, #48]	; 0x30
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_UART_MspInit+0xf8>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001598:	2307      	movs	r3, #7
 800159a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015a2:	4619      	mov	r1, r3
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <HAL_UART_MspInit+0xfc>)
 80015a6:	f001 fb4f 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80015aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c4:	2307      	movs	r3, #7
 80015c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015ce:	4619      	mov	r1, r3
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <HAL_UART_MspInit+0x100>)
 80015d2:	f001 fb39 	bl	8002c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	37b0      	adds	r7, #176	; 0xb0
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40011000 	.word	0x40011000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020000 	.word	0x40020000

080015f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001604:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_FMC_MspInit+0x100>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d16d      	bne.n	80016e8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800160c:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <HAL_FMC_MspInit+0x100>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_FMC_MspInit+0x104>)
 8001614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001616:	4a37      	ldr	r2, [pc, #220]	; (80016f4 <HAL_FMC_MspInit+0x104>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6393      	str	r3, [r2, #56]	; 0x38
 800161e:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_FMC_MspInit+0x104>)
 8001620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800162a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800162e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800163c:	230c      	movs	r3, #12
 800163e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	482c      	ldr	r0, [pc, #176]	; (80016f8 <HAL_FMC_MspInit+0x108>)
 8001646:	f001 faff 	bl	8002c48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800164a:	f248 1333 	movw	r3, #33075	; 0x8133
 800164e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800165c:	230c      	movs	r3, #12
 800165e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	4619      	mov	r1, r3
 8001664:	4825      	ldr	r0, [pc, #148]	; (80016fc <HAL_FMC_MspInit+0x10c>)
 8001666:	f001 faef 	bl	8002c48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800166a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800166e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800167c:	230c      	movs	r3, #12
 800167e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	481e      	ldr	r0, [pc, #120]	; (8001700 <HAL_FMC_MspInit+0x110>)
 8001686:	f001 fadf 	bl	8002c48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800168a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800168e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800169c:	230c      	movs	r3, #12
 800169e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4817      	ldr	r0, [pc, #92]	; (8001704 <HAL_FMC_MspInit+0x114>)
 80016a6:	f001 facf 	bl	8002c48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80016aa:	2328      	movs	r3, #40	; 0x28
 80016ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ba:	230c      	movs	r3, #12
 80016bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	4619      	mov	r1, r3
 80016c2:	4811      	ldr	r0, [pc, #68]	; (8001708 <HAL_FMC_MspInit+0x118>)
 80016c4:	f001 fac0 	bl	8002c48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80016c8:	2308      	movs	r3, #8
 80016ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016d8:	230c      	movs	r3, #12
 80016da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	480a      	ldr	r0, [pc, #40]	; (800170c <HAL_FMC_MspInit+0x11c>)
 80016e2:	f001 fab1 	bl	8002c48 <HAL_GPIO_Init>
 80016e6:	e000      	b.n	80016ea <HAL_FMC_MspInit+0xfa>
    return;
 80016e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000028c 	.word	0x2000028c
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40021800 	.word	0x40021800
 8001700:	40020c00 	.word	0x40020c00
 8001704:	40021400 	.word	0x40021400
 8001708:	40021c00 	.word	0x40021c00
 800170c:	40020800 	.word	0x40020800

08001710 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001718:	f7ff ff6a 	bl	80015f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	2019      	movs	r0, #25
 800173a:	f000 fe11 	bl	8002360 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800173e:	2019      	movs	r0, #25
 8001740:	f000 fe2a 	bl	8002398 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_InitTick+0xa0>)
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <HAL_InitTick+0xa0>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6453      	str	r3, [r2, #68]	; 0x44
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HAL_InitTick+0xa0>)
 8001752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800175c:	f107 0210 	add.w	r2, r7, #16
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f002 fbb4 	bl	8003ed4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800176c:	f002 fb9e 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8001770:	4603      	mov	r3, r0
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <HAL_InitTick+0xa4>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	0c9b      	lsrs	r3, r3, #18
 8001780:	3b01      	subs	r3, #1
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_InitTick+0xa8>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <HAL_InitTick+0xac>)
 8001788:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_InitTick+0xa8>)
 800178c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001790:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_InitTick+0xa8>)
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_InitTick+0xa8>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_InitTick+0xa8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80017a4:	4809      	ldr	r0, [pc, #36]	; (80017cc <HAL_InitTick+0xa8>)
 80017a6:	f003 f848 	bl	800483a <HAL_TIM_Base_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d104      	bne.n	80017ba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80017b0:	4806      	ldr	r0, [pc, #24]	; (80017cc <HAL_InitTick+0xa8>)
 80017b2:	f003 f8a3 	bl	80048fc <HAL_TIM_Base_Start_IT>
 80017b6:	4603      	mov	r3, r0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3730      	adds	r7, #48	; 0x30
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	431bde83 	.word	0x431bde83
 80017cc:	200042fc 	.word	0x200042fc
 80017d0:	40010000 	.word	0x40010000

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <NMI_Handler+0x4>

080017da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001806:	f003 f8f1 	bl	80049ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200042fc 	.word	0x200042fc

08001814 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <SystemInit+0x20>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <SystemInit+0x20>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001870 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800183c:	480d      	ldr	r0, [pc, #52]	; (8001874 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800183e:	490e      	ldr	r1, [pc, #56]	; (8001878 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001840:	4a0e      	ldr	r2, [pc, #56]	; (800187c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001854:	4c0b      	ldr	r4, [pc, #44]	; (8001884 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001862:	f7ff ffd7 	bl	8001814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001866:	f005 fa55 	bl	8006d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186a:	f7fe fed1 	bl	8000610 <main>
  bx  lr    
 800186e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001870:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001878:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800187c:	0800893c 	.word	0x0800893c
  ldr r2, =_sbss
 8001880:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001884:	20004428 	.word	0x20004428

08001888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001888:	e7fe      	b.n	8001888 <ADC_IRQHandler>
	...

0800188c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001890:	4b31      	ldr	r3, [pc, #196]	; (8001958 <BSP_LCD_Init+0xcc>)
 8001892:	2228      	movs	r2, #40	; 0x28
 8001894:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <BSP_LCD_Init+0xcc>)
 8001898:	2209      	movs	r2, #9
 800189a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800189c:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <BSP_LCD_Init+0xcc>)
 800189e:	2235      	movs	r2, #53	; 0x35
 80018a0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80018a2:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018a4:	220b      	movs	r2, #11
 80018a6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018aa:	f240 121b 	movw	r2, #283	; 0x11b
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80018b0:	4b29      	ldr	r3, [pc, #164]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018b2:	f240 2215 	movw	r2, #533	; 0x215
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018ba:	f240 121d 	movw	r2, #285	; 0x11d
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018c2:	f240 2235 	movw	r2, #565	; 0x235
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80018c8:	2100      	movs	r1, #0
 80018ca:	4823      	ldr	r0, [pc, #140]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018cc:	f000 fa20 	bl	8001d10 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018d6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018da:	f44f 7288 	mov.w	r2, #272	; 0x110
 80018de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <BSP_LCD_Init+0xcc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <BSP_LCD_Init+0xcc>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <BSP_LCD_Init+0xcc>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <BSP_LCD_Init+0xcc>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <BSP_LCD_Init+0xcc>)
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <BSP_LCD_Init+0xd0>)
 8001914:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001916:	4810      	ldr	r0, [pc, #64]	; (8001958 <BSP_LCD_Init+0xcc>)
 8001918:	f001 fc6a 	bl	80031f0 <HAL_LTDC_GetState>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001922:	2100      	movs	r1, #0
 8001924:	480c      	ldr	r0, [pc, #48]	; (8001958 <BSP_LCD_Init+0xcc>)
 8001926:	f000 f919 	bl	8001b5c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <BSP_LCD_Init+0xcc>)
 800192c:	f001 fb52 	bl	8002fd4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001936:	480a      	ldr	r0, [pc, #40]	; (8001960 <BSP_LCD_Init+0xd4>)
 8001938:	f001 fb32 	bl	8002fa0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	2108      	movs	r1, #8
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <BSP_LCD_Init+0xd8>)
 8001942:	f001 fb2d 	bl	8002fa0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001946:	f000 fa4b 	bl	8001de0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <BSP_LCD_Init+0xdc>)
 800194c:	f000 f8a6 	bl	8001a9c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20004348 	.word	0x20004348
 800195c:	40016800 	.word	0x40016800
 8001960:	40022000 	.word	0x40022000
 8001964:	40022800 	.word	0x40022800
 8001968:	20000004 	.word	0x20000004

0800196c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <BSP_LCD_GetXSize+0x20>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <BSP_LCD_GetXSize+0x24>)
 8001976:	2134      	movs	r1, #52	; 0x34
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	3360      	adds	r3, #96	; 0x60
 8001980:	681b      	ldr	r3, [r3, #0]
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	200002d0 	.word	0x200002d0
 8001990:	20004348 	.word	0x20004348

08001994 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <BSP_LCD_GetYSize+0x20>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <BSP_LCD_GetYSize+0x24>)
 800199e:	2134      	movs	r1, #52	; 0x34
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	3364      	adds	r3, #100	; 0x64
 80019a8:	681b      	ldr	r3, [r3, #0]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	200002d0 	.word	0x200002d0
 80019b8:	20004348 	.word	0x20004348

080019bc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80019bc:	b580      	push	{r7, lr}
 80019be:	b090      	sub	sp, #64	; 0x40
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80019cc:	f7ff ffce 	bl	800196c <BSP_LCD_GetXSize>
 80019d0:	4603      	mov	r3, r0
 80019d2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80019d8:	f7ff ffdc 	bl	8001994 <BSP_LCD_GetYSize>
 80019dc:	4603      	mov	r3, r0
 80019de:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80019e8:	23ff      	movs	r3, #255	; 0xff
 80019ea:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001a02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001a08:	2307      	movs	r3, #7
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001a0c:	f7ff ffae 	bl	800196c <BSP_LCD_GetXSize>
 8001a10:	4603      	mov	r3, r0
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001a14:	f7ff ffbe 	bl	8001994 <BSP_LCD_GetYSize>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001a1c:	88fa      	ldrh	r2, [r7, #6]
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	4619      	mov	r1, r3
 8001a24:	4812      	ldr	r0, [pc, #72]	; (8001a70 <BSP_LCD_LayerDefaultInit+0xb4>)
 8001a26:	f001 fba5 	bl	8003174 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001a2a:	88fa      	ldrh	r2, [r7, #6]
 8001a2c:	4911      	ldr	r1, [pc, #68]	; (8001a74 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3304      	adds	r3, #4
 8001a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a3e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001a40:	88fa      	ldrh	r2, [r7, #6]
 8001a42:	490c      	ldr	r1, [pc, #48]	; (8001a74 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3308      	adds	r3, #8
 8001a50:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001a52:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001a54:	88fa      	ldrh	r2, [r7, #6]
 8001a56:	4907      	ldr	r1, [pc, #28]	; (8001a74 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	3740      	adds	r7, #64	; 0x40
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20004348 	.word	0x20004348
 8001a74:	200002d4 	.word	0x200002d4
 8001a78:	20000004 	.word	0x20000004

08001a7c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <BSP_LCD_SelectLayer+0x1c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
} 
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200002d0 	.word	0x200002d0

08001a9c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <BSP_LCD_SetFont+0x2c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4908      	ldr	r1, [pc, #32]	; (8001acc <BSP_LCD_SetFont+0x30>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3308      	adds	r3, #8
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	601a      	str	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	200002d0 	.word	0x200002d0
 8001acc:	200002d4 	.word	0x200002d4

08001ad0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <BSP_LCD_Clear+0x48>)
 8001ada:	681c      	ldr	r4, [r3, #0]
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <BSP_LCD_Clear+0x48>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <BSP_LCD_Clear+0x4c>)
 8001ae2:	2134      	movs	r1, #52	; 0x34
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	335c      	adds	r3, #92	; 0x5c
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	461e      	mov	r6, r3
 8001af0:	f7ff ff3c 	bl	800196c <BSP_LCD_GetXSize>
 8001af4:	4605      	mov	r5, r0
 8001af6:	f7ff ff4d 	bl	8001994 <BSP_LCD_GetYSize>
 8001afa:	4602      	mov	r2, r0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2300      	movs	r3, #0
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	462a      	mov	r2, r5
 8001b08:	4631      	mov	r1, r6
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f000 f91c 	bl	8001d48 <LL_FillBuffer>
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b18:	200002d0 	.word	0x200002d0
 8001b1c:	20004348 	.word	0x20004348

08001b20 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <BSP_LCD_DisplayOn+0x30>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699a      	ldr	r2, [r3, #24]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <BSP_LCD_DisplayOn+0x30>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001b34:	2201      	movs	r2, #1
 8001b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3a:	4806      	ldr	r0, [pc, #24]	; (8001b54 <BSP_LCD_DisplayOn+0x34>)
 8001b3c:	f001 fa30 	bl	8002fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001b40:	2201      	movs	r2, #1
 8001b42:	2108      	movs	r1, #8
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <BSP_LCD_DisplayOn+0x38>)
 8001b46:	f001 fa2b 	bl	8002fa0 <HAL_GPIO_WritePin>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20004348 	.word	0x20004348
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40022800 	.word	0x40022800

08001b5c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b090      	sub	sp, #64	; 0x40
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001b66:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a63      	ldr	r2, [pc, #396]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001b6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b61      	ldr	r3, [pc, #388]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b7e:	4b5e      	ldr	r3, [pc, #376]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a5d      	ldr	r2, [pc, #372]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001b84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b5b      	ldr	r3, [pc, #364]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b96:	4b58      	ldr	r3, [pc, #352]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a57      	ldr	r2, [pc, #348]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001b9c:	f043 0310 	orr.w	r3, r3, #16
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b55      	ldr	r3, [pc, #340]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	623b      	str	r3, [r7, #32]
 8001bac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bae:	4b52      	ldr	r3, [pc, #328]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a51      	ldr	r2, [pc, #324]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bc6:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001bde:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a45      	ldr	r2, [pc, #276]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001bf6:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a3f      	ldr	r2, [pc, #252]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001bfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001c0e:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a39      	ldr	r2, [pc, #228]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a33      	ldr	r2, [pc, #204]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001c2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <BSP_LCD_MspInit+0x19c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001c3e:	2310      	movs	r3, #16
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001c4e:	230e      	movs	r3, #14
 8001c50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c56:	4619      	mov	r1, r3
 8001c58:	4828      	ldr	r0, [pc, #160]	; (8001cfc <BSP_LCD_MspInit+0x1a0>)
 8001c5a:	f000 fff5 	bl	8002c48 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001c68:	2309      	movs	r3, #9
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c70:	4619      	mov	r1, r3
 8001c72:	4823      	ldr	r0, [pc, #140]	; (8001d00 <BSP_LCD_MspInit+0x1a4>)
 8001c74:	f000 ffe8 	bl	8002c48 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8001c78:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001c82:	230e      	movs	r3, #14
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	481d      	ldr	r0, [pc, #116]	; (8001d04 <BSP_LCD_MspInit+0x1a8>)
 8001c8e:	f000 ffdb 	bl	8002c48 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001c92:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001c9c:	230e      	movs	r3, #14
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4818      	ldr	r0, [pc, #96]	; (8001d08 <BSP_LCD_MspInit+0x1ac>)
 8001ca8:	f000 ffce 	bl	8002c48 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001cac:	23f7      	movs	r3, #247	; 0xf7
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001cb4:	230e      	movs	r3, #14
 8001cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4813      	ldr	r0, [pc, #76]	; (8001d0c <BSP_LCD_MspInit+0x1b0>)
 8001cc0:	f000 ffc2 	bl	8002c48 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480b      	ldr	r0, [pc, #44]	; (8001d04 <BSP_LCD_MspInit+0x1a8>)
 8001cd6:	f000 ffb7 	bl	8002c48 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001cda:	2308      	movs	r3, #8
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4808      	ldr	r0, [pc, #32]	; (8001d0c <BSP_LCD_MspInit+0x1b0>)
 8001cea:	f000 ffad 	bl	8002c48 <HAL_GPIO_Init>
}
 8001cee:	bf00      	nop
 8001cf0:	3740      	adds	r7, #64	; 0x40
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40021800 	.word	0x40021800
 8001d04:	40022000 	.word	0x40022000
 8001d08:	40022400 	.word	0x40022400
 8001d0c:	40022800 	.word	0x40022800

08001d10 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <BSP_LCD_ClockConfig+0x34>)
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <BSP_LCD_ClockConfig+0x34>)
 8001d22:	22c0      	movs	r2, #192	; 0xc0
 8001d24:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <BSP_LCD_ClockConfig+0x34>)
 8001d28:	2205      	movs	r2, #5
 8001d2a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <BSP_LCD_ClockConfig+0x34>)
 8001d2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <BSP_LCD_ClockConfig+0x34>)
 8001d36:	f002 f8ff 	bl	8003f38 <HAL_RCCEx_PeriphCLKConfig>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200002ec 	.word	0x200002ec

08001d48 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001d56:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <LL_FillBuffer+0x88>)
 8001d58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d5c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <LL_FillBuffer+0x8c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <LL_FillBuffer+0x90>)
 8001d64:	2134      	movs	r1, #52	; 0x34
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3348      	adds	r3, #72	; 0x48
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d103      	bne.n	8001d7c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <LL_FillBuffer+0x88>)
 8001d76:	2202      	movs	r2, #2
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	e002      	b.n	8001d82 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <LL_FillBuffer+0x88>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001d82:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <LL_FillBuffer+0x88>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <LL_FillBuffer+0x88>)
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <LL_FillBuffer+0x94>)
 8001d8c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001d8e:	4810      	ldr	r0, [pc, #64]	; (8001dd0 <LL_FillBuffer+0x88>)
 8001d90:	f000 fcce 	bl	8002730 <HAL_DMA2D_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d115      	bne.n	8001dc6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001d9a:	68f9      	ldr	r1, [r7, #12]
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <LL_FillBuffer+0x88>)
 8001d9e:	f000 fe25 	bl	80029ec <HAL_DMA2D_ConfigLayer>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10e      	bne.n	8001dc6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69f9      	ldr	r1, [r7, #28]
 8001db2:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <LL_FillBuffer+0x88>)
 8001db4:	f000 fd06 	bl	80027c4 <HAL_DMA2D_Start>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001dbe:	210a      	movs	r1, #10
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <LL_FillBuffer+0x88>)
 8001dc2:	f000 fd2a 	bl	800281a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000290 	.word	0x20000290
 8001dd4:	200002d0 	.word	0x200002d0
 8001dd8:	20004348 	.word	0x20004348
 8001ddc:	4002b000 	.word	0x4002b000

08001de0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001de4:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001de6:	4a2a      	ldr	r2, [pc, #168]	; (8001e90 <BSP_SDRAM_Init+0xb0>)
 8001de8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <BSP_SDRAM_Init+0xb4>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <BSP_SDRAM_Init+0xb4>)
 8001df2:	2207      	movs	r2, #7
 8001df4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001df6:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <BSP_SDRAM_Init+0xb4>)
 8001df8:	2204      	movs	r2, #4
 8001dfa:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <BSP_SDRAM_Init+0xb4>)
 8001dfe:	2207      	movs	r2, #7
 8001e00:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001e02:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <BSP_SDRAM_Init+0xb4>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <BSP_SDRAM_Init+0xb4>)
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <BSP_SDRAM_Init+0xb4>)
 8001e10:	2202      	movs	r2, #2
 8001e12:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e22:	2204      	movs	r2, #4
 8001e24:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e28:	2210      	movs	r2, #16
 8001e2a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e2e:	2240      	movs	r2, #64	; 0x40
 8001e30:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e38:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e46:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001e56:	2100      	movs	r1, #0
 8001e58:	480c      	ldr	r0, [pc, #48]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e5a:	f000 f87f 	bl	8001f5c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001e5e:	490d      	ldr	r1, [pc, #52]	; (8001e94 <BSP_SDRAM_Init+0xb4>)
 8001e60:	480a      	ldr	r0, [pc, #40]	; (8001e8c <BSP_SDRAM_Init+0xac>)
 8001e62:	f002 fc59 	bl	8004718 <HAL_SDRAM_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <BSP_SDRAM_Init+0xb8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e002      	b.n	8001e7a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <BSP_SDRAM_Init+0xb8>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001e7a:	f240 6003 	movw	r0, #1539	; 0x603
 8001e7e:	f000 f80d 	bl	8001e9c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <BSP_SDRAM_Init+0xb8>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200043f0 	.word	0x200043f0
 8001e90:	a0000140 	.word	0xa0000140
 8001e94:	20000370 	.word	0x20000370
 8001e98:	2000000c 	.word	0x2000000c

08001e9c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001eae:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec4:	4923      	ldr	r1, [pc, #140]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ec6:	4824      	ldr	r0, [pc, #144]	; (8001f58 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ec8:	f002 fc5a 	bl	8004780 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f000 f96b 	bl	80021a8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eda:	2210      	movs	r2, #16
 8001edc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eee:	4919      	ldr	r1, [pc, #100]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ef0:	4819      	ldr	r0, [pc, #100]	; (8001f58 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ef2:	f002 fc45 	bl	8004780 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ef8:	2203      	movs	r2, #3
 8001efa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001efe:	2210      	movs	r2, #16
 8001f00:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001f02:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f04:	2208      	movs	r2, #8
 8001f06:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f12:	4910      	ldr	r1, [pc, #64]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f14:	4810      	ldr	r0, [pc, #64]	; (8001f58 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f16:	f002 fc33 	bl	8004780 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001f1a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001f1e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f22:	2204      	movs	r2, #4
 8001f24:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f28:	2210      	movs	r2, #16
 8001f2a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f36:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3c:	4905      	ldr	r1, [pc, #20]	; (8001f54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f3e:	4806      	ldr	r0, [pc, #24]	; (8001f58 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f40:	f002 fc1e 	bl	8004780 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4804      	ldr	r0, [pc, #16]	; (8001f58 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f48:	f002 fc4f 	bl	80047ea <HAL_SDRAM_ProgramRefreshRate>
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	2000038c 	.word	0x2000038c
 8001f58:	200043f0 	.word	0x200043f0

08001f5c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b090      	sub	sp, #64	; 0x40
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f66:	4b70      	ldr	r3, [pc, #448]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	4a6f      	ldr	r2, [pc, #444]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6393      	str	r3, [r2, #56]	; 0x38
 8001f72:	4b6d      	ldr	r3, [pc, #436]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001f7e:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a69      	ldr	r2, [pc, #420]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001f84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f96:	4b64      	ldr	r3, [pc, #400]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a63      	ldr	r2, [pc, #396]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b61      	ldr	r3, [pc, #388]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	4b5e      	ldr	r3, [pc, #376]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a5d      	ldr	r2, [pc, #372]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc6:	4b58      	ldr	r3, [pc, #352]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a57      	ldr	r2, [pc, #348]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001fcc:	f043 0310 	orr.w	r3, r3, #16
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b55      	ldr	r3, [pc, #340]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fde:	4b52      	ldr	r3, [pc, #328]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a51      	ldr	r2, [pc, #324]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ff6:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a4b      	ldr	r2, [pc, #300]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8001ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b49      	ldr	r3, [pc, #292]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800200e:	4b46      	ldr	r3, [pc, #280]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a45      	ldr	r2, [pc, #276]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 8002014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b43      	ldr	r3, [pc, #268]	; (8002128 <BSP_SDRAM_MspInit+0x1cc>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800202a:	2301      	movs	r3, #1
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800202e:	2302      	movs	r3, #2
 8002030:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002032:	230c      	movs	r3, #12
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002036:	2308      	movs	r3, #8
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800203a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800203e:	4619      	mov	r1, r3
 8002040:	483a      	ldr	r0, [pc, #232]	; (800212c <BSP_SDRAM_MspInit+0x1d0>)
 8002042:	f000 fe01 	bl	8002c48 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002046:	f24c 7303 	movw	r3, #50947	; 0xc703
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800204c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002050:	4619      	mov	r1, r3
 8002052:	4837      	ldr	r0, [pc, #220]	; (8002130 <BSP_SDRAM_MspInit+0x1d4>)
 8002054:	f000 fdf8 	bl	8002c48 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002058:	f64f 7383 	movw	r3, #65411	; 0xff83
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800205e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002062:	4619      	mov	r1, r3
 8002064:	4833      	ldr	r0, [pc, #204]	; (8002134 <BSP_SDRAM_MspInit+0x1d8>)
 8002066:	f000 fdef 	bl	8002c48 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800206a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002074:	4619      	mov	r1, r3
 8002076:	4830      	ldr	r0, [pc, #192]	; (8002138 <BSP_SDRAM_MspInit+0x1dc>)
 8002078:	f000 fde6 	bl	8002c48 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800207c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002086:	4619      	mov	r1, r3
 8002088:	482c      	ldr	r0, [pc, #176]	; (800213c <BSP_SDRAM_MspInit+0x1e0>)
 800208a:	f000 fddd 	bl	8002c48 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800208e:	2328      	movs	r3, #40	; 0x28
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002096:	4619      	mov	r1, r3
 8002098:	4829      	ldr	r0, [pc, #164]	; (8002140 <BSP_SDRAM_MspInit+0x1e4>)
 800209a:	f000 fdd5 	bl	8002c48 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020c0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020c8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80020d0:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020d6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020e0:	2203      	movs	r2, #3
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80020e4:	4b17      	ldr	r3, [pc, #92]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020f2:	4a15      	ldr	r2, [pc, #84]	; (8002148 <BSP_SDRAM_MspInit+0x1ec>)
 80020f4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a12      	ldr	r2, [pc, #72]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002102:	4810      	ldr	r0, [pc, #64]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 8002104:	f000 fa04 	bl	8002510 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002108:	480e      	ldr	r0, [pc, #56]	; (8002144 <BSP_SDRAM_MspInit+0x1e8>)
 800210a:	f000 f953 	bl	80023b4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	210f      	movs	r1, #15
 8002112:	2038      	movs	r0, #56	; 0x38
 8002114:	f000 f924 	bl	8002360 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002118:	2038      	movs	r0, #56	; 0x38
 800211a:	f000 f93d 	bl	8002398 <HAL_NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3740      	adds	r7, #64	; 0x40
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40020800 	.word	0x40020800
 8002130:	40020c00 	.word	0x40020c00
 8002134:	40021000 	.word	0x40021000
 8002138:	40021400 	.word	0x40021400
 800213c:	40021800 	.word	0x40021800
 8002140:	40021c00 	.word	0x40021c00
 8002144:	2000039c 	.word	0x2000039c
 8002148:	40026410 	.word	0x40026410

0800214c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f000 f8fa 	bl	800234a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002156:	200f      	movs	r0, #15
 8002158:	f7ff fae4 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800215c:	f7ff f886 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_IncTick+0x20>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_IncTick+0x24>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4413      	add	r3, r2
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_IncTick+0x24>)
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000014 	.word	0x20000014
 800218c:	20004424 	.word	0x20004424

08002190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_GetTick+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20004424 	.word	0x20004424

080021a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b0:	f7ff ffee 	bl	8002190 <HAL_GetTick>
 80021b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c0:	d005      	beq.n	80021ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_Delay+0x44>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ce:	bf00      	nop
 80021d0:	f7ff ffde 	bl	8002190 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d8f7      	bhi.n	80021d0 <HAL_Delay+0x28>
  {
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000014 	.word	0x20000014

080021f0 <__NVIC_SetPriorityGrouping>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <__NVIC_SetPriorityGrouping+0x40>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	4313      	orrs	r3, r2
 800221c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221e:	4a04      	ldr	r2, [pc, #16]	; (8002230 <__NVIC_SetPriorityGrouping+0x40>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	60d3      	str	r3, [r2, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00
 8002234:	05fa0000 	.word	0x05fa0000

08002238 <__NVIC_GetPriorityGrouping>:
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ff4c 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002372:	f7ff ff61 	bl	8002238 <__NVIC_GetPriorityGrouping>
 8002376:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	6978      	ldr	r0, [r7, #20]
 800237e:	f7ff ffb1 	bl	80022e4 <NVIC_EncodePriority>
 8002382:	4602      	mov	r2, r0
 8002384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff80 	bl	8002290 <__NVIC_SetPriority>
}
 8002390:	bf00      	nop
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff54 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023c0:	f7ff fee6 	bl	8002190 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e099      	b.n	8002504 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f0:	e00f      	b.n	8002412 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023f2:	f7ff fecd 	bl	8002190 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	d908      	bls.n	8002412 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2203      	movs	r2, #3
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e078      	b.n	8002504 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e8      	bne.n	80023f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_DMA_Init+0x158>)
 800242c:	4013      	ands	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800243e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	2b04      	cmp	r3, #4
 800246a:	d107      	bne.n	800247c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	4313      	orrs	r3, r2
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f023 0307 	bic.w	r3, r3, #7
 8002492:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d117      	bne.n	80024d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00e      	beq.n	80024d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f8bd 	bl	8002638 <DMA_CheckFifoParam>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2240      	movs	r2, #64	; 0x40
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024d2:	2301      	movs	r3, #1
 80024d4:	e016      	b.n	8002504 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f874 	bl	80025cc <DMA_CalcBaseAndBitshift>
 80024e4:	4603      	mov	r3, r0
 80024e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	223f      	movs	r2, #63	; 0x3f
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	f010803f 	.word	0xf010803f

08002510 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e050      	b.n	80025c4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d101      	bne.n	8002532 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800252e:	2302      	movs	r3, #2
 8002530:	e048      	b.n	80025c4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2200      	movs	r2, #0
 8002550:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2221      	movs	r2, #33	; 0x21
 8002570:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f82a 	bl	80025cc <DMA_CalcBaseAndBitshift>
 8002578:	4603      	mov	r3, r0
 800257a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	223f      	movs	r2, #63	; 0x3f
 8002582:	409a      	lsls	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	3b10      	subs	r3, #16
 80025dc:	4a13      	ldr	r2, [pc, #76]	; (800262c <DMA_CalcBaseAndBitshift+0x60>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <DMA_CalcBaseAndBitshift+0x64>)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d908      	bls.n	800260c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <DMA_CalcBaseAndBitshift+0x68>)
 8002602:	4013      	ands	r3, r2
 8002604:	1d1a      	adds	r2, r3, #4
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	; 0x58
 800260a:	e006      	b.n	800261a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <DMA_CalcBaseAndBitshift+0x68>)
 8002614:	4013      	ands	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	aaaaaaab 	.word	0xaaaaaaab
 8002630:	08008924 	.word	0x08008924
 8002634:	fffffc00 	.word	0xfffffc00

08002638 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d11f      	bne.n	8002692 <DMA_CheckFifoParam+0x5a>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d856      	bhi.n	8002706 <DMA_CheckFifoParam+0xce>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <DMA_CheckFifoParam+0x28>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002671 	.word	0x08002671
 8002664:	08002683 	.word	0x08002683
 8002668:	08002671 	.word	0x08002671
 800266c:	08002707 	.word	0x08002707
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d046      	beq.n	800270a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002680:	e043      	b.n	800270a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800268a:	d140      	bne.n	800270e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002690:	e03d      	b.n	800270e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269a:	d121      	bne.n	80026e0 <DMA_CheckFifoParam+0xa8>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d837      	bhi.n	8002712 <DMA_CheckFifoParam+0xda>
 80026a2:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <DMA_CheckFifoParam+0x70>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	080026b9 	.word	0x080026b9
 80026ac:	080026bf 	.word	0x080026bf
 80026b0:	080026b9 	.word	0x080026b9
 80026b4:	080026d1 	.word	0x080026d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      break;
 80026bc:	e030      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d025      	beq.n	8002716 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ce:	e022      	b.n	8002716 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026d8:	d11f      	bne.n	800271a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026de:	e01c      	b.n	800271a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d903      	bls.n	80026ee <DMA_CheckFifoParam+0xb6>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d003      	beq.n	80026f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026ec:	e018      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
      break;
 80026f2:	e015      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00e      	beq.n	800271e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
      break;
 8002704:	e00b      	b.n	800271e <DMA_CheckFifoParam+0xe6>
      break;
 8002706:	bf00      	nop
 8002708:	e00a      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;
 800270a:	bf00      	nop
 800270c:	e008      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;
 800270e:	bf00      	nop
 8002710:	e006      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;
 8002712:	bf00      	nop
 8002714:	e004      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;
 8002716:	bf00      	nop
 8002718:	e002      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;   
 800271a:	bf00      	nop
 800271c:	e000      	b.n	8002720 <DMA_CheckFifoParam+0xe8>
      break;
 800271e:	bf00      	nop
    }
  } 
  
  return status; 
 8002720:	7bfb      	ldrb	r3, [r7, #15]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop

08002730 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e039      	b.n	80027b6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe fdb0 	bl	80012bc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002780:	f023 0107 	bic.w	r1, r3, #7
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_DMA2D_Init+0x90>)
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68d1      	ldr	r1, [r2, #12]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	430b      	orrs	r3, r1
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	ffffc000 	.word	0xffffc000

080027c4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_DMA2D_Start+0x1c>
 80027dc:	2302      	movs	r3, #2
 80027de:	e018      	b.n	8002812 <HAL_DMA2D_Start+0x4e>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f988 	bl	8002b10 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d056      	beq.n	80028e4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002836:	f7ff fcab 	bl	8002190 <HAL_GetTick>
 800283a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800283c:	e04b      	b.n	80028d6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800284c:	2b00      	cmp	r3, #0
 800284e:	d023      	beq.n	8002898 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	f043 0202 	orr.w	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2221      	movs	r2, #33	; 0x21
 8002882:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2204      	movs	r2, #4
 8002888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0a5      	b.n	80029e4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800289e:	d01a      	beq.n	80028d6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028a0:	f7ff fc76 	bl	8002190 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d302      	bcc.n	80028b6 <HAL_DMA2D_PollForTransfer+0x9c>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10f      	bne.n	80028d6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	f043 0220 	orr.w	r2, r3, #32
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2203      	movs	r2, #3
 80028c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e086      	b.n	80029e4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ac      	beq.n	800283e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d061      	beq.n	80029ca <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002906:	f7ff fc43 	bl	8002190 <HAL_GetTick>
 800290a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800290c:	e056      	b.n	80029bc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800291c:	2b00      	cmp	r3, #0
 800291e:	d02e      	beq.n	800297e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	f043 0204 	orr.w	r2, r3, #4
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	f043 0202 	orr.w	r2, r3, #2
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2229      	movs	r2, #41	; 0x29
 8002968:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2204      	movs	r2, #4
 800296e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e032      	b.n	80029e4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002984:	d01a      	beq.n	80029bc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7ff fc03 	bl	8002190 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <HAL_DMA2D_PollForTransfer+0x182>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10f      	bne.n	80029bc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2203      	movs	r2, #3
 80029ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e013      	b.n	80029e4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0a1      	beq.n	800290e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2212      	movs	r2, #18
 80029d0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_DMA2D_ConfigLayer+0x20>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e079      	b.n	8002b00 <HAL_DMA2D_ConfigLayer+0x114>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	3318      	adds	r3, #24
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002a36:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_DMA2D_ConfigLayer+0x120>)
 8002a38:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b0a      	cmp	r3, #10
 8002a40:	d003      	beq.n	8002a4a <HAL_DMA2D_ConfigLayer+0x5e>
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b09      	cmp	r3, #9
 8002a48:	d107      	bne.n	8002a5a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e005      	b.n	8002a66 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	061b      	lsls	r3, r3, #24
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d120      	bne.n	8002aae <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	ea02 0103 	and.w	r1, r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b0a      	cmp	r3, #10
 8002a94:	d003      	beq.n	8002a9e <HAL_DMA2D_ConfigLayer+0xb2>
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b09      	cmp	r3, #9
 8002a9c:	d127      	bne.n	8002aee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8002aac:	e01f      	b.n	8002aee <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	ea02 0103 	and.w	r1, r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b0a      	cmp	r3, #10
 8002ad6:	d003      	beq.n	8002ae0 <HAL_DMA2D_ConfigLayer+0xf4>
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b09      	cmp	r3, #9
 8002ade:	d106      	bne.n	8002aee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002aec:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	ff03000f 	.word	0xff03000f

08002b10 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b08b      	sub	sp, #44	; 0x2c
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	041a      	lsls	r2, r3, #16
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b48:	d174      	bne.n	8002c34 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b50:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b58:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b60:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d108      	bne.n	8002b82 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b80:	e053      	b.n	8002c2a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d106      	bne.n	8002b98 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
 8002b96:	e048      	b.n	8002c2a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d111      	bne.n	8002bc4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	0cdb      	lsrs	r3, r3, #19
 8002ba4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	0a9b      	lsrs	r3, r3, #10
 8002baa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	08db      	lsrs	r3, r3, #3
 8002bb0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	02db      	lsls	r3, r3, #11
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc2:	e032      	b.n	8002c2a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d117      	bne.n	8002bfc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	0fdb      	lsrs	r3, r3, #31
 8002bd0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	0cdb      	lsrs	r3, r3, #19
 8002bd6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	0adb      	lsrs	r3, r3, #11
 8002bdc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	08db      	lsrs	r3, r3, #3
 8002be2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	029b      	lsls	r3, r3, #10
 8002bec:	431a      	orrs	r2, r3
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	03db      	lsls	r3, r3, #15
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfa:	e016      	b.n	8002c2a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	0f1b      	lsrs	r3, r3, #28
 8002c00:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	0d1b      	lsrs	r3, r3, #20
 8002c06:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	0b1b      	lsrs	r3, r3, #12
 8002c0c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	011a      	lsls	r2, r3, #4
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	031b      	lsls	r3, r3, #12
 8002c22:	4313      	orrs	r3, r2
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002c32:	e003      	b.n	8002c3c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	60da      	str	r2, [r3, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	372c      	adds	r7, #44	; 0x2c
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	e175      	b.n	8002f54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	f040 8164 	bne.w	8002f4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d005      	beq.n	8002c9e <HAL_GPIO_Init+0x56>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d130      	bne.n	8002d00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	2203      	movs	r2, #3
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 0201 	and.w	r2, r3, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d017      	beq.n	8002d3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d123      	bne.n	8002d90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	220f      	movs	r2, #15
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	08da      	lsrs	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3208      	adds	r2, #8
 8002d8a:	69b9      	ldr	r1, [r7, #24]
 8002d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80be 	beq.w	8002f4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	4b66      	ldr	r3, [pc, #408]	; (8002f6c <HAL_GPIO_Init+0x324>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a65      	ldr	r2, [pc, #404]	; (8002f6c <HAL_GPIO_Init+0x324>)
 8002dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b63      	ldr	r3, [pc, #396]	; (8002f6c <HAL_GPIO_Init+0x324>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002dea:	4a61      	ldr	r2, [pc, #388]	; (8002f70 <HAL_GPIO_Init+0x328>)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	3302      	adds	r3, #2
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	220f      	movs	r2, #15
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_GPIO_Init+0x32c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d037      	beq.n	8002e86 <HAL_GPIO_Init+0x23e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a57      	ldr	r2, [pc, #348]	; (8002f78 <HAL_GPIO_Init+0x330>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d031      	beq.n	8002e82 <HAL_GPIO_Init+0x23a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a56      	ldr	r2, [pc, #344]	; (8002f7c <HAL_GPIO_Init+0x334>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d02b      	beq.n	8002e7e <HAL_GPIO_Init+0x236>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a55      	ldr	r2, [pc, #340]	; (8002f80 <HAL_GPIO_Init+0x338>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d025      	beq.n	8002e7a <HAL_GPIO_Init+0x232>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a54      	ldr	r2, [pc, #336]	; (8002f84 <HAL_GPIO_Init+0x33c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01f      	beq.n	8002e76 <HAL_GPIO_Init+0x22e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a53      	ldr	r2, [pc, #332]	; (8002f88 <HAL_GPIO_Init+0x340>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d019      	beq.n	8002e72 <HAL_GPIO_Init+0x22a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a52      	ldr	r2, [pc, #328]	; (8002f8c <HAL_GPIO_Init+0x344>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_GPIO_Init+0x226>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a51      	ldr	r2, [pc, #324]	; (8002f90 <HAL_GPIO_Init+0x348>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00d      	beq.n	8002e6a <HAL_GPIO_Init+0x222>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a50      	ldr	r2, [pc, #320]	; (8002f94 <HAL_GPIO_Init+0x34c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d007      	beq.n	8002e66 <HAL_GPIO_Init+0x21e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4f      	ldr	r2, [pc, #316]	; (8002f98 <HAL_GPIO_Init+0x350>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_GPIO_Init+0x21a>
 8002e5e:	2309      	movs	r3, #9
 8002e60:	e012      	b.n	8002e88 <HAL_GPIO_Init+0x240>
 8002e62:	230a      	movs	r3, #10
 8002e64:	e010      	b.n	8002e88 <HAL_GPIO_Init+0x240>
 8002e66:	2308      	movs	r3, #8
 8002e68:	e00e      	b.n	8002e88 <HAL_GPIO_Init+0x240>
 8002e6a:	2307      	movs	r3, #7
 8002e6c:	e00c      	b.n	8002e88 <HAL_GPIO_Init+0x240>
 8002e6e:	2306      	movs	r3, #6
 8002e70:	e00a      	b.n	8002e88 <HAL_GPIO_Init+0x240>
 8002e72:	2305      	movs	r3, #5
 8002e74:	e008      	b.n	8002e88 <HAL_GPIO_Init+0x240>
 8002e76:	2304      	movs	r3, #4
 8002e78:	e006      	b.n	8002e88 <HAL_GPIO_Init+0x240>
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e004      	b.n	8002e88 <HAL_GPIO_Init+0x240>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e002      	b.n	8002e88 <HAL_GPIO_Init+0x240>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_GPIO_Init+0x240>
 8002e86:	2300      	movs	r3, #0
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	f002 0203 	and.w	r2, r2, #3
 8002e8e:	0092      	lsls	r2, r2, #2
 8002e90:	4093      	lsls	r3, r2
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e98:	4935      	ldr	r1, [pc, #212]	; (8002f70 <HAL_GPIO_Init+0x328>)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	; (8002f9c <HAL_GPIO_Init+0x354>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eca:	4a34      	ldr	r2, [pc, #208]	; (8002f9c <HAL_GPIO_Init+0x354>)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed0:	4b32      	ldr	r3, [pc, #200]	; (8002f9c <HAL_GPIO_Init+0x354>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef4:	4a29      	ldr	r2, [pc, #164]	; (8002f9c <HAL_GPIO_Init+0x354>)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002efa:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_GPIO_Init+0x354>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f1e:	4a1f      	ldr	r2, [pc, #124]	; (8002f9c <HAL_GPIO_Init+0x354>)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <HAL_GPIO_Init+0x354>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <HAL_GPIO_Init+0x354>)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3301      	adds	r3, #1
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2b0f      	cmp	r3, #15
 8002f58:	f67f ae86 	bls.w	8002c68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40013800 	.word	0x40013800
 8002f74:	40020000 	.word	0x40020000
 8002f78:	40020400 	.word	0x40020400
 8002f7c:	40020800 	.word	0x40020800
 8002f80:	40020c00 	.word	0x40020c00
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40021400 	.word	0x40021400
 8002f8c:	40021800 	.word	0x40021800
 8002f90:	40021c00 	.word	0x40021c00
 8002f94:	40022000 	.word	0x40022000
 8002f98:	40022400 	.word	0x40022400
 8002f9c:	40013c00 	.word	0x40013c00

08002fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
 8002fac:	4613      	mov	r3, r2
 8002fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fbc:	e003      	b.n	8002fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	041a      	lsls	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	619a      	str	r2, [r3, #24]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0bf      	b.n	8003166 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe f97e 	bl	80012fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003016:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6999      	ldr	r1, [r3, #24]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800302c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <HAL_LTDC_Init+0x19c>)
 8003048:	400b      	ands	r3, r1
 800304a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68d9      	ldr	r1, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b3e      	ldr	r3, [pc, #248]	; (8003170 <HAL_LTDC_Init+0x19c>)
 8003076:	400b      	ands	r3, r1
 8003078:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	041b      	lsls	r3, r3, #16
 8003080:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68d9      	ldr	r1, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1a      	ldr	r2, [r3, #32]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6919      	ldr	r1, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_LTDC_Init+0x19c>)
 80030a4:	400b      	ands	r3, r1
 80030a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	041b      	lsls	r3, r3, #16
 80030ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6919      	ldr	r1, [r3, #16]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6959      	ldr	r1, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_LTDC_Init+0x19c>)
 80030d2:	400b      	ands	r3, r1
 80030d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6959      	ldr	r1, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003104:	041b      	lsls	r3, r3, #16
 8003106:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0206 	orr.w	r2, r2, #6
 8003142:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	f000f800 	.word	0xf000f800

08003174 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003174:	b5b0      	push	{r4, r5, r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_LTDC_ConfigLayer+0x1a>
 800318a:	2302      	movs	r3, #2
 800318c:	e02c      	b.n	80031e8 <HAL_LTDC_ConfigLayer+0x74>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2134      	movs	r1, #52	; 0x34
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4614      	mov	r4, r2
 80031b2:	461d      	mov	r5, r3
 80031b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031c0:	682b      	ldr	r3, [r5, #0]
 80031c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f81f 	bl	800320c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2201      	movs	r2, #1
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bdb0      	pop	{r4, r5, r7, pc}

080031f0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80031fe:	b2db      	uxtb	r3, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	0c1b      	lsrs	r3, r3, #16
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	4413      	add	r3, r2
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	01db      	lsls	r3, r3, #7
 8003238:	4413      	add	r3, r2
 800323a:	3384      	adds	r3, #132	; 0x84
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	4611      	mov	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	01d2      	lsls	r2, r2, #7
 8003248:	440a      	add	r2, r1
 800324a:	3284      	adds	r2, #132	; 0x84
 800324c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003250:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003262:	4413      	add	r3, r2
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4619      	mov	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	01db      	lsls	r3, r3, #7
 8003270:	440b      	add	r3, r1
 8003272:	3384      	adds	r3, #132	; 0x84
 8003274:	4619      	mov	r1, r3
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800328a:	4413      	add	r3, r2
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	01db      	lsls	r3, r3, #7
 800329a:	4413      	add	r3, r2
 800329c:	3384      	adds	r3, #132	; 0x84
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	4611      	mov	r1, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	01d2      	lsls	r2, r2, #7
 80032aa:	440a      	add	r2, r1
 80032ac:	3284      	adds	r2, #132	; 0x84
 80032ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80032b2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c2:	4413      	add	r3, r2
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4619      	mov	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	01db      	lsls	r3, r3, #7
 80032d0:	440b      	add	r3, r1
 80032d2:	3384      	adds	r3, #132	; 0x84
 80032d4:	4619      	mov	r1, r3
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	01db      	lsls	r3, r3, #7
 80032e6:	4413      	add	r3, r2
 80032e8:	3384      	adds	r3, #132	; 0x84
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	4611      	mov	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	01d2      	lsls	r2, r2, #7
 80032f6:	440a      	add	r2, r1
 80032f8:	3284      	adds	r2, #132	; 0x84
 80032fa:	f023 0307 	bic.w	r3, r3, #7
 80032fe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	01db      	lsls	r3, r3, #7
 800330a:	4413      	add	r3, r2
 800330c:	3384      	adds	r3, #132	; 0x84
 800330e:	461a      	mov	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003326:	041b      	lsls	r3, r3, #16
 8003328:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	061b      	lsls	r3, r3, #24
 8003330:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	01db      	lsls	r3, r3, #7
 800333c:	4413      	add	r3, r2
 800333e:	3384      	adds	r3, #132	; 0x84
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	01db      	lsls	r3, r3, #7
 800334c:	4413      	add	r3, r2
 800334e:	3384      	adds	r3, #132	; 0x84
 8003350:	461a      	mov	r2, r3
 8003352:	2300      	movs	r3, #0
 8003354:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800335c:	461a      	mov	r2, r3
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	431a      	orrs	r2, r3
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4619      	mov	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	01db      	lsls	r3, r3, #7
 8003370:	440b      	add	r3, r1
 8003372:	3384      	adds	r3, #132	; 0x84
 8003374:	4619      	mov	r1, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	01db      	lsls	r3, r3, #7
 8003386:	4413      	add	r3, r2
 8003388:	3384      	adds	r3, #132	; 0x84
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	4611      	mov	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	01d2      	lsls	r2, r2, #7
 8003396:	440a      	add	r2, r1
 8003398:	3284      	adds	r2, #132	; 0x84
 800339a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800339e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	01db      	lsls	r3, r3, #7
 80033aa:	4413      	add	r3, r2
 80033ac:	3384      	adds	r3, #132	; 0x84
 80033ae:	461a      	mov	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	01db      	lsls	r3, r3, #7
 80033c0:	4413      	add	r3, r2
 80033c2:	3384      	adds	r3, #132	; 0x84
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4619      	mov	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	01db      	lsls	r3, r3, #7
 80033d0:	440b      	add	r3, r1
 80033d2:	3384      	adds	r3, #132	; 0x84
 80033d4:	4619      	mov	r1, r3
 80033d6:	4b58      	ldr	r3, [pc, #352]	; (8003538 <LTDC_SetConfig+0x32c>)
 80033d8:	4013      	ands	r3, r2
 80033da:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	68f9      	ldr	r1, [r7, #12]
 80033e6:	6809      	ldr	r1, [r1, #0]
 80033e8:	4608      	mov	r0, r1
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	01c9      	lsls	r1, r1, #7
 80033ee:	4401      	add	r1, r0
 80033f0:	3184      	adds	r1, #132	; 0x84
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	01db      	lsls	r3, r3, #7
 8003400:	4413      	add	r3, r2
 8003402:	3384      	adds	r3, #132	; 0x84
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	01db      	lsls	r3, r3, #7
 8003410:	4413      	add	r3, r2
 8003412:	3384      	adds	r3, #132	; 0x84
 8003414:	461a      	mov	r2, r3
 8003416:	2300      	movs	r3, #0
 8003418:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	01db      	lsls	r3, r3, #7
 8003424:	4413      	add	r3, r2
 8003426:	3384      	adds	r3, #132	; 0x84
 8003428:	461a      	mov	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003438:	2304      	movs	r3, #4
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	e01b      	b.n	8003476 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d102      	bne.n	800344c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003446:	2303      	movs	r3, #3
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	e014      	b.n	8003476 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b04      	cmp	r3, #4
 8003452:	d00b      	beq.n	800346c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003458:	2b02      	cmp	r3, #2
 800345a:	d007      	beq.n	800346c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003460:	2b03      	cmp	r3, #3
 8003462:	d003      	beq.n	800346c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003468:	2b07      	cmp	r3, #7
 800346a:	d102      	bne.n	8003472 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800346c:	2302      	movs	r3, #2
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	e001      	b.n	8003476 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003472:	2301      	movs	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	01db      	lsls	r3, r3, #7
 8003480:	4413      	add	r3, r2
 8003482:	3384      	adds	r3, #132	; 0x84
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	4611      	mov	r1, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	01d2      	lsls	r2, r2, #7
 8003490:	440a      	add	r2, r1
 8003492:	3284      	adds	r2, #132	; 0x84
 8003494:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003498:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	041a      	lsls	r2, r3, #16
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	6859      	ldr	r1, [r3, #4]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1acb      	subs	r3, r1, r3
 80034b0:	69f9      	ldr	r1, [r7, #28]
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	3303      	adds	r3, #3
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	6809      	ldr	r1, [r1, #0]
 80034bc:	4608      	mov	r0, r1
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	01c9      	lsls	r1, r1, #7
 80034c2:	4401      	add	r1, r0
 80034c4:	3184      	adds	r1, #132	; 0x84
 80034c6:	4313      	orrs	r3, r2
 80034c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	01db      	lsls	r3, r3, #7
 80034d4:	4413      	add	r3, r2
 80034d6:	3384      	adds	r3, #132	; 0x84
 80034d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4619      	mov	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	01db      	lsls	r3, r3, #7
 80034e4:	440b      	add	r3, r1
 80034e6:	3384      	adds	r3, #132	; 0x84
 80034e8:	4619      	mov	r1, r3
 80034ea:	4b14      	ldr	r3, [pc, #80]	; (800353c <LTDC_SetConfig+0x330>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	01db      	lsls	r3, r3, #7
 80034fa:	4413      	add	r3, r2
 80034fc:	3384      	adds	r3, #132	; 0x84
 80034fe:	461a      	mov	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	01db      	lsls	r3, r3, #7
 8003510:	4413      	add	r3, r2
 8003512:	3384      	adds	r3, #132	; 0x84
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	4611      	mov	r1, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	01d2      	lsls	r2, r2, #7
 8003520:	440a      	add	r2, r1
 8003522:	3284      	adds	r2, #132	; 0x84
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6013      	str	r3, [r2, #0]
}
 800352a:	bf00      	nop
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	fffff8f8 	.word	0xfffff8f8
 800353c:	fffff800 	.word	0xfffff800

08003540 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	4b23      	ldr	r3, [pc, #140]	; (80035d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a22      	ldr	r2, [pc, #136]	; (80035d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003562:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800356e:	f7fe fe0f 	bl	8002190 <HAL_GetTick>
 8003572:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003574:	e009      	b.n	800358a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003576:	f7fe fe0b 	bl	8002190 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003584:	d901      	bls.n	800358a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e022      	b.n	80035d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800358a:	4b14      	ldr	r3, [pc, #80]	; (80035dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003596:	d1ee      	bne.n	8003576 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800359e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035a4:	f7fe fdf4 	bl	8002190 <HAL_GetTick>
 80035a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035aa:	e009      	b.n	80035c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035ac:	f7fe fdf0 	bl	8002190 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ba:	d901      	bls.n	80035c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e007      	b.n	80035d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035cc:	d1ee      	bne.n	80035ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40007000 	.word	0x40007000

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035e8:	2300      	movs	r3, #0
 80035ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e291      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8087 	beq.w	8003712 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003604:	4b96      	ldr	r3, [pc, #600]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	2b04      	cmp	r3, #4
 800360e:	d00c      	beq.n	800362a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003610:	4b93      	ldr	r3, [pc, #588]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b08      	cmp	r3, #8
 800361a:	d112      	bne.n	8003642 <HAL_RCC_OscConfig+0x62>
 800361c:	4b90      	ldr	r3, [pc, #576]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003628:	d10b      	bne.n	8003642 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362a:	4b8d      	ldr	r3, [pc, #564]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d06c      	beq.n	8003710 <HAL_RCC_OscConfig+0x130>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d168      	bne.n	8003710 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e26b      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x7a>
 800364c:	4b84      	ldr	r3, [pc, #528]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a83      	ldr	r2, [pc, #524]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	e02e      	b.n	80036b8 <HAL_RCC_OscConfig+0xd8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x9c>
 8003662:	4b7f      	ldr	r3, [pc, #508]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a7e      	ldr	r2, [pc, #504]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b7c      	ldr	r3, [pc, #496]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a7b      	ldr	r2, [pc, #492]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e01d      	b.n	80036b8 <HAL_RCC_OscConfig+0xd8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0xc0>
 8003686:	4b76      	ldr	r3, [pc, #472]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a75      	ldr	r2, [pc, #468]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800368c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b73      	ldr	r3, [pc, #460]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a72      	ldr	r2, [pc, #456]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0xd8>
 80036a0:	4b6f      	ldr	r3, [pc, #444]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a6e      	ldr	r2, [pc, #440]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6b      	ldr	r2, [pc, #428]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe fd66 	bl	8002190 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fe fd62 	bl	8002190 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e21f      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	4b61      	ldr	r3, [pc, #388]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0xe8>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fe fd52 	bl	8002190 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fe fd4e 	bl	8002190 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	; 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e20b      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	4b57      	ldr	r3, [pc, #348]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x110>
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d069      	beq.n	80037f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800371e:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800372a:	4b4d      	ldr	r3, [pc, #308]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b08      	cmp	r3, #8
 8003734:	d11c      	bne.n	8003770 <HAL_RCC_OscConfig+0x190>
 8003736:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d116      	bne.n	8003770 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <HAL_RCC_OscConfig+0x17a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d001      	beq.n	800375a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e1df      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375a:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	493d      	ldr	r1, [pc, #244]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376e:	e040      	b.n	80037f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d023      	beq.n	80037c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a38      	ldr	r2, [pc, #224]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe fd04 	bl	8002190 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378c:	f7fe fd00 	bl	8002190 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1bd      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b30      	ldr	r3, [pc, #192]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037aa:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4929      	ldr	r1, [pc, #164]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
 80037be:	e018      	b.n	80037f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a26      	ldr	r2, [pc, #152]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fce0 	bl	8002190 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fe fcdc 	bl	8002190 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e199      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d038      	beq.n	8003870 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d019      	beq.n	800383a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380a:	4a15      	ldr	r2, [pc, #84]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003812:	f7fe fcbd 	bl	8002190 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381a:	f7fe fcb9 	bl	8002190 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e176      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800382e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x23a>
 8003838:	e01a      	b.n	8003870 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800383c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003846:	f7fe fca3 	bl	8002190 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384e:	f7fe fc9f 	bl	8002190 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d903      	bls.n	8003864 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e15c      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
 8003860:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	4b91      	ldr	r3, [pc, #580]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1ee      	bne.n	800384e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80a4 	beq.w	80039c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387e:	4b8b      	ldr	r3, [pc, #556]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	4b88      	ldr	r3, [pc, #544]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a87      	ldr	r2, [pc, #540]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
 8003896:	4b85      	ldr	r3, [pc, #532]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a6:	4b82      	ldr	r3, [pc, #520]	; (8003ab0 <HAL_RCC_OscConfig+0x4d0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d118      	bne.n	80038e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038b2:	4b7f      	ldr	r3, [pc, #508]	; (8003ab0 <HAL_RCC_OscConfig+0x4d0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7e      	ldr	r2, [pc, #504]	; (8003ab0 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038be:	f7fe fc67 	bl	8002190 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c6:	f7fe fc63 	bl	8002190 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b64      	cmp	r3, #100	; 0x64
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e120      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d8:	4b75      	ldr	r3, [pc, #468]	; (8003ab0 <HAL_RCC_OscConfig+0x4d0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x31a>
 80038ec:	4b6f      	ldr	r3, [pc, #444]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a6e      	ldr	r2, [pc, #440]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
 80038f8:	e02d      	b.n	8003956 <HAL_RCC_OscConfig+0x376>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x33c>
 8003902:	4b6a      	ldr	r3, [pc, #424]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a69      	ldr	r2, [pc, #420]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
 800390e:	4b67      	ldr	r3, [pc, #412]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	4a66      	ldr	r2, [pc, #408]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	6713      	str	r3, [r2, #112]	; 0x70
 800391a:	e01c      	b.n	8003956 <HAL_RCC_OscConfig+0x376>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b05      	cmp	r3, #5
 8003922:	d10c      	bne.n	800393e <HAL_RCC_OscConfig+0x35e>
 8003924:	4b61      	ldr	r3, [pc, #388]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	4a60      	ldr	r2, [pc, #384]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6713      	str	r3, [r2, #112]	; 0x70
 8003930:	4b5e      	ldr	r3, [pc, #376]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	4a5d      	ldr	r2, [pc, #372]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6713      	str	r3, [r2, #112]	; 0x70
 800393c:	e00b      	b.n	8003956 <HAL_RCC_OscConfig+0x376>
 800393e:	4b5b      	ldr	r3, [pc, #364]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a5a      	ldr	r2, [pc, #360]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
 800394a:	4b58      	ldr	r3, [pc, #352]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a57      	ldr	r2, [pc, #348]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d015      	beq.n	800398a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fe fc17 	bl	8002190 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fe fc13 	bl	8002190 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e0ce      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ee      	beq.n	8003966 <HAL_RCC_OscConfig+0x386>
 8003988:	e014      	b.n	80039b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398a:	f7fe fc01 	bl	8002190 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003992:	f7fe fbfd 	bl	8002190 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0b8      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	4b40      	ldr	r3, [pc, #256]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	4b3c      	ldr	r3, [pc, #240]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a3b      	ldr	r2, [pc, #236]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80a4 	beq.w	8003b18 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d0:	4b36      	ldr	r3, [pc, #216]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d06b      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d149      	bne.n	8003a78 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e4:	4b31      	ldr	r3, [pc, #196]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a30      	ldr	r2, [pc, #192]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe fbce 	bl	8002190 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe fbca 	bl	8002190 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e087      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	4b28      	ldr	r3, [pc, #160]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a42:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a18      	ldr	r2, [pc, #96]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fe fb9e 	bl	8002190 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a58:	f7fe fb9a 	bl	8002190 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e057      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	4b10      	ldr	r3, [pc, #64]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x478>
 8003a76:	e04f      	b.n	8003b18 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe fb84 	bl	8002190 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe fb80 	bl	8002190 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e03d      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4ac>
 8003aaa:	e035      	b.n	8003b18 <HAL_RCC_OscConfig+0x538>
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <HAL_RCC_OscConfig+0x544>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d028      	beq.n	8003b14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d121      	bne.n	8003b14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d11a      	bne.n	8003b14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d111      	bne.n	8003b14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	3b01      	subs	r3, #1
 8003afe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0d0      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b40:	4b6a      	ldr	r3, [pc, #424]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d910      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b67      	ldr	r3, [pc, #412]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 020f 	bic.w	r2, r3, #15
 8003b56:	4965      	ldr	r1, [pc, #404]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b63      	ldr	r3, [pc, #396]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0b8      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b88:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a58      	ldr	r2, [pc, #352]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba0:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003baa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b50      	ldr	r3, [pc, #320]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	494d      	ldr	r1, [pc, #308]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d040      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b47      	ldr	r3, [pc, #284]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d115      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e07f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bea:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e073      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e06b      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0a:	4b39      	ldr	r3, [pc, #228]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f023 0203 	bic.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4936      	ldr	r1, [pc, #216]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1c:	f7fe fab8 	bl	8002190 <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c24:	f7fe fab4 	bl	8002190 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e053      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 020c 	and.w	r2, r3, #12
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d1eb      	bne.n	8003c24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d210      	bcs.n	8003c7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 020f 	bic.w	r2, r3, #15
 8003c62:	4922      	ldr	r1, [pc, #136]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e032      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4916      	ldr	r1, [pc, #88]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	490e      	ldr	r1, [pc, #56]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cba:	f000 f821 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	490a      	ldr	r1, [pc, #40]	; (8003cf4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ccc:	5ccb      	ldrb	r3, [r1, r3]
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <HAL_RCC_ClockConfig+0x1d0>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_ClockConfig+0x1d4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fd22 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023c00 	.word	0x40023c00
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	08006e54 	.word	0x08006e54
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	20000010 	.word	0x20000010

08003d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	b5b0      	push	{r4, r5, r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d06:	2100      	movs	r1, #0
 8003d08:	6079      	str	r1, [r7, #4]
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	60f9      	str	r1, [r7, #12]
 8003d0e:	2100      	movs	r1, #0
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003d12:	2100      	movs	r1, #0
 8003d14:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d16:	4952      	ldr	r1, [pc, #328]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d18:	6889      	ldr	r1, [r1, #8]
 8003d1a:	f001 010c 	and.w	r1, r1, #12
 8003d1e:	2908      	cmp	r1, #8
 8003d20:	d00d      	beq.n	8003d3e <HAL_RCC_GetSysClockFreq+0x3e>
 8003d22:	2908      	cmp	r1, #8
 8003d24:	f200 8094 	bhi.w	8003e50 <HAL_RCC_GetSysClockFreq+0x150>
 8003d28:	2900      	cmp	r1, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x32>
 8003d2c:	2904      	cmp	r1, #4
 8003d2e:	d003      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x38>
 8003d30:	e08e      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d32:	4b4c      	ldr	r3, [pc, #304]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d34:	60bb      	str	r3, [r7, #8]
      break;
 8003d36:	e08e      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d38:	4b4b      	ldr	r3, [pc, #300]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d3a:	60bb      	str	r3, [r7, #8]
      break;
 8003d3c:	e08b      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d3e:	4948      	ldr	r1, [pc, #288]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d40:	6849      	ldr	r1, [r1, #4]
 8003d42:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d46:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d48:	4945      	ldr	r1, [pc, #276]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d4a:	6849      	ldr	r1, [r1, #4]
 8003d4c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d50:	2900      	cmp	r1, #0
 8003d52:	d024      	beq.n	8003d9e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d54:	4942      	ldr	r1, [pc, #264]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d56:	6849      	ldr	r1, [r1, #4]
 8003d58:	0989      	lsrs	r1, r1, #6
 8003d5a:	4608      	mov	r0, r1
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003d64:	f04f 0500 	mov.w	r5, #0
 8003d68:	ea00 0204 	and.w	r2, r0, r4
 8003d6c:	ea01 0305 	and.w	r3, r1, r5
 8003d70:	493d      	ldr	r1, [pc, #244]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d72:	fb01 f003 	mul.w	r0, r1, r3
 8003d76:	2100      	movs	r1, #0
 8003d78:	fb01 f102 	mul.w	r1, r1, r2
 8003d7c:	1844      	adds	r4, r0, r1
 8003d7e:	493a      	ldr	r1, [pc, #232]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d80:	fba2 0101 	umull	r0, r1, r2, r1
 8003d84:	1863      	adds	r3, r4, r1
 8003d86:	4619      	mov	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	f7fc fa3e 	bl	8000210 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e04a      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9e:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	461a      	mov	r2, r3
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003dae:	f04f 0100 	mov.w	r1, #0
 8003db2:	ea02 0400 	and.w	r4, r2, r0
 8003db6:	ea03 0501 	and.w	r5, r3, r1
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	014b      	lsls	r3, r1, #5
 8003dc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dcc:	0142      	lsls	r2, r0, #5
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	1b00      	subs	r0, r0, r4
 8003dd4:	eb61 0105 	sbc.w	r1, r1, r5
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	018b      	lsls	r3, r1, #6
 8003de2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003de6:	0182      	lsls	r2, r0, #6
 8003de8:	1a12      	subs	r2, r2, r0
 8003dea:	eb63 0301 	sbc.w	r3, r3, r1
 8003dee:	f04f 0000 	mov.w	r0, #0
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	00d9      	lsls	r1, r3, #3
 8003df8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dfc:	00d0      	lsls	r0, r2, #3
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	1912      	adds	r2, r2, r4
 8003e04:	eb45 0303 	adc.w	r3, r5, r3
 8003e08:	f04f 0000 	mov.w	r0, #0
 8003e0c:	f04f 0100 	mov.w	r1, #0
 8003e10:	0299      	lsls	r1, r3, #10
 8003e12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e16:	0290      	lsls	r0, r2, #10
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	f7fc f9f2 	bl	8000210 <__aeabi_uldivmod>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4613      	mov	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	60bb      	str	r3, [r7, #8]
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e52:	60bb      	str	r3, [r7, #8]
      break;
 8003e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e56:	68bb      	ldr	r3, [r7, #8]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e60:	40023800 	.word	0x40023800
 8003e64:	00f42400 	.word	0x00f42400
 8003e68:	017d7840 	.word	0x017d7840

08003e6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000000 	.word	0x20000000

08003e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e88:	f7ff fff0 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0a9b      	lsrs	r3, r3, #10
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4903      	ldr	r1, [pc, #12]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	08006e64 	.word	0x08006e64

08003eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003eb0:	f7ff ffdc 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0b5b      	lsrs	r3, r3, #13
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4903      	ldr	r1, [pc, #12]	; (8003ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	08006e64 	.word	0x08006e64

08003ed4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	220f      	movs	r2, #15
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ee4:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_RCC_GetClockConfig+0x5c>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0203 	and.w	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_RCC_GetClockConfig+0x5c>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <HAL_RCC_GetClockConfig+0x5c>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_RCC_GetClockConfig+0x5c>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	08db      	lsrs	r3, r3, #3
 8003f0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <HAL_RCC_GetClockConfig+0x60>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 020f 	and.w	r2, r3, #15
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40023c00 	.word	0x40023c00

08003f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d012      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f60:	4b69      	ldr	r3, [pc, #420]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	4a68      	ldr	r2, [pc, #416]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f6a:	6093      	str	r3, [r2, #8]
 8003f6c:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	4964      	ldr	r1, [pc, #400]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f82:	2301      	movs	r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d017      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f92:	4b5d      	ldr	r3, [pc, #372]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	4959      	ldr	r1, [pc, #356]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d017      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fce:	4b4e      	ldr	r3, [pc, #312]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	494a      	ldr	r1, [pc, #296]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800400a:	2301      	movs	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 808b 	beq.w	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800401c:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	4a39      	ldr	r2, [pc, #228]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004026:	6413      	str	r3, [r2, #64]	; 0x40
 8004028:	4b37      	ldr	r3, [pc, #220]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004034:	4b35      	ldr	r3, [pc, #212]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a34      	ldr	r2, [pc, #208]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800403a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004040:	f7fe f8a6 	bl	8002190 <HAL_GetTick>
 8004044:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004048:	f7fe f8a2 	bl	8002190 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e357      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800405a:	4b2c      	ldr	r3, [pc, #176]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004066:	4b28      	ldr	r3, [pc, #160]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d035      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	429a      	cmp	r2, r3
 8004082:	d02e      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004084:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800408e:	4b1e      	ldr	r3, [pc, #120]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a1d      	ldr	r2, [pc, #116]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800409a:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040a6:	4a18      	ldr	r2, [pc, #96]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040ac:	4b16      	ldr	r3, [pc, #88]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d114      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fe f86a 	bl	8002190 <HAL_GetTick>
 80040bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040be:	e00a      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fe f866 	bl	8002190 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e319      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0ee      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ee:	d111      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040fc:	4b04      	ldr	r3, [pc, #16]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040fe:	400b      	ands	r3, r1
 8004100:	4901      	ldr	r1, [pc, #4]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
 8004106:	e00b      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004108:	40023800 	.word	0x40023800
 800410c:	40007000 	.word	0x40007000
 8004110:	0ffffcff 	.word	0x0ffffcff
 8004114:	4bb1      	ldr	r3, [pc, #708]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4ab0      	ldr	r2, [pc, #704]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800411a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800411e:	6093      	str	r3, [r2, #8]
 8004120:	4bae      	ldr	r3, [pc, #696]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412c:	49ab      	ldr	r1, [pc, #684]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b00      	cmp	r3, #0
 800413c:	d010      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800413e:	4ba7      	ldr	r3, [pc, #668]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004144:	4aa5      	ldr	r2, [pc, #660]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800414a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800414e:	4ba3      	ldr	r3, [pc, #652]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004150:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	49a0      	ldr	r1, [pc, #640]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800416c:	4b9b      	ldr	r3, [pc, #620]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417a:	4998      	ldr	r1, [pc, #608]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800418e:	4b93      	ldr	r3, [pc, #588]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419c:	498f      	ldr	r1, [pc, #572]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041b0:	4b8a      	ldr	r3, [pc, #552]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041be:	4987      	ldr	r1, [pc, #540]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d2:	4b82      	ldr	r3, [pc, #520]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	497e      	ldr	r1, [pc, #504]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041f4:	4b79      	ldr	r3, [pc, #484]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	4976      	ldr	r1, [pc, #472]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004216:	4b71      	ldr	r3, [pc, #452]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	f023 020c 	bic.w	r2, r3, #12
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	496d      	ldr	r1, [pc, #436]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004238:	4b68      	ldr	r3, [pc, #416]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004246:	4965      	ldr	r1, [pc, #404]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800425a:	4b60      	ldr	r3, [pc, #384]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	495c      	ldr	r1, [pc, #368]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800427c:	4b57      	ldr	r3, [pc, #348]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	4954      	ldr	r1, [pc, #336]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800429e:	4b4f      	ldr	r3, [pc, #316]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	494b      	ldr	r1, [pc, #300]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042c0:	4b46      	ldr	r3, [pc, #280]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ce:	4943      	ldr	r1, [pc, #268]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042e2:	4b3e      	ldr	r3, [pc, #248]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f0:	493a      	ldr	r1, [pc, #232]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004304:	4b35      	ldr	r3, [pc, #212]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004312:	4932      	ldr	r1, [pc, #200]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d011      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004326:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004334:	4929      	ldr	r1, [pc, #164]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004344:	d101      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004346:	2301      	movs	r3, #1
 8004348:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004356:	2301      	movs	r3, #1
 8004358:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004374:	4919      	ldr	r1, [pc, #100]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004398:	4910      	ldr	r1, [pc, #64]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d006      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80d9 	beq.w	8004566 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043b4:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a08      	ldr	r2, [pc, #32]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c0:	f7fd fee6 	bl	8002190 <HAL_GetTick>
 80043c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c6:	e00b      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043c8:	f7fd fee2 	bl	8002190 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d904      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e197      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043e0:	4b6c      	ldr	r3, [pc, #432]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ed      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d021      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11d      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004400:	4b64      	ldr	r3, [pc, #400]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800440e:	4b61      	ldr	r3, [pc, #388]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004414:	0e1b      	lsrs	r3, r3, #24
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	019a      	lsls	r2, r3, #6
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	431a      	orrs	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	061b      	lsls	r3, r3, #24
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	071b      	lsls	r3, r3, #28
 8004434:	4957      	ldr	r1, [pc, #348]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800445a:	2b00      	cmp	r3, #0
 800445c:	d02e      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004466:	d129      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004468:	4b4a      	ldr	r3, [pc, #296]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004476:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447c:	0f1b      	lsrs	r3, r3, #28
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	019a      	lsls	r2, r3, #6
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	041b      	lsls	r3, r3, #16
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	061b      	lsls	r3, r3, #24
 8004496:	431a      	orrs	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	071b      	lsls	r3, r3, #28
 800449c:	493d      	ldr	r1, [pc, #244]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044a4:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044aa:	f023 021f 	bic.w	r2, r3, #31
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	3b01      	subs	r3, #1
 80044b4:	4937      	ldr	r1, [pc, #220]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01d      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044c8:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ce:	0e1b      	lsrs	r3, r3, #24
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044dc:	0f1b      	lsrs	r3, r3, #28
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	019a      	lsls	r2, r3, #6
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	431a      	orrs	r2, r3
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	431a      	orrs	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	071b      	lsls	r3, r3, #28
 80044fc:	4925      	ldr	r1, [pc, #148]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d011      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	019a      	lsls	r2, r3, #6
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	041b      	lsls	r3, r3, #16
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	061b      	lsls	r3, r3, #24
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	071b      	lsls	r3, r3, #28
 800452c:	4919      	ldr	r1, [pc, #100]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004534:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a16      	ldr	r2, [pc, #88]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800453e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004540:	f7fd fe26 	bl	8002190 <HAL_GetTick>
 8004544:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004548:	f7fd fe22 	bl	8002190 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e0d7      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800455a:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b01      	cmp	r3, #1
 800456a:	f040 80cd 	bne.w	8004708 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a08      	ldr	r2, [pc, #32]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457a:	f7fd fe09 	bl	8002190 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004580:	e00a      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004582:	f7fd fe05 	bl	8002190 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	; 0x64
 800458e:	d903      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0ba      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004594:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004598:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a4:	d0ed      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d02e      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d12a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045dc:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	0f1b      	lsrs	r3, r3, #28
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	019a      	lsls	r2, r3, #6
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	071b      	lsls	r3, r3, #28
 8004602:	4944      	ldr	r1, [pc, #272]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800460a:	4b42      	ldr	r3, [pc, #264]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800460c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004610:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	493d      	ldr	r1, [pc, #244]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d022      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004638:	d11d      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800463a:	4b36      	ldr	r3, [pc, #216]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	0e1b      	lsrs	r3, r3, #24
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004648:	4b32      	ldr	r3, [pc, #200]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	0f1b      	lsrs	r3, r3, #28
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	019a      	lsls	r2, r3, #6
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	431a      	orrs	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	061b      	lsls	r3, r3, #24
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	071b      	lsls	r3, r3, #28
 800466e:	4929      	ldr	r1, [pc, #164]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d028      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	0e1b      	lsrs	r3, r3, #24
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	019a      	lsls	r2, r3, #6
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	061b      	lsls	r3, r3, #24
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	071b      	lsls	r3, r3, #28
 80046b6:	4917      	ldr	r1, [pc, #92]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	4911      	ldr	r1, [pc, #68]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046d4:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0e      	ldr	r2, [pc, #56]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e0:	f7fd fd56 	bl	8002190 <HAL_GetTick>
 80046e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046e8:	f7fd fd52 	bl	8002190 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e007      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004706:	d1ef      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800

08004718 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e025      	b.n	8004778 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fc ffe5 	bl	8001710 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4610      	mov	r0, r2
 800475a:	f000 ff97 	bl	800568c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	461a      	mov	r2, r3
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	f000 ffeb 	bl	8005744 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004792:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d101      	bne.n	800479e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800479a:	2302      	movs	r3, #2
 800479c:	e021      	b.n	80047e2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d002      	beq.n	80047aa <HAL_SDRAM_SendCommand+0x2a>
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	d118      	bne.n	80047dc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 f82c 	bl	8005818 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d104      	bne.n	80047d2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2205      	movs	r2, #5
 80047cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80047d0:	e006      	b.n	80047e0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80047da:	e001      	b.n	80047e0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d101      	bne.n	8004804 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
 8004802:	e016      	b.n	8004832 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d10f      	bne.n	8004830 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6839      	ldr	r1, [r7, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f001 f81e 	bl	8005860 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	e000      	b.n	8004832 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e049      	b.n	80048e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f841 	bl	80048e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3304      	adds	r3, #4
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f000 f9ff 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d001      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e054      	b.n	80049be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a26      	ldr	r2, [pc, #152]	; (80049cc <HAL_TIM_Base_Start_IT+0xd0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d022      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x80>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d01d      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x80>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x80>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x80>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1f      	ldr	r2, [pc, #124]	; (80049d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x80>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a1e      	ldr	r2, [pc, #120]	; (80049dc <HAL_TIM_Base_Start_IT+0xe0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x80>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1c      	ldr	r2, [pc, #112]	; (80049e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x80>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1b      	ldr	r2, [pc, #108]	; (80049e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d115      	bne.n	80049a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <HAL_TIM_Base_Start_IT+0xec>)
 8004984:	4013      	ands	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b06      	cmp	r3, #6
 800498c:	d015      	beq.n	80049ba <HAL_TIM_Base_Start_IT+0xbe>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004994:	d011      	beq.n	80049ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0201 	orr.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a6:	e008      	b.n	80049ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e000      	b.n	80049bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40000800 	.word	0x40000800
 80049d8:	40000c00 	.word	0x40000c00
 80049dc:	40010400 	.word	0x40010400
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40001800 	.word	0x40001800
 80049e8:	00010007 	.word	0x00010007

080049ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d122      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d11b      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0202 	mvn.w	r2, #2
 8004a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f905 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f8f7 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f908 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d122      	bne.n	8004a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d11b      	bne.n	8004a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0204 	mvn.w	r2, #4
 8004a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8db 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 8004a88:	e005      	b.n	8004a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8cd 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f8de 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d122      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d11b      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0208 	mvn.w	r2, #8
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8b1 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8a3 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f8b4 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b10      	cmp	r3, #16
 8004afc:	d122      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b10      	cmp	r3, #16
 8004b0a:	d11b      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0210 	mvn.w	r2, #16
 8004b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2208      	movs	r2, #8
 8004b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f887 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f879 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f88a 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d10e      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d107      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0201 	mvn.w	r2, #1
 8004b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc fb66 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b80      	cmp	r3, #128	; 0x80
 8004b7c:	d10e      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b88:	2b80      	cmp	r3, #128	; 0x80
 8004b8a:	d107      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f91a 	bl	8004dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004baa:	d10e      	bne.n	8004bca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b80      	cmp	r3, #128	; 0x80
 8004bb8:	d107      	bne.n	8004bca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f90d 	bl	8004de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d10e      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d107      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f838 	bl	8004c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d10e      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d107      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f06f 0220 	mvn.w	r2, #32
 8004c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f8cd 	bl	8004dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a40      	ldr	r2, [pc, #256]	; (8004d90 <TIM_Base_SetConfig+0x114>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9a:	d00f      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a3d      	ldr	r2, [pc, #244]	; (8004d94 <TIM_Base_SetConfig+0x118>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00b      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a3c      	ldr	r2, [pc, #240]	; (8004d98 <TIM_Base_SetConfig+0x11c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a3b      	ldr	r2, [pc, #236]	; (8004d9c <TIM_Base_SetConfig+0x120>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a3a      	ldr	r2, [pc, #232]	; (8004da0 <TIM_Base_SetConfig+0x124>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d108      	bne.n	8004cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2f      	ldr	r2, [pc, #188]	; (8004d90 <TIM_Base_SetConfig+0x114>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d02b      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d027      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2c      	ldr	r2, [pc, #176]	; (8004d94 <TIM_Base_SetConfig+0x118>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d023      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2b      	ldr	r2, [pc, #172]	; (8004d98 <TIM_Base_SetConfig+0x11c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01f      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <TIM_Base_SetConfig+0x120>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01b      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a29      	ldr	r2, [pc, #164]	; (8004da0 <TIM_Base_SetConfig+0x124>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d017      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a28      	ldr	r2, [pc, #160]	; (8004da4 <TIM_Base_SetConfig+0x128>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a27      	ldr	r2, [pc, #156]	; (8004da8 <TIM_Base_SetConfig+0x12c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00f      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a26      	ldr	r2, [pc, #152]	; (8004dac <TIM_Base_SetConfig+0x130>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a25      	ldr	r2, [pc, #148]	; (8004db0 <TIM_Base_SetConfig+0x134>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d007      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <TIM_Base_SetConfig+0x138>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a23      	ldr	r2, [pc, #140]	; (8004db8 <TIM_Base_SetConfig+0x13c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d108      	bne.n	8004d40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <TIM_Base_SetConfig+0x114>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_Base_SetConfig+0xf8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0c      	ldr	r2, [pc, #48]	; (8004da0 <TIM_Base_SetConfig+0x124>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d103      	bne.n	8004d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	615a      	str	r2, [r3, #20]
}
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	40010400 	.word	0x40010400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400
 8004dac:	40014800 	.word	0x40014800
 8004db0:	40001800 	.word	0x40001800
 8004db4:	40001c00 	.word	0x40001c00
 8004db8:	40002000 	.word	0x40002000

08004dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e040      	b.n	8004e8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fc fb66 	bl	80014ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2224      	movs	r2, #36	; 0x24
 8004e24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0201 	bic.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f82c 	bl	8004e94 <UART_SetConfig>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e022      	b.n	8004e8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa82 	bl	8005358 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fb09 	bl	800549c <UART_CheckIdleState>
 8004e8a:	4603      	mov	r3, r0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4ba7      	ldr	r3, [pc, #668]	; (800515c <UART_SetConfig+0x2c8>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	6979      	ldr	r1, [r7, #20]
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a95      	ldr	r2, [pc, #596]	; (8005160 <UART_SetConfig+0x2cc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d120      	bne.n	8004f52 <UART_SetConfig+0xbe>
 8004f10:	4b94      	ldr	r3, [pc, #592]	; (8005164 <UART_SetConfig+0x2d0>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d816      	bhi.n	8004f4c <UART_SetConfig+0xb8>
 8004f1e:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <UART_SetConfig+0x90>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f41 	.word	0x08004f41
 8004f2c:	08004f3b 	.word	0x08004f3b
 8004f30:	08004f47 	.word	0x08004f47
 8004f34:	2301      	movs	r3, #1
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e14f      	b.n	80051da <UART_SetConfig+0x346>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e14c      	b.n	80051da <UART_SetConfig+0x346>
 8004f40:	2304      	movs	r3, #4
 8004f42:	77fb      	strb	r3, [r7, #31]
 8004f44:	e149      	b.n	80051da <UART_SetConfig+0x346>
 8004f46:	2308      	movs	r3, #8
 8004f48:	77fb      	strb	r3, [r7, #31]
 8004f4a:	e146      	b.n	80051da <UART_SetConfig+0x346>
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e143      	b.n	80051da <UART_SetConfig+0x346>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a84      	ldr	r2, [pc, #528]	; (8005168 <UART_SetConfig+0x2d4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d132      	bne.n	8004fc2 <UART_SetConfig+0x12e>
 8004f5c:	4b81      	ldr	r3, [pc, #516]	; (8005164 <UART_SetConfig+0x2d0>)
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d828      	bhi.n	8004fbc <UART_SetConfig+0x128>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <UART_SetConfig+0xdc>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004fa5 	.word	0x08004fa5
 8004f74:	08004fbd 	.word	0x08004fbd
 8004f78:	08004fbd 	.word	0x08004fbd
 8004f7c:	08004fbd 	.word	0x08004fbd
 8004f80:	08004fb1 	.word	0x08004fb1
 8004f84:	08004fbd 	.word	0x08004fbd
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	08004fbd 	.word	0x08004fbd
 8004f90:	08004fab 	.word	0x08004fab
 8004f94:	08004fbd 	.word	0x08004fbd
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fbd 	.word	0x08004fbd
 8004fa0:	08004fb7 	.word	0x08004fb7
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e117      	b.n	80051da <UART_SetConfig+0x346>
 8004faa:	2302      	movs	r3, #2
 8004fac:	77fb      	strb	r3, [r7, #31]
 8004fae:	e114      	b.n	80051da <UART_SetConfig+0x346>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e111      	b.n	80051da <UART_SetConfig+0x346>
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e10e      	b.n	80051da <UART_SetConfig+0x346>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e10b      	b.n	80051da <UART_SetConfig+0x346>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a69      	ldr	r2, [pc, #420]	; (800516c <UART_SetConfig+0x2d8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d120      	bne.n	800500e <UART_SetConfig+0x17a>
 8004fcc:	4b65      	ldr	r3, [pc, #404]	; (8005164 <UART_SetConfig+0x2d0>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fd6:	2b30      	cmp	r3, #48	; 0x30
 8004fd8:	d013      	beq.n	8005002 <UART_SetConfig+0x16e>
 8004fda:	2b30      	cmp	r3, #48	; 0x30
 8004fdc:	d814      	bhi.n	8005008 <UART_SetConfig+0x174>
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d009      	beq.n	8004ff6 <UART_SetConfig+0x162>
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d810      	bhi.n	8005008 <UART_SetConfig+0x174>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <UART_SetConfig+0x15c>
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d006      	beq.n	8004ffc <UART_SetConfig+0x168>
 8004fee:	e00b      	b.n	8005008 <UART_SetConfig+0x174>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	77fb      	strb	r3, [r7, #31]
 8004ff4:	e0f1      	b.n	80051da <UART_SetConfig+0x346>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	77fb      	strb	r3, [r7, #31]
 8004ffa:	e0ee      	b.n	80051da <UART_SetConfig+0x346>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	e0eb      	b.n	80051da <UART_SetConfig+0x346>
 8005002:	2308      	movs	r3, #8
 8005004:	77fb      	strb	r3, [r7, #31]
 8005006:	e0e8      	b.n	80051da <UART_SetConfig+0x346>
 8005008:	2310      	movs	r3, #16
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e0e5      	b.n	80051da <UART_SetConfig+0x346>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a57      	ldr	r2, [pc, #348]	; (8005170 <UART_SetConfig+0x2dc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d120      	bne.n	800505a <UART_SetConfig+0x1c6>
 8005018:	4b52      	ldr	r3, [pc, #328]	; (8005164 <UART_SetConfig+0x2d0>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005022:	2bc0      	cmp	r3, #192	; 0xc0
 8005024:	d013      	beq.n	800504e <UART_SetConfig+0x1ba>
 8005026:	2bc0      	cmp	r3, #192	; 0xc0
 8005028:	d814      	bhi.n	8005054 <UART_SetConfig+0x1c0>
 800502a:	2b80      	cmp	r3, #128	; 0x80
 800502c:	d009      	beq.n	8005042 <UART_SetConfig+0x1ae>
 800502e:	2b80      	cmp	r3, #128	; 0x80
 8005030:	d810      	bhi.n	8005054 <UART_SetConfig+0x1c0>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <UART_SetConfig+0x1a8>
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d006      	beq.n	8005048 <UART_SetConfig+0x1b4>
 800503a:	e00b      	b.n	8005054 <UART_SetConfig+0x1c0>
 800503c:	2300      	movs	r3, #0
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e0cb      	b.n	80051da <UART_SetConfig+0x346>
 8005042:	2302      	movs	r3, #2
 8005044:	77fb      	strb	r3, [r7, #31]
 8005046:	e0c8      	b.n	80051da <UART_SetConfig+0x346>
 8005048:	2304      	movs	r3, #4
 800504a:	77fb      	strb	r3, [r7, #31]
 800504c:	e0c5      	b.n	80051da <UART_SetConfig+0x346>
 800504e:	2308      	movs	r3, #8
 8005050:	77fb      	strb	r3, [r7, #31]
 8005052:	e0c2      	b.n	80051da <UART_SetConfig+0x346>
 8005054:	2310      	movs	r3, #16
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	e0bf      	b.n	80051da <UART_SetConfig+0x346>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a45      	ldr	r2, [pc, #276]	; (8005174 <UART_SetConfig+0x2e0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d125      	bne.n	80050b0 <UART_SetConfig+0x21c>
 8005064:	4b3f      	ldr	r3, [pc, #252]	; (8005164 <UART_SetConfig+0x2d0>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005072:	d017      	beq.n	80050a4 <UART_SetConfig+0x210>
 8005074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005078:	d817      	bhi.n	80050aa <UART_SetConfig+0x216>
 800507a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800507e:	d00b      	beq.n	8005098 <UART_SetConfig+0x204>
 8005080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005084:	d811      	bhi.n	80050aa <UART_SetConfig+0x216>
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <UART_SetConfig+0x1fe>
 800508a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508e:	d006      	beq.n	800509e <UART_SetConfig+0x20a>
 8005090:	e00b      	b.n	80050aa <UART_SetConfig+0x216>
 8005092:	2300      	movs	r3, #0
 8005094:	77fb      	strb	r3, [r7, #31]
 8005096:	e0a0      	b.n	80051da <UART_SetConfig+0x346>
 8005098:	2302      	movs	r3, #2
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e09d      	b.n	80051da <UART_SetConfig+0x346>
 800509e:	2304      	movs	r3, #4
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	e09a      	b.n	80051da <UART_SetConfig+0x346>
 80050a4:	2308      	movs	r3, #8
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e097      	b.n	80051da <UART_SetConfig+0x346>
 80050aa:	2310      	movs	r3, #16
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e094      	b.n	80051da <UART_SetConfig+0x346>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a30      	ldr	r2, [pc, #192]	; (8005178 <UART_SetConfig+0x2e4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d125      	bne.n	8005106 <UART_SetConfig+0x272>
 80050ba:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <UART_SetConfig+0x2d0>)
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050c8:	d017      	beq.n	80050fa <UART_SetConfig+0x266>
 80050ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ce:	d817      	bhi.n	8005100 <UART_SetConfig+0x26c>
 80050d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d4:	d00b      	beq.n	80050ee <UART_SetConfig+0x25a>
 80050d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050da:	d811      	bhi.n	8005100 <UART_SetConfig+0x26c>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <UART_SetConfig+0x254>
 80050e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e4:	d006      	beq.n	80050f4 <UART_SetConfig+0x260>
 80050e6:	e00b      	b.n	8005100 <UART_SetConfig+0x26c>
 80050e8:	2301      	movs	r3, #1
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e075      	b.n	80051da <UART_SetConfig+0x346>
 80050ee:	2302      	movs	r3, #2
 80050f0:	77fb      	strb	r3, [r7, #31]
 80050f2:	e072      	b.n	80051da <UART_SetConfig+0x346>
 80050f4:	2304      	movs	r3, #4
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e06f      	b.n	80051da <UART_SetConfig+0x346>
 80050fa:	2308      	movs	r3, #8
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e06c      	b.n	80051da <UART_SetConfig+0x346>
 8005100:	2310      	movs	r3, #16
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e069      	b.n	80051da <UART_SetConfig+0x346>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1c      	ldr	r2, [pc, #112]	; (800517c <UART_SetConfig+0x2e8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d137      	bne.n	8005180 <UART_SetConfig+0x2ec>
 8005110:	4b14      	ldr	r3, [pc, #80]	; (8005164 <UART_SetConfig+0x2d0>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800511a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800511e:	d017      	beq.n	8005150 <UART_SetConfig+0x2bc>
 8005120:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005124:	d817      	bhi.n	8005156 <UART_SetConfig+0x2c2>
 8005126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512a:	d00b      	beq.n	8005144 <UART_SetConfig+0x2b0>
 800512c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005130:	d811      	bhi.n	8005156 <UART_SetConfig+0x2c2>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <UART_SetConfig+0x2aa>
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	d006      	beq.n	800514a <UART_SetConfig+0x2b6>
 800513c:	e00b      	b.n	8005156 <UART_SetConfig+0x2c2>
 800513e:	2300      	movs	r3, #0
 8005140:	77fb      	strb	r3, [r7, #31]
 8005142:	e04a      	b.n	80051da <UART_SetConfig+0x346>
 8005144:	2302      	movs	r3, #2
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	e047      	b.n	80051da <UART_SetConfig+0x346>
 800514a:	2304      	movs	r3, #4
 800514c:	77fb      	strb	r3, [r7, #31]
 800514e:	e044      	b.n	80051da <UART_SetConfig+0x346>
 8005150:	2308      	movs	r3, #8
 8005152:	77fb      	strb	r3, [r7, #31]
 8005154:	e041      	b.n	80051da <UART_SetConfig+0x346>
 8005156:	2310      	movs	r3, #16
 8005158:	77fb      	strb	r3, [r7, #31]
 800515a:	e03e      	b.n	80051da <UART_SetConfig+0x346>
 800515c:	efff69f3 	.word	0xefff69f3
 8005160:	40011000 	.word	0x40011000
 8005164:	40023800 	.word	0x40023800
 8005168:	40004400 	.word	0x40004400
 800516c:	40004800 	.word	0x40004800
 8005170:	40004c00 	.word	0x40004c00
 8005174:	40005000 	.word	0x40005000
 8005178:	40011400 	.word	0x40011400
 800517c:	40007800 	.word	0x40007800
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a71      	ldr	r2, [pc, #452]	; (800534c <UART_SetConfig+0x4b8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d125      	bne.n	80051d6 <UART_SetConfig+0x342>
 800518a:	4b71      	ldr	r3, [pc, #452]	; (8005350 <UART_SetConfig+0x4bc>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005194:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005198:	d017      	beq.n	80051ca <UART_SetConfig+0x336>
 800519a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800519e:	d817      	bhi.n	80051d0 <UART_SetConfig+0x33c>
 80051a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a4:	d00b      	beq.n	80051be <UART_SetConfig+0x32a>
 80051a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051aa:	d811      	bhi.n	80051d0 <UART_SetConfig+0x33c>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <UART_SetConfig+0x324>
 80051b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b4:	d006      	beq.n	80051c4 <UART_SetConfig+0x330>
 80051b6:	e00b      	b.n	80051d0 <UART_SetConfig+0x33c>
 80051b8:	2300      	movs	r3, #0
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e00d      	b.n	80051da <UART_SetConfig+0x346>
 80051be:	2302      	movs	r3, #2
 80051c0:	77fb      	strb	r3, [r7, #31]
 80051c2:	e00a      	b.n	80051da <UART_SetConfig+0x346>
 80051c4:	2304      	movs	r3, #4
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e007      	b.n	80051da <UART_SetConfig+0x346>
 80051ca:	2308      	movs	r3, #8
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	e004      	b.n	80051da <UART_SetConfig+0x346>
 80051d0:	2310      	movs	r3, #16
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e001      	b.n	80051da <UART_SetConfig+0x346>
 80051d6:	2310      	movs	r3, #16
 80051d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e2:	d15a      	bne.n	800529a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80051e4:	7ffb      	ldrb	r3, [r7, #31]
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d827      	bhi.n	800523a <UART_SetConfig+0x3a6>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x35c>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005225 	.word	0x08005225
 80051fc:	0800523b 	.word	0x0800523b
 8005200:	0800522b 	.word	0x0800522b
 8005204:	0800523b 	.word	0x0800523b
 8005208:	0800523b 	.word	0x0800523b
 800520c:	0800523b 	.word	0x0800523b
 8005210:	08005233 	.word	0x08005233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fe fe36 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 8005218:	61b8      	str	r0, [r7, #24]
        break;
 800521a:	e013      	b.n	8005244 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7fe fe46 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8005220:	61b8      	str	r0, [r7, #24]
        break;
 8005222:	e00f      	b.n	8005244 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005224:	4b4b      	ldr	r3, [pc, #300]	; (8005354 <UART_SetConfig+0x4c0>)
 8005226:	61bb      	str	r3, [r7, #24]
        break;
 8005228:	e00c      	b.n	8005244 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522a:	f7fe fd69 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 800522e:	61b8      	str	r0, [r7, #24]
        break;
 8005230:	e008      	b.n	8005244 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005236:	61bb      	str	r3, [r7, #24]
        break;
 8005238:	e004      	b.n	8005244 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	77bb      	strb	r3, [r7, #30]
        break;
 8005242:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d074      	beq.n	8005334 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	005a      	lsls	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	fbb2 f3f3 	udiv	r3, r2, r3
 800525e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	d916      	bls.n	8005294 <UART_SetConfig+0x400>
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526c:	d212      	bcs.n	8005294 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	b29b      	uxth	r3, r3
 8005272:	f023 030f 	bic.w	r3, r3, #15
 8005276:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	085b      	lsrs	r3, r3, #1
 800527c:	b29b      	uxth	r3, r3
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	b29a      	uxth	r2, r3
 8005284:	89fb      	ldrh	r3, [r7, #14]
 8005286:	4313      	orrs	r3, r2
 8005288:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	89fa      	ldrh	r2, [r7, #14]
 8005290:	60da      	str	r2, [r3, #12]
 8005292:	e04f      	b.n	8005334 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	77bb      	strb	r3, [r7, #30]
 8005298:	e04c      	b.n	8005334 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800529a:	7ffb      	ldrb	r3, [r7, #31]
 800529c:	2b08      	cmp	r3, #8
 800529e:	d828      	bhi.n	80052f2 <UART_SetConfig+0x45e>
 80052a0:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <UART_SetConfig+0x414>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052d5 	.word	0x080052d5
 80052b0:	080052dd 	.word	0x080052dd
 80052b4:	080052f3 	.word	0x080052f3
 80052b8:	080052e3 	.word	0x080052e3
 80052bc:	080052f3 	.word	0x080052f3
 80052c0:	080052f3 	.word	0x080052f3
 80052c4:	080052f3 	.word	0x080052f3
 80052c8:	080052eb 	.word	0x080052eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052cc:	f7fe fdda 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 80052d0:	61b8      	str	r0, [r7, #24]
        break;
 80052d2:	e013      	b.n	80052fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d4:	f7fe fdea 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 80052d8:	61b8      	str	r0, [r7, #24]
        break;
 80052da:	e00f      	b.n	80052fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052dc:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <UART_SetConfig+0x4c0>)
 80052de:	61bb      	str	r3, [r7, #24]
        break;
 80052e0:	e00c      	b.n	80052fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e2:	f7fe fd0d 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 80052e6:	61b8      	str	r0, [r7, #24]
        break;
 80052e8:	e008      	b.n	80052fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ee:	61bb      	str	r3, [r7, #24]
        break;
 80052f0:	e004      	b.n	80052fc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	77bb      	strb	r3, [r7, #30]
        break;
 80052fa:	bf00      	nop
    }

    if (pclk != 0U)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d018      	beq.n	8005334 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	085a      	lsrs	r2, r3, #1
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	441a      	add	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b0f      	cmp	r3, #15
 800531a:	d909      	bls.n	8005330 <UART_SetConfig+0x49c>
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005322:	d205      	bcs.n	8005330 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	e001      	b.n	8005334 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005340:	7fbb      	ldrb	r3, [r7, #30]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40007c00 	.word	0x40007c00
 8005350:	40023800 	.word	0x40023800
 8005354:	00f42400 	.word	0x00f42400

08005358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01a      	beq.n	800546e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005456:	d10a      	bne.n	800546e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  }
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054ac:	f7fc fe70 	bl	8002190 <HAL_GetTick>
 80054b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d10e      	bne.n	80054de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f817 	bl	8005502 <UART_WaitOnFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e00d      	b.n	80054fa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b09c      	sub	sp, #112	; 0x70
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005512:	e0a5      	b.n	8005660 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800551a:	f000 80a1 	beq.w	8005660 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551e:	f7fc fe37 	bl	8002190 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800552a:	429a      	cmp	r2, r3
 800552c:	d302      	bcc.n	8005534 <UART_WaitOnFlagUntilTimeout+0x32>
 800552e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005530:	2b00      	cmp	r3, #0
 8005532:	d13e      	bne.n	80055b2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005548:	667b      	str	r3, [r7, #100]	; 0x64
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005554:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e6      	bne.n	8005534 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3308      	adds	r3, #8
 800556c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	f023 0301 	bic.w	r3, r3, #1
 800557c:	663b      	str	r3, [r7, #96]	; 0x60
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3308      	adds	r3, #8
 8005584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005586:	64ba      	str	r2, [r7, #72]	; 0x48
 8005588:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800558c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e5      	bne.n	8005566 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e067      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d04f      	beq.n	8005660 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ce:	d147      	bne.n	8005660 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
 80055fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e6      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3308      	adds	r3, #8
 8005612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	613b      	str	r3, [r7, #16]
   return(result);
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	66bb      	str	r3, [r7, #104]	; 0x68
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3308      	adds	r3, #8
 800562a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800562c:	623a      	str	r2, [r7, #32]
 800562e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	69f9      	ldr	r1, [r7, #28]
 8005632:	6a3a      	ldr	r2, [r7, #32]
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	61bb      	str	r3, [r7, #24]
   return(result);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e5      	bne.n	800560c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e010      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	4013      	ands	r3, r2
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	429a      	cmp	r2, r3
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	429a      	cmp	r2, r3
 800567c:	f43f af4a 	beq.w	8005514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3770      	adds	r7, #112	; 0x70
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d121      	bne.n	80056e2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b27      	ldr	r3, [pc, #156]	; (8005740 <FMC_SDRAM_Init+0xb4>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	6851      	ldr	r1, [r2, #4]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	6892      	ldr	r2, [r2, #8]
 80056ae:	4311      	orrs	r1, r2
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	68d2      	ldr	r2, [r2, #12]
 80056b4:	4311      	orrs	r1, r2
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	6912      	ldr	r2, [r2, #16]
 80056ba:	4311      	orrs	r1, r2
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	6952      	ldr	r2, [r2, #20]
 80056c0:	4311      	orrs	r1, r2
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	6992      	ldr	r2, [r2, #24]
 80056c6:	4311      	orrs	r1, r2
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	69d2      	ldr	r2, [r2, #28]
 80056cc:	4311      	orrs	r1, r2
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	6a12      	ldr	r2, [r2, #32]
 80056d2:	4311      	orrs	r1, r2
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056d8:	430a      	orrs	r2, r1
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e026      	b.n	8005730 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	69d9      	ldr	r1, [r3, #28]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	4319      	orrs	r1, r3
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	430b      	orrs	r3, r1
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	4b0e      	ldr	r3, [pc, #56]	; (8005740 <FMC_SDRAM_Init+0xb4>)
 8005706:	4013      	ands	r3, r2
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	6851      	ldr	r1, [r2, #4]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	6892      	ldr	r2, [r2, #8]
 8005710:	4311      	orrs	r1, r2
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	68d2      	ldr	r2, [r2, #12]
 8005716:	4311      	orrs	r1, r2
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	6912      	ldr	r2, [r2, #16]
 800571c:	4311      	orrs	r1, r2
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	6952      	ldr	r2, [r2, #20]
 8005722:	4311      	orrs	r1, r2
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	6992      	ldr	r2, [r2, #24]
 8005728:	430a      	orrs	r2, r1
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	ffff8000 	.word	0xffff8000

08005744 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d128      	bne.n	80057a8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	1e59      	subs	r1, r3, #1
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	3b01      	subs	r3, #1
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	4319      	orrs	r1, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	3b01      	subs	r3, #1
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	4319      	orrs	r1, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	3b01      	subs	r3, #1
 800577e:	031b      	lsls	r3, r3, #12
 8005780:	4319      	orrs	r1, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	3b01      	subs	r3, #1
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	4319      	orrs	r1, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	3b01      	subs	r3, #1
 8005792:	051b      	lsls	r3, r3, #20
 8005794:	4319      	orrs	r1, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	3b01      	subs	r3, #1
 800579c:	061b      	lsls	r3, r3, #24
 800579e:	430b      	orrs	r3, r1
 80057a0:	431a      	orrs	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	609a      	str	r2, [r3, #8]
 80057a6:	e02d      	b.n	8005804 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	4b19      	ldr	r3, [pc, #100]	; (8005814 <FMC_SDRAM_Timing_Init+0xd0>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	68d2      	ldr	r2, [r2, #12]
 80057b4:	3a01      	subs	r2, #1
 80057b6:	0311      	lsls	r1, r2, #12
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	6952      	ldr	r2, [r2, #20]
 80057bc:	3a01      	subs	r2, #1
 80057be:	0512      	lsls	r2, r2, #20
 80057c0:	430a      	orrs	r2, r1
 80057c2:	431a      	orrs	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	1e59      	subs	r1, r3, #1
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	3b01      	subs	r3, #1
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	4319      	orrs	r1, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	021b      	lsls	r3, r3, #8
 80057e8:	4319      	orrs	r1, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	041b      	lsls	r3, r3, #16
 80057f2:	4319      	orrs	r1, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	061b      	lsls	r3, r3, #24
 80057fc:	430b      	orrs	r3, r1
 80057fe:	431a      	orrs	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	ff0f0fff 	.word	0xff0f0fff

08005818 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <FMC_SDRAM_SendCommand+0x44>)
 800582a:	4013      	ands	r3, r2
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	6811      	ldr	r1, [r2, #0]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	6852      	ldr	r2, [r2, #4]
 8005834:	4311      	orrs	r1, r2
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	6892      	ldr	r2, [r2, #8]
 800583a:	3a01      	subs	r2, #1
 800583c:	0152      	lsls	r2, r2, #5
 800583e:	4311      	orrs	r1, r2
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	68d2      	ldr	r2, [r2, #12]
 8005844:	0252      	lsls	r2, r2, #9
 8005846:	430a      	orrs	r2, r1
 8005848:	431a      	orrs	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	ffc00000 	.word	0xffc00000

08005860 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8005870:	4013      	ands	r3, r2
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	0052      	lsls	r2, r2, #1
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	ffffc001 	.word	0xffffc001

08005890 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800589e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058a2:	2b84      	cmp	r3, #132	; 0x84
 80058a4:	d005      	beq.n	80058b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	3303      	adds	r3, #3
 80058b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80058c4:	f000 fae8 	bl	8005e98 <vTaskStartScheduler>
  
  return osOK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	bd80      	pop	{r7, pc}

080058ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80058ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d0:	b089      	sub	sp, #36	; 0x24
 80058d2:	af04      	add	r7, sp, #16
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d020      	beq.n	8005922 <osThreadCreate+0x54>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01c      	beq.n	8005922 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685c      	ldr	r4, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681d      	ldr	r5, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691e      	ldr	r6, [r3, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ffc8 	bl	8005890 <makeFreeRtosPriority>
 8005900:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800590a:	9202      	str	r2, [sp, #8]
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	9100      	str	r1, [sp, #0]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	4632      	mov	r2, r6
 8005914:	4629      	mov	r1, r5
 8005916:	4620      	mov	r0, r4
 8005918:	f000 f8ed 	bl	8005af6 <xTaskCreateStatic>
 800591c:	4603      	mov	r3, r0
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e01c      	b.n	800595c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685c      	ldr	r4, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800592e:	b29e      	uxth	r6, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ffaa 	bl	8005890 <makeFreeRtosPriority>
 800593c:	4602      	mov	r2, r0
 800593e:	f107 030c 	add.w	r3, r7, #12
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	9200      	str	r2, [sp, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	4632      	mov	r2, r6
 800594a:	4629      	mov	r1, r5
 800594c:	4620      	mov	r0, r4
 800594e:	f000 f935 	bl	8005bbc <xTaskCreate>
 8005952:	4603      	mov	r3, r0
 8005954:	2b01      	cmp	r3, #1
 8005956:	d001      	beq.n	800595c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005958:	2300      	movs	r3, #0
 800595a:	e000      	b.n	800595e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800595c:	68fb      	ldr	r3, [r7, #12]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005966 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <osDelay+0x16>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	e000      	b.n	800597e <osDelay+0x18>
 800597c:	2301      	movs	r3, #1
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fa54 	bl	8005e2c <vTaskDelay>
  
  return osOK;
 8005984:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f103 0208 	add.w	r2, r3, #8
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f103 0208 	add.w	r2, r3, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f103 0208 	add.w	r2, r3, #8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a46:	d103      	bne.n	8005a50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e00c      	b.n	8005a6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3308      	adds	r3, #8
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	e002      	b.n	8005a5e <vListInsert+0x2e>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d2f6      	bcs.n	8005a58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6892      	ldr	r2, [r2, #8]
 8005ab8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6852      	ldr	r2, [r2, #4]
 8005ac2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d103      	bne.n	8005ad6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	1e5a      	subs	r2, r3, #1
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b08e      	sub	sp, #56	; 0x38
 8005afa:	af04      	add	r7, sp, #16
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10c      	bne.n	8005b24 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	b672      	cpsid	i
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	b662      	cpsie	i
 8005b1e:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10c      	bne.n	8005b44 <xTaskCreateStatic+0x4e>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	b672      	cpsid	i
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	b662      	cpsie	i
 8005b3e:	61fb      	str	r3, [r7, #28]
}
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b44:	2354      	movs	r3, #84	; 0x54
 8005b46:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b54      	cmp	r3, #84	; 0x54
 8005b4c:	d00c      	beq.n	8005b68 <xTaskCreateStatic+0x72>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	b672      	cpsid	i
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	b662      	cpsie	i
 8005b62:	61bb      	str	r3, [r7, #24]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01e      	beq.n	8005bae <xTaskCreateStatic+0xb8>
 8005b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01b      	beq.n	8005bae <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9303      	str	r3, [sp, #12]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	9302      	str	r3, [sp, #8]
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f850 	bl	8005c46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ba8:	f000 f8d6 	bl	8005d58 <prvAddNewTaskToReadyList>
 8005bac:	e001      	b.n	8005bb2 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bb2:	697b      	ldr	r3, [r7, #20]
	}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3728      	adds	r7, #40	; 0x28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08c      	sub	sp, #48	; 0x30
 8005bc0:	af04      	add	r7, sp, #16
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 febb 	bl	800694c <pvPortMalloc>
 8005bd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00e      	beq.n	8005bfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bde:	2054      	movs	r0, #84	; 0x54
 8005be0:	f000 feb4 	bl	800694c <pvPortMalloc>
 8005be4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8005bf2:	e005      	b.n	8005c00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bf4:	6978      	ldr	r0, [r7, #20]
 8005bf6:	f000 ff73 	bl	8006ae0 <vPortFree>
 8005bfa:	e001      	b.n	8005c00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d017      	beq.n	8005c36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	2300      	movs	r3, #0
 8005c12:	9303      	str	r3, [sp, #12]
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	9302      	str	r3, [sp, #8]
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f80e 	bl	8005c46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c2a:	69f8      	ldr	r0, [r7, #28]
 8005c2c:	f000 f894 	bl	8005d58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c30:	2301      	movs	r3, #1
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	e002      	b.n	8005c3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b088      	sub	sp, #32
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005c5e:	440b      	add	r3, r1
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f023 0307 	bic.w	r3, r3, #7
 8005c6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00c      	beq.n	8005c92 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	b672      	cpsid	i
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	b662      	cpsie	i
 8005c8c:	617b      	str	r3, [r7, #20]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01f      	beq.n	8005cd8 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	e012      	b.n	8005cc4 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	7819      	ldrb	r1, [r3, #0]
 8005ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	3334      	adds	r3, #52	; 0x34
 8005cae:	460a      	mov	r2, r1
 8005cb0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d006      	beq.n	8005ccc <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b0f      	cmp	r3, #15
 8005cc8:	d9e9      	bls.n	8005c9e <prvInitialiseNewTask+0x58>
 8005cca:	e000      	b.n	8005cce <prvInitialiseNewTask+0x88>
			{
				break;
 8005ccc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cd6:	e003      	b.n	8005ce0 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	2b06      	cmp	r3, #6
 8005ce4:	d901      	bls.n	8005cea <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ce6:	2306      	movs	r3, #6
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fe64 	bl	80059ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	3318      	adds	r3, #24
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff fe5f 	bl	80059ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	f1c3 0207 	rsb	r2, r3, #7
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	2200      	movs	r2, #0
 8005d2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	69b8      	ldr	r0, [r7, #24]
 8005d3a:	f000 fc13 	bl	8006564 <pxPortInitialiseStack>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d50:	bf00      	nop
 8005d52:	3720      	adds	r7, #32
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d60:	f000 fd0c 	bl	800677c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d64:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <prvAddNewTaskToReadyList+0xb8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	4a29      	ldr	r2, [pc, #164]	; (8005e10 <prvAddNewTaskToReadyList+0xb8>)
 8005d6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d6e:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <prvAddNewTaskToReadyList+0xbc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d76:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <prvAddNewTaskToReadyList+0xbc>)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d7c:	4b24      	ldr	r3, [pc, #144]	; (8005e10 <prvAddNewTaskToReadyList+0xb8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d110      	bne.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d84:	f000 fac8 	bl	8006318 <prvInitialiseTaskLists>
 8005d88:	e00d      	b.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d8a:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <prvAddNewTaskToReadyList+0xc0>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d92:	4b20      	ldr	r3, [pc, #128]	; (8005e14 <prvAddNewTaskToReadyList+0xbc>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d802      	bhi.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005da0:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <prvAddNewTaskToReadyList+0xbc>)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005da6:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <prvAddNewTaskToReadyList+0xc4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	4a1b      	ldr	r2, [pc, #108]	; (8005e1c <prvAddNewTaskToReadyList+0xc4>)
 8005dae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	2201      	movs	r2, #1
 8005db6:	409a      	lsls	r2, r3
 8005db8:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	4a18      	ldr	r2, [pc, #96]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4a15      	ldr	r2, [pc, #84]	; (8005e24 <prvAddNewTaskToReadyList+0xcc>)
 8005dd0:	441a      	add	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7ff fe05 	bl	80059e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005dde:	f000 fd01 	bl	80067e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <prvAddNewTaskToReadyList+0xc0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00e      	beq.n	8005e08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dea:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <prvAddNewTaskToReadyList+0xbc>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d207      	bcs.n	8005e08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005df8:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <prvAddNewTaskToReadyList+0xd0>)
 8005dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	200004fc 	.word	0x200004fc
 8005e14:	200003fc 	.word	0x200003fc
 8005e18:	20000508 	.word	0x20000508
 8005e1c:	20000518 	.word	0x20000518
 8005e20:	20000504 	.word	0x20000504
 8005e24:	20000400 	.word	0x20000400
 8005e28:	e000ed04 	.word	0xe000ed04

08005e2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d019      	beq.n	8005e72 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e3e:	4b14      	ldr	r3, [pc, #80]	; (8005e90 <vTaskDelay+0x64>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00c      	beq.n	8005e60 <vTaskDelay+0x34>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	b672      	cpsid	i
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	b662      	cpsie	i
 8005e5a:	60bb      	str	r3, [r7, #8]
}
 8005e5c:	bf00      	nop
 8005e5e:	e7fe      	b.n	8005e5e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005e60:	f000 f87e 	bl	8005f60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e64:	2100      	movs	r1, #0
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fb16 	bl	8006498 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e6c:	f000 f886 	bl	8005f7c <xTaskResumeAll>
 8005e70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d107      	bne.n	8005e88 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <vTaskDelay+0x68>)
 8005e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e88:	bf00      	nop
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20000524 	.word	0x20000524
 8005e94:	e000ed04 	.word	0xe000ed04

08005e98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	; 0x28
 8005e9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ea6:	463a      	mov	r2, r7
 8005ea8:	1d39      	adds	r1, r7, #4
 8005eaa:	f107 0308 	add.w	r3, r7, #8
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fa fb2a 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	9202      	str	r2, [sp, #8]
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	460a      	mov	r2, r1
 8005ec6:	4920      	ldr	r1, [pc, #128]	; (8005f48 <vTaskStartScheduler+0xb0>)
 8005ec8:	4820      	ldr	r0, [pc, #128]	; (8005f4c <vTaskStartScheduler+0xb4>)
 8005eca:	f7ff fe14 	bl	8005af6 <xTaskCreateStatic>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4a1f      	ldr	r2, [pc, #124]	; (8005f50 <vTaskStartScheduler+0xb8>)
 8005ed2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ed4:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <vTaskStartScheduler+0xb8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005edc:	2301      	movs	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	e001      	b.n	8005ee6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d118      	bne.n	8005f1e <vTaskStartScheduler+0x86>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	b672      	cpsid	i
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	b662      	cpsie	i
 8005f00:	613b      	str	r3, [r7, #16]
}
 8005f02:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f04:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <vTaskStartScheduler+0xbc>)
 8005f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f0c:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <vTaskStartScheduler+0xc0>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f12:	4b12      	ldr	r3, [pc, #72]	; (8005f5c <vTaskStartScheduler+0xc4>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f18:	f000 fbb2 	bl	8006680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f1c:	e010      	b.n	8005f40 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f24:	d10c      	bne.n	8005f40 <vTaskStartScheduler+0xa8>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	b672      	cpsid	i
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	b662      	cpsie	i
 8005f3a:	60fb      	str	r3, [r7, #12]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <vTaskStartScheduler+0xa6>
}
 8005f40:	bf00      	nop
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	08006e4c 	.word	0x08006e4c
 8005f4c:	080062e9 	.word	0x080062e9
 8005f50:	20000520 	.word	0x20000520
 8005f54:	2000051c 	.word	0x2000051c
 8005f58:	20000508 	.word	0x20000508
 8005f5c:	20000500 	.word	0x20000500

08005f60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f64:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <vTaskSuspendAll+0x18>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	4a03      	ldr	r2, [pc, #12]	; (8005f78 <vTaskSuspendAll+0x18>)
 8005f6c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005f6e:	bf00      	nop
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	20000524 	.word	0x20000524

08005f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f8a:	4b42      	ldr	r3, [pc, #264]	; (8006094 <xTaskResumeAll+0x118>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10c      	bne.n	8005fac <xTaskResumeAll+0x30>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	b672      	cpsid	i
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	b662      	cpsie	i
 8005fa6:	603b      	str	r3, [r7, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	e7fe      	b.n	8005faa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fac:	f000 fbe6 	bl	800677c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fb0:	4b38      	ldr	r3, [pc, #224]	; (8006094 <xTaskResumeAll+0x118>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	4a37      	ldr	r2, [pc, #220]	; (8006094 <xTaskResumeAll+0x118>)
 8005fb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fba:	4b36      	ldr	r3, [pc, #216]	; (8006094 <xTaskResumeAll+0x118>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d161      	bne.n	8006086 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fc2:	4b35      	ldr	r3, [pc, #212]	; (8006098 <xTaskResumeAll+0x11c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d05d      	beq.n	8006086 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fca:	e02e      	b.n	800602a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fcc:	4b33      	ldr	r3, [pc, #204]	; (800609c <xTaskResumeAll+0x120>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3318      	adds	r3, #24
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff fd62 	bl	8005aa2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff fd5d 	bl	8005aa2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	2201      	movs	r2, #1
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	4b2b      	ldr	r3, [pc, #172]	; (80060a0 <xTaskResumeAll+0x124>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	; (80060a0 <xTaskResumeAll+0x124>)
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4a27      	ldr	r2, [pc, #156]	; (80060a4 <xTaskResumeAll+0x128>)
 8006008:	441a      	add	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3304      	adds	r3, #4
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f7ff fce9 	bl	80059e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601a:	4b23      	ldr	r3, [pc, #140]	; (80060a8 <xTaskResumeAll+0x12c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006024:	4b21      	ldr	r3, [pc, #132]	; (80060ac <xTaskResumeAll+0x130>)
 8006026:	2201      	movs	r2, #1
 8006028:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800602a:	4b1c      	ldr	r3, [pc, #112]	; (800609c <xTaskResumeAll+0x120>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1cc      	bne.n	8005fcc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006038:	f000 fa0e 	bl	8006458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800603c:	4b1c      	ldr	r3, [pc, #112]	; (80060b0 <xTaskResumeAll+0x134>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d010      	beq.n	800606a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006048:	f000 f836 	bl	80060b8 <xTaskIncrementTick>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006052:	4b16      	ldr	r3, [pc, #88]	; (80060ac <xTaskResumeAll+0x130>)
 8006054:	2201      	movs	r2, #1
 8006056:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3b01      	subs	r3, #1
 800605c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f1      	bne.n	8006048 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006064:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <xTaskResumeAll+0x134>)
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800606a:	4b10      	ldr	r3, [pc, #64]	; (80060ac <xTaskResumeAll+0x130>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006072:	2301      	movs	r3, #1
 8006074:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006076:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <xTaskResumeAll+0x138>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006086:	f000 fbad 	bl	80067e4 <vPortExitCritical>

	return xAlreadyYielded;
 800608a:	68bb      	ldr	r3, [r7, #8]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000524 	.word	0x20000524
 8006098:	200004fc 	.word	0x200004fc
 800609c:	200004bc 	.word	0x200004bc
 80060a0:	20000504 	.word	0x20000504
 80060a4:	20000400 	.word	0x20000400
 80060a8:	200003fc 	.word	0x200003fc
 80060ac:	20000510 	.word	0x20000510
 80060b0:	2000050c 	.word	0x2000050c
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c2:	4b4f      	ldr	r3, [pc, #316]	; (8006200 <xTaskIncrementTick+0x148>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f040 808a 	bne.w	80061e0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060cc:	4b4d      	ldr	r3, [pc, #308]	; (8006204 <xTaskIncrementTick+0x14c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060d4:	4a4b      	ldr	r2, [pc, #300]	; (8006204 <xTaskIncrementTick+0x14c>)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d122      	bne.n	8006126 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80060e0:	4b49      	ldr	r3, [pc, #292]	; (8006208 <xTaskIncrementTick+0x150>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00c      	beq.n	8006104 <xTaskIncrementTick+0x4c>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	b672      	cpsid	i
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	b662      	cpsie	i
 80060fe:	603b      	str	r3, [r7, #0]
}
 8006100:	bf00      	nop
 8006102:	e7fe      	b.n	8006102 <xTaskIncrementTick+0x4a>
 8006104:	4b40      	ldr	r3, [pc, #256]	; (8006208 <xTaskIncrementTick+0x150>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	4b40      	ldr	r3, [pc, #256]	; (800620c <xTaskIncrementTick+0x154>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a3e      	ldr	r2, [pc, #248]	; (8006208 <xTaskIncrementTick+0x150>)
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	4a3e      	ldr	r2, [pc, #248]	; (800620c <xTaskIncrementTick+0x154>)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	4b3d      	ldr	r3, [pc, #244]	; (8006210 <xTaskIncrementTick+0x158>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3301      	adds	r3, #1
 800611e:	4a3c      	ldr	r2, [pc, #240]	; (8006210 <xTaskIncrementTick+0x158>)
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	f000 f999 	bl	8006458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006126:	4b3b      	ldr	r3, [pc, #236]	; (8006214 <xTaskIncrementTick+0x15c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	429a      	cmp	r2, r3
 800612e:	d348      	bcc.n	80061c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006130:	4b35      	ldr	r3, [pc, #212]	; (8006208 <xTaskIncrementTick+0x150>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800613a:	4b36      	ldr	r3, [pc, #216]	; (8006214 <xTaskIncrementTick+0x15c>)
 800613c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006140:	601a      	str	r2, [r3, #0]
					break;
 8006142:	e03e      	b.n	80061c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006144:	4b30      	ldr	r3, [pc, #192]	; (8006208 <xTaskIncrementTick+0x150>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	429a      	cmp	r2, r3
 800615a:	d203      	bcs.n	8006164 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800615c:	4a2d      	ldr	r2, [pc, #180]	; (8006214 <xTaskIncrementTick+0x15c>)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006162:	e02e      	b.n	80061c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	3304      	adds	r3, #4
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff fc9a 	bl	8005aa2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	3318      	adds	r3, #24
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fc91 	bl	8005aa2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	2201      	movs	r2, #1
 8006186:	409a      	lsls	r2, r3
 8006188:	4b23      	ldr	r3, [pc, #140]	; (8006218 <xTaskIncrementTick+0x160>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4313      	orrs	r3, r2
 800618e:	4a22      	ldr	r2, [pc, #136]	; (8006218 <xTaskIncrementTick+0x160>)
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4a1f      	ldr	r2, [pc, #124]	; (800621c <xTaskIncrementTick+0x164>)
 80061a0:	441a      	add	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	3304      	adds	r3, #4
 80061a6:	4619      	mov	r1, r3
 80061a8:	4610      	mov	r0, r2
 80061aa:	f7ff fc1d 	bl	80059e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	4b1b      	ldr	r3, [pc, #108]	; (8006220 <xTaskIncrementTick+0x168>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d3b9      	bcc.n	8006130 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c0:	e7b6      	b.n	8006130 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061c2:	4b17      	ldr	r3, [pc, #92]	; (8006220 <xTaskIncrementTick+0x168>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	4914      	ldr	r1, [pc, #80]	; (800621c <xTaskIncrementTick+0x164>)
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d907      	bls.n	80061ea <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80061da:	2301      	movs	r3, #1
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e004      	b.n	80061ea <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061e0:	4b10      	ldr	r3, [pc, #64]	; (8006224 <xTaskIncrementTick+0x16c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3301      	adds	r3, #1
 80061e6:	4a0f      	ldr	r2, [pc, #60]	; (8006224 <xTaskIncrementTick+0x16c>)
 80061e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <xTaskIncrementTick+0x170>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80061f2:	2301      	movs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061f6:	697b      	ldr	r3, [r7, #20]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20000524 	.word	0x20000524
 8006204:	20000500 	.word	0x20000500
 8006208:	200004b4 	.word	0x200004b4
 800620c:	200004b8 	.word	0x200004b8
 8006210:	20000514 	.word	0x20000514
 8006214:	2000051c 	.word	0x2000051c
 8006218:	20000504 	.word	0x20000504
 800621c:	20000400 	.word	0x20000400
 8006220:	200003fc 	.word	0x200003fc
 8006224:	2000050c 	.word	0x2000050c
 8006228:	20000510 	.word	0x20000510

0800622c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006232:	4b28      	ldr	r3, [pc, #160]	; (80062d4 <vTaskSwitchContext+0xa8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800623a:	4b27      	ldr	r3, [pc, #156]	; (80062d8 <vTaskSwitchContext+0xac>)
 800623c:	2201      	movs	r2, #1
 800623e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006240:	e041      	b.n	80062c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006242:	4b25      	ldr	r3, [pc, #148]	; (80062d8 <vTaskSwitchContext+0xac>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006248:	4b24      	ldr	r3, [pc, #144]	; (80062dc <vTaskSwitchContext+0xb0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	fab3 f383 	clz	r3, r3
 8006254:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006256:	7afb      	ldrb	r3, [r7, #11]
 8006258:	f1c3 031f 	rsb	r3, r3, #31
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	4920      	ldr	r1, [pc, #128]	; (80062e0 <vTaskSwitchContext+0xb4>)
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	440b      	add	r3, r1
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10c      	bne.n	800628c <vTaskSwitchContext+0x60>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	b672      	cpsid	i
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	b662      	cpsie	i
 8006286:	607b      	str	r3, [r7, #4]
}
 8006288:	bf00      	nop
 800628a:	e7fe      	b.n	800628a <vTaskSwitchContext+0x5e>
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <vTaskSwitchContext+0xb4>)
 8006298:	4413      	add	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	605a      	str	r2, [r3, #4]
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3308      	adds	r3, #8
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d104      	bne.n	80062bc <vTaskSwitchContext+0x90>
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	605a      	str	r2, [r3, #4]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	4a08      	ldr	r2, [pc, #32]	; (80062e4 <vTaskSwitchContext+0xb8>)
 80062c4:	6013      	str	r3, [r2, #0]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000524 	.word	0x20000524
 80062d8:	20000510 	.word	0x20000510
 80062dc:	20000504 	.word	0x20000504
 80062e0:	20000400 	.word	0x20000400
 80062e4:	200003fc 	.word	0x200003fc

080062e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062f0:	f000 f852 	bl	8006398 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <prvIdleTask+0x28>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d9f9      	bls.n	80062f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062fc:	4b05      	ldr	r3, [pc, #20]	; (8006314 <prvIdleTask+0x2c>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800630c:	e7f0      	b.n	80062f0 <prvIdleTask+0x8>
 800630e:	bf00      	nop
 8006310:	20000400 	.word	0x20000400
 8006314:	e000ed04 	.word	0xe000ed04

08006318 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800631e:	2300      	movs	r3, #0
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	e00c      	b.n	800633e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4a12      	ldr	r2, [pc, #72]	; (8006378 <prvInitialiseTaskLists+0x60>)
 8006330:	4413      	add	r3, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff fb2b 	bl	800598e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3301      	adds	r3, #1
 800633c:	607b      	str	r3, [r7, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b06      	cmp	r3, #6
 8006342:	d9ef      	bls.n	8006324 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006344:	480d      	ldr	r0, [pc, #52]	; (800637c <prvInitialiseTaskLists+0x64>)
 8006346:	f7ff fb22 	bl	800598e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800634a:	480d      	ldr	r0, [pc, #52]	; (8006380 <prvInitialiseTaskLists+0x68>)
 800634c:	f7ff fb1f 	bl	800598e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006350:	480c      	ldr	r0, [pc, #48]	; (8006384 <prvInitialiseTaskLists+0x6c>)
 8006352:	f7ff fb1c 	bl	800598e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006356:	480c      	ldr	r0, [pc, #48]	; (8006388 <prvInitialiseTaskLists+0x70>)
 8006358:	f7ff fb19 	bl	800598e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800635c:	480b      	ldr	r0, [pc, #44]	; (800638c <prvInitialiseTaskLists+0x74>)
 800635e:	f7ff fb16 	bl	800598e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006362:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <prvInitialiseTaskLists+0x78>)
 8006364:	4a05      	ldr	r2, [pc, #20]	; (800637c <prvInitialiseTaskLists+0x64>)
 8006366:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006368:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <prvInitialiseTaskLists+0x7c>)
 800636a:	4a05      	ldr	r2, [pc, #20]	; (8006380 <prvInitialiseTaskLists+0x68>)
 800636c:	601a      	str	r2, [r3, #0]
}
 800636e:	bf00      	nop
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000400 	.word	0x20000400
 800637c:	2000048c 	.word	0x2000048c
 8006380:	200004a0 	.word	0x200004a0
 8006384:	200004bc 	.word	0x200004bc
 8006388:	200004d0 	.word	0x200004d0
 800638c:	200004e8 	.word	0x200004e8
 8006390:	200004b4 	.word	0x200004b4
 8006394:	200004b8 	.word	0x200004b8

08006398 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800639e:	e019      	b.n	80063d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063a0:	f000 f9ec 	bl	800677c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a4:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <prvCheckTasksWaitingTermination+0x50>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fb76 	bl	8005aa2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063b6:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <prvCheckTasksWaitingTermination+0x54>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	4a0b      	ldr	r2, [pc, #44]	; (80063ec <prvCheckTasksWaitingTermination+0x54>)
 80063be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <prvCheckTasksWaitingTermination+0x58>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	4a0a      	ldr	r2, [pc, #40]	; (80063f0 <prvCheckTasksWaitingTermination+0x58>)
 80063c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063ca:	f000 fa0b 	bl	80067e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f810 	bl	80063f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063d4:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <prvCheckTasksWaitingTermination+0x58>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e1      	bne.n	80063a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063dc:	bf00      	nop
 80063de:	bf00      	nop
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	200004d0 	.word	0x200004d0
 80063ec:	200004fc 	.word	0x200004fc
 80063f0:	200004e4 	.word	0x200004e4

080063f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006402:	2b00      	cmp	r3, #0
 8006404:	d108      	bne.n	8006418 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fb68 	bl	8006ae0 <vPortFree>
				vPortFree( pxTCB );
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fb65 	bl	8006ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006416:	e01a      	b.n	800644e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800641e:	2b01      	cmp	r3, #1
 8006420:	d103      	bne.n	800642a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fb5c 	bl	8006ae0 <vPortFree>
	}
 8006428:	e011      	b.n	800644e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006430:	2b02      	cmp	r3, #2
 8006432:	d00c      	beq.n	800644e <prvDeleteTCB+0x5a>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	b672      	cpsid	i
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	b662      	cpsie	i
 8006448:	60fb      	str	r3, [r7, #12]
}
 800644a:	bf00      	nop
 800644c:	e7fe      	b.n	800644c <prvDeleteTCB+0x58>
	}
 800644e:	bf00      	nop
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <prvResetNextTaskUnblockTime+0x38>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <prvResetNextTaskUnblockTime+0x3c>)
 800646a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800646e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006470:	e008      	b.n	8006484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <prvResetNextTaskUnblockTime+0x38>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4a04      	ldr	r2, [pc, #16]	; (8006494 <prvResetNextTaskUnblockTime+0x3c>)
 8006482:	6013      	str	r3, [r2, #0]
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	200004b4 	.word	0x200004b4
 8006494:	2000051c 	.word	0x2000051c

08006498 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064a2:	4b29      	ldr	r3, [pc, #164]	; (8006548 <prvAddCurrentTaskToDelayedList+0xb0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064a8:	4b28      	ldr	r3, [pc, #160]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff faf7 	bl	8005aa2 <uxListRemove>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064ba:	4b24      	ldr	r3, [pc, #144]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	2201      	movs	r2, #1
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	43da      	mvns	r2, r3
 80064c8:	4b21      	ldr	r3, [pc, #132]	; (8006550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4013      	ands	r3, r2
 80064ce:	4a20      	ldr	r2, [pc, #128]	; (8006550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064d8:	d10a      	bne.n	80064f0 <prvAddCurrentTaskToDelayedList+0x58>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064e0:	4b1a      	ldr	r3, [pc, #104]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3304      	adds	r3, #4
 80064e6:	4619      	mov	r1, r3
 80064e8:	481a      	ldr	r0, [pc, #104]	; (8006554 <prvAddCurrentTaskToDelayedList+0xbc>)
 80064ea:	f7ff fa7d 	bl	80059e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064ee:	e026      	b.n	800653e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4413      	add	r3, r2
 80064f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064f8:	4b14      	ldr	r3, [pc, #80]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	429a      	cmp	r2, r3
 8006506:	d209      	bcs.n	800651c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006508:	4b13      	ldr	r3, [pc, #76]	; (8006558 <prvAddCurrentTaskToDelayedList+0xc0>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b0f      	ldr	r3, [pc, #60]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7ff fa8b 	bl	8005a30 <vListInsert>
}
 800651a:	e010      	b.n	800653e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800651c:	4b0f      	ldr	r3, [pc, #60]	; (800655c <prvAddCurrentTaskToDelayedList+0xc4>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3304      	adds	r3, #4
 8006526:	4619      	mov	r1, r3
 8006528:	4610      	mov	r0, r2
 800652a:	f7ff fa81 	bl	8005a30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800652e:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	429a      	cmp	r2, r3
 8006536:	d202      	bcs.n	800653e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006538:	4a09      	ldr	r2, [pc, #36]	; (8006560 <prvAddCurrentTaskToDelayedList+0xc8>)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6013      	str	r3, [r2, #0]
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000500 	.word	0x20000500
 800654c:	200003fc 	.word	0x200003fc
 8006550:	20000504 	.word	0x20000504
 8006554:	200004e8 	.word	0x200004e8
 8006558:	200004b8 	.word	0x200004b8
 800655c:	200004b4 	.word	0x200004b4
 8006560:	2000051c 	.word	0x2000051c

08006564 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3b04      	subs	r3, #4
 8006574:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800657c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3b04      	subs	r3, #4
 8006582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f023 0201 	bic.w	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3b04      	subs	r3, #4
 8006592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006594:	4a0c      	ldr	r2, [pc, #48]	; (80065c8 <pxPortInitialiseStack+0x64>)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3b14      	subs	r3, #20
 800659e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3b04      	subs	r3, #4
 80065aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f06f 0202 	mvn.w	r2, #2
 80065b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3b20      	subs	r3, #32
 80065b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065ba:	68fb      	ldr	r3, [r7, #12]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	080065cd 	.word	0x080065cd

080065cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <prvTaskExitError+0x5c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065de:	d00c      	beq.n	80065fa <prvTaskExitError+0x2e>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	b672      	cpsid	i
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	b662      	cpsie	i
 80065f4:	60fb      	str	r3, [r7, #12]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <prvTaskExitError+0x2c>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	b672      	cpsid	i
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	b662      	cpsie	i
 800660e:	60bb      	str	r3, [r7, #8]
}
 8006610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006612:	bf00      	nop
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0fc      	beq.n	8006614 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	20000018 	.word	0x20000018
 800662c:	00000000 	.word	0x00000000

08006630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006630:	4b07      	ldr	r3, [pc, #28]	; (8006650 <pxCurrentTCBConst2>)
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	6808      	ldr	r0, [r1, #0]
 8006636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663a:	f380 8809 	msr	PSP, r0
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f380 8811 	msr	BASEPRI, r0
 800664a:	4770      	bx	lr
 800664c:	f3af 8000 	nop.w

08006650 <pxCurrentTCBConst2>:
 8006650:	200003fc 	.word	0x200003fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop

08006658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006658:	4808      	ldr	r0, [pc, #32]	; (800667c <prvPortStartFirstTask+0x24>)
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	6800      	ldr	r0, [r0, #0]
 800665e:	f380 8808 	msr	MSP, r0
 8006662:	f04f 0000 	mov.w	r0, #0
 8006666:	f380 8814 	msr	CONTROL, r0
 800666a:	b662      	cpsie	i
 800666c:	b661      	cpsie	f
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	df00      	svc	0
 8006678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800667a:	bf00      	nop
 800667c:	e000ed08 	.word	0xe000ed08

08006680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006686:	4b37      	ldr	r3, [pc, #220]	; (8006764 <xPortStartScheduler+0xe4>)
 8006688:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	22ff      	movs	r2, #255	; 0xff
 8006696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	4b2f      	ldr	r3, [pc, #188]	; (8006768 <xPortStartScheduler+0xe8>)
 80066ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066ae:	4b2f      	ldr	r3, [pc, #188]	; (800676c <xPortStartScheduler+0xec>)
 80066b0:	2207      	movs	r2, #7
 80066b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066b4:	e009      	b.n	80066ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80066b6:	4b2d      	ldr	r3, [pc, #180]	; (800676c <xPortStartScheduler+0xec>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	4a2b      	ldr	r2, [pc, #172]	; (800676c <xPortStartScheduler+0xec>)
 80066be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b80      	cmp	r3, #128	; 0x80
 80066d4:	d0ef      	beq.n	80066b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066d6:	4b25      	ldr	r3, [pc, #148]	; (800676c <xPortStartScheduler+0xec>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f1c3 0307 	rsb	r3, r3, #7
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d00c      	beq.n	80066fc <xPortStartScheduler+0x7c>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	b672      	cpsid	i
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	b662      	cpsie	i
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <xPortStartScheduler+0xec>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	4a1a      	ldr	r2, [pc, #104]	; (800676c <xPortStartScheduler+0xec>)
 8006704:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006706:	4b19      	ldr	r3, [pc, #100]	; (800676c <xPortStartScheduler+0xec>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800670e:	4a17      	ldr	r2, [pc, #92]	; (800676c <xPortStartScheduler+0xec>)
 8006710:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	b2da      	uxtb	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800671a:	4b15      	ldr	r3, [pc, #84]	; (8006770 <xPortStartScheduler+0xf0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a14      	ldr	r2, [pc, #80]	; (8006770 <xPortStartScheduler+0xf0>)
 8006720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006724:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006726:	4b12      	ldr	r3, [pc, #72]	; (8006770 <xPortStartScheduler+0xf0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a11      	ldr	r2, [pc, #68]	; (8006770 <xPortStartScheduler+0xf0>)
 800672c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006730:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006732:	f000 f8dd 	bl	80068f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006736:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <xPortStartScheduler+0xf4>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800673c:	f000 f8fc 	bl	8006938 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006740:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <xPortStartScheduler+0xf8>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a0c      	ldr	r2, [pc, #48]	; (8006778 <xPortStartScheduler+0xf8>)
 8006746:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800674a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800674c:	f7ff ff84 	bl	8006658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006750:	f7ff fd6c 	bl	800622c <vTaskSwitchContext>
	prvTaskExitError();
 8006754:	f7ff ff3a 	bl	80065cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	e000e400 	.word	0xe000e400
 8006768:	20000528 	.word	0x20000528
 800676c:	2000052c 	.word	0x2000052c
 8006770:	e000ed20 	.word	0xe000ed20
 8006774:	20000018 	.word	0x20000018
 8006778:	e000ef34 	.word	0xe000ef34

0800677c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	b672      	cpsid	i
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	b662      	cpsie	i
 8006796:	607b      	str	r3, [r7, #4]
}
 8006798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800679a:	4b10      	ldr	r3, [pc, #64]	; (80067dc <vPortEnterCritical+0x60>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	4a0e      	ldr	r2, [pc, #56]	; (80067dc <vPortEnterCritical+0x60>)
 80067a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067a4:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <vPortEnterCritical+0x60>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d111      	bne.n	80067d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067ac:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <vPortEnterCritical+0x64>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00c      	beq.n	80067d0 <vPortEnterCritical+0x54>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	b672      	cpsid	i
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	b662      	cpsie	i
 80067ca:	603b      	str	r3, [r7, #0]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <vPortEnterCritical+0x52>
	}
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	20000018 	.word	0x20000018
 80067e0:	e000ed04 	.word	0xe000ed04

080067e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067ea:	4b13      	ldr	r3, [pc, #76]	; (8006838 <vPortExitCritical+0x54>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10c      	bne.n	800680c <vPortExitCritical+0x28>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	b672      	cpsid	i
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	b662      	cpsie	i
 8006806:	607b      	str	r3, [r7, #4]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <vPortExitCritical+0x54>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3b01      	subs	r3, #1
 8006812:	4a09      	ldr	r2, [pc, #36]	; (8006838 <vPortExitCritical+0x54>)
 8006814:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006816:	4b08      	ldr	r3, [pc, #32]	; (8006838 <vPortExitCritical+0x54>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d105      	bne.n	800682a <vPortExitCritical+0x46>
 800681e:	2300      	movs	r3, #0
 8006820:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006828:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	20000018 	.word	0x20000018
 800683c:	00000000 	.word	0x00000000

08006840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006840:	f3ef 8009 	mrs	r0, PSP
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4b15      	ldr	r3, [pc, #84]	; (80068a0 <pxCurrentTCBConst>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f01e 0f10 	tst.w	lr, #16
 8006850:	bf08      	it	eq
 8006852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	6010      	str	r0, [r2, #0]
 800685c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006864:	b672      	cpsid	i
 8006866:	f380 8811 	msr	BASEPRI, r0
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	b662      	cpsie	i
 8006874:	f7ff fcda 	bl	800622c <vTaskSwitchContext>
 8006878:	f04f 0000 	mov.w	r0, #0
 800687c:	f380 8811 	msr	BASEPRI, r0
 8006880:	bc09      	pop	{r0, r3}
 8006882:	6819      	ldr	r1, [r3, #0]
 8006884:	6808      	ldr	r0, [r1, #0]
 8006886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688a:	f01e 0f10 	tst.w	lr, #16
 800688e:	bf08      	it	eq
 8006890:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006894:	f380 8809 	msr	PSP, r0
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop

080068a0 <pxCurrentTCBConst>:
 80068a0:	200003fc 	.word	0x200003fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	b672      	cpsid	i
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	b662      	cpsie	i
 80068c2:	607b      	str	r3, [r7, #4]
}
 80068c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068c6:	f7ff fbf7 	bl	80060b8 <xTaskIncrementTick>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <SysTick_Handler+0x44>)
 80068d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	2300      	movs	r3, #0
 80068da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	f383 8811 	msr	BASEPRI, r3
}
 80068e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	e000ed04 	.word	0xe000ed04

080068f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068f4:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <vPortSetupTimerInterrupt+0x34>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068fa:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <vPortSetupTimerInterrupt+0x38>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <vPortSetupTimerInterrupt+0x3c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a0a      	ldr	r2, [pc, #40]	; (8006930 <vPortSetupTimerInterrupt+0x40>)
 8006906:	fba2 2303 	umull	r2, r3, r2, r3
 800690a:	099b      	lsrs	r3, r3, #6
 800690c:	4a09      	ldr	r2, [pc, #36]	; (8006934 <vPortSetupTimerInterrupt+0x44>)
 800690e:	3b01      	subs	r3, #1
 8006910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006912:	4b04      	ldr	r3, [pc, #16]	; (8006924 <vPortSetupTimerInterrupt+0x34>)
 8006914:	2207      	movs	r2, #7
 8006916:	601a      	str	r2, [r3, #0]
}
 8006918:	bf00      	nop
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	e000e010 	.word	0xe000e010
 8006928:	e000e018 	.word	0xe000e018
 800692c:	20000000 	.word	0x20000000
 8006930:	10624dd3 	.word	0x10624dd3
 8006934:	e000e014 	.word	0xe000e014

08006938 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006938:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006948 <vPortEnableVFP+0x10>
 800693c:	6801      	ldr	r1, [r0, #0]
 800693e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006942:	6001      	str	r1, [r0, #0]
 8006944:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006946:	bf00      	nop
 8006948:	e000ed88 	.word	0xe000ed88

0800694c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	; 0x28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006954:	2300      	movs	r3, #0
 8006956:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006958:	f7ff fb02 	bl	8005f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800695c:	4b5b      	ldr	r3, [pc, #364]	; (8006acc <pvPortMalloc+0x180>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006964:	f000 f91a 	bl	8006b9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006968:	4b59      	ldr	r3, [pc, #356]	; (8006ad0 <pvPortMalloc+0x184>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 8092 	bne.w	8006a9a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01f      	beq.n	80069bc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800697c:	2208      	movs	r2, #8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4413      	add	r3, r2
 8006982:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	2b00      	cmp	r3, #0
 800698c:	d016      	beq.n	80069bc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f023 0307 	bic.w	r3, r3, #7
 8006994:	3308      	adds	r3, #8
 8006996:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00c      	beq.n	80069bc <pvPortMalloc+0x70>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	b672      	cpsid	i
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	b662      	cpsie	i
 80069b6:	617b      	str	r3, [r7, #20]
}
 80069b8:	bf00      	nop
 80069ba:	e7fe      	b.n	80069ba <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d06b      	beq.n	8006a9a <pvPortMalloc+0x14e>
 80069c2:	4b44      	ldr	r3, [pc, #272]	; (8006ad4 <pvPortMalloc+0x188>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d866      	bhi.n	8006a9a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069cc:	4b42      	ldr	r3, [pc, #264]	; (8006ad8 <pvPortMalloc+0x18c>)
 80069ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069d0:	4b41      	ldr	r3, [pc, #260]	; (8006ad8 <pvPortMalloc+0x18c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069d6:	e004      	b.n	80069e2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d903      	bls.n	80069f4 <pvPortMalloc+0xa8>
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f1      	bne.n	80069d8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069f4:	4b35      	ldr	r3, [pc, #212]	; (8006acc <pvPortMalloc+0x180>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d04d      	beq.n	8006a9a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2208      	movs	r2, #8
 8006a04:	4413      	add	r3, r2
 8006a06:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	1ad2      	subs	r2, r2, r3
 8006a18:	2308      	movs	r3, #8
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d921      	bls.n	8006a64 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4413      	add	r3, r2
 8006a26:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <pvPortMalloc+0x100>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	b672      	cpsid	i
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	b662      	cpsie	i
 8006a46:	613b      	str	r3, [r7, #16]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a5e:	69b8      	ldr	r0, [r7, #24]
 8006a60:	f000 f8fe 	bl	8006c60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a64:	4b1b      	ldr	r3, [pc, #108]	; (8006ad4 <pvPortMalloc+0x188>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	4a19      	ldr	r2, [pc, #100]	; (8006ad4 <pvPortMalloc+0x188>)
 8006a70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a72:	4b18      	ldr	r3, [pc, #96]	; (8006ad4 <pvPortMalloc+0x188>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b19      	ldr	r3, [pc, #100]	; (8006adc <pvPortMalloc+0x190>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d203      	bcs.n	8006a86 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a7e:	4b15      	ldr	r3, [pc, #84]	; (8006ad4 <pvPortMalloc+0x188>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a16      	ldr	r2, [pc, #88]	; (8006adc <pvPortMalloc+0x190>)
 8006a84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <pvPortMalloc+0x184>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a9a:	f7ff fa6f 	bl	8005f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <pvPortMalloc+0x176>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	b672      	cpsid	i
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	b662      	cpsie	i
 8006abc:	60fb      	str	r3, [r7, #12]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <pvPortMalloc+0x174>
	return pvReturn;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3728      	adds	r7, #40	; 0x28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20004138 	.word	0x20004138
 8006ad0:	20004144 	.word	0x20004144
 8006ad4:	2000413c 	.word	0x2000413c
 8006ad8:	20004130 	.word	0x20004130
 8006adc:	20004140 	.word	0x20004140

08006ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d04c      	beq.n	8006b8c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006af2:	2308      	movs	r3, #8
 8006af4:	425b      	negs	r3, r3
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4413      	add	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	4b23      	ldr	r3, [pc, #140]	; (8006b94 <vPortFree+0xb4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10c      	bne.n	8006b28 <vPortFree+0x48>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	b672      	cpsid	i
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	b662      	cpsie	i
 8006b22:	60fb      	str	r3, [r7, #12]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00c      	beq.n	8006b4a <vPortFree+0x6a>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	b672      	cpsid	i
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	b662      	cpsie	i
 8006b44:	60bb      	str	r3, [r7, #8]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <vPortFree+0xb4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4013      	ands	r3, r2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d019      	beq.n	8006b8c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d115      	bne.n	8006b8c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <vPortFree+0xb4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	401a      	ands	r2, r3
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b70:	f7ff f9f6 	bl	8005f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <vPortFree+0xb8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	4a06      	ldr	r2, [pc, #24]	; (8006b98 <vPortFree+0xb8>)
 8006b80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b82:	6938      	ldr	r0, [r7, #16]
 8006b84:	f000 f86c 	bl	8006c60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b88:	f7ff f9f8 	bl	8005f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b8c:	bf00      	nop
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20004144 	.word	0x20004144
 8006b98:	2000413c 	.word	0x2000413c

08006b9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ba2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ba6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ba8:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <prvHeapInit+0xac>)
 8006baa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00c      	beq.n	8006bd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3307      	adds	r3, #7
 8006bba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0307 	bic.w	r3, r3, #7
 8006bc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	4a1f      	ldr	r2, [pc, #124]	; (8006c48 <prvHeapInit+0xac>)
 8006bcc:	4413      	add	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bd4:	4a1d      	ldr	r2, [pc, #116]	; (8006c4c <prvHeapInit+0xb0>)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bda:	4b1c      	ldr	r3, [pc, #112]	; (8006c4c <prvHeapInit+0xb0>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	4413      	add	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006be8:	2208      	movs	r2, #8
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0307 	bic.w	r3, r3, #7
 8006bf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4a15      	ldr	r2, [pc, #84]	; (8006c50 <prvHeapInit+0xb4>)
 8006bfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bfe:	4b14      	ldr	r3, [pc, #80]	; (8006c50 <prvHeapInit+0xb4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2200      	movs	r2, #0
 8006c04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c06:	4b12      	ldr	r3, [pc, #72]	; (8006c50 <prvHeapInit+0xb4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <prvHeapInit+0xb4>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <prvHeapInit+0xb8>)
 8006c2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <prvHeapInit+0xbc>)
 8006c32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c34:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <prvHeapInit+0xc0>)
 8006c36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c3a:	601a      	str	r2, [r3, #0]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	20000530 	.word	0x20000530
 8006c4c:	20004130 	.word	0x20004130
 8006c50:	20004138 	.word	0x20004138
 8006c54:	20004140 	.word	0x20004140
 8006c58:	2000413c 	.word	0x2000413c
 8006c5c:	20004144 	.word	0x20004144

08006c60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c68:	4b28      	ldr	r3, [pc, #160]	; (8006d0c <prvInsertBlockIntoFreeList+0xac>)
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	e002      	b.n	8006c74 <prvInsertBlockIntoFreeList+0x14>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d8f7      	bhi.n	8006c6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4413      	add	r3, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d108      	bne.n	8006ca2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	441a      	add	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	441a      	add	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d118      	bne.n	8006ce8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <prvInsertBlockIntoFreeList+0xb0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d00d      	beq.n	8006cde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	441a      	add	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e008      	b.n	8006cf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <prvInsertBlockIntoFreeList+0xb0>)
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	e003      	b.n	8006cf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d002      	beq.n	8006cfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20004130 	.word	0x20004130
 8006d10:	20004138 	.word	0x20004138

08006d14 <__libc_init_array>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	4d0d      	ldr	r5, [pc, #52]	; (8006d4c <__libc_init_array+0x38>)
 8006d18:	4c0d      	ldr	r4, [pc, #52]	; (8006d50 <__libc_init_array+0x3c>)
 8006d1a:	1b64      	subs	r4, r4, r5
 8006d1c:	10a4      	asrs	r4, r4, #2
 8006d1e:	2600      	movs	r6, #0
 8006d20:	42a6      	cmp	r6, r4
 8006d22:	d109      	bne.n	8006d38 <__libc_init_array+0x24>
 8006d24:	4d0b      	ldr	r5, [pc, #44]	; (8006d54 <__libc_init_array+0x40>)
 8006d26:	4c0c      	ldr	r4, [pc, #48]	; (8006d58 <__libc_init_array+0x44>)
 8006d28:	f000 f820 	bl	8006d6c <_init>
 8006d2c:	1b64      	subs	r4, r4, r5
 8006d2e:	10a4      	asrs	r4, r4, #2
 8006d30:	2600      	movs	r6, #0
 8006d32:	42a6      	cmp	r6, r4
 8006d34:	d105      	bne.n	8006d42 <__libc_init_array+0x2e>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3c:	4798      	blx	r3
 8006d3e:	3601      	adds	r6, #1
 8006d40:	e7ee      	b.n	8006d20 <__libc_init_array+0xc>
 8006d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d46:	4798      	blx	r3
 8006d48:	3601      	adds	r6, #1
 8006d4a:	e7f2      	b.n	8006d32 <__libc_init_array+0x1e>
 8006d4c:	08008934 	.word	0x08008934
 8006d50:	08008934 	.word	0x08008934
 8006d54:	08008934 	.word	0x08008934
 8006d58:	08008938 	.word	0x08008938

08006d5c <memset>:
 8006d5c:	4402      	add	r2, r0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d100      	bne.n	8006d66 <memset+0xa>
 8006d64:	4770      	bx	lr
 8006d66:	f803 1b01 	strb.w	r1, [r3], #1
 8006d6a:	e7f9      	b.n	8006d60 <memset+0x4>

08006d6c <_init>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr

08006d78 <_fini>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	bf00      	nop
 8006d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7e:	bc08      	pop	{r3}
 8006d80:	469e      	mov	lr, r3
 8006d82:	4770      	bx	lr


DISKO_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012cdc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08012eac  08012eac  00022eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f54  08012f54  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08012f54  08012f54  00022f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f5c  08012f5c  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f5c  08012f5c  00022f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f60  08012f60  00022f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08012f64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000097cc  20000094  08012ff8  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009860  08012ff8  00039860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004e144  00000000  00000000  0003016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009c6a  00000000  00000000  0007e2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003478  00000000  00000000  00087f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003078  00000000  00000000  0008b398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000356ec  00000000  00000000  0008e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039c6a  00000000  00000000  000c3afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013007e  00000000  00000000  000fd766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000d938  00000000  00000000  0022d7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001ada  00000000  00000000  0023b11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <deregister_tm_clones>:
 80001d0:	4803      	ldr	r0, [pc, #12]	; (80001e0 <deregister_tm_clones+0x10>)
 80001d2:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <deregister_tm_clones+0x14>)
 80001d4:	4283      	cmp	r3, r0
 80001d6:	d002      	beq.n	80001de <deregister_tm_clones+0xe>
 80001d8:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <deregister_tm_clones+0x18>)
 80001da:	b103      	cbz	r3, 80001de <deregister_tm_clones+0xe>
 80001dc:	4718      	bx	r3
 80001de:	4770      	bx	lr
 80001e0:	20000094 	.word	0x20000094
 80001e4:	20000094 	.word	0x20000094
 80001e8:	00000000 	.word	0x00000000

080001ec <register_tm_clones>:
 80001ec:	4805      	ldr	r0, [pc, #20]	; (8000204 <register_tm_clones+0x18>)
 80001ee:	4906      	ldr	r1, [pc, #24]	; (8000208 <register_tm_clones+0x1c>)
 80001f0:	1a0b      	subs	r3, r1, r0
 80001f2:	0fd9      	lsrs	r1, r3, #31
 80001f4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001f8:	1049      	asrs	r1, r1, #1
 80001fa:	d002      	beq.n	8000202 <register_tm_clones+0x16>
 80001fc:	4b03      	ldr	r3, [pc, #12]	; (800020c <register_tm_clones+0x20>)
 80001fe:	b103      	cbz	r3, 8000202 <register_tm_clones+0x16>
 8000200:	4718      	bx	r3
 8000202:	4770      	bx	lr
 8000204:	20000094 	.word	0x20000094
 8000208:	20000094 	.word	0x20000094
 800020c:	00000000 	.word	0x00000000

08000210 <__do_global_dtors_aux>:
 8000210:	b510      	push	{r4, lr}
 8000212:	4c06      	ldr	r4, [pc, #24]	; (800022c <__do_global_dtors_aux+0x1c>)
 8000214:	7823      	ldrb	r3, [r4, #0]
 8000216:	b943      	cbnz	r3, 800022a <__do_global_dtors_aux+0x1a>
 8000218:	f7ff ffda 	bl	80001d0 <deregister_tm_clones>
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <__do_global_dtors_aux+0x20>)
 800021e:	b113      	cbz	r3, 8000226 <__do_global_dtors_aux+0x16>
 8000220:	4804      	ldr	r0, [pc, #16]	; (8000234 <__do_global_dtors_aux+0x24>)
 8000222:	f3af 8000 	nop.w
 8000226:	2301      	movs	r3, #1
 8000228:	7023      	strb	r3, [r4, #0]
 800022a:	bd10      	pop	{r4, pc}
 800022c:	20000094 	.word	0x20000094
 8000230:	00000000 	.word	0x00000000
 8000234:	08012e94 	.word	0x08012e94

08000238 <frame_dummy>:
 8000238:	b508      	push	{r3, lr}
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <frame_dummy+0x14>)
 800023c:	b11b      	cbz	r3, 8000246 <frame_dummy+0xe>
 800023e:	4904      	ldr	r1, [pc, #16]	; (8000250 <frame_dummy+0x18>)
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <frame_dummy+0x1c>)
 8000242:	f3af 8000 	nop.w
 8000246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024a:	e7cf      	b.n	80001ec <register_tm_clones>
 800024c:	00000000 	.word	0x00000000
 8000250:	20000098 	.word	0x20000098
 8000254:	08012e94 	.word	0x08012e94

08000258 <__errno>:
 8000258:	4b01      	ldr	r3, [pc, #4]	; (8000260 <__errno+0x8>)
 800025a:	6818      	ldr	r0, [r3, #0]
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000000 	.word	0x20000000

08000264 <__libc_init_array>:
 8000264:	b570      	push	{r4, r5, r6, lr}
 8000266:	4e0d      	ldr	r6, [pc, #52]	; (800029c <__libc_init_array+0x38>)
 8000268:	4d0d      	ldr	r5, [pc, #52]	; (80002a0 <__libc_init_array+0x3c>)
 800026a:	1b76      	subs	r6, r6, r5
 800026c:	10b6      	asrs	r6, r6, #2
 800026e:	d006      	beq.n	800027e <__libc_init_array+0x1a>
 8000270:	2400      	movs	r4, #0
 8000272:	3401      	adds	r4, #1
 8000274:	f855 3b04 	ldr.w	r3, [r5], #4
 8000278:	4798      	blx	r3
 800027a:	42a6      	cmp	r6, r4
 800027c:	d1f9      	bne.n	8000272 <__libc_init_array+0xe>
 800027e:	4e09      	ldr	r6, [pc, #36]	; (80002a4 <__libc_init_array+0x40>)
 8000280:	4d09      	ldr	r5, [pc, #36]	; (80002a8 <__libc_init_array+0x44>)
 8000282:	1b76      	subs	r6, r6, r5
 8000284:	f012 fe06 	bl	8012e94 <_init>
 8000288:	10b6      	asrs	r6, r6, #2
 800028a:	d006      	beq.n	800029a <__libc_init_array+0x36>
 800028c:	2400      	movs	r4, #0
 800028e:	3401      	adds	r4, #1
 8000290:	f855 3b04 	ldr.w	r3, [r5], #4
 8000294:	4798      	blx	r3
 8000296:	42a6      	cmp	r6, r4
 8000298:	d1f9      	bne.n	800028e <__libc_init_array+0x2a>
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	08012f5c 	.word	0x08012f5c
 80002a0:	08012f5c 	.word	0x08012f5c
 80002a4:	08012f60 	.word	0x08012f60
 80002a8:	08012f5c 	.word	0x08012f5c

080002ac <malloc>:
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <malloc+0xc>)
 80002ae:	4601      	mov	r1, r0
 80002b0:	6818      	ldr	r0, [r3, #0]
 80002b2:	f000 b94b 	b.w	800054c <_malloc_r>
 80002b6:	bf00      	nop
 80002b8:	20000000 	.word	0x20000000

080002bc <free>:
 80002bc:	4b02      	ldr	r3, [pc, #8]	; (80002c8 <free+0xc>)
 80002be:	4601      	mov	r1, r0
 80002c0:	6818      	ldr	r0, [r3, #0]
 80002c2:	f000 b8ed 	b.w	80004a0 <_free_r>
 80002c6:	bf00      	nop
 80002c8:	20000000 	.word	0x20000000

080002cc <memcpy>:
 80002cc:	4684      	mov	ip, r0
 80002ce:	ea41 0300 	orr.w	r3, r1, r0
 80002d2:	f013 0303 	ands.w	r3, r3, #3
 80002d6:	d16d      	bne.n	80003b4 <memcpy+0xe8>
 80002d8:	3a40      	subs	r2, #64	; 0x40
 80002da:	d341      	bcc.n	8000360 <memcpy+0x94>
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f0:	f840 3b04 	str.w	r3, [r0], #4
 80002f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f8:	f840 3b04 	str.w	r3, [r0], #4
 80002fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000300:	f840 3b04 	str.w	r3, [r0], #4
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	3a40      	subs	r2, #64	; 0x40
 800035e:	d2bd      	bcs.n	80002dc <memcpy+0x10>
 8000360:	3230      	adds	r2, #48	; 0x30
 8000362:	d311      	bcc.n	8000388 <memcpy+0xbc>
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	3a10      	subs	r2, #16
 8000386:	d2ed      	bcs.n	8000364 <memcpy+0x98>
 8000388:	320c      	adds	r2, #12
 800038a:	d305      	bcc.n	8000398 <memcpy+0xcc>
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	3a04      	subs	r2, #4
 8000396:	d2f9      	bcs.n	800038c <memcpy+0xc0>
 8000398:	3204      	adds	r2, #4
 800039a:	d008      	beq.n	80003ae <memcpy+0xe2>
 800039c:	07d2      	lsls	r2, r2, #31
 800039e:	bf1c      	itt	ne
 80003a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003a4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003a8:	d301      	bcc.n	80003ae <memcpy+0xe2>
 80003aa:	880b      	ldrh	r3, [r1, #0]
 80003ac:	8003      	strh	r3, [r0, #0]
 80003ae:	4660      	mov	r0, ip
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	2a08      	cmp	r2, #8
 80003b6:	d313      	bcc.n	80003e0 <memcpy+0x114>
 80003b8:	078b      	lsls	r3, r1, #30
 80003ba:	d08d      	beq.n	80002d8 <memcpy+0xc>
 80003bc:	f010 0303 	ands.w	r3, r0, #3
 80003c0:	d08a      	beq.n	80002d8 <memcpy+0xc>
 80003c2:	f1c3 0304 	rsb	r3, r3, #4
 80003c6:	1ad2      	subs	r2, r2, r3
 80003c8:	07db      	lsls	r3, r3, #31
 80003ca:	bf1c      	itt	ne
 80003cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003d0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003d4:	d380      	bcc.n	80002d8 <memcpy+0xc>
 80003d6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003da:	f820 3b02 	strh.w	r3, [r0], #2
 80003de:	e77b      	b.n	80002d8 <memcpy+0xc>
 80003e0:	3a04      	subs	r2, #4
 80003e2:	d3d9      	bcc.n	8000398 <memcpy+0xcc>
 80003e4:	3a01      	subs	r2, #1
 80003e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003ea:	f800 3b01 	strb.w	r3, [r0], #1
 80003ee:	d2f9      	bcs.n	80003e4 <memcpy+0x118>
 80003f0:	780b      	ldrb	r3, [r1, #0]
 80003f2:	7003      	strb	r3, [r0, #0]
 80003f4:	784b      	ldrb	r3, [r1, #1]
 80003f6:	7043      	strb	r3, [r0, #1]
 80003f8:	788b      	ldrb	r3, [r1, #2]
 80003fa:	7083      	strb	r3, [r0, #2]
 80003fc:	4660      	mov	r0, ip
 80003fe:	4770      	bx	lr

08000400 <memset>:
 8000400:	b4f0      	push	{r4, r5, r6, r7}
 8000402:	0786      	lsls	r6, r0, #30
 8000404:	d046      	beq.n	8000494 <memset+0x94>
 8000406:	1e54      	subs	r4, r2, #1
 8000408:	2a00      	cmp	r2, #0
 800040a:	d03c      	beq.n	8000486 <memset+0x86>
 800040c:	b2ca      	uxtb	r2, r1
 800040e:	4603      	mov	r3, r0
 8000410:	e002      	b.n	8000418 <memset+0x18>
 8000412:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8000416:	d336      	bcc.n	8000486 <memset+0x86>
 8000418:	f803 2b01 	strb.w	r2, [r3], #1
 800041c:	079d      	lsls	r5, r3, #30
 800041e:	d1f8      	bne.n	8000412 <memset+0x12>
 8000420:	2c03      	cmp	r4, #3
 8000422:	d929      	bls.n	8000478 <memset+0x78>
 8000424:	b2cd      	uxtb	r5, r1
 8000426:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800042a:	2c0f      	cmp	r4, #15
 800042c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000430:	d933      	bls.n	800049a <memset+0x9a>
 8000432:	f1a4 0610 	sub.w	r6, r4, #16
 8000436:	0936      	lsrs	r6, r6, #4
 8000438:	f103 0720 	add.w	r7, r3, #32
 800043c:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8000440:	f103 0210 	add.w	r2, r3, #16
 8000444:	e942 5504 	strd	r5, r5, [r2, #-16]
 8000448:	e942 5502 	strd	r5, r5, [r2, #-8]
 800044c:	3210      	adds	r2, #16
 800044e:	42ba      	cmp	r2, r7
 8000450:	d1f8      	bne.n	8000444 <memset+0x44>
 8000452:	1c72      	adds	r2, r6, #1
 8000454:	f014 0f0c 	tst.w	r4, #12
 8000458:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800045c:	f004 060f 	and.w	r6, r4, #15
 8000460:	d013      	beq.n	800048a <memset+0x8a>
 8000462:	1f33      	subs	r3, r6, #4
 8000464:	f023 0303 	bic.w	r3, r3, #3
 8000468:	3304      	adds	r3, #4
 800046a:	4413      	add	r3, r2
 800046c:	f842 5b04 	str.w	r5, [r2], #4
 8000470:	4293      	cmp	r3, r2
 8000472:	d1fb      	bne.n	800046c <memset+0x6c>
 8000474:	f006 0403 	and.w	r4, r6, #3
 8000478:	b12c      	cbz	r4, 8000486 <memset+0x86>
 800047a:	b2c9      	uxtb	r1, r1
 800047c:	441c      	add	r4, r3
 800047e:	f803 1b01 	strb.w	r1, [r3], #1
 8000482:	429c      	cmp	r4, r3
 8000484:	d1fb      	bne.n	800047e <memset+0x7e>
 8000486:	bcf0      	pop	{r4, r5, r6, r7}
 8000488:	4770      	bx	lr
 800048a:	4634      	mov	r4, r6
 800048c:	4613      	mov	r3, r2
 800048e:	2c00      	cmp	r4, #0
 8000490:	d1f3      	bne.n	800047a <memset+0x7a>
 8000492:	e7f8      	b.n	8000486 <memset+0x86>
 8000494:	4614      	mov	r4, r2
 8000496:	4603      	mov	r3, r0
 8000498:	e7c2      	b.n	8000420 <memset+0x20>
 800049a:	461a      	mov	r2, r3
 800049c:	4626      	mov	r6, r4
 800049e:	e7e0      	b.n	8000462 <memset+0x62>

080004a0 <_free_r>:
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d03c      	beq.n	800051e <_free_r+0x7e>
 80004a4:	b538      	push	{r3, r4, r5, lr}
 80004a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80004aa:	1f0c      	subs	r4, r1, #4
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	bfb8      	it	lt
 80004b0:	18e4      	addlt	r4, r4, r3
 80004b2:	4605      	mov	r5, r0
 80004b4:	f000 f8c0 	bl	8000638 <__malloc_lock>
 80004b8:	4b23      	ldr	r3, [pc, #140]	; (8000548 <_free_r+0xa8>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	b12a      	cbz	r2, 80004ca <_free_r+0x2a>
 80004be:	42a2      	cmp	r2, r4
 80004c0:	d90d      	bls.n	80004de <_free_r+0x3e>
 80004c2:	6821      	ldr	r1, [r4, #0]
 80004c4:	1860      	adds	r0, r4, r1
 80004c6:	4282      	cmp	r2, r0
 80004c8:	d023      	beq.n	8000512 <_free_r+0x72>
 80004ca:	6062      	str	r2, [r4, #4]
 80004cc:	4628      	mov	r0, r5
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80004d4:	f000 b8b2 	b.w	800063c <__malloc_unlock>
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d803      	bhi.n	80004e4 <_free_r+0x44>
 80004dc:	461a      	mov	r2, r3
 80004de:	6853      	ldr	r3, [r2, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d1f9      	bne.n	80004d8 <_free_r+0x38>
 80004e4:	6811      	ldr	r1, [r2, #0]
 80004e6:	1850      	adds	r0, r2, r1
 80004e8:	42a0      	cmp	r0, r4
 80004ea:	d019      	beq.n	8000520 <_free_r+0x80>
 80004ec:	d824      	bhi.n	8000538 <_free_r+0x98>
 80004ee:	6821      	ldr	r1, [r4, #0]
 80004f0:	1860      	adds	r0, r4, r1
 80004f2:	4283      	cmp	r3, r0
 80004f4:	d006      	beq.n	8000504 <_free_r+0x64>
 80004f6:	6063      	str	r3, [r4, #4]
 80004f8:	6054      	str	r4, [r2, #4]
 80004fa:	4628      	mov	r0, r5
 80004fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000500:	f000 b89c 	b.w	800063c <__malloc_unlock>
 8000504:	e9d3 0300 	ldrd	r0, r3, [r3]
 8000508:	4401      	add	r1, r0
 800050a:	6063      	str	r3, [r4, #4]
 800050c:	6021      	str	r1, [r4, #0]
 800050e:	6054      	str	r4, [r2, #4]
 8000510:	e7f3      	b.n	80004fa <_free_r+0x5a>
 8000512:	e9d2 0200 	ldrd	r0, r2, [r2]
 8000516:	4401      	add	r1, r0
 8000518:	6062      	str	r2, [r4, #4]
 800051a:	6021      	str	r1, [r4, #0]
 800051c:	e7d6      	b.n	80004cc <_free_r+0x2c>
 800051e:	4770      	bx	lr
 8000520:	6820      	ldr	r0, [r4, #0]
 8000522:	4401      	add	r1, r0
 8000524:	1850      	adds	r0, r2, r1
 8000526:	4283      	cmp	r3, r0
 8000528:	6011      	str	r1, [r2, #0]
 800052a:	d1e6      	bne.n	80004fa <_free_r+0x5a>
 800052c:	e9d3 0300 	ldrd	r0, r3, [r3]
 8000530:	4401      	add	r1, r0
 8000532:	6053      	str	r3, [r2, #4]
 8000534:	6011      	str	r1, [r2, #0]
 8000536:	e7e0      	b.n	80004fa <_free_r+0x5a>
 8000538:	230c      	movs	r3, #12
 800053a:	602b      	str	r3, [r5, #0]
 800053c:	4628      	mov	r0, r5
 800053e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000542:	f000 b87b 	b.w	800063c <__malloc_unlock>
 8000546:	bf00      	nop
 8000548:	200000b0 	.word	0x200000b0

0800054c <_malloc_r>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	1ccd      	adds	r5, r1, #3
 8000550:	f025 0503 	bic.w	r5, r5, #3
 8000554:	3508      	adds	r5, #8
 8000556:	2d0c      	cmp	r5, #12
 8000558:	bf38      	it	cc
 800055a:	250c      	movcc	r5, #12
 800055c:	2d00      	cmp	r5, #0
 800055e:	4606      	mov	r6, r0
 8000560:	db33      	blt.n	80005ca <_malloc_r+0x7e>
 8000562:	42a9      	cmp	r1, r5
 8000564:	d831      	bhi.n	80005ca <_malloc_r+0x7e>
 8000566:	4f2a      	ldr	r7, [pc, #168]	; (8000610 <_malloc_r+0xc4>)
 8000568:	f000 f866 	bl	8000638 <__malloc_lock>
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	b152      	cbz	r2, 8000586 <_malloc_r+0x3a>
 8000570:	6813      	ldr	r3, [r2, #0]
 8000572:	1b5b      	subs	r3, r3, r5
 8000574:	d404      	bmi.n	8000580 <_malloc_r+0x34>
 8000576:	e03f      	b.n	80005f8 <_malloc_r+0xac>
 8000578:	6823      	ldr	r3, [r4, #0]
 800057a:	1b5b      	subs	r3, r3, r5
 800057c:	d529      	bpl.n	80005d2 <_malloc_r+0x86>
 800057e:	4622      	mov	r2, r4
 8000580:	6854      	ldr	r4, [r2, #4]
 8000582:	2c00      	cmp	r4, #0
 8000584:	d1f8      	bne.n	8000578 <_malloc_r+0x2c>
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	2900      	cmp	r1, #0
 800058a:	d03b      	beq.n	8000604 <_malloc_r+0xb8>
 800058c:	4629      	mov	r1, r5
 800058e:	4630      	mov	r0, r6
 8000590:	f000 f840 	bl	8000614 <_sbrk_r>
 8000594:	1c43      	adds	r3, r0, #1
 8000596:	d028      	beq.n	80005ea <_malloc_r+0x9e>
 8000598:	1cc4      	adds	r4, r0, #3
 800059a:	f024 0403 	bic.w	r4, r4, #3
 800059e:	42a0      	cmp	r0, r4
 80005a0:	d005      	beq.n	80005ae <_malloc_r+0x62>
 80005a2:	1a21      	subs	r1, r4, r0
 80005a4:	4630      	mov	r0, r6
 80005a6:	f000 f835 	bl	8000614 <_sbrk_r>
 80005aa:	3001      	adds	r0, #1
 80005ac:	d01d      	beq.n	80005ea <_malloc_r+0x9e>
 80005ae:	6025      	str	r5, [r4, #0]
 80005b0:	4630      	mov	r0, r6
 80005b2:	f000 f843 	bl	800063c <__malloc_unlock>
 80005b6:	f104 000b 	add.w	r0, r4, #11
 80005ba:	f020 0007 	bic.w	r0, r0, #7
 80005be:	1d23      	adds	r3, r4, #4
 80005c0:	1ac2      	subs	r2, r0, r3
 80005c2:	d001      	beq.n	80005c8 <_malloc_r+0x7c>
 80005c4:	1a1b      	subs	r3, r3, r0
 80005c6:	50a3      	str	r3, [r4, r2]
 80005c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ca:	220c      	movs	r2, #12
 80005cc:	6032      	str	r2, [r6, #0]
 80005ce:	2000      	movs	r0, #0
 80005d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005d2:	2b0b      	cmp	r3, #11
 80005d4:	d805      	bhi.n	80005e2 <_malloc_r+0x96>
 80005d6:	42a2      	cmp	r2, r4
 80005d8:	6863      	ldr	r3, [r4, #4]
 80005da:	d011      	beq.n	8000600 <_malloc_r+0xb4>
 80005dc:	6053      	str	r3, [r2, #4]
 80005de:	e7e7      	b.n	80005b0 <_malloc_r+0x64>
 80005e0:	4614      	mov	r4, r2
 80005e2:	6023      	str	r3, [r4, #0]
 80005e4:	441c      	add	r4, r3
 80005e6:	6025      	str	r5, [r4, #0]
 80005e8:	e7e2      	b.n	80005b0 <_malloc_r+0x64>
 80005ea:	230c      	movs	r3, #12
 80005ec:	4630      	mov	r0, r6
 80005ee:	6033      	str	r3, [r6, #0]
 80005f0:	f000 f824 	bl	800063c <__malloc_unlock>
 80005f4:	2000      	movs	r0, #0
 80005f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005f8:	2b0b      	cmp	r3, #11
 80005fa:	d8f1      	bhi.n	80005e0 <_malloc_r+0x94>
 80005fc:	6853      	ldr	r3, [r2, #4]
 80005fe:	4614      	mov	r4, r2
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	e7d5      	b.n	80005b0 <_malloc_r+0x64>
 8000604:	4630      	mov	r0, r6
 8000606:	f000 f805 	bl	8000614 <_sbrk_r>
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	e7be      	b.n	800058c <_malloc_r+0x40>
 800060e:	bf00      	nop
 8000610:	200000b0 	.word	0x200000b0

08000614 <_sbrk_r>:
 8000614:	b538      	push	{r3, r4, r5, lr}
 8000616:	4c07      	ldr	r4, [pc, #28]	; (8000634 <_sbrk_r+0x20>)
 8000618:	2300      	movs	r3, #0
 800061a:	4605      	mov	r5, r0
 800061c:	4608      	mov	r0, r1
 800061e:	6023      	str	r3, [r4, #0]
 8000620:	f002 fd4a 	bl	80030b8 <_sbrk>
 8000624:	1c43      	adds	r3, r0, #1
 8000626:	d000      	beq.n	800062a <_sbrk_r+0x16>
 8000628:	bd38      	pop	{r3, r4, r5, pc}
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0fb      	beq.n	8000628 <_sbrk_r+0x14>
 8000630:	602b      	str	r3, [r5, #0]
 8000632:	bd38      	pop	{r3, r4, r5, pc}
 8000634:	2000985c 	.word	0x2000985c

08000638 <__malloc_lock>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <__malloc_unlock>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <__aeabi_uldivmod>:
 8000640:	b953      	cbnz	r3, 8000658 <__aeabi_uldivmod+0x18>
 8000642:	b94a      	cbnz	r2, 8000658 <__aeabi_uldivmod+0x18>
 8000644:	2900      	cmp	r1, #0
 8000646:	bf08      	it	eq
 8000648:	2800      	cmpeq	r0, #0
 800064a:	bf1c      	itt	ne
 800064c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000650:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000654:	f000 b96e 	b.w	8000934 <__aeabi_idiv0>
 8000658:	f1ad 0c08 	sub.w	ip, sp, #8
 800065c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000660:	f000 f806 	bl	8000670 <__udivmoddi4>
 8000664:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000668:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800066c:	b004      	add	sp, #16
 800066e:	4770      	bx	lr

08000670 <__udivmoddi4>:
 8000670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000674:	9d08      	ldr	r5, [sp, #32]
 8000676:	4604      	mov	r4, r0
 8000678:	468c      	mov	ip, r1
 800067a:	2b00      	cmp	r3, #0
 800067c:	f040 8083 	bne.w	8000786 <__udivmoddi4+0x116>
 8000680:	428a      	cmp	r2, r1
 8000682:	4617      	mov	r7, r2
 8000684:	d947      	bls.n	8000716 <__udivmoddi4+0xa6>
 8000686:	fab2 f282 	clz	r2, r2
 800068a:	b142      	cbz	r2, 800069e <__udivmoddi4+0x2e>
 800068c:	f1c2 0020 	rsb	r0, r2, #32
 8000690:	fa24 f000 	lsr.w	r0, r4, r0
 8000694:	4091      	lsls	r1, r2
 8000696:	4097      	lsls	r7, r2
 8000698:	ea40 0c01 	orr.w	ip, r0, r1
 800069c:	4094      	lsls	r4, r2
 800069e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006a2:	0c23      	lsrs	r3, r4, #16
 80006a4:	fbbc f6f8 	udiv	r6, ip, r8
 80006a8:	fa1f fe87 	uxth.w	lr, r7
 80006ac:	fb08 c116 	mls	r1, r8, r6, ip
 80006b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b4:	fb06 f10e 	mul.w	r1, r6, lr
 80006b8:	4299      	cmp	r1, r3
 80006ba:	d909      	bls.n	80006d0 <__udivmoddi4+0x60>
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006c2:	f080 8119 	bcs.w	80008f8 <__udivmoddi4+0x288>
 80006c6:	4299      	cmp	r1, r3
 80006c8:	f240 8116 	bls.w	80008f8 <__udivmoddi4+0x288>
 80006cc:	3e02      	subs	r6, #2
 80006ce:	443b      	add	r3, r7
 80006d0:	1a5b      	subs	r3, r3, r1
 80006d2:	b2a4      	uxth	r4, r4
 80006d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d8:	fb08 3310 	mls	r3, r8, r0, r3
 80006dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80006e4:	45a6      	cmp	lr, r4
 80006e6:	d909      	bls.n	80006fc <__udivmoddi4+0x8c>
 80006e8:	193c      	adds	r4, r7, r4
 80006ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006ee:	f080 8105 	bcs.w	80008fc <__udivmoddi4+0x28c>
 80006f2:	45a6      	cmp	lr, r4
 80006f4:	f240 8102 	bls.w	80008fc <__udivmoddi4+0x28c>
 80006f8:	3802      	subs	r0, #2
 80006fa:	443c      	add	r4, r7
 80006fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000700:	eba4 040e 	sub.w	r4, r4, lr
 8000704:	2600      	movs	r6, #0
 8000706:	b11d      	cbz	r5, 8000710 <__udivmoddi4+0xa0>
 8000708:	40d4      	lsrs	r4, r2
 800070a:	2300      	movs	r3, #0
 800070c:	e9c5 4300 	strd	r4, r3, [r5]
 8000710:	4631      	mov	r1, r6
 8000712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000716:	b902      	cbnz	r2, 800071a <__udivmoddi4+0xaa>
 8000718:	deff      	udf	#255	; 0xff
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	2a00      	cmp	r2, #0
 8000720:	d150      	bne.n	80007c4 <__udivmoddi4+0x154>
 8000722:	1bcb      	subs	r3, r1, r7
 8000724:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000728:	fa1f f887 	uxth.w	r8, r7
 800072c:	2601      	movs	r6, #1
 800072e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000732:	0c21      	lsrs	r1, r4, #16
 8000734:	fb0e 331c 	mls	r3, lr, ip, r3
 8000738:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800073c:	fb08 f30c 	mul.w	r3, r8, ip
 8000740:	428b      	cmp	r3, r1
 8000742:	d907      	bls.n	8000754 <__udivmoddi4+0xe4>
 8000744:	1879      	adds	r1, r7, r1
 8000746:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800074a:	d202      	bcs.n	8000752 <__udivmoddi4+0xe2>
 800074c:	428b      	cmp	r3, r1
 800074e:	f200 80e9 	bhi.w	8000924 <__udivmoddi4+0x2b4>
 8000752:	4684      	mov	ip, r0
 8000754:	1ac9      	subs	r1, r1, r3
 8000756:	b2a3      	uxth	r3, r4
 8000758:	fbb1 f0fe 	udiv	r0, r1, lr
 800075c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000760:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000764:	fb08 f800 	mul.w	r8, r8, r0
 8000768:	45a0      	cmp	r8, r4
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x10c>
 800076c:	193c      	adds	r4, r7, r4
 800076e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x10a>
 8000774:	45a0      	cmp	r8, r4
 8000776:	f200 80d9 	bhi.w	800092c <__udivmoddi4+0x2bc>
 800077a:	4618      	mov	r0, r3
 800077c:	eba4 0408 	sub.w	r4, r4, r8
 8000780:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000784:	e7bf      	b.n	8000706 <__udivmoddi4+0x96>
 8000786:	428b      	cmp	r3, r1
 8000788:	d909      	bls.n	800079e <__udivmoddi4+0x12e>
 800078a:	2d00      	cmp	r5, #0
 800078c:	f000 80b1 	beq.w	80008f2 <__udivmoddi4+0x282>
 8000790:	2600      	movs	r6, #0
 8000792:	e9c5 0100 	strd	r0, r1, [r5]
 8000796:	4630      	mov	r0, r6
 8000798:	4631      	mov	r1, r6
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	fab3 f683 	clz	r6, r3
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d14a      	bne.n	800083c <__udivmoddi4+0x1cc>
 80007a6:	428b      	cmp	r3, r1
 80007a8:	d302      	bcc.n	80007b0 <__udivmoddi4+0x140>
 80007aa:	4282      	cmp	r2, r0
 80007ac:	f200 80b8 	bhi.w	8000920 <__udivmoddi4+0x2b0>
 80007b0:	1a84      	subs	r4, r0, r2
 80007b2:	eb61 0103 	sbc.w	r1, r1, r3
 80007b6:	2001      	movs	r0, #1
 80007b8:	468c      	mov	ip, r1
 80007ba:	2d00      	cmp	r5, #0
 80007bc:	d0a8      	beq.n	8000710 <__udivmoddi4+0xa0>
 80007be:	e9c5 4c00 	strd	r4, ip, [r5]
 80007c2:	e7a5      	b.n	8000710 <__udivmoddi4+0xa0>
 80007c4:	f1c2 0320 	rsb	r3, r2, #32
 80007c8:	fa20 f603 	lsr.w	r6, r0, r3
 80007cc:	4097      	lsls	r7, r2
 80007ce:	fa01 f002 	lsl.w	r0, r1, r2
 80007d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007d6:	40d9      	lsrs	r1, r3
 80007d8:	4330      	orrs	r0, r6
 80007da:	0c03      	lsrs	r3, r0, #16
 80007dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f108 	mul.w	r1, r6, r8
 80007f0:	4299      	cmp	r1, r3
 80007f2:	fa04 f402 	lsl.w	r4, r4, r2
 80007f6:	d909      	bls.n	800080c <__udivmoddi4+0x19c>
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80007fe:	f080 808d 	bcs.w	800091c <__udivmoddi4+0x2ac>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 808a 	bls.w	800091c <__udivmoddi4+0x2ac>
 8000808:	3e02      	subs	r6, #2
 800080a:	443b      	add	r3, r7
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b281      	uxth	r1, r0
 8000810:	fbb3 f0fe 	udiv	r0, r3, lr
 8000814:	fb0e 3310 	mls	r3, lr, r0, r3
 8000818:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800081c:	fb00 f308 	mul.w	r3, r0, r8
 8000820:	428b      	cmp	r3, r1
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x1c4>
 8000824:	1879      	adds	r1, r7, r1
 8000826:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800082a:	d273      	bcs.n	8000914 <__udivmoddi4+0x2a4>
 800082c:	428b      	cmp	r3, r1
 800082e:	d971      	bls.n	8000914 <__udivmoddi4+0x2a4>
 8000830:	3802      	subs	r0, #2
 8000832:	4439      	add	r1, r7
 8000834:	1acb      	subs	r3, r1, r3
 8000836:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800083a:	e778      	b.n	800072e <__udivmoddi4+0xbe>
 800083c:	f1c6 0c20 	rsb	ip, r6, #32
 8000840:	fa03 f406 	lsl.w	r4, r3, r6
 8000844:	fa22 f30c 	lsr.w	r3, r2, ip
 8000848:	431c      	orrs	r4, r3
 800084a:	fa20 f70c 	lsr.w	r7, r0, ip
 800084e:	fa01 f306 	lsl.w	r3, r1, r6
 8000852:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000856:	fa21 f10c 	lsr.w	r1, r1, ip
 800085a:	431f      	orrs	r7, r3
 800085c:	0c3b      	lsrs	r3, r7, #16
 800085e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000862:	fa1f f884 	uxth.w	r8, r4
 8000866:	fb0e 1119 	mls	r1, lr, r9, r1
 800086a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800086e:	fb09 fa08 	mul.w	sl, r9, r8
 8000872:	458a      	cmp	sl, r1
 8000874:	fa02 f206 	lsl.w	r2, r2, r6
 8000878:	fa00 f306 	lsl.w	r3, r0, r6
 800087c:	d908      	bls.n	8000890 <__udivmoddi4+0x220>
 800087e:	1861      	adds	r1, r4, r1
 8000880:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000884:	d248      	bcs.n	8000918 <__udivmoddi4+0x2a8>
 8000886:	458a      	cmp	sl, r1
 8000888:	d946      	bls.n	8000918 <__udivmoddi4+0x2a8>
 800088a:	f1a9 0902 	sub.w	r9, r9, #2
 800088e:	4421      	add	r1, r4
 8000890:	eba1 010a 	sub.w	r1, r1, sl
 8000894:	b2bf      	uxth	r7, r7
 8000896:	fbb1 f0fe 	udiv	r0, r1, lr
 800089a:	fb0e 1110 	mls	r1, lr, r0, r1
 800089e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008a2:	fb00 f808 	mul.w	r8, r0, r8
 80008a6:	45b8      	cmp	r8, r7
 80008a8:	d907      	bls.n	80008ba <__udivmoddi4+0x24a>
 80008aa:	19e7      	adds	r7, r4, r7
 80008ac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008b0:	d22e      	bcs.n	8000910 <__udivmoddi4+0x2a0>
 80008b2:	45b8      	cmp	r8, r7
 80008b4:	d92c      	bls.n	8000910 <__udivmoddi4+0x2a0>
 80008b6:	3802      	subs	r0, #2
 80008b8:	4427      	add	r7, r4
 80008ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008be:	eba7 0708 	sub.w	r7, r7, r8
 80008c2:	fba0 8902 	umull	r8, r9, r0, r2
 80008c6:	454f      	cmp	r7, r9
 80008c8:	46c6      	mov	lr, r8
 80008ca:	4649      	mov	r1, r9
 80008cc:	d31a      	bcc.n	8000904 <__udivmoddi4+0x294>
 80008ce:	d017      	beq.n	8000900 <__udivmoddi4+0x290>
 80008d0:	b15d      	cbz	r5, 80008ea <__udivmoddi4+0x27a>
 80008d2:	ebb3 020e 	subs.w	r2, r3, lr
 80008d6:	eb67 0701 	sbc.w	r7, r7, r1
 80008da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008de:	40f2      	lsrs	r2, r6
 80008e0:	ea4c 0202 	orr.w	r2, ip, r2
 80008e4:	40f7      	lsrs	r7, r6
 80008e6:	e9c5 2700 	strd	r2, r7, [r5]
 80008ea:	2600      	movs	r6, #0
 80008ec:	4631      	mov	r1, r6
 80008ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f2:	462e      	mov	r6, r5
 80008f4:	4628      	mov	r0, r5
 80008f6:	e70b      	b.n	8000710 <__udivmoddi4+0xa0>
 80008f8:	4606      	mov	r6, r0
 80008fa:	e6e9      	b.n	80006d0 <__udivmoddi4+0x60>
 80008fc:	4618      	mov	r0, r3
 80008fe:	e6fd      	b.n	80006fc <__udivmoddi4+0x8c>
 8000900:	4543      	cmp	r3, r8
 8000902:	d2e5      	bcs.n	80008d0 <__udivmoddi4+0x260>
 8000904:	ebb8 0e02 	subs.w	lr, r8, r2
 8000908:	eb69 0104 	sbc.w	r1, r9, r4
 800090c:	3801      	subs	r0, #1
 800090e:	e7df      	b.n	80008d0 <__udivmoddi4+0x260>
 8000910:	4608      	mov	r0, r1
 8000912:	e7d2      	b.n	80008ba <__udivmoddi4+0x24a>
 8000914:	4660      	mov	r0, ip
 8000916:	e78d      	b.n	8000834 <__udivmoddi4+0x1c4>
 8000918:	4681      	mov	r9, r0
 800091a:	e7b9      	b.n	8000890 <__udivmoddi4+0x220>
 800091c:	4666      	mov	r6, ip
 800091e:	e775      	b.n	800080c <__udivmoddi4+0x19c>
 8000920:	4630      	mov	r0, r6
 8000922:	e74a      	b.n	80007ba <__udivmoddi4+0x14a>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	4439      	add	r1, r7
 800092a:	e713      	b.n	8000754 <__udivmoddi4+0xe4>
 800092c:	3802      	subs	r0, #2
 800092e:	443c      	add	r4, r7
 8000930:	e724      	b.n	800077c <__udivmoddi4+0x10c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4a07      	ldr	r2, [pc, #28]	; (8000998 <vApplicationGetIdleTaskMemory+0x2c>)
 800097c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <vApplicationGetIdleTaskMemory+0x30>)
 8000982:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	200000b8 	.word	0x200000b8
 800099c:	20000110 	.word	0x20000110

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b5b0      	push	{r4, r5, r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a6:	f002 fbf8 	bl	800319a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009aa:	f000 f84d 	bl	8000a48 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009ae:	f000 f8bd 	bl	8000b2c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f001 f86f 	bl	8001a94 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009b6:	f000 f8eb 	bl	8000b90 <MX_ADC3_Init>
  MX_CRC_Init();
 80009ba:	f000 f93b 	bl	8000c34 <MX_CRC_Init>
  MX_DCMI_Init();
 80009be:	f000 f95b 	bl	8000c78 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80009c2:	f000 f98d 	bl	8000ce0 <MX_DMA2D_Init>
  MX_ETH_Init();
 80009c6:	f000 f9bd 	bl	8000d44 <MX_ETH_Init>
  MX_FMC_Init();
 80009ca:	f001 f813 	bl	80019f4 <MX_FMC_Init>
  MX_I2C1_Init();
 80009ce:	f000 f9fb 	bl	8000dc8 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009d2:	f000 fa39 	bl	8000e48 <MX_I2C3_Init>
  MX_LTDC_Init();
 80009d6:	f000 fa77 	bl	8000ec8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80009da:	f000 faf7 	bl	8000fcc <MX_QUADSPI_Init>
  MX_RTC_Init();
 80009de:	f000 fb21 	bl	8001024 <MX_RTC_Init>
  MX_SAI2_Init();
 80009e2:	f000 fbc5 	bl	8001170 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80009e6:	f000 fc6b 	bl	80012c0 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80009ea:	f000 fc89 	bl	8001300 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80009ee:	f000 fcb7 	bl	8001360 <MX_SPI2_Init>
  MX_TIM1_Init();
 80009f2:	f000 fcf3 	bl	80013dc <MX_TIM1_Init>
  MX_TIM2_Init();
 80009f6:	f000 fd9d 	bl	8001534 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009fa:	f000 fe11 	bl	8001620 <MX_TIM3_Init>
  MX_TIM5_Init();
 80009fe:	f000 fe87 	bl	8001710 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a02:	f000 fefd 	bl	8001800 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000a06:	f000 ff4f 	bl	80018a8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000a0a:	f000 ff93 	bl	8001934 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000a0e:	f000 ffc1 	bl	8001994 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000a12:	f00d f835 	bl	800da80 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <main+0xa0>)
 8000a18:	1d3c      	adds	r4, r7, #4
 8000a1a:	461d      	mov	r5, r3
 8000a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f00f fc71 	bl	8010314 <osThreadCreate>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <main+0xa4>)
 8000a36:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a38:	f00f fc49 	bl	80102ce <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <main+0x9c>
 8000a3e:	bf00      	nop
 8000a40:	08012eb8 	.word	0x08012eb8
 8000a44:	20008508 	.word	0x20008508

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	; 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	2230      	movs	r2, #48	; 0x30
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fcd2 	bl	8000400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a6c:	f006 fa56 	bl	8006f1c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <SystemClock_Config+0xdc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a2b      	ldr	r2, [pc, #172]	; (8000b24 <SystemClock_Config+0xdc>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <SystemClock_Config+0xdc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <SystemClock_Config+0xe0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a26      	ldr	r2, [pc, #152]	; (8000b28 <SystemClock_Config+0xe0>)
 8000a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <SystemClock_Config+0xe0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000aa0:	2309      	movs	r3, #9
 8000aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ab8:	2319      	movs	r3, #25
 8000aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000abc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ac0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ac6:	2309      	movs	r3, #9
 8000ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f006 fb46 	bl	8007160 <HAL_RCC_OscConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ada:	f001 f9b5 	bl	8001e48 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ade:	f006 fa2d 	bl	8006f3c <HAL_PWREx_EnableOverDrive>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ae8:	f001 f9ae 	bl	8001e48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	230f      	movs	r3, #15
 8000aee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af0:	2302      	movs	r3, #2
 8000af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2106      	movs	r1, #6
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f006 fdcc 	bl	80076a8 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b16:	f001 f997 	bl	8001e48 <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	; 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0a2      	sub	sp, #136	; 0x88
 8000b30:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2284      	movs	r2, #132	; 0x84
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fc61 	bl	8000400 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <PeriphCommonClock_Config+0x60>)
 8000b40:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000b42:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b46:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000b48:	2305      	movs	r3, #5
 8000b4a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b50:	2303      	movs	r3, #3
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000b62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f006 ffa0 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000b7e:	f001 f963 	bl	8001e48 <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3788      	adds	r7, #136	; 0x88
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	00b00008 	.word	0x00b00008

08000b90 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <MX_ADC3_Init+0x9c>)
 8000ba6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000baa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bae:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <MX_ADC3_Init+0xa0>)
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000bf2:	f002 fb23 	bl	800323c <HAL_ADC_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000bfc:	f001 f924 	bl	8001e48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_ADC3_Init+0x98>)
 8000c12:	f002 fb57 	bl	80032c4 <HAL_ADC_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c1c:	f001 f914 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000890c 	.word	0x2000890c
 8000c2c:	40012200 	.word	0x40012200
 8000c30:	0f000001 	.word	0x0f000001

08000c34 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_CRC_Init+0x3c>)
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <MX_CRC_Init+0x40>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_CRC_Init+0x3c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_CRC_Init+0x3c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_CRC_Init+0x3c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_CRC_Init+0x3c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_CRC_Init+0x3c>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_CRC_Init+0x3c>)
 8000c5e:	f002 fe63 	bl	8003928 <HAL_CRC_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c68:	f001 f8ee 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20008724 	.word	0x20008724
 8000c74:	40023000 	.word	0x40023000

08000c78 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <MX_DCMI_Init+0x64>)
 8000c80:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_DCMI_Init+0x60>)
 8000cc6:	f002 ff19 	bl	8003afc <HAL_DCMI_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000cd0:	f001 f8ba 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20008954 	.word	0x20008954
 8000cdc:	50050000 	.word	0x50050000

08000ce0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_DMA2D_Init+0x5c>)
 8000ce6:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <MX_DMA2D_Init+0x60>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_DMA2D_Init+0x5c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_DMA2D_Init+0x5c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_DMA2D_Init+0x5c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_DMA2D_Init+0x5c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_DMA2D_Init+0x5c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_DMA2D_Init+0x5c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_DMA2D_Init+0x5c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <MX_DMA2D_Init+0x5c>)
 8000d16:	f003 f805 	bl	8003d24 <HAL_DMA2D_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d20:	f001 f892 	bl	8001e48 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d24:	2101      	movs	r1, #1
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_DMA2D_Init+0x5c>)
 8000d28:	f003 f956 	bl	8003fd8 <HAL_DMA2D_ConfigLayer>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d32:	f001 f889 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20008b18 	.word	0x20008b18
 8000d40:	4002b000 	.word	0x4002b000

08000d44 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_ETH_Init+0x78>)
 8000d4a:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <MX_ETH_Init+0x7c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <MX_ETH_Init+0x78>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_ETH_Init+0x78>)
 8000d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d5a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_ETH_Init+0x78>)
 8000d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d62:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_ETH_Init+0x78>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d78:	22e1      	movs	r2, #225	; 0xe1
 8000d7a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_ETH_Init+0x78>)
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d92:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_ETH_Init+0x78>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_ETH_Init+0x78>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_ETH_Init+0x78>)
 8000da2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000da6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_ETH_Init+0x78>)
 8000daa:	f003 f9a7 	bl	80040fc <HAL_ETH_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000db4:	f001 f848 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20008c24 	.word	0x20008c24
 8000dc0:	40028000 	.word	0x40028000
 8000dc4:	20000310 	.word	0x20000310

08000dc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <MX_I2C1_Init+0x78>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <MX_I2C1_Init+0x7c>)
 8000dd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e02:	480e      	ldr	r0, [pc, #56]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000e04:	f005 fbf8 	bl	80065f8 <HAL_I2C_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e0e:	f001 f81b 	bl	8001e48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000e16:	f005 fc7f 	bl	8006718 <HAL_I2CEx_ConfigAnalogFilter>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e20:	f001 f812 	bl	8001e48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e24:	2100      	movs	r1, #0
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000e28:	f005 fcc1 	bl	80067ae <HAL_I2CEx_ConfigDigitalFilter>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e32:	f001 f809 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200086d8 	.word	0x200086d8
 8000e40:	40005400 	.word	0x40005400
 8000e44:	00c0eaff 	.word	0x00c0eaff

08000e48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_I2C3_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000e54:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <MX_I2C3_Init+0x7c>)
 8000e56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e82:	480e      	ldr	r0, [pc, #56]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000e84:	f005 fbb8 	bl	80065f8 <HAL_I2C_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e8e:	f000 ffdb 	bl	8001e48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e92:	2100      	movs	r1, #0
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000e96:	f005 fc3f 	bl	8006718 <HAL_I2CEx_ConfigAnalogFilter>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ea0:	f000 ffd2 	bl	8001e48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_I2C3_Init+0x74>)
 8000ea8:	f005 fc81 	bl	80067ae <HAL_I2CEx_ConfigDigitalFilter>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f000 ffc9 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000850c 	.word	0x2000850c
 8000ec0:	40005c00 	.word	0x40005c00
 8000ec4:	00c0eaff 	.word	0x00c0eaff

08000ec8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	; 0x38
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2234      	movs	r2, #52	; 0x34
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fa93 	bl	8000400 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000edc:	4a3a      	ldr	r2, [pc, #232]	; (8000fc8 <MX_LTDC_Init+0x100>)
 8000ede:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ee0:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ee6:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000eec:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ef2:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ef8:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000efa:	2228      	movs	r2, #40	; 0x28
 8000efc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000f00:	2209      	movs	r2, #9
 8000f02:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000f04:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000f06:	2235      	movs	r2, #53	; 0x35
 8000f08:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000f0c:	220b      	movs	r2, #11
 8000f0e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000f10:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000f12:	f240 2215 	movw	r2, #533	; 0x215
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000f1a:	f240 121b 	movw	r2, #283	; 0x11b
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000f20:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000f22:	f240 2235 	movw	r2, #565	; 0x235
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000f2a:	f240 121d 	movw	r2, #285	; 0x11d
 8000f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f38:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f48:	481e      	ldr	r0, [pc, #120]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000f4a:	f005 fc7d 	bl	8006848 <HAL_LTDC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f54:	f000 ff78 	bl	8001e48 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000f5c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f60:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000f66:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f6a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f70:	23ff      	movs	r3, #255	; 0xff
 8000f72:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f7c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f82:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000f88:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000f8e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_LTDC_Init+0xfc>)
 8000fae:	f005 fddd 	bl	8006b6c <HAL_LTDC_ConfigLayer>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000fb8:	f000 ff46 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3738      	adds	r7, #56	; 0x38
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20008864 	.word	0x20008864
 8000fc8:	40016800 	.word	0x40016800

08000fcc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_QUADSPI_Init+0x50>)
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <MX_QUADSPI_Init+0x54>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_QUADSPI_Init+0x50>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_QUADSPI_Init+0x50>)
 8000fde:	2204      	movs	r2, #4
 8000fe0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_QUADSPI_Init+0x50>)
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_QUADSPI_Init+0x50>)
 8000fea:	2218      	movs	r2, #24
 8000fec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_QUADSPI_Init+0x50>)
 8000ff0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000ff4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_QUADSPI_Init+0x50>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <MX_QUADSPI_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_QUADSPI_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_QUADSPI_Init+0x50>)
 800100a:	f005 ffe7 	bl	8006fdc <HAL_QSPI_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001014:	f000 ff18 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20008c6c 	.word	0x20008c6c
 8001020:	a0001000 	.word	0xa0001000

08001024 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b092      	sub	sp, #72	; 0x48
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800102a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001040:	463b      	mov	r3, r7
 8001042:	222c      	movs	r2, #44	; 0x2c
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f9da 	bl	8000400 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <MX_RTC_Init+0x144>)
 800104e:	4a47      	ldr	r2, [pc, #284]	; (800116c <MX_RTC_Init+0x148>)
 8001050:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001052:	4b45      	ldr	r3, [pc, #276]	; (8001168 <MX_RTC_Init+0x144>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001058:	4b43      	ldr	r3, [pc, #268]	; (8001168 <MX_RTC_Init+0x144>)
 800105a:	227f      	movs	r2, #127	; 0x7f
 800105c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800105e:	4b42      	ldr	r3, [pc, #264]	; (8001168 <MX_RTC_Init+0x144>)
 8001060:	22ff      	movs	r2, #255	; 0xff
 8001062:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001064:	4b40      	ldr	r3, [pc, #256]	; (8001168 <MX_RTC_Init+0x144>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800106a:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <MX_RTC_Init+0x144>)
 800106c:	2200      	movs	r2, #0
 800106e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001070:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <MX_RTC_Init+0x144>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001076:	483c      	ldr	r0, [pc, #240]	; (8001168 <MX_RTC_Init+0x144>)
 8001078:	f007 fa52 	bl	8008520 <HAL_RTC_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001082:	f000 fee1 	bl	8001e48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001086:	2300      	movs	r3, #0
 8001088:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001092:	2300      	movs	r3, #0
 8001094:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001098:	2300      	movs	r3, #0
 800109a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a4:	2201      	movs	r2, #1
 80010a6:	4619      	mov	r1, r3
 80010a8:	482f      	ldr	r0, [pc, #188]	; (8001168 <MX_RTC_Init+0x144>)
 80010aa:	f007 facb 	bl	8008644 <HAL_RTC_SetTime>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80010b4:	f000 fec8 	bl	8001e48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80010be:	2301      	movs	r3, #1
 80010c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	4823      	ldr	r0, [pc, #140]	; (8001168 <MX_RTC_Init+0x144>)
 80010da:	f007 fb71 	bl	80087c0 <HAL_RTC_SetDate>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80010e4:	f000 feb0 	bl	8001e48 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800110c:	2301      	movs	r3, #1
 800110e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	2201      	movs	r2, #1
 800111c:	4619      	mov	r1, r3
 800111e:	4812      	ldr	r0, [pc, #72]	; (8001168 <MX_RTC_Init+0x144>)
 8001120:	f007 fbf6 	bl	8008910 <HAL_RTC_SetAlarm>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800112a:	f000 fe8d 	bl	8001e48 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800112e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_RTC_Init+0x144>)
 800113c:	f007 fbe8 	bl	8008910 <HAL_RTC_SetAlarm>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001146:	f000 fe7f 	bl	8001e48 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800114a:	2202      	movs	r2, #2
 800114c:	2100      	movs	r1, #0
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_RTC_Init+0x144>)
 8001150:	f007 fd68 	bl	8008c24 <HAL_RTCEx_SetTimeStamp>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800115a:	f000 fe75 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3748      	adds	r7, #72	; 0x48
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20008a28 	.word	0x20008a28
 800116c:	40002800 	.word	0x40002800

08001170 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001174:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <MX_SAI2_Init+0x13c>)
 8001176:	4a4e      	ldr	r2, [pc, #312]	; (80012b0 <MX_SAI2_Init+0x140>)
 8001178:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <MX_SAI2_Init+0x13c>)
 800117c:	2200      	movs	r2, #0
 800117e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <MX_SAI2_Init+0x13c>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001186:	4b49      	ldr	r3, [pc, #292]	; (80012ac <MX_SAI2_Init+0x13c>)
 8001188:	2240      	movs	r2, #64	; 0x40
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800118c:	4b47      	ldr	r3, [pc, #284]	; (80012ac <MX_SAI2_Init+0x13c>)
 800118e:	2200      	movs	r2, #0
 8001190:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001192:	4b46      	ldr	r3, [pc, #280]	; (80012ac <MX_SAI2_Init+0x13c>)
 8001194:	2200      	movs	r2, #0
 8001196:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001198:	4b44      	ldr	r3, [pc, #272]	; (80012ac <MX_SAI2_Init+0x13c>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800119e:	4b43      	ldr	r3, [pc, #268]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011a4:	4b41      	ldr	r3, [pc, #260]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011aa:	4b40      	ldr	r3, [pc, #256]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80011b0:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011b2:	4a40      	ldr	r2, [pc, #256]	; (80012b4 <MX_SAI2_Init+0x144>)
 80011b4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011b6:	4b3d      	ldr	r3, [pc, #244]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011bc:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011c2:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011c8:	4b38      	ldr	r3, [pc, #224]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80011ce:	4b37      	ldr	r3, [pc, #220]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011d0:	2208      	movs	r2, #8
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80011d4:	4b35      	ldr	r3, [pc, #212]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011da:	4b34      	ldr	r3, [pc, #208]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011e6:	4b31      	ldr	r3, [pc, #196]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <MX_SAI2_Init+0x13c>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <MX_SAI2_Init+0x13c>)
 8001200:	2200      	movs	r2, #0
 8001202:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001204:	4829      	ldr	r0, [pc, #164]	; (80012ac <MX_SAI2_Init+0x13c>)
 8001206:	f007 fd63 	bl	8008cd0 <HAL_SAI_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001210:	f000 fe1a 	bl	8001e48 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001216:	4a29      	ldr	r2, [pc, #164]	; (80012bc <MX_SAI2_Init+0x14c>)
 8001218:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <MX_SAI2_Init+0x148>)
 800121c:	2200      	movs	r2, #0
 800121e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001222:	2203      	movs	r2, #3
 8001224:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001228:	2240      	movs	r2, #64	; 0x40
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <MX_SAI2_Init+0x148>)
 800122e:	2200      	movs	r2, #0
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_SAI2_Init+0x148>)
 800123a:	2201      	movs	r2, #1
 800123c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_SAI2_Init+0x148>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_SAI2_Init+0x148>)
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001264:	2208      	movs	r2, #8
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_SAI2_Init+0x148>)
 800126a:	2201      	movs	r2, #1
 800126c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001270:	2200      	movs	r2, #0
 8001272:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001276:	2200      	movs	r2, #0
 8001278:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_SAI2_Init+0x148>)
 800127c:	2200      	movs	r2, #0
 800127e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001282:	2200      	movs	r2, #0
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001288:	2200      	movs	r2, #0
 800128a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_SAI2_Init+0x148>)
 800128e:	2201      	movs	r2, #1
 8001290:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_SAI2_Init+0x148>)
 8001294:	2200      	movs	r2, #0
 8001296:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001298:	4807      	ldr	r0, [pc, #28]	; (80012b8 <MX_SAI2_Init+0x148>)
 800129a:	f007 fd19 	bl	8008cd0 <HAL_SAI_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80012a4:	f000 fdd0 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20008654 	.word	0x20008654
 80012b0:	40015c04 	.word	0x40015c04
 80012b4:	0002ee00 	.word	0x0002ee00
 80012b8:	20008484 	.word	0x20008484
 80012bc:	40015c24 	.word	0x40015c24

080012c0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_SDMMC1_SD_Init+0x38>)
 80012c6:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <MX_SDMMC1_SD_Init+0x3c>)
 80012c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_SDMMC1_SD_Init+0x38>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_SDMMC1_SD_Init+0x38>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_SDMMC1_SD_Init+0x38>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_SDMMC1_SD_Init+0x38>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <MX_SDMMC1_SD_Init+0x38>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <MX_SDMMC1_SD_Init+0x38>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	20008748 	.word	0x20008748
 80012fc:	40012c00 	.word	0x40012c00

08001300 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 8001306:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800130a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_SPDIFRX_Init+0x5c>)
 800134a:	f008 ff4b 	bl	800a1e4 <HAL_SPDIFRX_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001354:	f000 fd78 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20008608 	.word	0x20008608

08001360 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_SPI2_Init+0x74>)
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <MX_SPI2_Init+0x78>)
 8001368:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_SPI2_Init+0x74>)
 800136c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001370:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_SPI2_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_SPI2_Init+0x74>)
 800137a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800137e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_SPI2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_SPI2_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_SPI2_Init+0x74>)
 800138e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001392:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_SPI2_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_SPI2_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013ae:	2207      	movs	r2, #7
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013ba:	2208      	movs	r2, #8
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_SPI2_Init+0x74>)
 80013c0:	f008 ff6c 	bl	800a29c <HAL_SPI_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80013ca:	f000 fd3d 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20008558 	.word	0x20008558
 80013d8:	40003800 	.word	0x40003800

080013dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b09a      	sub	sp, #104	; 0x68
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]
 800140e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	222c      	movs	r2, #44	; 0x2c
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe fff2 	bl	8000400 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <MX_TIM1_Init+0x150>)
 800141e:	4a44      	ldr	r2, [pc, #272]	; (8001530 <MX_TIM1_Init+0x154>)
 8001420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001422:	4b42      	ldr	r3, [pc, #264]	; (800152c <MX_TIM1_Init+0x150>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b40      	ldr	r3, [pc, #256]	; (800152c <MX_TIM1_Init+0x150>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800142e:	4b3f      	ldr	r3, [pc, #252]	; (800152c <MX_TIM1_Init+0x150>)
 8001430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001434:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <MX_TIM1_Init+0x150>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800143c:	4b3b      	ldr	r3, [pc, #236]	; (800152c <MX_TIM1_Init+0x150>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b3a      	ldr	r3, [pc, #232]	; (800152c <MX_TIM1_Init+0x150>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001448:	4838      	ldr	r0, [pc, #224]	; (800152c <MX_TIM1_Init+0x150>)
 800144a:	f008 ffd2 	bl	800a3f2 <HAL_TIM_Base_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001454:	f000 fcf8 	bl	8001e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800145e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001462:	4619      	mov	r1, r3
 8001464:	4831      	ldr	r0, [pc, #196]	; (800152c <MX_TIM1_Init+0x150>)
 8001466:	f009 fb1d 	bl	800aaa4 <HAL_TIM_ConfigClockSource>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001470:	f000 fcea 	bl	8001e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001474:	482d      	ldr	r0, [pc, #180]	; (800152c <MX_TIM1_Init+0x150>)
 8001476:	f009 f88b 	bl	800a590 <HAL_TIM_PWM_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001480:	f000 fce2 	bl	8001e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001490:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001494:	4619      	mov	r1, r3
 8001496:	4825      	ldr	r0, [pc, #148]	; (800152c <MX_TIM1_Init+0x150>)
 8001498:	f009 ff8e 	bl	800b3b8 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80014a2:	f000 fcd1 	bl	8001e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a6:	2360      	movs	r3, #96	; 0x60
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ae:	2300      	movs	r3, #0
 80014b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014b2:	2300      	movs	r3, #0
 80014b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c6:	2200      	movs	r2, #0
 80014c8:	4619      	mov	r1, r3
 80014ca:	4818      	ldr	r0, [pc, #96]	; (800152c <MX_TIM1_Init+0x150>)
 80014cc:	f009 f9d6 	bl	800a87c <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80014d6:	f000 fcb7 	bl	8001e48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_TIM1_Init+0x150>)
 8001510:	f009 ffe0 	bl	800b4d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800151a:	f000 fc95 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <MX_TIM1_Init+0x150>)
 8001520:	f001 fa9a 	bl	8002a58 <HAL_TIM_MspPostInit>

}
 8001524:	bf00      	nop
 8001526:	3768      	adds	r7, #104	; 0x68
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20008a48 	.word	0x20008a48
 8001530:	40010000 	.word	0x40010000

08001534 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001554:	463b      	mov	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	615a      	str	r2, [r3, #20]
 8001564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <MX_TIM2_Init+0xe8>)
 8001568:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <MX_TIM2_Init+0xe8>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <MX_TIM2_Init+0xe8>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <MX_TIM2_Init+0xe8>)
 800157c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <MX_TIM2_Init+0xe8>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <MX_TIM2_Init+0xe8>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800158e:	4823      	ldr	r0, [pc, #140]	; (800161c <MX_TIM2_Init+0xe8>)
 8001590:	f008 ff2f 	bl	800a3f2 <HAL_TIM_Base_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800159a:	f000 fc55 	bl	8001e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a8:	4619      	mov	r1, r3
 80015aa:	481c      	ldr	r0, [pc, #112]	; (800161c <MX_TIM2_Init+0xe8>)
 80015ac:	f009 fa7a 	bl	800aaa4 <HAL_TIM_ConfigClockSource>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015b6:	f000 fc47 	bl	8001e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ba:	4818      	ldr	r0, [pc, #96]	; (800161c <MX_TIM2_Init+0xe8>)
 80015bc:	f008 ffe8 	bl	800a590 <HAL_TIM_PWM_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80015c6:	f000 fc3f 	bl	8001e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4810      	ldr	r0, [pc, #64]	; (800161c <MX_TIM2_Init+0xe8>)
 80015da:	f009 feed 	bl	800b3b8 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015e4:	f000 fc30 	bl	8001e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e8:	2360      	movs	r3, #96	; 0x60
 80015ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	4619      	mov	r1, r3
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM2_Init+0xe8>)
 8001600:	f009 f93c 	bl	800a87c <HAL_TIM_PWM_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800160a:	f000 fc1d 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM2_Init+0xe8>)
 8001610:	f001 fa22 	bl	8002a58 <HAL_TIM_MspPostInit>

}
 8001614:	bf00      	nop
 8001616:	3738      	adds	r7, #56	; 0x38
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20008b58 	.word	0x20008b58

08001620 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	; 0x38
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001640:	463b      	mov	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	615a      	str	r2, [r3, #20]
 8001650:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <MX_TIM3_Init+0xe8>)
 8001654:	4a2d      	ldr	r2, [pc, #180]	; (800170c <MX_TIM3_Init+0xec>)
 8001656:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <MX_TIM3_Init+0xe8>)
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <MX_TIM3_Init+0xe8>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <MX_TIM3_Init+0xe8>)
 8001666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800166a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <MX_TIM3_Init+0xe8>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b25      	ldr	r3, [pc, #148]	; (8001708 <MX_TIM3_Init+0xe8>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001678:	4823      	ldr	r0, [pc, #140]	; (8001708 <MX_TIM3_Init+0xe8>)
 800167a:	f008 feba 	bl	800a3f2 <HAL_TIM_Base_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001684:	f000 fbe0 	bl	8001e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800168e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001692:	4619      	mov	r1, r3
 8001694:	481c      	ldr	r0, [pc, #112]	; (8001708 <MX_TIM3_Init+0xe8>)
 8001696:	f009 fa05 	bl	800aaa4 <HAL_TIM_ConfigClockSource>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016a0:	f000 fbd2 	bl	8001e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016a4:	4818      	ldr	r0, [pc, #96]	; (8001708 <MX_TIM3_Init+0xe8>)
 80016a6:	f008 ff73 	bl	800a590 <HAL_TIM_PWM_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016b0:	f000 fbca 	bl	8001e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	4811      	ldr	r0, [pc, #68]	; (8001708 <MX_TIM3_Init+0xe8>)
 80016c4:	f009 fe78 	bl	800b3b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016ce:	f000 fbbb 	bl	8001e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d2:	2360      	movs	r3, #96	; 0x60
 80016d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e2:	463b      	mov	r3, r7
 80016e4:	2200      	movs	r2, #0
 80016e6:	4619      	mov	r1, r3
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <MX_TIM3_Init+0xe8>)
 80016ea:	f009 f8c7 	bl	800a87c <HAL_TIM_PWM_ConfigChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80016f4:	f000 fba8 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <MX_TIM3_Init+0xe8>)
 80016fa:	f001 f9ad 	bl	8002a58 <HAL_TIM_MspPostInit>

}
 80016fe:	bf00      	nop
 8001700:	3738      	adds	r7, #56	; 0x38
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20008818 	.word	0x20008818
 800170c:	40000400 	.word	0x40000400

08001710 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08e      	sub	sp, #56	; 0x38
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001730:	463b      	mov	r3, r7
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]
 800173e:	615a      	str	r2, [r3, #20]
 8001740:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <MX_TIM5_Init+0xe8>)
 8001744:	4a2d      	ldr	r2, [pc, #180]	; (80017fc <MX_TIM5_Init+0xec>)
 8001746:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <MX_TIM5_Init+0xe8>)
 800174a:	2200      	movs	r2, #0
 800174c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_TIM5_Init+0xe8>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <MX_TIM5_Init+0xe8>)
 8001756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800175a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <MX_TIM5_Init+0xe8>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <MX_TIM5_Init+0xe8>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001768:	4823      	ldr	r0, [pc, #140]	; (80017f8 <MX_TIM5_Init+0xe8>)
 800176a:	f008 fe42 	bl	800a3f2 <HAL_TIM_Base_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001774:	f000 fb68 	bl	8001e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800177e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001782:	4619      	mov	r1, r3
 8001784:	481c      	ldr	r0, [pc, #112]	; (80017f8 <MX_TIM5_Init+0xe8>)
 8001786:	f009 f98d 	bl	800aaa4 <HAL_TIM_ConfigClockSource>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001790:	f000 fb5a 	bl	8001e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001794:	4818      	ldr	r0, [pc, #96]	; (80017f8 <MX_TIM5_Init+0xe8>)
 8001796:	f008 fefb 	bl	800a590 <HAL_TIM_PWM_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80017a0:	f000 fb52 	bl	8001e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4619      	mov	r1, r3
 80017b2:	4811      	ldr	r0, [pc, #68]	; (80017f8 <MX_TIM5_Init+0xe8>)
 80017b4:	f009 fe00 	bl	800b3b8 <HAL_TIMEx_MasterConfigSynchronization>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80017be:	f000 fb43 	bl	8001e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c2:	2360      	movs	r3, #96	; 0x60
 80017c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	220c      	movs	r2, #12
 80017d6:	4619      	mov	r1, r3
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <MX_TIM5_Init+0xe8>)
 80017da:	f009 f84f 	bl	800a87c <HAL_TIM_PWM_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80017e4:	f000 fb30 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017e8:	4803      	ldr	r0, [pc, #12]	; (80017f8 <MX_TIM5_Init+0xe8>)
 80017ea:	f001 f935 	bl	8002a58 <HAL_TIM_MspPostInit>

}
 80017ee:	bf00      	nop
 80017f0:	3738      	adds	r7, #56	; 0x38
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200087cc 	.word	0x200087cc
 80017fc:	40000c00 	.word	0x40000c00

08001800 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <MX_TIM8_Init+0xa0>)
 8001820:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <MX_TIM8_Init+0xa4>)
 8001822:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_TIM8_Init+0xa0>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <MX_TIM8_Init+0xa0>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_TIM8_Init+0xa0>)
 8001832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001836:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_TIM8_Init+0xa0>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_TIM8_Init+0xa0>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_TIM8_Init+0xa0>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800184a:	4815      	ldr	r0, [pc, #84]	; (80018a0 <MX_TIM8_Init+0xa0>)
 800184c:	f008 fdd1 	bl	800a3f2 <HAL_TIM_Base_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001856:	f000 faf7 	bl	8001e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <MX_TIM8_Init+0xa0>)
 8001868:	f009 f91c 	bl	800aaa4 <HAL_TIM_ConfigClockSource>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001872:	f000 fae9 	bl	8001e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <MX_TIM8_Init+0xa0>)
 8001888:	f009 fd96 	bl	800b3b8 <HAL_TIMEx_MasterConfigSynchronization>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001892:	f000 fad9 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	3720      	adds	r7, #32
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200085bc 	.word	0x200085bc
 80018a4:	40010400 	.word	0x40010400

080018a8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
 80018bc:	615a      	str	r2, [r3, #20]
 80018be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_TIM12_Init+0x84>)
 80018c2:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <MX_TIM12_Init+0x88>)
 80018c4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <MX_TIM12_Init+0x84>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b17      	ldr	r3, [pc, #92]	; (800192c <MX_TIM12_Init+0x84>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_TIM12_Init+0x84>)
 80018d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_TIM12_Init+0x84>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_TIM12_Init+0x84>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80018e6:	4811      	ldr	r0, [pc, #68]	; (800192c <MX_TIM12_Init+0x84>)
 80018e8:	f008 fe52 	bl	800a590 <HAL_TIM_PWM_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80018f2:	f000 faa9 	bl	8001e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f6:	2360      	movs	r3, #96	; 0x60
 80018f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2200      	movs	r2, #0
 800190a:	4619      	mov	r1, r3
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <MX_TIM12_Init+0x84>)
 800190e:	f008 ffb5 	bl	800a87c <HAL_TIM_PWM_ConfigChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001918:	f000 fa96 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800191c:	4803      	ldr	r0, [pc, #12]	; (800192c <MX_TIM12_Init+0x84>)
 800191e:	f001 f89b 	bl	8002a58 <HAL_TIM_MspPostInit>

}
 8001922:	bf00      	nop
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20008ba4 	.word	0x20008ba4
 8001930:	40001800 	.word	0x40001800

08001934 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_USART1_UART_Init+0x58>)
 800193a:	4a15      	ldr	r2, [pc, #84]	; (8001990 <MX_USART1_UART_Init+0x5c>)
 800193c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_USART1_UART_Init+0x58>)
 8001940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_USART1_UART_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_USART1_UART_Init+0x58>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_USART1_UART_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_USART1_UART_Init+0x58>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_USART1_UART_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_USART1_UART_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_USART1_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_USART1_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_USART1_UART_Init+0x58>)
 8001978:	f009 fe48 	bl	800b60c <HAL_UART_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001982:	f000 fa61 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200089a4 	.word	0x200089a4
 8001990:	40011000 	.word	0x40011000

08001994 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_USART6_UART_Init+0x58>)
 800199a:	4a15      	ldr	r2, [pc, #84]	; (80019f0 <MX_USART6_UART_Init+0x5c>)
 800199c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <MX_USART6_UART_Init+0x58>)
 80019a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_USART6_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_USART6_UART_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_USART6_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_USART6_UART_Init+0x58>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_USART6_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_USART6_UART_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_USART6_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_USART6_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_USART6_UART_Init+0x58>)
 80019d8:	f009 fe18 	bl	800b60c <HAL_UART_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80019e2:	f000 fa31 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20008a94 	.word	0x20008a94
 80019f0:	40011400 	.word	0x40011400

080019f4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a0e:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <MX_FMC_Init+0x9c>)
 8001a10:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a20:	2204      	movs	r2, #4
 8001a22:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a26:	2210      	movs	r2, #16
 8001a28:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a2c:	2240      	movs	r2, #64	; 0x40
 8001a2e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a32:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a36:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a44:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001a54:	2302      	movs	r3, #2
 8001a56:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001a60:	2307      	movs	r3, #7
 8001a62:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001a64:	2303      	movs	r3, #3
 8001a66:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_FMC_Init+0x98>)
 8001a76:	f008 fb80 	bl	800a17a <HAL_SDRAM_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001a80:	f000 f9e2 	bl	8001e48 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20008bf0 	.word	0x20008bf0
 8001a90:	a0000140 	.word	0xa0000140

08001a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b090      	sub	sp, #64	; 0x40
 8001a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aaa:	4bb0      	ldr	r3, [pc, #704]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4aaf      	ldr	r2, [pc, #700]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001ab0:	f043 0310 	orr.w	r3, r3, #16
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4bad      	ldr	r3, [pc, #692]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ac2:	4baa      	ldr	r3, [pc, #680]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4aa9      	ldr	r2, [pc, #676]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4ba7      	ldr	r3, [pc, #668]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	4ba4      	ldr	r3, [pc, #656]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4aa3      	ldr	r2, [pc, #652]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4ba1      	ldr	r3, [pc, #644]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	4b9e      	ldr	r3, [pc, #632]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a9d      	ldr	r2, [pc, #628]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b9b      	ldr	r3, [pc, #620]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	61fb      	str	r3, [r7, #28]
 8001b08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	4b98      	ldr	r3, [pc, #608]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a97      	ldr	r2, [pc, #604]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b95      	ldr	r3, [pc, #596]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	4b92      	ldr	r3, [pc, #584]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a91      	ldr	r2, [pc, #580]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b8f      	ldr	r3, [pc, #572]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b3a:	4b8c      	ldr	r3, [pc, #560]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a8b      	ldr	r2, [pc, #556]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b52:	4b86      	ldr	r3, [pc, #536]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a85      	ldr	r2, [pc, #532]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b83      	ldr	r3, [pc, #524]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b6a:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a7f      	ldr	r2, [pc, #508]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b7d      	ldr	r3, [pc, #500]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b82:	4b7a      	ldr	r3, [pc, #488]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a79      	ldr	r2, [pc, #484]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b88:	f043 0320 	orr.w	r3, r3, #32
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b9a:	4b74      	ldr	r3, [pc, #464]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a73      	ldr	r2, [pc, #460]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b71      	ldr	r3, [pc, #452]	; (8001d6c <MX_GPIO_Init+0x2d8>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	486e      	ldr	r0, [pc, #440]	; (8001d70 <MX_GPIO_Init+0x2dc>)
 8001bb8:	f003 f8ce 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	210c      	movs	r1, #12
 8001bc0:	486c      	ldr	r0, [pc, #432]	; (8001d74 <MX_GPIO_Init+0x2e0>)
 8001bc2:	f003 f8c9 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2108      	movs	r1, #8
 8001bca:	486b      	ldr	r0, [pc, #428]	; (8001d78 <MX_GPIO_Init+0x2e4>)
 8001bcc:	f003 f8c4 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd6:	4867      	ldr	r0, [pc, #412]	; (8001d74 <MX_GPIO_Init+0x2e0>)
 8001bd8:	f003 f8be 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be2:	4866      	ldr	r0, [pc, #408]	; (8001d7c <MX_GPIO_Init+0x2e8>)
 8001be4:	f003 f8b8 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	21c8      	movs	r1, #200	; 0xc8
 8001bec:	4864      	ldr	r0, [pc, #400]	; (8001d80 <MX_GPIO_Init+0x2ec>)
 8001bee:	f003 f8b3 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c02:	4619      	mov	r1, r3
 8001c04:	485f      	ldr	r0, [pc, #380]	; (8001d84 <MX_GPIO_Init+0x2f0>)
 8001c06:	f002 fee3 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001c0a:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c1c:	230a      	movs	r3, #10
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c24:	4619      	mov	r1, r3
 8001c26:	4858      	ldr	r0, [pc, #352]	; (8001d88 <MX_GPIO_Init+0x2f4>)
 8001c28:	f002 fed2 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c32:	2300      	movs	r3, #0
 8001c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4852      	ldr	r0, [pc, #328]	; (8001d8c <MX_GPIO_Init+0x2f8>)
 8001c42:	f002 fec5 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001c46:	2340      	movs	r3, #64	; 0x40
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c4a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4845      	ldr	r0, [pc, #276]	; (8001d70 <MX_GPIO_Init+0x2dc>)
 8001c5c:	f002 feb8 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c60:	2320      	movs	r3, #32
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c74:	4619      	mov	r1, r3
 8001c76:	483e      	ldr	r0, [pc, #248]	; (8001d70 <MX_GPIO_Init+0x2dc>)
 8001c78:	f002 feaa 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001c7c:	f241 030c 	movw	r3, #4108	; 0x100c
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	4837      	ldr	r0, [pc, #220]	; (8001d74 <MX_GPIO_Init+0x2e0>)
 8001c96:	f002 fe9b 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cac:	4619      	mov	r1, r3
 8001cae:	4838      	ldr	r0, [pc, #224]	; (8001d90 <MX_GPIO_Init+0x2fc>)
 8001cb0:	f002 fe8e 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	482b      	ldr	r0, [pc, #172]	; (8001d78 <MX_GPIO_Init+0x2e4>)
 8001ccc:	f002 fe80 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4823      	ldr	r0, [pc, #140]	; (8001d70 <MX_GPIO_Init+0x2dc>)
 8001ce4:	f002 fe74 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001ce8:	f248 0304 	movw	r3, #32772	; 0x8004
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481f      	ldr	r0, [pc, #124]	; (8001d7c <MX_GPIO_Init+0x2e8>)
 8001cfe:	f002 fe67 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4818      	ldr	r0, [pc, #96]	; (8001d7c <MX_GPIO_Init+0x2e8>)
 8001d1c:	f002 fe58 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d26:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d34:	4619      	mov	r1, r3
 8001d36:	480f      	ldr	r0, [pc, #60]	; (8001d74 <MX_GPIO_Init+0x2e0>)
 8001d38:	f002 fe4a 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d54:	4619      	mov	r1, r3
 8001d56:	4809      	ldr	r0, [pc, #36]	; (8001d7c <MX_GPIO_Init+0x2e8>)
 8001d58:	f002 fe3a 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001d5c:	23c8      	movs	r3, #200	; 0xc8
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
 8001d68:	e014      	b.n	8001d94 <MX_GPIO_Init+0x300>
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020c00 	.word	0x40020c00
 8001d74:	40022000 	.word	0x40022000
 8001d78:	40022800 	.word	0x40022800
 8001d7c:	40021c00 	.word	0x40021c00
 8001d80:	40021800 	.word	0x40021800
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40022400 	.word	0x40022400
 8001d90:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4819      	ldr	r0, [pc, #100]	; (8001e04 <MX_GPIO_Init+0x370>)
 8001da0:	f002 fe16 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001da4:	2305      	movs	r3, #5
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001db4:	230a      	movs	r3, #10
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4812      	ldr	r0, [pc, #72]	; (8001e08 <MX_GPIO_Init+0x374>)
 8001dc0:	f002 fe06 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480b      	ldr	r0, [pc, #44]	; (8001e04 <MX_GPIO_Init+0x370>)
 8001dd8:	f002 fdfa 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001ddc:	2328      	movs	r3, #40	; 0x28
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dec:	230a      	movs	r3, #10
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df4:	4619      	mov	r1, r3
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_GPIO_Init+0x378>)
 8001df8:	f002 fdea 	bl	80049d0 <HAL_GPIO_Init>

}
 8001dfc:	bf00      	nop
 8001dfe:	3740      	adds	r7, #64	; 0x40
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020000 	.word	0x40020000

08001e10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001e18:	f010 fd46 	bl	80128a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f00e fac5 	bl	80103ac <osDelay>
 8001e22:	e7fb      	b.n	8001e1c <StartDefaultTask+0xc>

08001e24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e36:	f001 f9bd 	bl	80031b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40001000 	.word	0x40001000

08001e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <Error_Handler+0x8>
	...

08001e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	210f      	movs	r1, #15
 8001e8e:	f06f 0001 	mvn.w	r0, #1
 8001e92:	f001 fd1f 	bl	80038d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <HAL_ADC_MspInit+0xa4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d13c      	bne.n	8001f40 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_ADC_MspInit+0xa8>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <HAL_ADC_MspInit+0xa8>)
 8001ecc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <HAL_ADC_MspInit+0xa8>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_ADC_MspInit+0xa8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <HAL_ADC_MspInit+0xa8>)
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <HAL_ADC_MspInit+0xa8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_ADC_MspInit+0xa8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <HAL_ADC_MspInit+0xa8>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_ADC_MspInit+0xa8>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001f0e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001f12:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f14:	2303      	movs	r3, #3
 8001f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4619      	mov	r1, r3
 8001f22:	480b      	ldr	r0, [pc, #44]	; (8001f50 <HAL_ADC_MspInit+0xac>)
 8001f24:	f002 fd54 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4806      	ldr	r0, [pc, #24]	; (8001f54 <HAL_ADC_MspInit+0xb0>)
 8001f3c:	f002 fd48 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40012200 	.word	0x40012200
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40021400 	.word	0x40021400
 8001f54:	40020000 	.word	0x40020000

08001f58 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <HAL_CRC_MspInit+0x38>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10b      	bne.n	8001f82 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_CRC_MspInit+0x3c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_CRC_MspInit+0x3c>)
 8001f70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <HAL_CRC_MspInit+0x3c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023000 	.word	0x40023000
 8001f94:	40023800 	.word	0x40023800

08001f98 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a50      	ldr	r2, [pc, #320]	; (80020f8 <HAL_DCMI_MspInit+0x160>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	f040 809a 	bne.w	80020f0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001fbc:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc0:	4a4e      	ldr	r2, [pc, #312]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6353      	str	r3, [r2, #52]	; 0x34
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8001fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd4:	4b49      	ldr	r3, [pc, #292]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4a48      	ldr	r2, [pc, #288]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8001fda:	f043 0310 	orr.w	r3, r3, #16
 8001fde:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fec:	4b43      	ldr	r3, [pc, #268]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	4a42      	ldr	r2, [pc, #264]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8001ff2:	f043 0308 	orr.w	r3, r3, #8
 8001ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff8:	4b40      	ldr	r3, [pc, #256]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002004:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	4a3c      	ldr	r2, [pc, #240]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 800200a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800200e:	6313      	str	r3, [r2, #48]	; 0x30
 8002010:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	4a36      	ldr	r2, [pc, #216]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8002022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002026:	6313      	str	r3, [r2, #48]	; 0x30
 8002028:	4b34      	ldr	r3, [pc, #208]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4a30      	ldr	r2, [pc, #192]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6313      	str	r3, [r2, #48]	; 0x30
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <HAL_DCMI_MspInit+0x164>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800204c:	2360      	movs	r3, #96	; 0x60
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800205c:	230d      	movs	r3, #13
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	4826      	ldr	r0, [pc, #152]	; (8002100 <HAL_DCMI_MspInit+0x168>)
 8002068:	f002 fcb2 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800206c:	2308      	movs	r3, #8
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800207c:	230d      	movs	r3, #13
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002084:	4619      	mov	r1, r3
 8002086:	481f      	ldr	r0, [pc, #124]	; (8002104 <HAL_DCMI_MspInit+0x16c>)
 8002088:	f002 fca2 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800208c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800209e:	230d      	movs	r3, #13
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	4619      	mov	r1, r3
 80020a8:	4817      	ldr	r0, [pc, #92]	; (8002108 <HAL_DCMI_MspInit+0x170>)
 80020aa:	f002 fc91 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80020ae:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020c0:	230d      	movs	r3, #13
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	4810      	ldr	r0, [pc, #64]	; (800210c <HAL_DCMI_MspInit+0x174>)
 80020cc:	f002 fc80 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80020d0:	2350      	movs	r3, #80	; 0x50
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020e0:	230d      	movs	r3, #13
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	4809      	ldr	r0, [pc, #36]	; (8002110 <HAL_DCMI_MspInit+0x178>)
 80020ec:	f002 fc70 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3738      	adds	r7, #56	; 0x38
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	50050000 	.word	0x50050000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40021000 	.word	0x40021000
 8002104:	40020c00 	.word	0x40020c00
 8002108:	40021800 	.word	0x40021800
 800210c:	40021c00 	.word	0x40021c00
 8002110:	40020000 	.word	0x40020000

08002114 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <HAL_DMA2D_MspInit+0x44>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d113      	bne.n	800214e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <HAL_DMA2D_MspInit+0x48>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a0c      	ldr	r2, [pc, #48]	; (800215c <HAL_DMA2D_MspInit+0x48>)
 800212c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_DMA2D_MspInit+0x48>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2105      	movs	r1, #5
 8002142:	205a      	movs	r0, #90	; 0x5a
 8002144:	f001 fbc6 	bl	80038d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002148:	205a      	movs	r0, #90	; 0x5a
 800214a:	f001 fbdf 	bl	800390c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	4002b000 	.word	0x4002b000
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08e      	sub	sp, #56	; 0x38
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a3f      	ldr	r2, [pc, #252]	; (800227c <HAL_ETH_MspInit+0x11c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d178      	bne.n	8002274 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002182:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <HAL_ETH_MspInit+0x120>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a3e      	ldr	r2, [pc, #248]	; (8002280 <HAL_ETH_MspInit+0x120>)
 8002188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_ETH_MspInit+0x120>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	623b      	str	r3, [r7, #32]
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_ETH_MspInit+0x120>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a38      	ldr	r2, [pc, #224]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4b33      	ldr	r3, [pc, #204]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a32      	ldr	r2, [pc, #200]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b30      	ldr	r3, [pc, #192]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021ca:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a2c      	ldr	r2, [pc, #176]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	4b21      	ldr	r3, [pc, #132]	; (8002280 <HAL_ETH_MspInit+0x120>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a20      	ldr	r2, [pc, #128]	; (8002280 <HAL_ETH_MspInit+0x120>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_ETH_MspInit+0x120>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002212:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002224:	230b      	movs	r3, #11
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222c:	4619      	mov	r1, r3
 800222e:	4815      	ldr	r0, [pc, #84]	; (8002284 <HAL_ETH_MspInit+0x124>)
 8002230:	f002 fbce 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002234:	2332      	movs	r3, #50	; 0x32
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002244:	230b      	movs	r3, #11
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224c:	4619      	mov	r1, r3
 800224e:	480e      	ldr	r0, [pc, #56]	; (8002288 <HAL_ETH_MspInit+0x128>)
 8002250:	f002 fbbe 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002254:	2386      	movs	r3, #134	; 0x86
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002264:	230b      	movs	r3, #11
 8002266:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226c:	4619      	mov	r1, r3
 800226e:	4807      	ldr	r0, [pc, #28]	; (800228c <HAL_ETH_MspInit+0x12c>)
 8002270:	f002 fbae 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002274:	bf00      	nop
 8002276:	3738      	adds	r7, #56	; 0x38
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40028000 	.word	0x40028000
 8002280:	40023800 	.word	0x40023800
 8002284:	40021800 	.word	0x40021800
 8002288:	40020800 	.word	0x40020800
 800228c:	40020000 	.word	0x40020000

08002290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0ac      	sub	sp, #176	; 0xb0
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	2284      	movs	r2, #132	; 0x84
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f8a5 	bl	8000400 <memset>
  if(hi2c->Instance==I2C1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a44      	ldr	r2, [pc, #272]	; (80023cc <HAL_I2C_MspInit+0x13c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d13d      	bne.n	800233c <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ca:	f107 0318 	add.w	r3, r7, #24
 80022ce:	4618      	mov	r0, r3
 80022d0:	f005 fbf2 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022da:	f7ff fdb5 	bl	8001e48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	4b3c      	ldr	r3, [pc, #240]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a3b      	ldr	r2, [pc, #236]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80022f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022fe:	2312      	movs	r3, #18
 8002300:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002304:	2301      	movs	r3, #1
 8002306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002310:	2304      	movs	r3, #4
 8002312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800231a:	4619      	mov	r1, r3
 800231c:	482d      	ldr	r0, [pc, #180]	; (80023d4 <HAL_I2C_MspInit+0x144>)
 800231e:	f002 fb57 	bl	80049d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 8002328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800233a:	e042      	b.n	80023c2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a25      	ldr	r2, [pc, #148]	; (80023d8 <HAL_I2C_MspInit+0x148>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d13d      	bne.n	80023c2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800234a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002352:	f107 0318 	add.w	r3, r7, #24
 8002356:	4618      	mov	r0, r3
 8002358:	f005 fbae 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002362:	f7ff fd71 	bl	8001e48 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 800236c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800237e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002386:	2312      	movs	r3, #18
 8002388:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800238c:	2301      	movs	r3, #1
 800238e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002398:	2304      	movs	r3, #4
 800239a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800239e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023a2:	4619      	mov	r1, r3
 80023a4:	480d      	ldr	r0, [pc, #52]	; (80023dc <HAL_I2C_MspInit+0x14c>)
 80023a6:	f002 fb13 	bl	80049d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 80023b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_I2C_MspInit+0x140>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
}
 80023c2:	bf00      	nop
 80023c4:	37b0      	adds	r7, #176	; 0xb0
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40005400 	.word	0x40005400
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40005c00 	.word	0x40005c00
 80023dc:	40021c00 	.word	0x40021c00

080023e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08e      	sub	sp, #56	; 0x38
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a55      	ldr	r2, [pc, #340]	; (8002554 <HAL_LTDC_MspInit+0x174>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	f040 80a3 	bne.w	800254a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002404:	4b54      	ldr	r3, [pc, #336]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	4a53      	ldr	r2, [pc, #332]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 800240a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800240e:	6453      	str	r3, [r2, #68]	; 0x44
 8002410:	4b51      	ldr	r3, [pc, #324]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002418:	623b      	str	r3, [r7, #32]
 800241a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800241c:	4b4e      	ldr	r3, [pc, #312]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	4a4d      	ldr	r2, [pc, #308]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 8002422:	f043 0310 	orr.w	r3, r3, #16
 8002426:	6313      	str	r3, [r2, #48]	; 0x30
 8002428:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002434:	4b48      	ldr	r3, [pc, #288]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	4a47      	ldr	r2, [pc, #284]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243e:	6313      	str	r3, [r2, #48]	; 0x30
 8002440:	4b45      	ldr	r3, [pc, #276]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800244c:	4b42      	ldr	r3, [pc, #264]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4a41      	ldr	r2, [pc, #260]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 8002452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002456:	6313      	str	r3, [r2, #48]	; 0x30
 8002458:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002464:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 800246a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246e:	6313      	str	r3, [r2, #48]	; 0x30
 8002470:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800247c:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4a35      	ldr	r2, [pc, #212]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002486:	6313      	str	r3, [r2, #48]	; 0x30
 8002488:	4b33      	ldr	r3, [pc, #204]	; (8002558 <HAL_LTDC_MspInit+0x178>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002494:	2310      	movs	r3, #16
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024a4:	230e      	movs	r3, #14
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80024a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ac:	4619      	mov	r1, r3
 80024ae:	482b      	ldr	r0, [pc, #172]	; (800255c <HAL_LTDC_MspInit+0x17c>)
 80024b0:	f002 fa8e 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80024b4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024c6:	230e      	movs	r3, #14
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80024ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ce:	4619      	mov	r1, r3
 80024d0:	4823      	ldr	r0, [pc, #140]	; (8002560 <HAL_LTDC_MspInit+0x180>)
 80024d2:	f002 fa7d 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80024d6:	23f7      	movs	r3, #247	; 0xf7
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2300      	movs	r3, #0
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024e6:	230e      	movs	r3, #14
 80024e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80024ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ee:	4619      	mov	r1, r3
 80024f0:	481c      	ldr	r0, [pc, #112]	; (8002564 <HAL_LTDC_MspInit+0x184>)
 80024f2:	f002 fa6d 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80024f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002508:	2309      	movs	r3, #9
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800250c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002510:	4619      	mov	r1, r3
 8002512:	4815      	ldr	r0, [pc, #84]	; (8002568 <HAL_LTDC_MspInit+0x188>)
 8002514:	f002 fa5c 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002518:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800252a:	230e      	movs	r3, #14
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800252e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002532:	4619      	mov	r1, r3
 8002534:	480d      	ldr	r0, [pc, #52]	; (800256c <HAL_LTDC_MspInit+0x18c>)
 8002536:	f002 fa4b 	bl	80049d0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2105      	movs	r1, #5
 800253e:	2058      	movs	r0, #88	; 0x58
 8002540:	f001 f9c8 	bl	80038d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002544:	2058      	movs	r0, #88	; 0x58
 8002546:	f001 f9e1 	bl	800390c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800254a:	bf00      	nop
 800254c:	3738      	adds	r7, #56	; 0x38
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40016800 	.word	0x40016800
 8002558:	40023800 	.word	0x40023800
 800255c:	40021000 	.word	0x40021000
 8002560:	40022400 	.word	0x40022400
 8002564:	40022800 	.word	0x40022800
 8002568:	40021800 	.word	0x40021800
 800256c:	40022000 	.word	0x40022000

08002570 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08c      	sub	sp, #48	; 0x30
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a3b      	ldr	r2, [pc, #236]	; (800267c <HAL_QSPI_MspInit+0x10c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d170      	bne.n	8002674 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	6393      	str	r3, [r2, #56]	; 0x38
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025aa:	4b35      	ldr	r3, [pc, #212]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a34      	ldr	r2, [pc, #208]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 80025b0:	f043 0310 	orr.w	r3, r3, #16
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a2e      	ldr	r2, [pc, #184]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a28      	ldr	r2, [pc, #160]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_QSPI_MspInit+0x110>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80025f2:	2304      	movs	r3, #4
 80025f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002602:	2309      	movs	r3, #9
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	4619      	mov	r1, r3
 800260c:	481d      	ldr	r0, [pc, #116]	; (8002684 <HAL_QSPI_MspInit+0x114>)
 800260e:	f002 f9df 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002612:	2340      	movs	r3, #64	; 0x40
 8002614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002622:	230a      	movs	r3, #10
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	4619      	mov	r1, r3
 800262c:	4816      	ldr	r0, [pc, #88]	; (8002688 <HAL_QSPI_MspInit+0x118>)
 800262e:	f002 f9cf 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002632:	2304      	movs	r3, #4
 8002634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263e:	2303      	movs	r3, #3
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002642:	2309      	movs	r3, #9
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002646:	f107 031c 	add.w	r3, r7, #28
 800264a:	4619      	mov	r1, r3
 800264c:	480e      	ldr	r0, [pc, #56]	; (8002688 <HAL_QSPI_MspInit+0x118>)
 800264e:	f002 f9bf 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002652:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002660:	2303      	movs	r3, #3
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002664:	2309      	movs	r3, #9
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002668:	f107 031c 	add.w	r3, r7, #28
 800266c:	4619      	mov	r1, r3
 800266e:	4807      	ldr	r0, [pc, #28]	; (800268c <HAL_QSPI_MspInit+0x11c>)
 8002670:	f002 f9ae 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002674:	bf00      	nop
 8002676:	3730      	adds	r7, #48	; 0x30
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	a0001000 	.word	0xa0001000
 8002680:	40023800 	.word	0x40023800
 8002684:	40021000 	.word	0x40021000
 8002688:	40020400 	.word	0x40020400
 800268c:	40020c00 	.word	0x40020c00

08002690 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0a4      	sub	sp, #144	; 0x90
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	2284      	movs	r2, #132	; 0x84
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd fead 	bl	8000400 <memset>
  if(hrtc->Instance==RTC)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <HAL_RTC_MspInit+0x54>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d114      	bne.n	80026da <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026b0:	2320      	movs	r3, #32
 80026b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	4618      	mov	r0, r3
 80026c0:	f005 f9fa 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80026ca:	f7ff fbbd 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RTC_MspInit+0x58>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <HAL_RTC_MspInit+0x58>)
 80026d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026da:	bf00      	nop
 80026dc:	3790      	adds	r7, #144	; 0x90
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40002800 	.word	0x40002800
 80026e8:	40023800 	.word	0x40023800

080026ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	; 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <HAL_SD_MspInit+0xb4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d144      	bne.n	8002798 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800270e:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <HAL_SD_MspInit+0xb8>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <HAL_SD_MspInit+0xb8>)
 8002714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_SD_MspInit+0xb8>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_SD_MspInit+0xb8>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <HAL_SD_MspInit+0xb8>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_SD_MspInit+0xb8>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_SD_MspInit+0xb8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <HAL_SD_MspInit+0xb8>)
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <HAL_SD_MspInit+0xb8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002756:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800275a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002764:	2303      	movs	r3, #3
 8002766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002768:	230c      	movs	r3, #12
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4619      	mov	r1, r3
 8002772:	480d      	ldr	r0, [pc, #52]	; (80027a8 <HAL_SD_MspInit+0xbc>)
 8002774:	f002 f92c 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002778:	2304      	movs	r3, #4
 800277a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002788:	230c      	movs	r3, #12
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	4806      	ldr	r0, [pc, #24]	; (80027ac <HAL_SD_MspInit+0xc0>)
 8002794:	f002 f91c 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002798:	bf00      	nop
 800279a:	3728      	adds	r7, #40	; 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00

080027b0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0aa      	sub	sp, #168	; 0xa8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	2284      	movs	r2, #132	; 0x84
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fe15 	bl	8000400 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80027de:	d143      	bne.n	8002868 <HAL_SPDIFRX_MspInit+0xb8>
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80027e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80027e6:	2364      	movs	r3, #100	; 0x64
 80027e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80027ea:	2302      	movs	r3, #2
 80027ec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80027ee:	2302      	movs	r3, #2
 80027f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80027f2:	2302      	movs	r3, #2
 80027f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fa:	f107 0310 	add.w	r3, r7, #16
 80027fe:	4618      	mov	r0, r3
 8002800:	f005 f95a 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800280a:	f7ff fb1d 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800280e:	4b18      	ldr	r3, [pc, #96]	; (8002870 <HAL_SPDIFRX_MspInit+0xc0>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	4a17      	ldr	r2, [pc, #92]	; (8002870 <HAL_SPDIFRX_MspInit+0xc0>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6413      	str	r3, [r2, #64]	; 0x40
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_SPDIFRX_MspInit+0xc0>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_SPDIFRX_MspInit+0xc0>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_SPDIFRX_MspInit+0xc0>)
 800282c:	f043 0308 	orr.w	r3, r3, #8
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_SPDIFRX_MspInit+0xc0>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002856:	2308      	movs	r3, #8
 8002858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800285c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002860:	4619      	mov	r1, r3
 8002862:	4804      	ldr	r0, [pc, #16]	; (8002874 <HAL_SPDIFRX_MspInit+0xc4>)
 8002864:	f002 f8b4 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002868:	bf00      	nop
 800286a:	37a8      	adds	r7, #168	; 0xa8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40023800 	.word	0x40023800
 8002874:	40020c00 	.word	0x40020c00

08002878 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a25      	ldr	r2, [pc, #148]	; (800292c <HAL_SPI_MspInit+0xb4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d144      	bne.n	8002924 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800289a:	4b25      	ldr	r3, [pc, #148]	; (8002930 <HAL_SPI_MspInit+0xb8>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a24      	ldr	r2, [pc, #144]	; (8002930 <HAL_SPI_MspInit+0xb8>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_SPI_MspInit+0xb8>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80028b2:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <HAL_SPI_MspInit+0xb8>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a1e      	ldr	r2, [pc, #120]	; (8002930 <HAL_SPI_MspInit+0xb8>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_SPI_MspInit+0xb8>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_SPI_MspInit+0xb8>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_SPI_MspInit+0xb8>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_SPI_MspInit+0xb8>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80028e2:	2302      	movs	r3, #2
 80028e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028f2:	2305      	movs	r3, #5
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	480d      	ldr	r0, [pc, #52]	; (8002934 <HAL_SPI_MspInit+0xbc>)
 80028fe:	f002 f867 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002902:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002914:	2305      	movs	r3, #5
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	4806      	ldr	r0, [pc, #24]	; (8002938 <HAL_SPI_MspInit+0xc0>)
 8002920:	f002 f856 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002924:	bf00      	nop
 8002926:	3728      	adds	r7, #40	; 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40003800 	.word	0x40003800
 8002930:	40023800 	.word	0x40023800
 8002934:	40022000 	.word	0x40022000
 8002938:	40020400 	.word	0x40020400

0800293c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2e      	ldr	r2, [pc, #184]	; (8002a04 <HAL_TIM_Base_MspInit+0xc8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10c      	bne.n	8002968 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800294e:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	4a2d      	ldr	r2, [pc, #180]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6453      	str	r3, [r2, #68]	; 0x44
 800295a:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002966:	e046      	b.n	80029f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d10c      	bne.n	800298c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002972:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	69bb      	ldr	r3, [r7, #24]
}
 800298a:	e034      	b.n	80029f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <HAL_TIM_Base_MspInit+0xd0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10c      	bne.n	80029b0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002996:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	697b      	ldr	r3, [r7, #20]
}
 80029ae:	e022      	b.n	80029f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <HAL_TIM_Base_MspInit+0xd4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10c      	bne.n	80029d4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
}
 80029d2:	e010      	b.n	80029f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <HAL_TIM_Base_MspInit+0xd8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10b      	bne.n	80029f6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <HAL_TIM_Base_MspInit+0xcc>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
}
 80029f6:	bf00      	nop
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40010400 	.word	0x40010400

08002a18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <HAL_TIM_PWM_MspInit+0x38>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10b      	bne.n	8002a42 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40001800 	.word	0x40001800
 8002a54:	40023800 	.word	0x40023800

08002a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08c      	sub	sp, #48	; 0x30
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a56      	ldr	r2, [pc, #344]	; (8002bd0 <HAL_TIM_MspPostInit+0x178>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d11d      	bne.n	8002ab6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7a:	4b56      	ldr	r3, [pc, #344]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a55      	ldr	r2, [pc, #340]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	4619      	mov	r1, r3
 8002aae:	484a      	ldr	r0, [pc, #296]	; (8002bd8 <HAL_TIM_MspPostInit+0x180>)
 8002ab0:	f001 ff8e 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002ab4:	e087      	b.n	8002bc6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abe:	d11d      	bne.n	8002afc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	4b44      	ldr	r3, [pc, #272]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4a43      	ldr	r2, [pc, #268]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6313      	str	r3, [r2, #48]	; 0x30
 8002acc:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aea:	2301      	movs	r3, #1
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	4619      	mov	r1, r3
 8002af4:	4838      	ldr	r0, [pc, #224]	; (8002bd8 <HAL_TIM_MspPostInit+0x180>)
 8002af6:	f001 ff6b 	bl	80049d0 <HAL_GPIO_Init>
}
 8002afa:	e064      	b.n	8002bc6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a36      	ldr	r2, [pc, #216]	; (8002bdc <HAL_TIM_MspPostInit+0x184>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d11c      	bne.n	8002b40 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b06:	4b33      	ldr	r3, [pc, #204]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a32      	ldr	r2, [pc, #200]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002b1e:	2310      	movs	r3, #16
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 031c 	add.w	r3, r7, #28
 8002b36:	4619      	mov	r1, r3
 8002b38:	4829      	ldr	r0, [pc, #164]	; (8002be0 <HAL_TIM_MspPostInit+0x188>)
 8002b3a:	f001 ff49 	bl	80049d0 <HAL_GPIO_Init>
}
 8002b3e:	e042      	b.n	8002bc6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <HAL_TIM_MspPostInit+0x18c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d11c      	bne.n	8002b84 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a21      	ldr	r2, [pc, #132]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b72:	2302      	movs	r3, #2
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002b76:	f107 031c 	add.w	r3, r7, #28
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	481a      	ldr	r0, [pc, #104]	; (8002be8 <HAL_TIM_MspPostInit+0x190>)
 8002b7e:	f001 ff27 	bl	80049d0 <HAL_GPIO_Init>
}
 8002b82:	e020      	b.n	8002bc6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_TIM_MspPostInit+0x194>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d11b      	bne.n	8002bc6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002ba6:	2340      	movs	r3, #64	; 0x40
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002bb6:	2309      	movs	r3, #9
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002bba:	f107 031c 	add.w	r3, r7, #28
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	480b      	ldr	r0, [pc, #44]	; (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002bc2:	f001 ff05 	bl	80049d0 <HAL_GPIO_Init>
}
 8002bc6:	bf00      	nop
 8002bc8:	3730      	adds	r7, #48	; 0x30
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40020000 	.word	0x40020000
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40020400 	.word	0x40020400
 8002be4:	40000c00 	.word	0x40000c00
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40001800 	.word	0x40001800
 8002bf0:	40021c00 	.word	0x40021c00

08002bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b0ae      	sub	sp, #184	; 0xb8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c0c:	f107 0320 	add.w	r3, r7, #32
 8002c10:	2284      	movs	r2, #132	; 0x84
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fbf3 	bl	8000400 <memset>
  if(huart->Instance==USART1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a53      	ldr	r2, [pc, #332]	; (8002d6c <HAL_UART_MspInit+0x178>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d15d      	bne.n	8002ce0 <HAL_UART_MspInit+0xec>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c24:	2340      	movs	r3, #64	; 0x40
 8002c26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c2c:	f107 0320 	add.w	r3, r7, #32
 8002c30:	4618      	mov	r0, r3
 8002c32:	f004 ff41 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c3c:	f7ff f904 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c40:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	4a4a      	ldr	r2, [pc, #296]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002c46:	f043 0310 	orr.w	r3, r3, #16
 8002c4a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4c:	4b48      	ldr	r3, [pc, #288]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c58:	4b45      	ldr	r3, [pc, #276]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	4a44      	ldr	r2, [pc, #272]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	6313      	str	r3, [r2, #48]	; 0x30
 8002c64:	4b42      	ldr	r3, [pc, #264]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c70:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	4a3e      	ldr	r2, [pc, #248]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7c:	4b3c      	ldr	r3, [pc, #240]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ca0:	2307      	movs	r3, #7
 8002ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002ca6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002caa:	4619      	mov	r1, r3
 8002cac:	4831      	ldr	r0, [pc, #196]	; (8002d74 <HAL_UART_MspInit+0x180>)
 8002cae:	f001 fe8f 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ccc:	2307      	movs	r3, #7
 8002cce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4827      	ldr	r0, [pc, #156]	; (8002d78 <HAL_UART_MspInit+0x184>)
 8002cda:	f001 fe79 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cde:	e040      	b.n	8002d62 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a25      	ldr	r2, [pc, #148]	; (8002d7c <HAL_UART_MspInit+0x188>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d13b      	bne.n	8002d62 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf4:	f107 0320 	add.w	r3, r7, #32
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 fedd 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002d04:	f7ff f8a0 	bl	8001e48 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002d0e:	f043 0320 	orr.w	r3, r3, #32
 8002d12:	6453      	str	r3, [r2, #68]	; 0x44
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002d26:	f043 0304 	orr.w	r3, r3, #4
 8002d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2c:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_UART_MspInit+0x17c>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002d38:	23c0      	movs	r3, #192	; 0xc0
 8002d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d50:	2308      	movs	r3, #8
 8002d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d56:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4808      	ldr	r0, [pc, #32]	; (8002d80 <HAL_UART_MspInit+0x18c>)
 8002d5e:	f001 fe37 	bl	80049d0 <HAL_GPIO_Init>
}
 8002d62:	bf00      	nop
 8002d64:	37b8      	adds	r7, #184	; 0xb8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40011000 	.word	0x40011000
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40020000 	.word	0x40020000
 8002d7c:	40011400 	.word	0x40011400
 8002d80:	40020800 	.word	0x40020800

08002d84 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002d98:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <HAL_FMC_MspInit+0x100>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d16d      	bne.n	8002e7c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002da0:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <HAL_FMC_MspInit+0x100>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002da6:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <HAL_FMC_MspInit+0x104>)
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	4a37      	ldr	r2, [pc, #220]	; (8002e88 <HAL_FMC_MspInit+0x104>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6393      	str	r3, [r2, #56]	; 0x38
 8002db2:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <HAL_FMC_MspInit+0x104>)
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002dbe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002dc2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	482c      	ldr	r0, [pc, #176]	; (8002e8c <HAL_FMC_MspInit+0x108>)
 8002dda:	f001 fdf9 	bl	80049d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002dde:	f248 1333 	movw	r3, #33075	; 0x8133
 8002de2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002df0:	230c      	movs	r3, #12
 8002df2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	4619      	mov	r1, r3
 8002df8:	4825      	ldr	r0, [pc, #148]	; (8002e90 <HAL_FMC_MspInit+0x10c>)
 8002dfa:	f001 fde9 	bl	80049d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002dfe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e02:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e10:	230c      	movs	r3, #12
 8002e12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	481e      	ldr	r0, [pc, #120]	; (8002e94 <HAL_FMC_MspInit+0x110>)
 8002e1a:	f001 fdd9 	bl	80049d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002e1e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e22:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e30:	230c      	movs	r3, #12
 8002e32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	4817      	ldr	r0, [pc, #92]	; (8002e98 <HAL_FMC_MspInit+0x114>)
 8002e3a:	f001 fdc9 	bl	80049d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002e3e:	2328      	movs	r3, #40	; 0x28
 8002e40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e4e:	230c      	movs	r3, #12
 8002e50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	4619      	mov	r1, r3
 8002e56:	4811      	ldr	r0, [pc, #68]	; (8002e9c <HAL_FMC_MspInit+0x118>)
 8002e58:	f001 fdba 	bl	80049d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e6c:	230c      	movs	r3, #12
 8002e6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002e70:	1d3b      	adds	r3, r7, #4
 8002e72:	4619      	mov	r1, r3
 8002e74:	480a      	ldr	r0, [pc, #40]	; (8002ea0 <HAL_FMC_MspInit+0x11c>)
 8002e76:	f001 fdab 	bl	80049d0 <HAL_GPIO_Init>
 8002e7a:	e000      	b.n	8002e7e <HAL_FMC_MspInit+0xfa>
    return;
 8002e7c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000318 	.word	0x20000318
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40021800 	.word	0x40021800
 8002e94:	40020c00 	.word	0x40020c00
 8002e98:	40021400 	.word	0x40021400
 8002e9c:	40021c00 	.word	0x40021c00
 8002ea0:	40020800 	.word	0x40020800

08002ea4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002eac:	f7ff ff6a 	bl	8002d84 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2b      	ldr	r2, [pc, #172]	; (8002f74 <HAL_SAI_MspInit+0xbc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d124      	bne.n	8002f14 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002eca:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_SAI_MspInit+0xc0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10b      	bne.n	8002eea <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <HAL_SAI_MspInit+0xc4>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <HAL_SAI_MspInit+0xc4>)
 8002ed8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002edc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ede:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <HAL_SAI_MspInit+0xc4>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_SAI_MspInit+0xc0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <HAL_SAI_MspInit+0xc0>)
 8002ef2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002ef4:	23f0      	movs	r3, #240	; 0xf0
 8002ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f00:	2300      	movs	r3, #0
 8002f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002f04:	230a      	movs	r3, #10
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	481c      	ldr	r0, [pc, #112]	; (8002f80 <HAL_SAI_MspInit+0xc8>)
 8002f10:	f001 fd5e 	bl	80049d0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1a      	ldr	r2, [pc, #104]	; (8002f84 <HAL_SAI_MspInit+0xcc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d125      	bne.n	8002f6a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_SAI_MspInit+0xc0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_SAI_MspInit+0xc4>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <HAL_SAI_MspInit+0xc4>)
 8002f2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f30:	6453      	str	r3, [r2, #68]	; 0x44
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_SAI_MspInit+0xc4>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_SAI_MspInit+0xc0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <HAL_SAI_MspInit+0xc0>)
 8002f46:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	2300      	movs	r3, #0
 8002f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002f5a:	230a      	movs	r3, #10
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	4808      	ldr	r0, [pc, #32]	; (8002f88 <HAL_SAI_MspInit+0xd0>)
 8002f66:	f001 fd33 	bl	80049d0 <HAL_GPIO_Init>

    }
}
 8002f6a:	bf00      	nop
 8002f6c:	3728      	adds	r7, #40	; 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40015c04 	.word	0x40015c04
 8002f78:	2000031c 	.word	0x2000031c
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40022000 	.word	0x40022000
 8002f84:	40015c24 	.word	0x40015c24
 8002f88:	40021800 	.word	0x40021800

08002f8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08c      	sub	sp, #48	; 0x30
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	2036      	movs	r0, #54	; 0x36
 8002fa2:	f000 fc97 	bl	80038d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fa6:	2036      	movs	r0, #54	; 0x36
 8002fa8:	f000 fcb0 	bl	800390c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <HAL_InitTick+0xa0>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	; (800302c <HAL_InitTick+0xa0>)
 8002fb2:	f043 0310 	orr.w	r3, r3, #16
 8002fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb8:	4b1c      	ldr	r3, [pc, #112]	; (800302c <HAL_InitTick+0xa0>)
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fc4:	f107 0210 	add.w	r2, r7, #16
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 fd40 	bl	8007a54 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002fd4:	f004 fd16 	bl	8007a04 <HAL_RCC_GetPCLK1Freq>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	4a13      	ldr	r2, [pc, #76]	; (8003030 <HAL_InitTick+0xa4>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0c9b      	lsrs	r3, r3, #18
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_InitTick+0xa8>)
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <HAL_InitTick+0xac>)
 8002ff0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_InitTick+0xa8>)
 8002ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ff8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ffa:	4a0e      	ldr	r2, [pc, #56]	; (8003034 <HAL_InitTick+0xa8>)
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <HAL_InitTick+0xa8>)
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_InitTick+0xa8>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800300c:	4809      	ldr	r0, [pc, #36]	; (8003034 <HAL_InitTick+0xa8>)
 800300e:	f007 f9f0 	bl	800a3f2 <HAL_TIM_Base_Init>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003018:	4806      	ldr	r0, [pc, #24]	; (8003034 <HAL_InitTick+0xa8>)
 800301a:	f007 fa41 	bl	800a4a0 <HAL_TIM_Base_Start_IT>
 800301e:	4603      	mov	r3, r0
 8003020:	e000      	b.n	8003024 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
}
 8003024:	4618      	mov	r0, r3
 8003026:	3730      	adds	r7, #48	; 0x30
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40023800 	.word	0x40023800
 8003030:	431bde83 	.word	0x431bde83
 8003034:	20008cb8 	.word	0x20008cb8
 8003038:	40001000 	.word	0x40001000

0800303c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003040:	e7fe      	b.n	8003040 <NMI_Handler+0x4>

08003042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003046:	e7fe      	b.n	8003046 <HardFault_Handler+0x4>

08003048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800304c:	e7fe      	b.n	800304c <MemManage_Handler+0x4>

0800304e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003052:	e7fe      	b.n	8003052 <BusFault_Handler+0x4>

08003054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003058:	e7fe      	b.n	8003058 <UsageFault_Handler+0x4>

0800305a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <TIM6_DAC_IRQHandler+0x10>)
 800306e:	f007 fae6 	bl	800a63e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20008cb8 	.word	0x20008cb8

0800307c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003080:	4802      	ldr	r0, [pc, #8]	; (800308c <OTG_FS_IRQHandler+0x10>)
 8003082:	f002 f8ed 	bl	8005260 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20009558 	.word	0x20009558

08003090 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <LTDC_IRQHandler+0x10>)
 8003096:	f003 fca7 	bl	80069e8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20008864 	.word	0x20008864

080030a4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <DMA2D_IRQHandler+0x10>)
 80030aa:	f000 fe85 	bl	8003db8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20008b18 	.word	0x20008b18

080030b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <_sbrk+0x5c>)
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <_sbrk+0x60>)
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <_sbrk+0x64>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <_sbrk+0x64>)
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <_sbrk+0x68>)
 80030d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <_sbrk+0x64>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d207      	bcs.n	80030f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030e8:	f7fd f8b6 	bl	8000258 <__errno>
 80030ec:	4603      	mov	r3, r0
 80030ee:	220c      	movs	r2, #12
 80030f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030f6:	e009      	b.n	800310c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <_sbrk+0x64>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <_sbrk+0x64>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	4a05      	ldr	r2, [pc, #20]	; (800311c <_sbrk+0x64>)
 8003108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20050000 	.word	0x20050000
 8003118:	00000400 	.word	0x00000400
 800311c:	20000320 	.word	0x20000320
 8003120:	20009860 	.word	0x20009860

08003124 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <SystemInit+0x20>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <SystemInit+0x20>)
 8003130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800314c:	480d      	ldr	r0, [pc, #52]	; (8003184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800314e:	490e      	ldr	r1, [pc, #56]	; (8003188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003150:	4a0e      	ldr	r2, [pc, #56]	; (800318c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003154:	e002      	b.n	800315c <LoopCopyDataInit>

08003156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800315a:	3304      	adds	r3, #4

0800315c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800315c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800315e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003160:	d3f9      	bcc.n	8003156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003162:	4a0b      	ldr	r2, [pc, #44]	; (8003190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003164:	4c0b      	ldr	r4, [pc, #44]	; (8003194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003168:	e001      	b.n	800316e <LoopFillZerobss>

0800316a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800316a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800316c:	3204      	adds	r2, #4

0800316e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800316e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003170:	d3fb      	bcc.n	800316a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003172:	f7ff ffd7 	bl	8003124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003176:	f7fd f875 	bl	8000264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800317a:	f7fd fc11 	bl	80009a0 <main>
  bx  lr    
 800317e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003180:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003188:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800318c:	08012f64 	.word	0x08012f64
  ldr r2, =_sbss
 8003190:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8003194:	20009860 	.word	0x20009860

08003198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003198:	e7fe      	b.n	8003198 <ADC_IRQHandler>

0800319a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800319e:	2003      	movs	r0, #3
 80031a0:	f000 fb8d 	bl	80038be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7ff fef1 	bl	8002f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031aa:	f7fe fe53 	bl	8001e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_IncTick+0x20>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_IncTick+0x24>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_IncTick+0x24>)
 80031c6:	6013      	str	r3, [r2, #0]
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	2000006c 	.word	0x2000006c
 80031d8:	20008d04 	.word	0x20008d04

080031dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return uwTick;
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <HAL_GetTick+0x14>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20008d04 	.word	0x20008d04

080031f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031fc:	f7ff ffee 	bl	80031dc <HAL_GetTick>
 8003200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320c:	d005      	beq.n	800321a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_Delay+0x44>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800321a:	bf00      	nop
 800321c:	f7ff ffde 	bl	80031dc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	429a      	cmp	r2, r3
 800322a:	d8f7      	bhi.n	800321c <HAL_Delay+0x28>
  {
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	2000006c 	.word	0x2000006c

0800323c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e031      	b.n	80032b6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fe fe22 	bl	8001ea4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_ADC_Init+0x84>)
 8003280:	4013      	ands	r3, r2
 8003282:	f043 0202 	orr.w	r2, r3, #2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f970 	bl	8003570 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
 80032a6:	e001      	b.n	80032ac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	ffffeefd 	.word	0xffffeefd

080032c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x1c>
 80032dc:	2302      	movs	r3, #2
 80032de:	e136      	b.n	800354e <HAL_ADC_ConfigChannel+0x28a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b09      	cmp	r3, #9
 80032ee:	d93a      	bls.n	8003366 <HAL_ADC_ConfigChannel+0xa2>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032f8:	d035      	beq.n	8003366 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68d9      	ldr	r1, [r3, #12]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b29b      	uxth	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	3b1e      	subs	r3, #30
 8003310:	2207      	movs	r2, #7
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	400a      	ands	r2, r1
 800331e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a8d      	ldr	r2, [pc, #564]	; (800355c <HAL_ADC_ConfigChannel+0x298>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10a      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68d9      	ldr	r1, [r3, #12]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	061a      	lsls	r2, r3, #24
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800333e:	e035      	b.n	80033ac <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68d9      	ldr	r1, [r3, #12]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	4618      	mov	r0, r3
 8003352:	4603      	mov	r3, r0
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4403      	add	r3, r0
 8003358:	3b1e      	subs	r3, #30
 800335a:	409a      	lsls	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003364:	e022      	b.n	80033ac <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6919      	ldr	r1, [r3, #16]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	2207      	movs	r2, #7
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43da      	mvns	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	400a      	ands	r2, r1
 8003388:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6919      	ldr	r1, [r3, #16]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	b29b      	uxth	r3, r3
 800339a:	4618      	mov	r0, r3
 800339c:	4603      	mov	r3, r0
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4403      	add	r3, r0
 80033a2:	409a      	lsls	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b06      	cmp	r3, #6
 80033b2:	d824      	bhi.n	80033fe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	3b05      	subs	r3, #5
 80033c6:	221f      	movs	r2, #31
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43da      	mvns	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	400a      	ands	r2, r1
 80033d4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	3b05      	subs	r3, #5
 80033f0:	fa00 f203 	lsl.w	r2, r0, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	635a      	str	r2, [r3, #52]	; 0x34
 80033fc:	e04c      	b.n	8003498 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d824      	bhi.n	8003450 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	3b23      	subs	r3, #35	; 0x23
 8003418:	221f      	movs	r2, #31
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	400a      	ands	r2, r1
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	4618      	mov	r0, r3
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	3b23      	subs	r3, #35	; 0x23
 8003442:	fa00 f203 	lsl.w	r2, r0, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
 800344e:	e023      	b.n	8003498 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	3b41      	subs	r3, #65	; 0x41
 8003462:	221f      	movs	r2, #31
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43da      	mvns	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	400a      	ands	r2, r1
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	4618      	mov	r0, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	3b41      	subs	r3, #65	; 0x41
 800348c:	fa00 f203 	lsl.w	r2, r0, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a30      	ldr	r2, [pc, #192]	; (8003560 <HAL_ADC_ConfigChannel+0x29c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10a      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x1f4>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034aa:	d105      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80034ac:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <HAL_ADC_ConfigChannel+0x2a0>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a2c      	ldr	r2, [pc, #176]	; (8003564 <HAL_ADC_ConfigChannel+0x2a0>)
 80034b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80034b6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a28      	ldr	r2, [pc, #160]	; (8003560 <HAL_ADC_ConfigChannel+0x29c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10f      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x21e>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b12      	cmp	r3, #18
 80034c8:	d10b      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80034ca:	4b26      	ldr	r3, [pc, #152]	; (8003564 <HAL_ADC_ConfigChannel+0x2a0>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4a25      	ldr	r2, [pc, #148]	; (8003564 <HAL_ADC_ConfigChannel+0x2a0>)
 80034d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034d4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80034d6:	4b23      	ldr	r3, [pc, #140]	; (8003564 <HAL_ADC_ConfigChannel+0x2a0>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a22      	ldr	r2, [pc, #136]	; (8003564 <HAL_ADC_ConfigChannel+0x2a0>)
 80034dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034e0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <HAL_ADC_ConfigChannel+0x29c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d12b      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x280>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1a      	ldr	r2, [pc, #104]	; (800355c <HAL_ADC_ConfigChannel+0x298>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <HAL_ADC_ConfigChannel+0x23a>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b11      	cmp	r3, #17
 80034fc:	d122      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80034fe:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_ADC_ConfigChannel+0x2a0>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4a18      	ldr	r2, [pc, #96]	; (8003564 <HAL_ADC_ConfigChannel+0x2a0>)
 8003504:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003508:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800350a:	4b16      	ldr	r3, [pc, #88]	; (8003564 <HAL_ADC_ConfigChannel+0x2a0>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_ADC_ConfigChannel+0x2a0>)
 8003510:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003514:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a10      	ldr	r2, [pc, #64]	; (800355c <HAL_ADC_ConfigChannel+0x298>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d111      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_ADC_ConfigChannel+0x2a4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a11      	ldr	r2, [pc, #68]	; (800356c <HAL_ADC_ConfigChannel+0x2a8>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	0c9a      	lsrs	r2, r3, #18
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003536:	e002      	b.n	800353e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3b01      	subs	r3, #1
 800353c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f9      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	10000012 	.word	0x10000012
 8003560:	40012000 	.word	0x40012000
 8003564:	40012300 	.word	0x40012300
 8003568:	20000064 	.word	0x20000064
 800356c:	431bde83 	.word	0x431bde83

08003570 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003578:	4b78      	ldr	r3, [pc, #480]	; (800375c <ADC_Init+0x1ec>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a77      	ldr	r2, [pc, #476]	; (800375c <ADC_Init+0x1ec>)
 800357e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003582:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003584:	4b75      	ldr	r3, [pc, #468]	; (800375c <ADC_Init+0x1ec>)
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4973      	ldr	r1, [pc, #460]	; (800375c <ADC_Init+0x1ec>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	021a      	lsls	r2, r3, #8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6899      	ldr	r1, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	4a58      	ldr	r2, [pc, #352]	; (8003760 <ADC_Init+0x1f0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d022      	beq.n	800364a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003612:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6899      	ldr	r1, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6899      	ldr	r1, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	e00f      	b.n	800366a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003658:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003668:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0202 	bic.w	r2, r2, #2
 8003678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	005a      	lsls	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01b      	beq.n	80036d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	3b01      	subs	r3, #1
 80036c4:	035a      	lsls	r2, r3, #13
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	e007      	b.n	80036e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	051a      	lsls	r2, r3, #20
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6899      	ldr	r1, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003722:	025a      	lsls	r2, r3, #9
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6899      	ldr	r1, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	029a      	lsls	r2, r3, #10
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	40012300 	.word	0x40012300
 8003760:	0f000001 	.word	0x0f000001

08003764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003780:	4013      	ands	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 800378e:	4313      	orrs	r3, r2
 8003790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003792:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	60d3      	str	r3, [r2, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000ed00 	.word	0xe000ed00
 80037a8:	05fa0000 	.word	0x05fa0000

080037ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <__NVIC_GetPriorityGrouping+0x18>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 0307 	and.w	r3, r3, #7
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	db0b      	blt.n	80037f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4907      	ldr	r1, [pc, #28]	; (8003800 <__NVIC_EnableIRQ+0x38>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2001      	movs	r0, #1
 80037ea:	fa00 f202 	lsl.w	r2, r0, r2
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e100 	.word	0xe000e100

08003804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003814:	2b00      	cmp	r3, #0
 8003816:	db0a      	blt.n	800382e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	490c      	ldr	r1, [pc, #48]	; (8003850 <__NVIC_SetPriority+0x4c>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	440b      	add	r3, r1
 8003828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800382c:	e00a      	b.n	8003844 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4908      	ldr	r1, [pc, #32]	; (8003854 <__NVIC_SetPriority+0x50>)
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	3b04      	subs	r3, #4
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	440b      	add	r3, r1
 8003842:	761a      	strb	r2, [r3, #24]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000e100 	.word	0xe000e100
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	; 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f1c3 0307 	rsb	r3, r3, #7
 8003872:	2b04      	cmp	r3, #4
 8003874:	bf28      	it	cs
 8003876:	2304      	movcs	r3, #4
 8003878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3304      	adds	r3, #4
 800387e:	2b06      	cmp	r3, #6
 8003880:	d902      	bls.n	8003888 <NVIC_EncodePriority+0x30>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3b03      	subs	r3, #3
 8003886:	e000      	b.n	800388a <NVIC_EncodePriority+0x32>
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43da      	mvns	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	401a      	ands	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	43d9      	mvns	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b0:	4313      	orrs	r3, r2
         );
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3724      	adds	r7, #36	; 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff ff4c 	bl	8003764 <__NVIC_SetPriorityGrouping>
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e6:	f7ff ff61 	bl	80037ac <__NVIC_GetPriorityGrouping>
 80038ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	6978      	ldr	r0, [r7, #20]
 80038f2:	f7ff ffb1 	bl	8003858 <NVIC_EncodePriority>
 80038f6:	4602      	mov	r2, r0
 80038f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff80 	bl	8003804 <__NVIC_SetPriority>
}
 8003904:	bf00      	nop
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff ff54 	bl	80037c8 <__NVIC_EnableIRQ>
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e054      	b.n	80039e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7f5b      	ldrb	r3, [r3, #29]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fe fb04 	bl	8001f58 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	791b      	ldrb	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a22      	ldr	r2, [pc, #136]	; (80039ec <HAL_CRC_Init+0xc4>)
 8003964:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0218 	bic.w	r2, r2, #24
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	e00c      	b.n	8003992 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	461a      	mov	r2, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f834 	bl	80039f0 <HAL_CRCEx_Polynomial_Set>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e028      	b.n	80039e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	795b      	ldrb	r3, [r3, #5]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039a2:	611a      	str	r2, [r3, #16]
 80039a4:	e004      	b.n	80039b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6912      	ldr	r2, [r2, #16]
 80039ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	04c11db7 	.word	0x04c11db7

080039f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003a00:	231f      	movs	r3, #31
 8003a02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003a04:	bf00      	nop
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1e5a      	subs	r2, r3, #1
 8003a0a:	613a      	str	r2, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <HAL_CRCEx_Polynomial_Set+0x34>
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_CRCEx_Polynomial_Set+0x16>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b18      	cmp	r3, #24
 8003a28:	d846      	bhi.n	8003ab8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003abf 	.word	0x08003abf
 8003a34:	08003ab9 	.word	0x08003ab9
 8003a38:	08003ab9 	.word	0x08003ab9
 8003a3c:	08003ab9 	.word	0x08003ab9
 8003a40:	08003ab9 	.word	0x08003ab9
 8003a44:	08003ab9 	.word	0x08003ab9
 8003a48:	08003ab9 	.word	0x08003ab9
 8003a4c:	08003ab9 	.word	0x08003ab9
 8003a50:	08003aad 	.word	0x08003aad
 8003a54:	08003ab9 	.word	0x08003ab9
 8003a58:	08003ab9 	.word	0x08003ab9
 8003a5c:	08003ab9 	.word	0x08003ab9
 8003a60:	08003ab9 	.word	0x08003ab9
 8003a64:	08003ab9 	.word	0x08003ab9
 8003a68:	08003ab9 	.word	0x08003ab9
 8003a6c:	08003ab9 	.word	0x08003ab9
 8003a70:	08003aa1 	.word	0x08003aa1
 8003a74:	08003ab9 	.word	0x08003ab9
 8003a78:	08003ab9 	.word	0x08003ab9
 8003a7c:	08003ab9 	.word	0x08003ab9
 8003a80:	08003ab9 	.word	0x08003ab9
 8003a84:	08003ab9 	.word	0x08003ab9
 8003a88:	08003ab9 	.word	0x08003ab9
 8003a8c:	08003ab9 	.word	0x08003ab9
 8003a90:	08003a95 	.word	0x08003a95
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d913      	bls.n	8003ac2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003a9e:	e010      	b.n	8003ac2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b07      	cmp	r3, #7
 8003aa4:	d90f      	bls.n	8003ac6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003aaa:	e00c      	b.n	8003ac6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	d90b      	bls.n	8003aca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ab6:	e008      	b.n	8003aca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
      break;
 8003abc:	e006      	b.n	8003acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e004      	b.n	8003acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003aca:	bf00      	nop
  }
  if (status == HAL_OK)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10d      	bne.n	8003aee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f023 0118 	bic.w	r1, r3, #24
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e069      	b.n	8003be2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fe fa3c 	bl	8001f98 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <HAL_DCMI_Init+0xf0>)
 8003b42:	400b      	ands	r3, r1
 8003b44:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6819      	ldr	r1, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003b5a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003b66:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003b72:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003b7e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003b8a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d112      	bne.n	8003bc2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	7f1b      	ldrb	r3, [r3, #28]
 8003ba0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7f5b      	ldrb	r3, [r3, #29]
 8003ba6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003ba8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	7f9b      	ldrb	r3, [r3, #30]
 8003bae:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003bb0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	7fdb      	ldrb	r3, [r3, #31]
 8003bb8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003bbe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003bc0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 021e 	orr.w	r2, r2, #30
 8003bd0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	ffe0f007 	.word	0xffe0f007

08003bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_DMA_Start_IT+0x26>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e048      	b.n	8003ca8 <HAL_DMA_Start_IT+0xb8>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d137      	bne.n	8003c9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f842 	bl	8003cc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	223f      	movs	r2, #63	; 0x3f
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0216 	orr.w	r2, r2, #22
 8003c5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c6e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0208 	orr.w	r2, r2, #8
 8003c86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	e005      	b.n	8003ca6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ce4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d108      	bne.n	8003d08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d06:	e007      	b.n	8003d18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e039      	b.n	8003daa <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe f9e2 	bl	8002114 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	f023 0107 	bic.w	r1, r3, #7
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_DMA2D_Init+0x90>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68d1      	ldr	r1, [r2, #12]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	430b      	orrs	r3, r1
 8003d98:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	ffffc000 	.word	0xffffc000

08003db8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d026      	beq.n	8003e28 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d021      	beq.n	8003e28 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003df2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2201      	movs	r2, #1
 8003e06:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d026      	beq.n	8003e80 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d021      	beq.n	8003e80 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2220      	movs	r2, #32
 8003e52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	f043 0202 	orr.w	r2, r3, #2
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2204      	movs	r2, #4
 8003e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d026      	beq.n	8003ed8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d021      	beq.n	8003ed8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	f043 0204 	orr.w	r2, r3, #4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d013      	beq.n	8003f0a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00e      	beq.n	8003f0a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2204      	movs	r2, #4
 8003f02:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f853 	bl	8003fb0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d024      	beq.n	8003f5e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01f      	beq.n	8003f5e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f2c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2202      	movs	r2, #2
 8003f34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01f      	beq.n	8003fa8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01a      	beq.n	8003fa8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f80:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2210      	movs	r2, #16
 8003f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f80e 	bl	8003fc4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_DMA2D_ConfigLayer+0x20>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e079      	b.n	80040ec <HAL_DMA2D_ConfigLayer+0x114>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	3318      	adds	r3, #24
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004022:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004024:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b0a      	cmp	r3, #10
 800402c:	d003      	beq.n	8004036 <HAL_DMA2D_ConfigLayer+0x5e>
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b09      	cmp	r3, #9
 8004034:	d107      	bne.n	8004046 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e005      	b.n	8004052 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	061b      	lsls	r3, r3, #24
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d120      	bne.n	800409a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	43db      	mvns	r3, r3
 8004062:	ea02 0103 	and.w	r1, r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	430a      	orrs	r2, r1
 800406e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b0a      	cmp	r3, #10
 8004080:	d003      	beq.n	800408a <HAL_DMA2D_ConfigLayer+0xb2>
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b09      	cmp	r3, #9
 8004088:	d127      	bne.n	80040da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004096:	629a      	str	r2, [r3, #40]	; 0x28
 8004098:	e01f      	b.n	80040da <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	43db      	mvns	r3, r3
 80040a4:	ea02 0103 	and.w	r1, r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b0a      	cmp	r3, #10
 80040c2:	d003      	beq.n	80040cc <HAL_DMA2D_ConfigLayer+0xf4>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b09      	cmp	r3, #9
 80040ca:	d106      	bne.n	80040da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80040d8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	ff03000f 	.word	0xff03000f

080040fc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800410c:	4ba9      	ldr	r3, [pc, #676]	; (80043b4 <HAL_ETH_Init+0x2b8>)
 800410e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004114:	2300      	movs	r3, #0
 8004116:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e181      	b.n	8004426 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fe f812 	bl	8002160 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413c:	4b9e      	ldr	r3, [pc, #632]	; (80043b8 <HAL_ETH_Init+0x2bc>)
 800413e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004140:	4a9d      	ldr	r2, [pc, #628]	; (80043b8 <HAL_ETH_Init+0x2bc>)
 8004142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004146:	6453      	str	r3, [r2, #68]	; 0x44
 8004148:	4b9b      	ldr	r3, [pc, #620]	; (80043b8 <HAL_ETH_Init+0x2bc>)
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004154:	4b99      	ldr	r3, [pc, #612]	; (80043bc <HAL_ETH_Init+0x2c0>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a98      	ldr	r2, [pc, #608]	; (80043bc <HAL_ETH_Init+0x2c0>)
 800415a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800415e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004160:	4b96      	ldr	r3, [pc, #600]	; (80043bc <HAL_ETH_Init+0x2c0>)
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4994      	ldr	r1, [pc, #592]	; (80043bc <HAL_ETH_Init+0x2c0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004184:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004186:	f7ff f829 	bl	80031dc <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800418c:	e011      	b.n	80041b2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800418e:	f7ff f825 	bl	80031dc <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800419c:	d909      	bls.n	80041b2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2203      	movs	r2, #3
 80041a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e139      	b.n	8004426 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e4      	bne.n	800418e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f023 031c 	bic.w	r3, r3, #28
 80041d2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80041d4:	f003 fc0a 	bl	80079ec <HAL_RCC_GetHCLKFreq>
 80041d8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4a78      	ldr	r2, [pc, #480]	; (80043c0 <HAL_ETH_Init+0x2c4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d908      	bls.n	80041f4 <HAL_ETH_Init+0xf8>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	4a77      	ldr	r2, [pc, #476]	; (80043c4 <HAL_ETH_Init+0x2c8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d804      	bhi.n	80041f4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f043 0308 	orr.w	r3, r3, #8
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e027      	b.n	8004244 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	4a73      	ldr	r2, [pc, #460]	; (80043c4 <HAL_ETH_Init+0x2c8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d908      	bls.n	800420e <HAL_ETH_Init+0x112>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	4a6d      	ldr	r2, [pc, #436]	; (80043b4 <HAL_ETH_Init+0x2b8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d204      	bcs.n	800420e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f043 030c 	orr.w	r3, r3, #12
 800420a:	61fb      	str	r3, [r7, #28]
 800420c:	e01a      	b.n	8004244 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	4a68      	ldr	r2, [pc, #416]	; (80043b4 <HAL_ETH_Init+0x2b8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d303      	bcc.n	800421e <HAL_ETH_Init+0x122>
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	4a6b      	ldr	r2, [pc, #428]	; (80043c8 <HAL_ETH_Init+0x2cc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d911      	bls.n	8004242 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	4a69      	ldr	r2, [pc, #420]	; (80043c8 <HAL_ETH_Init+0x2cc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d908      	bls.n	8004238 <HAL_ETH_Init+0x13c>
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	4a68      	ldr	r2, [pc, #416]	; (80043cc <HAL_ETH_Init+0x2d0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d804      	bhi.n	8004238 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f043 0304 	orr.w	r3, r3, #4
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	e005      	b.n	8004244 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f043 0310 	orr.w	r3, r3, #16
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	e000      	b.n	8004244 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004242:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800424c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004250:	2100      	movs	r1, #0
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f954 	bl	8004500 <HAL_ETH_WritePHYRegister>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004262:	6939      	ldr	r1, [r7, #16]
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f9b1 	bl	80045cc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0d7      	b.n	8004426 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004276:	f640 70ff 	movw	r0, #4095	; 0xfff
 800427a:	f7fe ffbb 	bl	80031f4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80a4 	beq.w	80043d0 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004288:	f7fe ffa8 	bl	80031dc <HAL_GetTick>
 800428c:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800428e:	f107 030c 	add.w	r3, r7, #12
 8004292:	461a      	mov	r2, r3
 8004294:	2101      	movs	r1, #1
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8ca 	bl	8004430 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800429c:	f7fe ff9e 	bl	80031dc <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d90f      	bls.n	80042ce <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80042b2:	6939      	ldr	r1, [r7, #16]
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f989 	bl	80045cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e0ab      	b.n	8004426 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0da      	beq.n	800428e <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80042d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042dc:	2100      	movs	r1, #0
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f90e 	bl	8004500 <HAL_ETH_WritePHYRegister>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80042ee:	6939      	ldr	r1, [r7, #16]
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f96b 	bl	80045cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80042fe:	2301      	movs	r3, #1
 8004300:	e091      	b.n	8004426 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004302:	f7fe ff6b 	bl	80031dc <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004308:	f107 030c 	add.w	r3, r7, #12
 800430c:	461a      	mov	r2, r3
 800430e:	2101      	movs	r1, #1
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f88d 	bl	8004430 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004316:	f7fe ff61 	bl	80031dc <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	; 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d90f      	bls.n	8004348 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800432c:	6939      	ldr	r1, [r7, #16]
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f94c 	bl	80045cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e06e      	b.n	8004426 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0da      	beq.n	8004308 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	461a      	mov	r2, r3
 8004358:	2110      	movs	r1, #16
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f868 	bl	8004430 <HAL_ETH_ReadPHYRegister>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800436a:	6939      	ldr	r1, [r7, #16]
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f92d 	bl	80045cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800437a:	2301      	movs	r3, #1
 800437c:	e053      	b.n	8004426 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800438e:	60da      	str	r2, [r3, #12]
 8004390:	e002      	b.n	8004398 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	e034      	b.n	8004414 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043b0:	609a      	str	r2, [r3, #8]
 80043b2:	e02f      	b.n	8004414 <HAL_ETH_Init+0x318>
 80043b4:	03938700 	.word	0x03938700
 80043b8:	40023800 	.word	0x40023800
 80043bc:	40013800 	.word	0x40013800
 80043c0:	01312cff 	.word	0x01312cff
 80043c4:	02160ebf 	.word	0x02160ebf
 80043c8:	05f5e0ff 	.word	0x05f5e0ff
 80043cc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	08db      	lsrs	r3, r3, #3
 80043d6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	2100      	movs	r1, #0
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f889 	bl	8004500 <HAL_ETH_WritePHYRegister>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80043f8:	6939      	ldr	r1, [r7, #16]
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f8e6 	bl	80045cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e00c      	b.n	8004426 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800440c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004410:	f7fe fef0 	bl	80031f4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004414:	6939      	ldr	r1, [r7, #16]
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f8d8 	bl	80045cc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop

08004430 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	460b      	mov	r3, r1
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b82      	cmp	r3, #130	; 0x82
 8004450:	d101      	bne.n	8004456 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
 8004454:	e050      	b.n	80044f8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2282      	movs	r2, #130	; 0x82
 800445a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 031c 	and.w	r3, r3, #28
 800446c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8a1b      	ldrh	r3, [r3, #16]
 8004472:	02db      	lsls	r3, r3, #11
 8004474:	b29b      	uxth	r3, r3
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800447c:	897b      	ldrh	r3, [r7, #10]
 800447e:	019b      	lsls	r3, r3, #6
 8004480:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 0302 	bic.w	r3, r3, #2
 8004490:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80044a2:	f7fe fe9b 	bl	80031dc <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044a8:	e015      	b.n	80044d6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80044aa:	f7fe fe97 	bl	80031dc <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d309      	bcc.n	80044ce <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e014      	b.n	80044f8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e4      	bne.n	80044aa <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	460b      	mov	r3, r1
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b42      	cmp	r3, #66	; 0x42
 8004520:	d101      	bne.n	8004526 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
 8004524:	e04e      	b.n	80045c4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2242      	movs	r2, #66	; 0x42
 800452a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f003 031c 	and.w	r3, r3, #28
 800453c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8a1b      	ldrh	r3, [r3, #16]
 8004542:	02db      	lsls	r3, r3, #11
 8004544:	b29b      	uxth	r3, r3
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800454c:	897b      	ldrh	r3, [r7, #10]
 800454e:	019b      	lsls	r3, r3, #6
 8004550:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f043 0302 	orr.w	r3, r3, #2
 8004560:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800457c:	f7fe fe2e 	bl	80031dc <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004582:	e015      	b.n	80045b0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004584:	f7fe fe2a 	bl	80031dc <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004592:	d309      	bcc.n	80045a8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e00d      	b.n	80045c4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e4      	bne.n	8004584 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b0b0      	sub	sp, #192	; 0xc0
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d007      	beq.n	80045f2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045e8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80045fa:	2300      	movs	r3, #0
 80045fc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80045fe:	2300      	movs	r3, #0
 8004600:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004602:	2300      	movs	r3, #0
 8004604:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004606:	2300      	movs	r3, #0
 8004608:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004616:	663b      	str	r3, [r7, #96]	; 0x60
 8004618:	e001      	b.n	800461e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800461a:	2300      	movs	r3, #0
 800461c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800461e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004622:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004624:	2300      	movs	r3, #0
 8004626:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004628:	2300      	movs	r3, #0
 800462a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800462c:	2300      	movs	r3, #0
 800462e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004630:	2300      	movs	r3, #0
 8004632:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004634:	2300      	movs	r3, #0
 8004636:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004638:	2340      	movs	r3, #64	; 0x40
 800463a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800463c:	2300      	movs	r3, #0
 800463e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004642:	2300      	movs	r3, #0
 8004644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004648:	2300      	movs	r3, #0
 800464a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800464e:	2300      	movs	r3, #0
 8004650:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004654:	2300      	movs	r3, #0
 8004656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800465a:	2300      	movs	r3, #0
 800465c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004660:	2300      	movs	r3, #0
 8004662:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004666:	2300      	movs	r3, #0
 8004668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004672:	2300      	movs	r3, #0
 8004674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800467e:	2300      	movs	r3, #0
 8004680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004684:	2300      	movs	r3, #0
 8004686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800468a:	2300      	movs	r3, #0
 800468c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004690:	2300      	movs	r3, #0
 8004692:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80046a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046a4:	4bab      	ldr	r3, [pc, #684]	; (8004954 <ETH_MACDMAConfig+0x388>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80046ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80046ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80046b0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80046b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80046b4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80046b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80046b8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80046be:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80046c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80046c2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80046c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80046c6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80046cc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80046ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80046d0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80046d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80046d4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80046d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80046d8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80046da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80046dc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80046de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80046e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80046e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004700:	2001      	movs	r0, #1
 8004702:	f7fe fd77 	bl	80031f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800470e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004710:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004714:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004718:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800471a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800471e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004724:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004726:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800472a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800472c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004730:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004734:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800473c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800473e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800474a:	2001      	movs	r0, #1
 800474c:	f7fe fd52 	bl	80031f4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004758:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004762:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800476c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004778:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800477c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004780:	4013      	ands	r3, r2
 8004782:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004786:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800478a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800478c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004790:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004796:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800479c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800479e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80047a2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80047a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80047a8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80047aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047bc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80047c8:	2001      	movs	r0, #1
 80047ca:	f7fe fd13 	bl	80031f4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047d6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80047d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80047dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047f2:	2001      	movs	r0, #1
 80047f4:	f7fe fcfe 	bl	80031f4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004800:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004806:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800480a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800480c:	2300      	movs	r3, #0
 800480e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004810:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004814:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800481e:	2300      	movs	r3, #0
 8004820:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004822:	2300      	movs	r3, #0
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004826:	2304      	movs	r3, #4
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800482a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004834:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800483c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004846:	2300      	movs	r3, #0
 8004848:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800484a:	2300      	movs	r3, #0
 800484c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	f241 0318 	movw	r3, #4120	; 0x1018
 8004856:	4413      	add	r3, r2
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800485e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004862:	4b3d      	ldr	r3, [pc, #244]	; (8004958 <ETH_MACDMAConfig+0x38c>)
 8004864:	4013      	ands	r3, r2
 8004866:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800486a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800486c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800486e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004870:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004872:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004874:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004876:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004878:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800487a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800487c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800487e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004880:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004882:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004886:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800488a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800488c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	f241 0318 	movw	r3, #4120	; 0x1018
 800489e:	4413      	add	r3, r2
 80048a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	f241 0318 	movw	r3, #4120	; 0x1018
 80048ae:	4413      	add	r3, r2
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80048b6:	2001      	movs	r0, #1
 80048b8:	f7fe fc9c 	bl	80031f4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80048c4:	4413      	add	r3, r2
 80048c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048ca:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80048cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80048d0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80048d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80048d4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80048d8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80048da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80048dc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80048de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80048e2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80048e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80048e6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80048f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004904:	2001      	movs	r0, #1
 8004906:	f7fe fc75 	bl	80031f4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004912:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004916:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d10d      	bne.n	800493c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	f241 031c 	movw	r3, #4124	; 0x101c
 8004928:	4413      	add	r3, r2
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6811      	ldr	r1, [r2, #0]
 8004930:	4a0a      	ldr	r2, [pc, #40]	; (800495c <ETH_MACDMAConfig+0x390>)
 8004932:	431a      	orrs	r2, r3
 8004934:	f241 031c 	movw	r3, #4124	; 0x101c
 8004938:	440b      	add	r3, r1
 800493a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	461a      	mov	r2, r3
 8004942:	2100      	movs	r1, #0
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f80b 	bl	8004960 <ETH_MACAddressConfig>
}
 800494a:	bf00      	nop
 800494c:	37c0      	adds	r7, #192	; 0xc0
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	ff20810f 	.word	0xff20810f
 8004958:	f8de3f23 	.word	0xf8de3f23
 800495c:	00010040 	.word	0x00010040

08004960 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3305      	adds	r3, #5
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	3204      	adds	r2, #4
 8004978:	7812      	ldrb	r2, [r2, #0]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <ETH_MACAddressConfig+0x68>)
 8004982:	4413      	add	r3, r2
 8004984:	461a      	mov	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3303      	adds	r3, #3
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	061a      	lsls	r2, r3, #24
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3302      	adds	r3, #2
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3301      	adds	r3, #1
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	021b      	lsls	r3, r3, #8
 80049a4:	4313      	orrs	r3, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <ETH_MACAddressConfig+0x6c>)
 80049b2:	4413      	add	r3, r2
 80049b4:	461a      	mov	r2, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	6013      	str	r3, [r2, #0]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40028040 	.word	0x40028040
 80049cc:	40028044 	.word	0x40028044

080049d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	; 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	e175      	b.n	8004cdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80049f0:	2201      	movs	r2, #1
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4013      	ands	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	f040 8164 	bne.w	8004cd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d005      	beq.n	8004a26 <HAL_GPIO_Init+0x56>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d130      	bne.n	8004a88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	2203      	movs	r2, #3
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 0201 	and.w	r2, r3, #1
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d017      	beq.n	8004ac4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d123      	bne.n	8004b18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	08da      	lsrs	r2, r3, #3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3208      	adds	r2, #8
 8004ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	220f      	movs	r2, #15
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4013      	ands	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	08da      	lsrs	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3208      	adds	r2, #8
 8004b12:	69b9      	ldr	r1, [r7, #24]
 8004b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	2203      	movs	r2, #3
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 0203 	and.w	r2, r3, #3
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80be 	beq.w	8004cd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b5a:	4b66      	ldr	r3, [pc, #408]	; (8004cf4 <HAL_GPIO_Init+0x324>)
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	4a65      	ldr	r2, [pc, #404]	; (8004cf4 <HAL_GPIO_Init+0x324>)
 8004b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b64:	6453      	str	r3, [r2, #68]	; 0x44
 8004b66:	4b63      	ldr	r3, [pc, #396]	; (8004cf4 <HAL_GPIO_Init+0x324>)
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b72:	4a61      	ldr	r2, [pc, #388]	; (8004cf8 <HAL_GPIO_Init+0x328>)
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	089b      	lsrs	r3, r3, #2
 8004b78:	3302      	adds	r3, #2
 8004b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	220f      	movs	r2, #15
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a58      	ldr	r2, [pc, #352]	; (8004cfc <HAL_GPIO_Init+0x32c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d037      	beq.n	8004c0e <HAL_GPIO_Init+0x23e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a57      	ldr	r2, [pc, #348]	; (8004d00 <HAL_GPIO_Init+0x330>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d031      	beq.n	8004c0a <HAL_GPIO_Init+0x23a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a56      	ldr	r2, [pc, #344]	; (8004d04 <HAL_GPIO_Init+0x334>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d02b      	beq.n	8004c06 <HAL_GPIO_Init+0x236>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a55      	ldr	r2, [pc, #340]	; (8004d08 <HAL_GPIO_Init+0x338>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d025      	beq.n	8004c02 <HAL_GPIO_Init+0x232>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a54      	ldr	r2, [pc, #336]	; (8004d0c <HAL_GPIO_Init+0x33c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01f      	beq.n	8004bfe <HAL_GPIO_Init+0x22e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a53      	ldr	r2, [pc, #332]	; (8004d10 <HAL_GPIO_Init+0x340>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d019      	beq.n	8004bfa <HAL_GPIO_Init+0x22a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a52      	ldr	r2, [pc, #328]	; (8004d14 <HAL_GPIO_Init+0x344>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <HAL_GPIO_Init+0x226>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a51      	ldr	r2, [pc, #324]	; (8004d18 <HAL_GPIO_Init+0x348>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00d      	beq.n	8004bf2 <HAL_GPIO_Init+0x222>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a50      	ldr	r2, [pc, #320]	; (8004d1c <HAL_GPIO_Init+0x34c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d007      	beq.n	8004bee <HAL_GPIO_Init+0x21e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a4f      	ldr	r2, [pc, #316]	; (8004d20 <HAL_GPIO_Init+0x350>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d101      	bne.n	8004bea <HAL_GPIO_Init+0x21a>
 8004be6:	2309      	movs	r3, #9
 8004be8:	e012      	b.n	8004c10 <HAL_GPIO_Init+0x240>
 8004bea:	230a      	movs	r3, #10
 8004bec:	e010      	b.n	8004c10 <HAL_GPIO_Init+0x240>
 8004bee:	2308      	movs	r3, #8
 8004bf0:	e00e      	b.n	8004c10 <HAL_GPIO_Init+0x240>
 8004bf2:	2307      	movs	r3, #7
 8004bf4:	e00c      	b.n	8004c10 <HAL_GPIO_Init+0x240>
 8004bf6:	2306      	movs	r3, #6
 8004bf8:	e00a      	b.n	8004c10 <HAL_GPIO_Init+0x240>
 8004bfa:	2305      	movs	r3, #5
 8004bfc:	e008      	b.n	8004c10 <HAL_GPIO_Init+0x240>
 8004bfe:	2304      	movs	r3, #4
 8004c00:	e006      	b.n	8004c10 <HAL_GPIO_Init+0x240>
 8004c02:	2303      	movs	r3, #3
 8004c04:	e004      	b.n	8004c10 <HAL_GPIO_Init+0x240>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e002      	b.n	8004c10 <HAL_GPIO_Init+0x240>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <HAL_GPIO_Init+0x240>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	f002 0203 	and.w	r2, r2, #3
 8004c16:	0092      	lsls	r2, r2, #2
 8004c18:	4093      	lsls	r3, r2
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c20:	4935      	ldr	r1, [pc, #212]	; (8004cf8 <HAL_GPIO_Init+0x328>)
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	089b      	lsrs	r3, r3, #2
 8004c26:	3302      	adds	r3, #2
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c2e:	4b3d      	ldr	r3, [pc, #244]	; (8004d24 <HAL_GPIO_Init+0x354>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	43db      	mvns	r3, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c52:	4a34      	ldr	r2, [pc, #208]	; (8004d24 <HAL_GPIO_Init+0x354>)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c58:	4b32      	ldr	r3, [pc, #200]	; (8004d24 <HAL_GPIO_Init+0x354>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	43db      	mvns	r3, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4013      	ands	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <HAL_GPIO_Init+0x354>)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c82:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_GPIO_Init+0x354>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ca6:	4a1f      	ldr	r2, [pc, #124]	; (8004d24 <HAL_GPIO_Init+0x354>)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cac:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <HAL_GPIO_Init+0x354>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cd0:	4a14      	ldr	r2, [pc, #80]	; (8004d24 <HAL_GPIO_Init+0x354>)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	f67f ae86 	bls.w	80049f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	3724      	adds	r7, #36	; 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40013800 	.word	0x40013800
 8004cfc:	40020000 	.word	0x40020000
 8004d00:	40020400 	.word	0x40020400
 8004d04:	40020800 	.word	0x40020800
 8004d08:	40020c00 	.word	0x40020c00
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40021400 	.word	0x40021400
 8004d14:	40021800 	.word	0x40021800
 8004d18:	40021c00 	.word	0x40021c00
 8004d1c:	40022000 	.word	0x40022000
 8004d20:	40022400 	.word	0x40022400
 8004d24:	40013c00 	.word	0x40013c00

08004d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	887b      	ldrh	r3, [r7, #2]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	e001      	b.n	8004d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d46:	2300      	movs	r3, #0
 8004d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	807b      	strh	r3, [r7, #2]
 8004d64:	4613      	mov	r3, r2
 8004d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d68:	787b      	ldrb	r3, [r7, #1]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d6e:	887a      	ldrh	r2, [r7, #2]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d74:	e003      	b.n	8004d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d76:	887b      	ldrh	r3, [r7, #2]
 8004d78:	041a      	lsls	r2, r3, #16
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	619a      	str	r2, [r3, #24]
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8c:	b08f      	sub	sp, #60	; 0x3c
 8004d8e:	af0a      	add	r7, sp, #40	; 0x28
 8004d90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e054      	b.n	8004e46 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f00d fdca 	bl	8012950 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f007 fef5 	bl	800cbca <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	687e      	ldr	r6, [r7, #4]
 8004de8:	466d      	mov	r5, sp
 8004dea:	f106 0410 	add.w	r4, r6, #16
 8004dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004df6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dfe:	1d33      	adds	r3, r6, #4
 8004e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e02:	6838      	ldr	r0, [r7, #0]
 8004e04:	f007 fe78 	bl	800caf8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f007 feec 	bl	800cbec <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	603b      	str	r3, [r7, #0]
 8004e1a:	687e      	ldr	r6, [r7, #4]
 8004e1c:	466d      	mov	r5, sp
 8004e1e:	f106 0410 	add.w	r4, r6, #16
 8004e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e32:	1d33      	adds	r3, r6, #4
 8004e34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e36:	6838      	ldr	r0, [r7, #0]
 8004e38:	f008 f86e 	bl	800cf18 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e4e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004e4e:	b590      	push	{r4, r7, lr}
 8004e50:	b089      	sub	sp, #36	; 0x24
 8004e52:	af04      	add	r7, sp, #16
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	4608      	mov	r0, r1
 8004e58:	4611      	mov	r1, r2
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	70fb      	strb	r3, [r7, #3]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70bb      	strb	r3, [r7, #2]
 8004e64:	4613      	mov	r3, r2
 8004e66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_HCD_HC_Init+0x28>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e076      	b.n	8004f64 <HAL_HCD_HC_Init+0x116>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	333d      	adds	r3, #61	; 0x3d
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	212c      	movs	r1, #44	; 0x2c
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3338      	adds	r3, #56	; 0x38
 8004e9e:	787a      	ldrb	r2, [r7, #1]
 8004ea0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	3340      	adds	r3, #64	; 0x40
 8004eb0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004eb2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	212c      	movs	r1, #44	; 0x2c
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3339      	adds	r3, #57	; 0x39
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	212c      	movs	r1, #44	; 0x2c
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	333f      	adds	r3, #63	; 0x3f
 8004ed4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004ed8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	78ba      	ldrb	r2, [r7, #2]
 8004ede:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ee2:	b2d0      	uxtb	r0, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	212c      	movs	r1, #44	; 0x2c
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	4413      	add	r3, r2
 8004eee:	333a      	adds	r3, #58	; 0x3a
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004ef4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da09      	bge.n	8004f10 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	333b      	adds	r3, #59	; 0x3b
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e008      	b.n	8004f22 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	212c      	movs	r1, #44	; 0x2c
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	333b      	adds	r3, #59	; 0x3b
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	212c      	movs	r1, #44	; 0x2c
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	333c      	adds	r3, #60	; 0x3c
 8004f30:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004f34:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	787c      	ldrb	r4, [r7, #1]
 8004f3c:	78ba      	ldrb	r2, [r7, #2]
 8004f3e:	78f9      	ldrb	r1, [r7, #3]
 8004f40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f42:	9302      	str	r3, [sp, #8]
 8004f44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f48:	9301      	str	r3, [sp, #4]
 8004f4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	4623      	mov	r3, r4
 8004f52:	f008 f95b 	bl	800d20c <USB_HC_Init>
 8004f56:	4603      	mov	r3, r0
 8004f58:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd90      	pop	{r4, r7, pc}

08004f6c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_HCD_HC_Halt+0x1e>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e00f      	b.n	8004faa <HAL_HCD_HC_Halt+0x3e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f008 fba7 	bl	800d6ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	70fb      	strb	r3, [r7, #3]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	70bb      	strb	r3, [r7, #2]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	212c      	movs	r1, #44	; 0x2c
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	333b      	adds	r3, #59	; 0x3b
 8004fdc:	78ba      	ldrb	r2, [r7, #2]
 8004fde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	212c      	movs	r1, #44	; 0x2c
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	4413      	add	r3, r2
 8004fec:	333f      	adds	r3, #63	; 0x3f
 8004fee:	787a      	ldrb	r2, [r7, #1]
 8004ff0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004ff2:	7c3b      	ldrb	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d112      	bne.n	800501e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	212c      	movs	r1, #44	; 0x2c
 8004ffe:	fb01 f303 	mul.w	r3, r1, r3
 8005002:	4413      	add	r3, r2
 8005004:	3342      	adds	r3, #66	; 0x42
 8005006:	2203      	movs	r2, #3
 8005008:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	212c      	movs	r1, #44	; 0x2c
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	4413      	add	r3, r2
 8005016:	333d      	adds	r3, #61	; 0x3d
 8005018:	7f3a      	ldrb	r2, [r7, #28]
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	e008      	b.n	8005030 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	212c      	movs	r1, #44	; 0x2c
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	4413      	add	r3, r2
 800502a:	3342      	adds	r3, #66	; 0x42
 800502c:	2202      	movs	r2, #2
 800502e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005030:	787b      	ldrb	r3, [r7, #1]
 8005032:	2b03      	cmp	r3, #3
 8005034:	f200 80c6 	bhi.w	80051c4 <HAL_HCD_HC_SubmitRequest+0x210>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005051 	.word	0x08005051
 8005044:	080051b1 	.word	0x080051b1
 8005048:	080050b5 	.word	0x080050b5
 800504c:	08005133 	.word	0x08005133
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005050:	7c3b      	ldrb	r3, [r7, #16]
 8005052:	2b01      	cmp	r3, #1
 8005054:	f040 80b8 	bne.w	80051c8 <HAL_HCD_HC_SubmitRequest+0x214>
 8005058:	78bb      	ldrb	r3, [r7, #2]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 80b4 	bne.w	80051c8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005060:	8b3b      	ldrh	r3, [r7, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d108      	bne.n	8005078 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	212c      	movs	r1, #44	; 0x2c
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	4413      	add	r3, r2
 8005072:	3355      	adds	r3, #85	; 0x55
 8005074:	2201      	movs	r2, #1
 8005076:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	212c      	movs	r1, #44	; 0x2c
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4413      	add	r3, r2
 8005084:	3355      	adds	r3, #85	; 0x55
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	212c      	movs	r1, #44	; 0x2c
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	4413      	add	r3, r2
 8005098:	3342      	adds	r3, #66	; 0x42
 800509a:	2200      	movs	r2, #0
 800509c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800509e:	e093      	b.n	80051c8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	212c      	movs	r1, #44	; 0x2c
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	3342      	adds	r3, #66	; 0x42
 80050ae:	2202      	movs	r2, #2
 80050b0:	701a      	strb	r2, [r3, #0]
      break;
 80050b2:	e089      	b.n	80051c8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80050b4:	78bb      	ldrb	r3, [r7, #2]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d11d      	bne.n	80050f6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	212c      	movs	r1, #44	; 0x2c
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	4413      	add	r3, r2
 80050c6:	3355      	adds	r3, #85	; 0x55
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	212c      	movs	r1, #44	; 0x2c
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	4413      	add	r3, r2
 80050da:	3342      	adds	r3, #66	; 0x42
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80050e0:	e073      	b.n	80051ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	212c      	movs	r1, #44	; 0x2c
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	4413      	add	r3, r2
 80050ee:	3342      	adds	r3, #66	; 0x42
 80050f0:	2202      	movs	r2, #2
 80050f2:	701a      	strb	r2, [r3, #0]
      break;
 80050f4:	e069      	b.n	80051ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	212c      	movs	r1, #44	; 0x2c
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	4413      	add	r3, r2
 8005102:	3354      	adds	r3, #84	; 0x54
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	212c      	movs	r1, #44	; 0x2c
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	4413      	add	r3, r2
 8005116:	3342      	adds	r3, #66	; 0x42
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
      break;
 800511c:	e055      	b.n	80051ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	212c      	movs	r1, #44	; 0x2c
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	4413      	add	r3, r2
 800512a:	3342      	adds	r3, #66	; 0x42
 800512c:	2202      	movs	r2, #2
 800512e:	701a      	strb	r2, [r3, #0]
      break;
 8005130:	e04b      	b.n	80051ca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005132:	78bb      	ldrb	r3, [r7, #2]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d11d      	bne.n	8005174 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	212c      	movs	r1, #44	; 0x2c
 800513e:	fb01 f303 	mul.w	r3, r1, r3
 8005142:	4413      	add	r3, r2
 8005144:	3355      	adds	r3, #85	; 0x55
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d109      	bne.n	8005160 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	212c      	movs	r1, #44	; 0x2c
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	4413      	add	r3, r2
 8005158:	3342      	adds	r3, #66	; 0x42
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800515e:	e034      	b.n	80051ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	212c      	movs	r1, #44	; 0x2c
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	3342      	adds	r3, #66	; 0x42
 800516e:	2202      	movs	r2, #2
 8005170:	701a      	strb	r2, [r3, #0]
      break;
 8005172:	e02a      	b.n	80051ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	212c      	movs	r1, #44	; 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	3354      	adds	r3, #84	; 0x54
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d109      	bne.n	800519c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	3342      	adds	r3, #66	; 0x42
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
      break;
 800519a:	e016      	b.n	80051ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	212c      	movs	r1, #44	; 0x2c
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	4413      	add	r3, r2
 80051a8:	3342      	adds	r3, #66	; 0x42
 80051aa:	2202      	movs	r2, #2
 80051ac:	701a      	strb	r2, [r3, #0]
      break;
 80051ae:	e00c      	b.n	80051ca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	3342      	adds	r3, #66	; 0x42
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
      break;
 80051c2:	e002      	b.n	80051ca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80051c4:	bf00      	nop
 80051c6:	e000      	b.n	80051ca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80051c8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	212c      	movs	r1, #44	; 0x2c
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	4413      	add	r3, r2
 80051d6:	3344      	adds	r3, #68	; 0x44
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	8b3a      	ldrh	r2, [r7, #24]
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	202c      	movs	r0, #44	; 0x2c
 80051e4:	fb00 f303 	mul.w	r3, r0, r3
 80051e8:	440b      	add	r3, r1
 80051ea:	334c      	adds	r3, #76	; 0x4c
 80051ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80051ee:	78fb      	ldrb	r3, [r7, #3]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	212c      	movs	r1, #44	; 0x2c
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
 80051f8:	4413      	add	r3, r2
 80051fa:	3360      	adds	r3, #96	; 0x60
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	212c      	movs	r1, #44	; 0x2c
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	4413      	add	r3, r2
 800520c:	3350      	adds	r3, #80	; 0x50
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	212c      	movs	r1, #44	; 0x2c
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	4413      	add	r3, r2
 800521e:	3339      	adds	r3, #57	; 0x39
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	212c      	movs	r1, #44	; 0x2c
 800522a:	fb01 f303 	mul.w	r3, r1, r3
 800522e:	4413      	add	r3, r2
 8005230:	3361      	adds	r3, #97	; 0x61
 8005232:	2200      	movs	r2, #0
 8005234:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	222c      	movs	r2, #44	; 0x2c
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	3338      	adds	r3, #56	; 0x38
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	18d1      	adds	r1, r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	f008 f8fa 	bl	800d448 <USB_HC_StartXfer>
 8005254:	4603      	mov	r3, r0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop

08005260 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f007 fe0d 	bl	800ce96 <USB_GetMode>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	f040 80f6 	bne.w	8005470 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f007 fdf1 	bl	800ce70 <USB_ReadInterrupts>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80ec 	beq.w	800546e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f007 fde8 	bl	800ce70 <USB_ReadInterrupts>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052aa:	d104      	bne.n	80052b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80052b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f007 fdd8 	bl	800ce70 <USB_ReadInterrupts>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ca:	d104      	bne.n	80052d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f007 fdc8 	bl	800ce70 <USB_ReadInterrupts>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ea:	d104      	bne.n	80052f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80052f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f007 fdb8 	bl	800ce70 <USB_ReadInterrupts>
 8005300:	4603      	mov	r3, r0
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d103      	bne.n	8005312 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2202      	movs	r2, #2
 8005310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f007 fdaa 	bl	800ce70 <USB_ReadInterrupts>
 800531c:	4603      	mov	r3, r0
 800531e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005326:	d11c      	bne.n	8005362 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005330:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10f      	bne.n	8005362 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005342:	2110      	movs	r1, #16
 8005344:	6938      	ldr	r0, [r7, #16]
 8005346:	f007 fc9d 	bl	800cc84 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800534a:	6938      	ldr	r0, [r7, #16]
 800534c:	f007 fccc 	bl	800cce8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2101      	movs	r1, #1
 8005356:	4618      	mov	r0, r3
 8005358:	f007 fe92 	bl	800d080 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f00d fb69 	bl	8012a34 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f007 fd82 	bl	800ce70 <USB_ReadInterrupts>
 800536c:	4603      	mov	r3, r0
 800536e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005372:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005376:	d102      	bne.n	800537e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 f8ca 	bl	8006512 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f007 fd74 	bl	800ce70 <USB_ReadInterrupts>
 8005388:	4603      	mov	r3, r0
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b08      	cmp	r3, #8
 8005390:	d106      	bne.n	80053a0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f00d fb32 	bl	80129fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2208      	movs	r2, #8
 800539e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f007 fd63 	bl	800ce70 <USB_ReadInterrupts>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d101      	bne.n	80053b8 <HAL_HCD_IRQHandler+0x158>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <HAL_HCD_IRQHandler+0x15a>
 80053b8:	2300      	movs	r3, #0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d012      	beq.n	80053e4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0210 	bic.w	r2, r2, #16
 80053cc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 ffcd 	bl	800636e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0210 	orr.w	r2, r2, #16
 80053e2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f007 fd41 	bl	800ce70 <USB_ReadInterrupts>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053f8:	d13a      	bne.n	8005470 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f008 f964 	bl	800d6cc <USB_HC_ReadInterrupt>
 8005404:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e025      	b.n	8005458 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d018      	beq.n	8005452 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005436:	d106      	bne.n	8005446 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	4619      	mov	r1, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f8ab 	bl	800559a <HCD_HC_IN_IRQHandler>
 8005444:	e005      	b.n	8005452 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fc25 	bl	8005c9c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	3301      	adds	r3, #1
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	429a      	cmp	r2, r3
 8005460:	d3d4      	bcc.n	800540c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800546a:	615a      	str	r2, [r3, #20]
 800546c:	e000      	b.n	8005470 <HAL_HCD_IRQHandler+0x210>
      return;
 800546e:	bf00      	nop
    }
  }
}
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_HCD_Start+0x16>
 8005488:	2302      	movs	r3, #2
 800548a:	e013      	b.n	80054b4 <HAL_HCD_Start+0x3e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2101      	movs	r1, #1
 800549a:	4618      	mov	r0, r3
 800549c:	f007 fe54 	bl	800d148 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f007 fb7f 	bl	800cba8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_HCD_Stop+0x16>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e00d      	b.n	80054ee <HAL_HCD_Stop+0x32>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f008 fa3c 	bl	800d95c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f007 fdf6 	bl	800d0f4 <USB_ResetPort>
 8005508:	4603      	mov	r3, r0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	212c      	movs	r1, #44	; 0x2c
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	4413      	add	r3, r2
 800552a:	3360      	adds	r3, #96	; 0x60
 800552c:	781b      	ldrb	r3, [r3, #0]
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	212c      	movs	r1, #44	; 0x2c
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	4413      	add	r3, r2
 8005552:	3350      	adds	r3, #80	; 0x50
 8005554:	681b      	ldr	r3, [r3, #0]
}
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f007 fe3a 	bl	800d1e8 <USB_GetCurrentFrame>
 8005574:	4603      	mov	r3, r0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f007 fe15 	bl	800d1ba <USB_GetHostSpeed>
 8005590:	4603      	mov	r3, r0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	460b      	mov	r3, r1
 80055a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d11a      	bne.n	8005600 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d6:	461a      	mov	r2, r3
 80055d8:	2304      	movs	r3, #4
 80055da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	212c      	movs	r1, #44	; 0x2c
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
 80055e6:	4413      	add	r3, r2
 80055e8:	3361      	adds	r3, #97	; 0x61
 80055ea:	2206      	movs	r2, #6
 80055ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	4611      	mov	r1, r2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f008 f878 	bl	800d6ee <USB_HC_Halt>
 80055fe:	e0af      	b.n	8005760 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005616:	d11b      	bne.n	8005650 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005624:	461a      	mov	r2, r3
 8005626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800562a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	212c      	movs	r1, #44	; 0x2c
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	3361      	adds	r3, #97	; 0x61
 800563a:	2207      	movs	r2, #7
 800563c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f008 f850 	bl	800d6ee <USB_HC_Halt>
 800564e:	e087      	b.n	8005760 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b20      	cmp	r3, #32
 8005664:	d109      	bne.n	800567a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005672:	461a      	mov	r2, r3
 8005674:	2320      	movs	r3, #32
 8005676:	6093      	str	r3, [r2, #8]
 8005678:	e072      	b.n	8005760 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	4413      	add	r3, r2
 8005682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b08      	cmp	r3, #8
 800568e:	d11a      	bne.n	80056c6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569c:	461a      	mov	r2, r3
 800569e:	2308      	movs	r3, #8
 80056a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	212c      	movs	r1, #44	; 0x2c
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	3361      	adds	r3, #97	; 0x61
 80056b0:	2205      	movs	r2, #5
 80056b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	4611      	mov	r1, r2
 80056be:	4618      	mov	r0, r3
 80056c0:	f008 f815 	bl	800d6ee <USB_HC_Halt>
 80056c4:	e04c      	b.n	8005760 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056dc:	d11b      	bne.n	8005716 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ea:	461a      	mov	r2, r3
 80056ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	212c      	movs	r1, #44	; 0x2c
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	4413      	add	r3, r2
 80056fe:	3361      	adds	r3, #97	; 0x61
 8005700:	2208      	movs	r2, #8
 8005702:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	4611      	mov	r1, r2
 800570e:	4618      	mov	r0, r3
 8005710:	f007 ffed 	bl	800d6ee <USB_HC_Halt>
 8005714:	e024      	b.n	8005760 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4413      	add	r3, r2
 800571e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005728:	2b80      	cmp	r3, #128	; 0x80
 800572a:	d119      	bne.n	8005760 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4413      	add	r3, r2
 8005734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005738:	461a      	mov	r2, r3
 800573a:	2380      	movs	r3, #128	; 0x80
 800573c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	212c      	movs	r1, #44	; 0x2c
 8005744:	fb01 f303 	mul.w	r3, r1, r3
 8005748:	4413      	add	r3, r2
 800574a:	3361      	adds	r3, #97	; 0x61
 800574c:	2206      	movs	r2, #6
 800574e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	4611      	mov	r1, r2
 800575a:	4618      	mov	r0, r3
 800575c:	f007 ffc7 	bl	800d6ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005776:	d112      	bne.n	800579e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	4611      	mov	r1, r2
 8005782:	4618      	mov	r0, r3
 8005784:	f007 ffb3 	bl	800d6ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4413      	add	r3, r2
 8005790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005794:	461a      	mov	r2, r3
 8005796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800579a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800579c:	e27a      	b.n	8005c94 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	f040 810b 	bne.w	80059cc <HCD_HC_IN_IRQHandler+0x432>
    if (hhcd->Init.dma_enable != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d019      	beq.n	80057f2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	212c      	movs	r1, #44	; 0x2c
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	4413      	add	r3, r2
 80057ca:	3348      	adds	r3, #72	; 0x48
 80057cc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	0159      	lsls	r1, r3, #5
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	440b      	add	r3, r1
 80057d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80057e0:	1ad2      	subs	r2, r2, r3
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	202c      	movs	r0, #44	; 0x2c
 80057e8:	fb00 f303 	mul.w	r3, r0, r3
 80057ec:	440b      	add	r3, r1
 80057ee:	3350      	adds	r3, #80	; 0x50
 80057f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	212c      	movs	r1, #44	; 0x2c
 80057f8:	fb01 f303 	mul.w	r3, r1, r3
 80057fc:	4413      	add	r3, r2
 80057fe:	3361      	adds	r3, #97	; 0x61
 8005800:	2201      	movs	r2, #1
 8005802:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	212c      	movs	r1, #44	; 0x2c
 800580a:	fb01 f303 	mul.w	r3, r1, r3
 800580e:	4413      	add	r3, r2
 8005810:	335c      	adds	r3, #92	; 0x5c
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4413      	add	r3, r2
 800581e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005822:	461a      	mov	r2, r3
 8005824:	2301      	movs	r3, #1
 8005826:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	212c      	movs	r1, #44	; 0x2c
 800582e:	fb01 f303 	mul.w	r3, r1, r3
 8005832:	4413      	add	r3, r2
 8005834:	333f      	adds	r3, #63	; 0x3f
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d009      	beq.n	8005850 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	212c      	movs	r1, #44	; 0x2c
 8005842:	fb01 f303 	mul.w	r3, r1, r3
 8005846:	4413      	add	r3, r2
 8005848:	333f      	adds	r3, #63	; 0x3f
 800584a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800584c:	2b02      	cmp	r3, #2
 800584e:	d111      	bne.n	8005874 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	4611      	mov	r1, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f007 ff47 	bl	800d6ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	4413      	add	r3, r2
 8005868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586c:	461a      	mov	r2, r3
 800586e:	2310      	movs	r3, #16
 8005870:	6093      	str	r3, [r2, #8]
 8005872:	e066      	b.n	8005942 <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	212c      	movs	r1, #44	; 0x2c
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	4413      	add	r3, r2
 8005880:	333f      	adds	r3, #63	; 0x3f
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b03      	cmp	r3, #3
 8005886:	d127      	bne.n	80058d8 <HCD_HC_IN_IRQHandler+0x33e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	440a      	add	r2, r1
 800589e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	212c      	movs	r1, #44	; 0x2c
 80058ae:	fb01 f303 	mul.w	r3, r1, r3
 80058b2:	4413      	add	r3, r2
 80058b4:	3360      	adds	r3, #96	; 0x60
 80058b6:	2201      	movs	r2, #1
 80058b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	b2d9      	uxtb	r1, r3
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	202c      	movs	r0, #44	; 0x2c
 80058c4:	fb00 f303 	mul.w	r3, r0, r3
 80058c8:	4413      	add	r3, r2
 80058ca:	3360      	adds	r3, #96	; 0x60
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f00d f8bd 	bl	8012a50 <HAL_HCD_HC_NotifyURBChange_Callback>
 80058d6:	e034      	b.n	8005942 <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	212c      	movs	r1, #44	; 0x2c
 80058de:	fb01 f303 	mul.w	r3, r1, r3
 80058e2:	4413      	add	r3, r2
 80058e4:	333f      	adds	r3, #63	; 0x3f
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d12a      	bne.n	8005942 <HCD_HC_IN_IRQHandler+0x3a8>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	212c      	movs	r1, #44	; 0x2c
 80058f2:	fb01 f303 	mul.w	r3, r1, r3
 80058f6:	4413      	add	r3, r2
 80058f8:	3360      	adds	r3, #96	; 0x60
 80058fa:	2201      	movs	r2, #1
 80058fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	212c      	movs	r1, #44	; 0x2c
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	4413      	add	r3, r2
 800590a:	3354      	adds	r3, #84	; 0x54
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f083 0301 	eor.w	r3, r3, #1
 8005912:	b2d8      	uxtb	r0, r3
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	212c      	movs	r1, #44	; 0x2c
 800591a:	fb01 f303 	mul.w	r3, r1, r3
 800591e:	4413      	add	r3, r2
 8005920:	3354      	adds	r3, #84	; 0x54
 8005922:	4602      	mov	r2, r0
 8005924:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	b2d9      	uxtb	r1, r3
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	202c      	movs	r0, #44	; 0x2c
 8005930:	fb00 f303 	mul.w	r3, r0, r3
 8005934:	4413      	add	r3, r2
 8005936:	3360      	adds	r3, #96	; 0x60
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f00d f887 	bl	8012a50 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d12b      	bne.n	80059a2 <HCD_HC_IN_IRQHandler+0x408>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	212c      	movs	r1, #44	; 0x2c
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	4413      	add	r3, r2
 8005956:	3348      	adds	r3, #72	; 0x48
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	202c      	movs	r0, #44	; 0x2c
 8005960:	fb00 f202 	mul.w	r2, r0, r2
 8005964:	440a      	add	r2, r1
 8005966:	3240      	adds	r2, #64	; 0x40
 8005968:	8812      	ldrh	r2, [r2, #0]
 800596a:	fbb3 f3f2 	udiv	r3, r3, r2
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 818e 	beq.w	8005c94 <HCD_HC_IN_IRQHandler+0x6fa>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	212c      	movs	r1, #44	; 0x2c
 800597e:	fb01 f303 	mul.w	r3, r1, r3
 8005982:	4413      	add	r3, r2
 8005984:	3354      	adds	r3, #84	; 0x54
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	f083 0301 	eor.w	r3, r3, #1
 800598c:	b2d8      	uxtb	r0, r3
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	212c      	movs	r1, #44	; 0x2c
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	4413      	add	r3, r2
 800599a:	3354      	adds	r3, #84	; 0x54
 800599c:	4602      	mov	r2, r0
 800599e:	701a      	strb	r2, [r3, #0]
}
 80059a0:	e178      	b.n	8005c94 <HCD_HC_IN_IRQHandler+0x6fa>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	212c      	movs	r1, #44	; 0x2c
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	4413      	add	r3, r2
 80059ae:	3354      	adds	r3, #84	; 0x54
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	f083 0301 	eor.w	r3, r3, #1
 80059b6:	b2d8      	uxtb	r0, r3
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	212c      	movs	r1, #44	; 0x2c
 80059be:	fb01 f303 	mul.w	r3, r1, r3
 80059c2:	4413      	add	r3, r2
 80059c4:	3354      	adds	r3, #84	; 0x54
 80059c6:	4602      	mov	r2, r0
 80059c8:	701a      	strb	r2, [r3, #0]
}
 80059ca:	e163      	b.n	8005c94 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b02      	cmp	r3, #2
 80059e0:	f040 80f6 	bne.w	8005bd0 <HCD_HC_IN_IRQHandler+0x636>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	212c      	movs	r1, #44	; 0x2c
 80059ea:	fb01 f303 	mul.w	r3, r1, r3
 80059ee:	4413      	add	r3, r2
 80059f0:	3361      	adds	r3, #97	; 0x61
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d109      	bne.n	8005a0c <HCD_HC_IN_IRQHandler+0x472>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	212c      	movs	r1, #44	; 0x2c
 80059fe:	fb01 f303 	mul.w	r3, r1, r3
 8005a02:	4413      	add	r3, r2
 8005a04:	3360      	adds	r3, #96	; 0x60
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	e0c9      	b.n	8005ba0 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	212c      	movs	r1, #44	; 0x2c
 8005a12:	fb01 f303 	mul.w	r3, r1, r3
 8005a16:	4413      	add	r3, r2
 8005a18:	3361      	adds	r3, #97	; 0x61
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b05      	cmp	r3, #5
 8005a1e:	d109      	bne.n	8005a34 <HCD_HC_IN_IRQHandler+0x49a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	212c      	movs	r1, #44	; 0x2c
 8005a26:	fb01 f303 	mul.w	r3, r1, r3
 8005a2a:	4413      	add	r3, r2
 8005a2c:	3360      	adds	r3, #96	; 0x60
 8005a2e:	2205      	movs	r2, #5
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e0b5      	b.n	8005ba0 <HCD_HC_IN_IRQHandler+0x606>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	212c      	movs	r1, #44	; 0x2c
 8005a3a:	fb01 f303 	mul.w	r3, r1, r3
 8005a3e:	4413      	add	r3, r2
 8005a40:	3361      	adds	r3, #97	; 0x61
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b06      	cmp	r3, #6
 8005a46:	d009      	beq.n	8005a5c <HCD_HC_IN_IRQHandler+0x4c2>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	212c      	movs	r1, #44	; 0x2c
 8005a4e:	fb01 f303 	mul.w	r3, r1, r3
 8005a52:	4413      	add	r3, r2
 8005a54:	3361      	adds	r3, #97	; 0x61
 8005a56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d150      	bne.n	8005afe <HCD_HC_IN_IRQHandler+0x564>
      hhcd->hc[ch_num].ErrCnt++;
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	212c      	movs	r1, #44	; 0x2c
 8005a62:	fb01 f303 	mul.w	r3, r1, r3
 8005a66:	4413      	add	r3, r2
 8005a68:	335c      	adds	r3, #92	; 0x5c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	202c      	movs	r0, #44	; 0x2c
 8005a74:	fb00 f303 	mul.w	r3, r0, r3
 8005a78:	440b      	add	r3, r1
 8005a7a:	335c      	adds	r3, #92	; 0x5c
 8005a7c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	212c      	movs	r1, #44	; 0x2c
 8005a84:	fb01 f303 	mul.w	r3, r1, r3
 8005a88:	4413      	add	r3, r2
 8005a8a:	335c      	adds	r3, #92	; 0x5c
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d912      	bls.n	8005ab8 <HCD_HC_IN_IRQHandler+0x51e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	212c      	movs	r1, #44	; 0x2c
 8005a98:	fb01 f303 	mul.w	r3, r1, r3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	335c      	adds	r3, #92	; 0x5c
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	212c      	movs	r1, #44	; 0x2c
 8005aaa:	fb01 f303 	mul.w	r3, r1, r3
 8005aae:	4413      	add	r3, r2
 8005ab0:	3360      	adds	r3, #96	; 0x60
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005ab6:	e073      	b.n	8005ba0 <HCD_HC_IN_IRQHandler+0x606>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	212c      	movs	r1, #44	; 0x2c
 8005abe:	fb01 f303 	mul.w	r3, r1, r3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	3360      	adds	r3, #96	; 0x60
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ae0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ae8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af6:	461a      	mov	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005afc:	e050      	b.n	8005ba0 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	212c      	movs	r1, #44	; 0x2c
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	4413      	add	r3, r2
 8005b0a:	3361      	adds	r3, #97	; 0x61
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d122      	bne.n	8005b58 <HCD_HC_IN_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	212c      	movs	r1, #44	; 0x2c
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3360      	adds	r3, #96	; 0x60
 8005b20:	2202      	movs	r2, #2
 8005b22:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b3a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b42:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b50:	461a      	mov	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	e023      	b.n	8005ba0 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	212c      	movs	r1, #44	; 0x2c
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	4413      	add	r3, r2
 8005b64:	3361      	adds	r3, #97	; 0x61
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b07      	cmp	r3, #7
 8005b6a:	d119      	bne.n	8005ba0 <HCD_HC_IN_IRQHandler+0x606>
      hhcd->hc[ch_num].ErrCnt++;
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	212c      	movs	r1, #44	; 0x2c
 8005b72:	fb01 f303 	mul.w	r3, r1, r3
 8005b76:	4413      	add	r3, r2
 8005b78:	335c      	adds	r3, #92	; 0x5c
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	202c      	movs	r0, #44	; 0x2c
 8005b84:	fb00 f303 	mul.w	r3, r0, r3
 8005b88:	440b      	add	r3, r1
 8005b8a:	335c      	adds	r3, #92	; 0x5c
 8005b8c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	212c      	movs	r1, #44	; 0x2c
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	3360      	adds	r3, #96	; 0x60
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bac:	461a      	mov	r2, r3
 8005bae:	2302      	movs	r3, #2
 8005bb0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	b2d9      	uxtb	r1, r3
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	202c      	movs	r0, #44	; 0x2c
 8005bbc:	fb00 f303 	mul.w	r3, r0, r3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3360      	adds	r3, #96	; 0x60
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f00c ff41 	bl	8012a50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005bce:	e061      	b.n	8005c94 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b10      	cmp	r3, #16
 8005be4:	d156      	bne.n	8005c94 <HCD_HC_IN_IRQHandler+0x6fa>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	212c      	movs	r1, #44	; 0x2c
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	333f      	adds	r3, #63	; 0x3f
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d111      	bne.n	8005c1e <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	212c      	movs	r1, #44	; 0x2c
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	4413      	add	r3, r2
 8005c06:	335c      	adds	r3, #92	; 0x5c
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	4611      	mov	r1, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f007 fd69 	bl	800d6ee <USB_HC_Halt>
 8005c1c:	e031      	b.n	8005c82 <HCD_HC_IN_IRQHandler+0x6e8>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	212c      	movs	r1, #44	; 0x2c
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	4413      	add	r3, r2
 8005c2a:	333f      	adds	r3, #63	; 0x3f
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HCD_HC_IN_IRQHandler+0x6ac>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	212c      	movs	r1, #44	; 0x2c
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	333f      	adds	r3, #63	; 0x3f
 8005c40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d11d      	bne.n	8005c82 <HCD_HC_IN_IRQHandler+0x6e8>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	212c      	movs	r1, #44	; 0x2c
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	335c      	adds	r3, #92	; 0x5c
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d110      	bne.n	8005c82 <HCD_HC_IN_IRQHandler+0x6e8>
        hhcd->hc[ch_num].state = HC_NAK;
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	212c      	movs	r1, #44	; 0x2c
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3361      	adds	r3, #97	; 0x61
 8005c6e:	2203      	movs	r2, #3
 8005c70:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f007 fd36 	bl	800d6ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2310      	movs	r3, #16
 8005c92:	6093      	str	r3, [r2, #8]
}
 8005c94:	bf00      	nop
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d11a      	bne.n	8005d02 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2304      	movs	r3, #4
 8005cdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	212c      	movs	r1, #44	; 0x2c
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	4413      	add	r3, r2
 8005cea:	3361      	adds	r3, #97	; 0x61
 8005cec:	2206      	movs	r2, #6
 8005cee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f007 fcf7 	bl	800d6ee <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005d00:	e331      	b.n	8006366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d12e      	bne.n	8005d76 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	461a      	mov	r2, r3
 8005d26:	2320      	movs	r3, #32
 8005d28:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	212c      	movs	r1, #44	; 0x2c
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	4413      	add	r3, r2
 8005d36:	333d      	adds	r3, #61	; 0x3d
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	f040 8313 	bne.w	8006366 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	212c      	movs	r1, #44	; 0x2c
 8005d46:	fb01 f303 	mul.w	r3, r1, r3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	333d      	adds	r3, #61	; 0x3d
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	212c      	movs	r1, #44	; 0x2c
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	3360      	adds	r3, #96	; 0x60
 8005d60:	2202      	movs	r2, #2
 8005d62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f007 fcbd 	bl	800d6ee <USB_HC_Halt>
}
 8005d74:	e2f7      	b.n	8006366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d8c:	d112      	bne.n	8005db4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005da0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	4611      	mov	r1, r2
 8005dac:	4618      	mov	r0, r3
 8005dae:	f007 fc9e 	bl	800d6ee <USB_HC_Halt>
}
 8005db2:	e2d8      	b.n	8006366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d140      	bne.n	8005e4c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	212c      	movs	r1, #44	; 0x2c
 8005dd0:	fb01 f303 	mul.w	r3, r1, r3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	335c      	adds	r3, #92	; 0x5c
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d111      	bne.n	8005e16 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	212c      	movs	r1, #44	; 0x2c
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	333d      	adds	r3, #61	; 0x3d
 8005e00:	2201      	movs	r2, #1
 8005e02:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e10:	461a      	mov	r2, r3
 8005e12:	2340      	movs	r3, #64	; 0x40
 8005e14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e22:	461a      	mov	r2, r3
 8005e24:	2301      	movs	r3, #1
 8005e26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	212c      	movs	r1, #44	; 0x2c
 8005e2e:	fb01 f303 	mul.w	r3, r1, r3
 8005e32:	4413      	add	r3, r2
 8005e34:	3361      	adds	r3, #97	; 0x61
 8005e36:	2201      	movs	r2, #1
 8005e38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f007 fc52 	bl	800d6ee <USB_HC_Halt>
}
 8005e4a:	e28c      	b.n	8006366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d12c      	bne.n	8005ebc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	212c      	movs	r1, #44	; 0x2c
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	3361      	adds	r3, #97	; 0x61
 8005e70:	2204      	movs	r2, #4
 8005e72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	212c      	movs	r1, #44	; 0x2c
 8005e7a:	fb01 f303 	mul.w	r3, r1, r3
 8005e7e:	4413      	add	r3, r2
 8005e80:	333d      	adds	r3, #61	; 0x3d
 8005e82:	2201      	movs	r2, #1
 8005e84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	212c      	movs	r1, #44	; 0x2c
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	4413      	add	r3, r2
 8005e92:	335c      	adds	r3, #92	; 0x5c
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f007 fc23 	bl	800d6ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	2340      	movs	r3, #64	; 0x40
 8005eb8:	6093      	str	r3, [r2, #8]
}
 8005eba:	e254      	b.n	8006366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d11a      	bne.n	8005f08 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	212c      	movs	r1, #44	; 0x2c
 8005eea:	fb01 f303 	mul.w	r3, r1, r3
 8005eee:	4413      	add	r3, r2
 8005ef0:	3361      	adds	r3, #97	; 0x61
 8005ef2:	2205      	movs	r2, #5
 8005ef4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	4611      	mov	r1, r2
 8005f00:	4618      	mov	r0, r3
 8005f02:	f007 fbf4 	bl	800d6ee <USB_HC_Halt>
}
 8005f06:	e22e      	b.n	8006366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	2b10      	cmp	r3, #16
 8005f1c:	d140      	bne.n	8005fa0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	212c      	movs	r1, #44	; 0x2c
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	4413      	add	r3, r2
 8005f2a:	335c      	adds	r3, #92	; 0x5c
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	212c      	movs	r1, #44	; 0x2c
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3361      	adds	r3, #97	; 0x61
 8005f3e:	2203      	movs	r2, #3
 8005f40:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	212c      	movs	r1, #44	; 0x2c
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	333d      	adds	r3, #61	; 0x3d
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d112      	bne.n	8005f7c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	212c      	movs	r1, #44	; 0x2c
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	4413      	add	r3, r2
 8005f62:	333c      	adds	r3, #60	; 0x3c
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d108      	bne.n	8005f7c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	212c      	movs	r1, #44	; 0x2c
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	333d      	adds	r3, #61	; 0x3d
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	4611      	mov	r1, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f007 fbb1 	bl	800d6ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	6093      	str	r3, [r2, #8]
}
 8005f9e:	e1e2      	b.n	8006366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb2:	2b80      	cmp	r3, #128	; 0x80
 8005fb4:	d164      	bne.n	8006080 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d111      	bne.n	8005fe2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	212c      	movs	r1, #44	; 0x2c
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	4413      	add	r3, r2
 8005fca:	3361      	adds	r3, #97	; 0x61
 8005fcc:	2206      	movs	r2, #6
 8005fce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f007 fb87 	bl	800d6ee <USB_HC_Halt>
 8005fe0:	e044      	b.n	800606c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	212c      	movs	r1, #44	; 0x2c
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	4413      	add	r3, r2
 8005fee:	335c      	adds	r3, #92	; 0x5c
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	202c      	movs	r0, #44	; 0x2c
 8005ffa:	fb00 f303 	mul.w	r3, r0, r3
 8005ffe:	440b      	add	r3, r1
 8006000:	335c      	adds	r3, #92	; 0x5c
 8006002:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	212c      	movs	r1, #44	; 0x2c
 800600a:	fb01 f303 	mul.w	r3, r1, r3
 800600e:	4413      	add	r3, r2
 8006010:	335c      	adds	r3, #92	; 0x5c
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d920      	bls.n	800605a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	212c      	movs	r1, #44	; 0x2c
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	4413      	add	r3, r2
 8006024:	335c      	adds	r3, #92	; 0x5c
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	212c      	movs	r1, #44	; 0x2c
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	4413      	add	r3, r2
 8006036:	3360      	adds	r3, #96	; 0x60
 8006038:	2204      	movs	r2, #4
 800603a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	b2d9      	uxtb	r1, r3
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	202c      	movs	r0, #44	; 0x2c
 8006046:	fb00 f303 	mul.w	r3, r0, r3
 800604a:	4413      	add	r3, r2
 800604c:	3360      	adds	r3, #96	; 0x60
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f00c fcfc 	bl	8012a50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006058:	e008      	b.n	800606c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	212c      	movs	r1, #44	; 0x2c
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	4413      	add	r3, r2
 8006066:	3360      	adds	r3, #96	; 0x60
 8006068:	2202      	movs	r2, #2
 800606a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006078:	461a      	mov	r2, r3
 800607a:	2380      	movs	r3, #128	; 0x80
 800607c:	6093      	str	r3, [r2, #8]
}
 800607e:	e172      	b.n	8006366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	4413      	add	r3, r2
 8006088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006096:	d11b      	bne.n	80060d0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	212c      	movs	r1, #44	; 0x2c
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	3361      	adds	r3, #97	; 0x61
 80060a6:	2208      	movs	r2, #8
 80060a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	4611      	mov	r1, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f007 fb1a 	bl	800d6ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c6:	461a      	mov	r2, r3
 80060c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060cc:	6093      	str	r3, [r2, #8]
}
 80060ce:	e14a      	b.n	8006366 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	f040 813f 	bne.w	8006366 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	212c      	movs	r1, #44	; 0x2c
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	4413      	add	r3, r2
 80060f4:	3361      	adds	r3, #97	; 0x61
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d17d      	bne.n	80061f8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	212c      	movs	r1, #44	; 0x2c
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	4413      	add	r3, r2
 8006108:	3360      	adds	r3, #96	; 0x60
 800610a:	2201      	movs	r2, #1
 800610c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	212c      	movs	r1, #44	; 0x2c
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	4413      	add	r3, r2
 800611a:	333f      	adds	r3, #63	; 0x3f
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d00a      	beq.n	8006138 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	212c      	movs	r1, #44	; 0x2c
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	4413      	add	r3, r2
 800612e:	333f      	adds	r3, #63	; 0x3f
 8006130:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006132:	2b03      	cmp	r3, #3
 8006134:	f040 8100 	bne.w	8006338 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d113      	bne.n	8006168 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	212c      	movs	r1, #44	; 0x2c
 8006146:	fb01 f303 	mul.w	r3, r1, r3
 800614a:	4413      	add	r3, r2
 800614c:	3355      	adds	r3, #85	; 0x55
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f083 0301 	eor.w	r3, r3, #1
 8006154:	b2d8      	uxtb	r0, r3
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	212c      	movs	r1, #44	; 0x2c
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	4413      	add	r3, r2
 8006162:	3355      	adds	r3, #85	; 0x55
 8006164:	4602      	mov	r2, r0
 8006166:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b01      	cmp	r3, #1
 800616e:	f040 80e3 	bne.w	8006338 <HCD_HC_OUT_IRQHandler+0x69c>
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	212c      	movs	r1, #44	; 0x2c
 8006178:	fb01 f303 	mul.w	r3, r1, r3
 800617c:	4413      	add	r3, r2
 800617e:	334c      	adds	r3, #76	; 0x4c
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80d8 	beq.w	8006338 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	212c      	movs	r1, #44	; 0x2c
 800618e:	fb01 f303 	mul.w	r3, r1, r3
 8006192:	4413      	add	r3, r2
 8006194:	334c      	adds	r3, #76	; 0x4c
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	202c      	movs	r0, #44	; 0x2c
 800619e:	fb00 f202 	mul.w	r2, r0, r2
 80061a2:	440a      	add	r2, r1
 80061a4:	3240      	adds	r2, #64	; 0x40
 80061a6:	8812      	ldrh	r2, [r2, #0]
 80061a8:	4413      	add	r3, r2
 80061aa:	3b01      	subs	r3, #1
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	202c      	movs	r0, #44	; 0x2c
 80061b2:	fb00 f202 	mul.w	r2, r0, r2
 80061b6:	440a      	add	r2, r1
 80061b8:	3240      	adds	r2, #64	; 0x40
 80061ba:	8812      	ldrh	r2, [r2, #0]
 80061bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80b5 	beq.w	8006338 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	212c      	movs	r1, #44	; 0x2c
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	4413      	add	r3, r2
 80061da:	3355      	adds	r3, #85	; 0x55
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	f083 0301 	eor.w	r3, r3, #1
 80061e2:	b2d8      	uxtb	r0, r3
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	212c      	movs	r1, #44	; 0x2c
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	4413      	add	r3, r2
 80061f0:	3355      	adds	r3, #85	; 0x55
 80061f2:	4602      	mov	r2, r0
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	e09f      	b.n	8006338 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	212c      	movs	r1, #44	; 0x2c
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	4413      	add	r3, r2
 8006204:	3361      	adds	r3, #97	; 0x61
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b03      	cmp	r3, #3
 800620a:	d109      	bne.n	8006220 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	212c      	movs	r1, #44	; 0x2c
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	4413      	add	r3, r2
 8006218:	3360      	adds	r3, #96	; 0x60
 800621a:	2202      	movs	r2, #2
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e08b      	b.n	8006338 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	212c      	movs	r1, #44	; 0x2c
 8006226:	fb01 f303 	mul.w	r3, r1, r3
 800622a:	4413      	add	r3, r2
 800622c:	3361      	adds	r3, #97	; 0x61
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b04      	cmp	r3, #4
 8006232:	d109      	bne.n	8006248 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	212c      	movs	r1, #44	; 0x2c
 800623a:	fb01 f303 	mul.w	r3, r1, r3
 800623e:	4413      	add	r3, r2
 8006240:	3360      	adds	r3, #96	; 0x60
 8006242:	2202      	movs	r2, #2
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	e077      	b.n	8006338 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	212c      	movs	r1, #44	; 0x2c
 800624e:	fb01 f303 	mul.w	r3, r1, r3
 8006252:	4413      	add	r3, r2
 8006254:	3361      	adds	r3, #97	; 0x61
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b05      	cmp	r3, #5
 800625a:	d109      	bne.n	8006270 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	212c      	movs	r1, #44	; 0x2c
 8006262:	fb01 f303 	mul.w	r3, r1, r3
 8006266:	4413      	add	r3, r2
 8006268:	3360      	adds	r3, #96	; 0x60
 800626a:	2205      	movs	r2, #5
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	e063      	b.n	8006338 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	212c      	movs	r1, #44	; 0x2c
 8006276:	fb01 f303 	mul.w	r3, r1, r3
 800627a:	4413      	add	r3, r2
 800627c:	3361      	adds	r3, #97	; 0x61
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b06      	cmp	r3, #6
 8006282:	d009      	beq.n	8006298 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	212c      	movs	r1, #44	; 0x2c
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	4413      	add	r3, r2
 8006290:	3361      	adds	r3, #97	; 0x61
 8006292:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006294:	2b08      	cmp	r3, #8
 8006296:	d14f      	bne.n	8006338 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	212c      	movs	r1, #44	; 0x2c
 800629e:	fb01 f303 	mul.w	r3, r1, r3
 80062a2:	4413      	add	r3, r2
 80062a4:	335c      	adds	r3, #92	; 0x5c
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	202c      	movs	r0, #44	; 0x2c
 80062b0:	fb00 f303 	mul.w	r3, r0, r3
 80062b4:	440b      	add	r3, r1
 80062b6:	335c      	adds	r3, #92	; 0x5c
 80062b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	212c      	movs	r1, #44	; 0x2c
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	4413      	add	r3, r2
 80062c6:	335c      	adds	r3, #92	; 0x5c
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d912      	bls.n	80062f4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	212c      	movs	r1, #44	; 0x2c
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	4413      	add	r3, r2
 80062da:	335c      	adds	r3, #92	; 0x5c
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	212c      	movs	r1, #44	; 0x2c
 80062e6:	fb01 f303 	mul.w	r3, r1, r3
 80062ea:	4413      	add	r3, r2
 80062ec:	3360      	adds	r3, #96	; 0x60
 80062ee:	2204      	movs	r2, #4
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	e021      	b.n	8006338 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	212c      	movs	r1, #44	; 0x2c
 80062fa:	fb01 f303 	mul.w	r3, r1, r3
 80062fe:	4413      	add	r3, r2
 8006300:	3360      	adds	r3, #96	; 0x60
 8006302:	2202      	movs	r2, #2
 8006304:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800631c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006324:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	4413      	add	r3, r2
 800632e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006332:	461a      	mov	r2, r3
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	4413      	add	r3, r2
 8006340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006344:	461a      	mov	r2, r3
 8006346:	2302      	movs	r3, #2
 8006348:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	b2d9      	uxtb	r1, r3
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	202c      	movs	r0, #44	; 0x2c
 8006354:	fb00 f303 	mul.w	r3, r0, r3
 8006358:	4413      	add	r3, r2
 800635a:	3360      	adds	r3, #96	; 0x60
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f00c fb75 	bl	8012a50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006366:	bf00      	nop
 8006368:	3720      	adds	r7, #32
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b08a      	sub	sp, #40	; 0x28
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	0c5b      	lsrs	r3, r3, #17
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	091b      	lsrs	r3, r3, #4
 800639e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063a2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d004      	beq.n	80063b4 <HCD_RXQLVL_IRQHandler+0x46>
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b05      	cmp	r3, #5
 80063ae:	f000 80a9 	beq.w	8006504 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80063b2:	e0aa      	b.n	800650a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 80a6 	beq.w	8006508 <HCD_RXQLVL_IRQHandler+0x19a>
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	212c      	movs	r1, #44	; 0x2c
 80063c2:	fb01 f303 	mul.w	r3, r1, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	3344      	adds	r3, #68	; 0x44
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 809b 	beq.w	8006508 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	212c      	movs	r1, #44	; 0x2c
 80063d8:	fb01 f303 	mul.w	r3, r1, r3
 80063dc:	4413      	add	r3, r2
 80063de:	3350      	adds	r3, #80	; 0x50
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	441a      	add	r2, r3
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	202c      	movs	r0, #44	; 0x2c
 80063ec:	fb00 f303 	mul.w	r3, r0, r3
 80063f0:	440b      	add	r3, r1
 80063f2:	334c      	adds	r3, #76	; 0x4c
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d87a      	bhi.n	80064f0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	212c      	movs	r1, #44	; 0x2c
 8006404:	fb01 f303 	mul.w	r3, r1, r3
 8006408:	4413      	add	r3, r2
 800640a:	3344      	adds	r3, #68	; 0x44
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	b292      	uxth	r2, r2
 8006412:	4619      	mov	r1, r3
 8006414:	f006 fcd4 	bl	800cdc0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	212c      	movs	r1, #44	; 0x2c
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	4413      	add	r3, r2
 8006424:	3344      	adds	r3, #68	; 0x44
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	441a      	add	r2, r3
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	202c      	movs	r0, #44	; 0x2c
 8006432:	fb00 f303 	mul.w	r3, r0, r3
 8006436:	440b      	add	r3, r1
 8006438:	3344      	adds	r3, #68	; 0x44
 800643a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	212c      	movs	r1, #44	; 0x2c
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	4413      	add	r3, r2
 8006448:	3350      	adds	r3, #80	; 0x50
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	441a      	add	r2, r3
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	202c      	movs	r0, #44	; 0x2c
 8006456:	fb00 f303 	mul.w	r3, r0, r3
 800645a:	440b      	add	r3, r1
 800645c:	3350      	adds	r3, #80	; 0x50
 800645e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	4413      	add	r3, r2
 8006468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	0cdb      	lsrs	r3, r3, #19
 8006470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006474:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	212c      	movs	r1, #44	; 0x2c
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	4413      	add	r3, r2
 8006482:	3340      	adds	r3, #64	; 0x40
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4293      	cmp	r3, r2
 800648c:	d13c      	bne.n	8006508 <HCD_RXQLVL_IRQHandler+0x19a>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d039      	beq.n	8006508 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	4413      	add	r3, r2
 800649c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064aa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064b2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c0:	461a      	mov	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	212c      	movs	r1, #44	; 0x2c
 80064cc:	fb01 f303 	mul.w	r3, r1, r3
 80064d0:	4413      	add	r3, r2
 80064d2:	3354      	adds	r3, #84	; 0x54
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	f083 0301 	eor.w	r3, r3, #1
 80064da:	b2d8      	uxtb	r0, r3
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	212c      	movs	r1, #44	; 0x2c
 80064e2:	fb01 f303 	mul.w	r3, r1, r3
 80064e6:	4413      	add	r3, r2
 80064e8:	3354      	adds	r3, #84	; 0x54
 80064ea:	4602      	mov	r2, r0
 80064ec:	701a      	strb	r2, [r3, #0]
      break;
 80064ee:	e00b      	b.n	8006508 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	212c      	movs	r1, #44	; 0x2c
 80064f6:	fb01 f303 	mul.w	r3, r1, r3
 80064fa:	4413      	add	r3, r2
 80064fc:	3360      	adds	r3, #96	; 0x60
 80064fe:	2204      	movs	r2, #4
 8006500:	701a      	strb	r2, [r3, #0]
      break;
 8006502:	e001      	b.n	8006508 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006504:	bf00      	nop
 8006506:	e000      	b.n	800650a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006508:	bf00      	nop
  }
}
 800650a:	bf00      	nop
 800650c:	3728      	adds	r7, #40	; 0x28
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b086      	sub	sp, #24
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800653e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b02      	cmp	r3, #2
 8006548:	d10b      	bne.n	8006562 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b01      	cmp	r3, #1
 8006552:	d102      	bne.n	800655a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f00c fa5f 	bl	8012a18 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f043 0302 	orr.w	r3, r3, #2
 8006560:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b08      	cmp	r3, #8
 800656a:	d132      	bne.n	80065d2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f043 0308 	orr.w	r3, r3, #8
 8006572:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b04      	cmp	r3, #4
 800657c:	d126      	bne.n	80065cc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d113      	bne.n	80065ae <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800658c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006590:	d106      	bne.n	80065a0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2102      	movs	r1, #2
 8006598:	4618      	mov	r0, r3
 800659a:	f006 fd71 	bl	800d080 <USB_InitFSLSPClkSel>
 800659e:	e011      	b.n	80065c4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2101      	movs	r1, #1
 80065a6:	4618      	mov	r0, r3
 80065a8:	f006 fd6a 	bl	800d080 <USB_InitFSLSPClkSel>
 80065ac:	e00a      	b.n	80065c4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d106      	bne.n	80065c4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065bc:	461a      	mov	r2, r3
 80065be:	f64e 2360 	movw	r3, #60000	; 0xea60
 80065c2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f00c fa55 	bl	8012a74 <HAL_HCD_PortEnabled_Callback>
 80065ca:	e002      	b.n	80065d2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f00c fa5f 	bl	8012a90 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d103      	bne.n	80065e4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f043 0320 	orr.w	r3, r3, #32
 80065e2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065ea:	461a      	mov	r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	6013      	str	r3, [r2, #0]
}
 80065f0:	bf00      	nop
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e07f      	b.n	800670a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fb fe36 	bl	8002290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2224      	movs	r2, #36	; 0x24
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006648:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006658:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d107      	bne.n	8006672 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800666e:	609a      	str	r2, [r3, #8]
 8006670:	e006      	b.n	8006680 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800667e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d104      	bne.n	8006692 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006690:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6859      	ldr	r1, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <HAL_I2C_Init+0x11c>)
 800669e:	430b      	orrs	r3, r1
 80066a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69d9      	ldr	r1, [r3, #28]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1a      	ldr	r2, [r3, #32]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	02008000 	.word	0x02008000

08006718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b20      	cmp	r3, #32
 800672c:	d138      	bne.n	80067a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006738:	2302      	movs	r3, #2
 800673a:	e032      	b.n	80067a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2224      	movs	r2, #36	; 0x24
 8006748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0201 	bic.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800676a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6819      	ldr	r1, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	e000      	b.n	80067a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067a0:	2302      	movs	r3, #2
  }
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d139      	bne.n	8006838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d101      	bne.n	80067d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e033      	b.n	800683a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2224      	movs	r2, #36	; 0x24
 80067de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0201 	bic.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4313      	orrs	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	e000      	b.n	800683a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006838:	2302      	movs	r3, #2
  }
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e0bf      	b.n	80069da <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fb fdb6 	bl	80023e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800688a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6999      	ldr	r1, [r3, #24]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068a0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6899      	ldr	r1, [r3, #8]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b4a      	ldr	r3, [pc, #296]	; (80069e4 <HAL_LTDC_Init+0x19c>)
 80068bc:	400b      	ands	r3, r1
 80068be:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	041b      	lsls	r3, r3, #16
 80068c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6899      	ldr	r1, [r3, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699a      	ldr	r2, [r3, #24]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68d9      	ldr	r1, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	4b3e      	ldr	r3, [pc, #248]	; (80069e4 <HAL_LTDC_Init+0x19c>)
 80068ea:	400b      	ands	r3, r1
 80068ec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	041b      	lsls	r3, r3, #16
 80068f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68d9      	ldr	r1, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6919      	ldr	r1, [r3, #16]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b33      	ldr	r3, [pc, #204]	; (80069e4 <HAL_LTDC_Init+0x19c>)
 8006918:	400b      	ands	r3, r1
 800691a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6919      	ldr	r1, [r3, #16]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6959      	ldr	r1, [r3, #20]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	4b27      	ldr	r3, [pc, #156]	; (80069e4 <HAL_LTDC_Init+0x19c>)
 8006946:	400b      	ands	r3, r1
 8006948:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	041b      	lsls	r3, r3, #16
 8006950:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6959      	ldr	r1, [r3, #20]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006978:	041b      	lsls	r3, r3, #16
 800697a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800698a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0206 	orr.w	r2, r2, #6
 80069b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	f000f800 	.word	0xf000f800

080069e8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d023      	beq.n	8006a52 <HAL_LTDC_IRQHandler+0x6a>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01e      	beq.n	8006a52 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0204 	bic.w	r2, r2, #4
 8006a22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2204      	movs	r2, #4
 8006a2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a32:	f043 0201 	orr.w	r2, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2204      	movs	r2, #4
 8006a40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f86f 	bl	8006b30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d023      	beq.n	8006aa4 <HAL_LTDC_IRQHandler+0xbc>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01e      	beq.n	8006aa4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0202 	bic.w	r2, r2, #2
 8006a74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a84:	f043 0202 	orr.w	r2, r3, #2
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2204      	movs	r2, #4
 8006a92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f846 	bl	8006b30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01b      	beq.n	8006ae6 <HAL_LTDC_IRQHandler+0xfe>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d016      	beq.n	8006ae6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0201 	bic.w	r2, r2, #1
 8006ac6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2201      	movs	r2, #1
 8006ace:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f82f 	bl	8006b44 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01b      	beq.n	8006b28 <HAL_LTDC_IRQHandler+0x140>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d016      	beq.n	8006b28 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0208 	bic.w	r2, r2, #8
 8006b08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2208      	movs	r2, #8
 8006b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f818 	bl	8006b58 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b6c:	b5b0      	push	{r4, r5, r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_LTDC_ConfigLayer+0x1a>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e02c      	b.n	8006be0 <HAL_LTDC_ConfigLayer+0x74>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2202      	movs	r2, #2
 8006b92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2134      	movs	r1, #52	; 0x34
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4614      	mov	r4, r2
 8006baa:	461d      	mov	r5, r3
 8006bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f811 	bl	8006be8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bdb0      	pop	{r4, r5, r7, pc}

08006be8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b089      	sub	sp, #36	; 0x24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	0c1b      	lsrs	r3, r3, #16
 8006c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c04:	4413      	add	r3, r2
 8006c06:	041b      	lsls	r3, r3, #16
 8006c08:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	01db      	lsls	r3, r3, #7
 8006c14:	4413      	add	r3, r2
 8006c16:	3384      	adds	r3, #132	; 0x84
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	6812      	ldr	r2, [r2, #0]
 8006c1e:	4611      	mov	r1, r2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	01d2      	lsls	r2, r2, #7
 8006c24:	440a      	add	r2, r1
 8006c26:	3284      	adds	r2, #132	; 0x84
 8006c28:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c2c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	0c1b      	lsrs	r3, r3, #16
 8006c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c3e:	4413      	add	r3, r2
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4619      	mov	r1, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	01db      	lsls	r3, r3, #7
 8006c4c:	440b      	add	r3, r1
 8006c4e:	3384      	adds	r3, #132	; 0x84
 8006c50:	4619      	mov	r1, r3
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c66:	4413      	add	r3, r2
 8006c68:	041b      	lsls	r3, r3, #16
 8006c6a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	01db      	lsls	r3, r3, #7
 8006c76:	4413      	add	r3, r2
 8006c78:	3384      	adds	r3, #132	; 0x84
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	6812      	ldr	r2, [r2, #0]
 8006c80:	4611      	mov	r1, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	01d2      	lsls	r2, r2, #7
 8006c86:	440a      	add	r2, r1
 8006c88:	3284      	adds	r2, #132	; 0x84
 8006c8a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c8e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c9e:	4413      	add	r3, r2
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	01db      	lsls	r3, r3, #7
 8006cac:	440b      	add	r3, r1
 8006cae:	3384      	adds	r3, #132	; 0x84
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	01db      	lsls	r3, r3, #7
 8006cc2:	4413      	add	r3, r2
 8006cc4:	3384      	adds	r3, #132	; 0x84
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	6812      	ldr	r2, [r2, #0]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	01d2      	lsls	r2, r2, #7
 8006cd2:	440a      	add	r2, r1
 8006cd4:	3284      	adds	r2, #132	; 0x84
 8006cd6:	f023 0307 	bic.w	r3, r3, #7
 8006cda:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	01db      	lsls	r3, r3, #7
 8006ce6:	4413      	add	r3, r2
 8006ce8:	3384      	adds	r3, #132	; 0x84
 8006cea:	461a      	mov	r2, r3
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006cf8:	021b      	lsls	r3, r3, #8
 8006cfa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d02:	041b      	lsls	r3, r3, #16
 8006d04:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	061b      	lsls	r3, r3, #24
 8006d0c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	01db      	lsls	r3, r3, #7
 8006d18:	4413      	add	r3, r2
 8006d1a:	3384      	adds	r3, #132	; 0x84
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	01db      	lsls	r3, r3, #7
 8006d28:	4413      	add	r3, r2
 8006d2a:	3384      	adds	r3, #132	; 0x84
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d38:	461a      	mov	r2, r3
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	431a      	orrs	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4619      	mov	r1, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	01db      	lsls	r3, r3, #7
 8006d4c:	440b      	add	r3, r1
 8006d4e:	3384      	adds	r3, #132	; 0x84
 8006d50:	4619      	mov	r1, r3
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	01db      	lsls	r3, r3, #7
 8006d62:	4413      	add	r3, r2
 8006d64:	3384      	adds	r3, #132	; 0x84
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	6812      	ldr	r2, [r2, #0]
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	01d2      	lsls	r2, r2, #7
 8006d72:	440a      	add	r2, r1
 8006d74:	3284      	adds	r2, #132	; 0x84
 8006d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d7a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	01db      	lsls	r3, r3, #7
 8006d86:	4413      	add	r3, r2
 8006d88:	3384      	adds	r3, #132	; 0x84
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	01db      	lsls	r3, r3, #7
 8006d9c:	4413      	add	r3, r2
 8006d9e:	3384      	adds	r3, #132	; 0x84
 8006da0:	69da      	ldr	r2, [r3, #28]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4619      	mov	r1, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	01db      	lsls	r3, r3, #7
 8006dac:	440b      	add	r3, r1
 8006dae:	3384      	adds	r3, #132	; 0x84
 8006db0:	4619      	mov	r1, r3
 8006db2:	4b58      	ldr	r3, [pc, #352]	; (8006f14 <LTDC_SetConfig+0x32c>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	68f9      	ldr	r1, [r7, #12]
 8006dc2:	6809      	ldr	r1, [r1, #0]
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	01c9      	lsls	r1, r1, #7
 8006dca:	4401      	add	r1, r0
 8006dcc:	3184      	adds	r1, #132	; 0x84
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	01db      	lsls	r3, r3, #7
 8006ddc:	4413      	add	r3, r2
 8006dde:	3384      	adds	r3, #132	; 0x84
 8006de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	01db      	lsls	r3, r3, #7
 8006dec:	4413      	add	r3, r2
 8006dee:	3384      	adds	r3, #132	; 0x84
 8006df0:	461a      	mov	r2, r3
 8006df2:	2300      	movs	r3, #0
 8006df4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	01db      	lsls	r3, r3, #7
 8006e00:	4413      	add	r3, r2
 8006e02:	3384      	adds	r3, #132	; 0x84
 8006e04:	461a      	mov	r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006e14:	2304      	movs	r3, #4
 8006e16:	61fb      	str	r3, [r7, #28]
 8006e18:	e01b      	b.n	8006e52 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d102      	bne.n	8006e28 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006e22:	2303      	movs	r3, #3
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	e014      	b.n	8006e52 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d00b      	beq.n	8006e48 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d007      	beq.n	8006e48 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d003      	beq.n	8006e48 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e44:	2b07      	cmp	r3, #7
 8006e46:	d102      	bne.n	8006e4e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	e001      	b.n	8006e52 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	01db      	lsls	r3, r3, #7
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3384      	adds	r3, #132	; 0x84
 8006e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	6812      	ldr	r2, [r2, #0]
 8006e66:	4611      	mov	r1, r2
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	01d2      	lsls	r2, r2, #7
 8006e6c:	440a      	add	r2, r1
 8006e6e:	3284      	adds	r2, #132	; 0x84
 8006e70:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006e74:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	fb02 f303 	mul.w	r3, r2, r3
 8006e80:	041a      	lsls	r2, r3, #16
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6859      	ldr	r1, [r3, #4]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	1acb      	subs	r3, r1, r3
 8006e8c:	69f9      	ldr	r1, [r7, #28]
 8006e8e:	fb01 f303 	mul.w	r3, r1, r3
 8006e92:	3303      	adds	r3, #3
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	6809      	ldr	r1, [r1, #0]
 8006e98:	4608      	mov	r0, r1
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	01c9      	lsls	r1, r1, #7
 8006e9e:	4401      	add	r1, r0
 8006ea0:	3184      	adds	r1, #132	; 0x84
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	01db      	lsls	r3, r3, #7
 8006eb0:	4413      	add	r3, r2
 8006eb2:	3384      	adds	r3, #132	; 0x84
 8006eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	01db      	lsls	r3, r3, #7
 8006ec0:	440b      	add	r3, r1
 8006ec2:	3384      	adds	r3, #132	; 0x84
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <LTDC_SetConfig+0x330>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	01db      	lsls	r3, r3, #7
 8006ed6:	4413      	add	r3, r2
 8006ed8:	3384      	adds	r3, #132	; 0x84
 8006eda:	461a      	mov	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	01db      	lsls	r3, r3, #7
 8006eec:	4413      	add	r3, r2
 8006eee:	3384      	adds	r3, #132	; 0x84
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	01d2      	lsls	r2, r2, #7
 8006efc:	440a      	add	r2, r1
 8006efe:	3284      	adds	r2, #132	; 0x84
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	6013      	str	r3, [r2, #0]
}
 8006f06:	bf00      	nop
 8006f08:	3724      	adds	r7, #36	; 0x24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	fffff8f8 	.word	0xfffff8f8
 8006f18:	fffff800 	.word	0xfffff800

08006f1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a04      	ldr	r2, [pc, #16]	; (8006f38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f2a:	6013      	str	r3, [r2, #0]
}
 8006f2c:	bf00      	nop
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40007000 	.word	0x40007000

08006f3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f46:	4b23      	ldr	r3, [pc, #140]	; (8006fd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	4a22      	ldr	r2, [pc, #136]	; (8006fd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f50:	6413      	str	r3, [r2, #64]	; 0x40
 8006f52:	4b20      	ldr	r3, [pc, #128]	; (8006fd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1d      	ldr	r2, [pc, #116]	; (8006fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f6a:	f7fc f937 	bl	80031dc <HAL_GetTick>
 8006f6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f70:	e009      	b.n	8006f86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f72:	f7fc f933 	bl	80031dc <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f80:	d901      	bls.n	8006f86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e022      	b.n	8006fcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f86:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f92:	d1ee      	bne.n	8006f72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f94:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a0f      	ldr	r2, [pc, #60]	; (8006fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fa0:	f7fc f91c 	bl	80031dc <HAL_GetTick>
 8006fa4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fa6:	e009      	b.n	8006fbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006fa8:	f7fc f918 	bl	80031dc <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fb6:	d901      	bls.n	8006fbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e007      	b.n	8006fcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fbc:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc8:	d1ee      	bne.n	8006fa8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	40007000 	.word	0x40007000

08006fdc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006fe4:	f7fc f8fa 	bl	80031dc <HAL_GetTick>
 8006fe8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e067      	b.n	80070c4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10b      	bne.n	8007018 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7fb fab1 	bl	8002570 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800700e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f85e 	bl	80070d4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	3b01      	subs	r3, #1
 8007028:	021a      	lsls	r2, r3, #8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	2120      	movs	r1, #32
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f856 	bl	80070f0 <QSPI_WaitFlagStateUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d135      	bne.n	80070ba <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	4b1d      	ldr	r3, [pc, #116]	; (80070cc <HAL_QSPI_Init+0xf0>)
 8007056:	4013      	ands	r3, r2
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6852      	ldr	r2, [r2, #4]
 800705c:	0611      	lsls	r1, r2, #24
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	68d2      	ldr	r2, [r2, #12]
 8007062:	4311      	orrs	r1, r2
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	69d2      	ldr	r2, [r2, #28]
 8007068:	4311      	orrs	r1, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6a12      	ldr	r2, [r2, #32]
 800706e:	4311      	orrs	r1, r2
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6812      	ldr	r2, [r2, #0]
 8007074:	430b      	orrs	r3, r1
 8007076:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	4b14      	ldr	r3, [pc, #80]	; (80070d0 <HAL_QSPI_Init+0xf4>)
 8007080:	4013      	ands	r3, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6912      	ldr	r2, [r2, #16]
 8007086:	0411      	lsls	r1, r2, #16
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6952      	ldr	r2, [r2, #20]
 800708c:	4311      	orrs	r1, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6992      	ldr	r2, [r2, #24]
 8007092:	4311      	orrs	r1, r2
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6812      	ldr	r2, [r2, #0]
 8007098:	430b      	orrs	r3, r1
 800709a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80070c2:	7afb      	ldrb	r3, [r7, #11]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	00ffff2f 	.word	0x00ffff2f
 80070d0:	ffe0f8fe 	.word	0xffe0f8fe

080070d4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007100:	e01a      	b.n	8007138 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007108:	d016      	beq.n	8007138 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800710a:	f7fc f867 	bl	80031dc <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	429a      	cmp	r2, r3
 8007118:	d302      	bcc.n	8007120 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10b      	bne.n	8007138 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2204      	movs	r2, #4
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712c:	f043 0201 	orr.w	r2, r3, #1
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e00e      	b.n	8007156 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	bf14      	ite	ne
 8007146:	2301      	movne	r3, #1
 8007148:	2300      	moveq	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	429a      	cmp	r2, r3
 8007152:	d1d6      	bne.n	8007102 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007168:	2300      	movs	r3, #0
 800716a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e291      	b.n	800769a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 8087 	beq.w	8007292 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007184:	4b96      	ldr	r3, [pc, #600]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 030c 	and.w	r3, r3, #12
 800718c:	2b04      	cmp	r3, #4
 800718e:	d00c      	beq.n	80071aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007190:	4b93      	ldr	r3, [pc, #588]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f003 030c 	and.w	r3, r3, #12
 8007198:	2b08      	cmp	r3, #8
 800719a:	d112      	bne.n	80071c2 <HAL_RCC_OscConfig+0x62>
 800719c:	4b90      	ldr	r3, [pc, #576]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071a8:	d10b      	bne.n	80071c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071aa:	4b8d      	ldr	r3, [pc, #564]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d06c      	beq.n	8007290 <HAL_RCC_OscConfig+0x130>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d168      	bne.n	8007290 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e26b      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ca:	d106      	bne.n	80071da <HAL_RCC_OscConfig+0x7a>
 80071cc:	4b84      	ldr	r3, [pc, #528]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a83      	ldr	r2, [pc, #524]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80071d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	e02e      	b.n	8007238 <HAL_RCC_OscConfig+0xd8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10c      	bne.n	80071fc <HAL_RCC_OscConfig+0x9c>
 80071e2:	4b7f      	ldr	r3, [pc, #508]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a7e      	ldr	r2, [pc, #504]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80071e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	4b7c      	ldr	r3, [pc, #496]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a7b      	ldr	r2, [pc, #492]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80071f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	e01d      	b.n	8007238 <HAL_RCC_OscConfig+0xd8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007204:	d10c      	bne.n	8007220 <HAL_RCC_OscConfig+0xc0>
 8007206:	4b76      	ldr	r3, [pc, #472]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a75      	ldr	r2, [pc, #468]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 800720c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	4b73      	ldr	r3, [pc, #460]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a72      	ldr	r2, [pc, #456]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e00b      	b.n	8007238 <HAL_RCC_OscConfig+0xd8>
 8007220:	4b6f      	ldr	r3, [pc, #444]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a6e      	ldr	r2, [pc, #440]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	4b6c      	ldr	r3, [pc, #432]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a6b      	ldr	r2, [pc, #428]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d013      	beq.n	8007268 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fb ffcc 	bl	80031dc <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007248:	f7fb ffc8 	bl	80031dc <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b64      	cmp	r3, #100	; 0x64
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e21f      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800725a:	4b61      	ldr	r3, [pc, #388]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0f0      	beq.n	8007248 <HAL_RCC_OscConfig+0xe8>
 8007266:	e014      	b.n	8007292 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007268:	f7fb ffb8 	bl	80031dc <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007270:	f7fb ffb4 	bl	80031dc <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b64      	cmp	r3, #100	; 0x64
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e20b      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007282:	4b57      	ldr	r3, [pc, #348]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f0      	bne.n	8007270 <HAL_RCC_OscConfig+0x110>
 800728e:	e000      	b.n	8007292 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d069      	beq.n	8007372 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800729e:	4b50      	ldr	r3, [pc, #320]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 030c 	and.w	r3, r3, #12
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00b      	beq.n	80072c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072aa:	4b4d      	ldr	r3, [pc, #308]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f003 030c 	and.w	r3, r3, #12
 80072b2:	2b08      	cmp	r3, #8
 80072b4:	d11c      	bne.n	80072f0 <HAL_RCC_OscConfig+0x190>
 80072b6:	4b4a      	ldr	r3, [pc, #296]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d116      	bne.n	80072f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072c2:	4b47      	ldr	r3, [pc, #284]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <HAL_RCC_OscConfig+0x17a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d001      	beq.n	80072da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e1df      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072da:	4b41      	ldr	r3, [pc, #260]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	493d      	ldr	r1, [pc, #244]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ee:	e040      	b.n	8007372 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d023      	beq.n	8007340 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072f8:	4b39      	ldr	r3, [pc, #228]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a38      	ldr	r2, [pc, #224]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80072fe:	f043 0301 	orr.w	r3, r3, #1
 8007302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007304:	f7fb ff6a 	bl	80031dc <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800730a:	e008      	b.n	800731e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800730c:	f7fb ff66 	bl	80031dc <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e1bd      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800731e:	4b30      	ldr	r3, [pc, #192]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0f0      	beq.n	800730c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800732a:	4b2d      	ldr	r3, [pc, #180]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	4929      	ldr	r1, [pc, #164]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 800733a:	4313      	orrs	r3, r2
 800733c:	600b      	str	r3, [r1, #0]
 800733e:	e018      	b.n	8007372 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007340:	4b27      	ldr	r3, [pc, #156]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a26      	ldr	r2, [pc, #152]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007346:	f023 0301 	bic.w	r3, r3, #1
 800734a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7fb ff46 	bl	80031dc <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007354:	f7fb ff42 	bl	80031dc <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e199      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007366:	4b1e      	ldr	r3, [pc, #120]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f0      	bne.n	8007354 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d038      	beq.n	80073f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d019      	beq.n	80073ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007386:	4b16      	ldr	r3, [pc, #88]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 8007388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800738a:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 800738c:	f043 0301 	orr.w	r3, r3, #1
 8007390:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007392:	f7fb ff23 	bl	80031dc <HAL_GetTick>
 8007396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007398:	e008      	b.n	80073ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800739a:	f7fb ff1f 	bl	80031dc <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e176      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ac:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80073ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0f0      	beq.n	800739a <HAL_RCC_OscConfig+0x23a>
 80073b8:	e01a      	b.n	80073f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073ba:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80073bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073be:	4a08      	ldr	r2, [pc, #32]	; (80073e0 <HAL_RCC_OscConfig+0x280>)
 80073c0:	f023 0301 	bic.w	r3, r3, #1
 80073c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c6:	f7fb ff09 	bl	80031dc <HAL_GetTick>
 80073ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073cc:	e00a      	b.n	80073e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073ce:	f7fb ff05 	bl	80031dc <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d903      	bls.n	80073e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e15c      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
 80073e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073e4:	4b91      	ldr	r3, [pc, #580]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80073e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1ee      	bne.n	80073ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 80a4 	beq.w	8007546 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073fe:	4b8b      	ldr	r3, [pc, #556]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10d      	bne.n	8007426 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800740a:	4b88      	ldr	r3, [pc, #544]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	4a87      	ldr	r2, [pc, #540]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007414:	6413      	str	r3, [r2, #64]	; 0x40
 8007416:	4b85      	ldr	r3, [pc, #532]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741e:	60bb      	str	r3, [r7, #8]
 8007420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007422:	2301      	movs	r3, #1
 8007424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007426:	4b82      	ldr	r3, [pc, #520]	; (8007630 <HAL_RCC_OscConfig+0x4d0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742e:	2b00      	cmp	r3, #0
 8007430:	d118      	bne.n	8007464 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007432:	4b7f      	ldr	r3, [pc, #508]	; (8007630 <HAL_RCC_OscConfig+0x4d0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a7e      	ldr	r2, [pc, #504]	; (8007630 <HAL_RCC_OscConfig+0x4d0>)
 8007438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800743c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800743e:	f7fb fecd 	bl	80031dc <HAL_GetTick>
 8007442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007444:	e008      	b.n	8007458 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007446:	f7fb fec9 	bl	80031dc <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b64      	cmp	r3, #100	; 0x64
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e120      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007458:	4b75      	ldr	r3, [pc, #468]	; (8007630 <HAL_RCC_OscConfig+0x4d0>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0f0      	beq.n	8007446 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d106      	bne.n	800747a <HAL_RCC_OscConfig+0x31a>
 800746c:	4b6f      	ldr	r3, [pc, #444]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 800746e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007470:	4a6e      	ldr	r2, [pc, #440]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007472:	f043 0301 	orr.w	r3, r3, #1
 8007476:	6713      	str	r3, [r2, #112]	; 0x70
 8007478:	e02d      	b.n	80074d6 <HAL_RCC_OscConfig+0x376>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10c      	bne.n	800749c <HAL_RCC_OscConfig+0x33c>
 8007482:	4b6a      	ldr	r3, [pc, #424]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007486:	4a69      	ldr	r2, [pc, #420]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	6713      	str	r3, [r2, #112]	; 0x70
 800748e:	4b67      	ldr	r3, [pc, #412]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007492:	4a66      	ldr	r2, [pc, #408]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007494:	f023 0304 	bic.w	r3, r3, #4
 8007498:	6713      	str	r3, [r2, #112]	; 0x70
 800749a:	e01c      	b.n	80074d6 <HAL_RCC_OscConfig+0x376>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b05      	cmp	r3, #5
 80074a2:	d10c      	bne.n	80074be <HAL_RCC_OscConfig+0x35e>
 80074a4:	4b61      	ldr	r3, [pc, #388]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80074a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a8:	4a60      	ldr	r2, [pc, #384]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80074aa:	f043 0304 	orr.w	r3, r3, #4
 80074ae:	6713      	str	r3, [r2, #112]	; 0x70
 80074b0:	4b5e      	ldr	r3, [pc, #376]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80074b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b4:	4a5d      	ldr	r2, [pc, #372]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80074b6:	f043 0301 	orr.w	r3, r3, #1
 80074ba:	6713      	str	r3, [r2, #112]	; 0x70
 80074bc:	e00b      	b.n	80074d6 <HAL_RCC_OscConfig+0x376>
 80074be:	4b5b      	ldr	r3, [pc, #364]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80074c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c2:	4a5a      	ldr	r2, [pc, #360]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80074c4:	f023 0301 	bic.w	r3, r3, #1
 80074c8:	6713      	str	r3, [r2, #112]	; 0x70
 80074ca:	4b58      	ldr	r3, [pc, #352]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80074cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ce:	4a57      	ldr	r2, [pc, #348]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80074d0:	f023 0304 	bic.w	r3, r3, #4
 80074d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d015      	beq.n	800750a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074de:	f7fb fe7d 	bl	80031dc <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e4:	e00a      	b.n	80074fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e6:	f7fb fe79 	bl	80031dc <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e0ce      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074fc:	4b4b      	ldr	r3, [pc, #300]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80074fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0ee      	beq.n	80074e6 <HAL_RCC_OscConfig+0x386>
 8007508:	e014      	b.n	8007534 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750a:	f7fb fe67 	bl	80031dc <HAL_GetTick>
 800750e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007510:	e00a      	b.n	8007528 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007512:	f7fb fe63 	bl	80031dc <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007520:	4293      	cmp	r3, r2
 8007522:	d901      	bls.n	8007528 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e0b8      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007528:	4b40      	ldr	r3, [pc, #256]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 800752a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1ee      	bne.n	8007512 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d105      	bne.n	8007546 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800753a:	4b3c      	ldr	r3, [pc, #240]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	4a3b      	ldr	r2, [pc, #236]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007544:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 80a4 	beq.w	8007698 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007550:	4b36      	ldr	r3, [pc, #216]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 030c 	and.w	r3, r3, #12
 8007558:	2b08      	cmp	r3, #8
 800755a:	d06b      	beq.n	8007634 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d149      	bne.n	80075f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007564:	4b31      	ldr	r3, [pc, #196]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a30      	ldr	r2, [pc, #192]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 800756a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800756e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007570:	f7fb fe34 	bl	80031dc <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007578:	f7fb fe30 	bl	80031dc <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e087      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800758a:	4b28      	ldr	r3, [pc, #160]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1f0      	bne.n	8007578 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	019b      	lsls	r3, r3, #6
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	085b      	lsrs	r3, r3, #1
 80075ae:	3b01      	subs	r3, #1
 80075b0:	041b      	lsls	r3, r3, #16
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	061b      	lsls	r3, r3, #24
 80075ba:	4313      	orrs	r3, r2
 80075bc:	4a1b      	ldr	r2, [pc, #108]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80075be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075c4:	4b19      	ldr	r3, [pc, #100]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a18      	ldr	r2, [pc, #96]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80075ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d0:	f7fb fe04 	bl	80031dc <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d8:	f7fb fe00 	bl	80031dc <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e057      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075ea:	4b10      	ldr	r3, [pc, #64]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0x478>
 80075f6:	e04f      	b.n	8007698 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a0b      	ldr	r2, [pc, #44]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 80075fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007604:	f7fb fdea 	bl	80031dc <HAL_GetTick>
 8007608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800760a:	e008      	b.n	800761e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800760c:	f7fb fde6 	bl	80031dc <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b02      	cmp	r3, #2
 8007618:	d901      	bls.n	800761e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e03d      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800761e:	4b03      	ldr	r3, [pc, #12]	; (800762c <HAL_RCC_OscConfig+0x4cc>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1f0      	bne.n	800760c <HAL_RCC_OscConfig+0x4ac>
 800762a:	e035      	b.n	8007698 <HAL_RCC_OscConfig+0x538>
 800762c:	40023800 	.word	0x40023800
 8007630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007634:	4b1b      	ldr	r3, [pc, #108]	; (80076a4 <HAL_RCC_OscConfig+0x544>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d028      	beq.n	8007694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800764c:	429a      	cmp	r2, r3
 800764e:	d121      	bne.n	8007694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800765a:	429a      	cmp	r2, r3
 800765c:	d11a      	bne.n	8007694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007664:	4013      	ands	r3, r2
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800766a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800766c:	4293      	cmp	r3, r2
 800766e:	d111      	bne.n	8007694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	085b      	lsrs	r3, r3, #1
 800767c:	3b01      	subs	r3, #1
 800767e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007680:	429a      	cmp	r2, r3
 8007682:	d107      	bne.n	8007694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007690:	429a      	cmp	r2, r3
 8007692:	d001      	beq.n	8007698 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800

080076a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e0d0      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076c0:	4b6a      	ldr	r3, [pc, #424]	; (800786c <HAL_RCC_ClockConfig+0x1c4>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d910      	bls.n	80076f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ce:	4b67      	ldr	r3, [pc, #412]	; (800786c <HAL_RCC_ClockConfig+0x1c4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f023 020f 	bic.w	r2, r3, #15
 80076d6:	4965      	ldr	r1, [pc, #404]	; (800786c <HAL_RCC_ClockConfig+0x1c4>)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	4313      	orrs	r3, r2
 80076dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076de:	4b63      	ldr	r3, [pc, #396]	; (800786c <HAL_RCC_ClockConfig+0x1c4>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d001      	beq.n	80076f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e0b8      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d020      	beq.n	800773e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007708:	4b59      	ldr	r3, [pc, #356]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4a58      	ldr	r2, [pc, #352]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 800770e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007712:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007720:	4b53      	ldr	r3, [pc, #332]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	4a52      	ldr	r2, [pc, #328]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 8007726:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800772a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800772c:	4b50      	ldr	r3, [pc, #320]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	494d      	ldr	r1, [pc, #308]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 800773a:	4313      	orrs	r3, r2
 800773c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d040      	beq.n	80077cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d107      	bne.n	8007762 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007752:	4b47      	ldr	r3, [pc, #284]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d115      	bne.n	800778a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e07f      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d107      	bne.n	800777a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800776a:	4b41      	ldr	r3, [pc, #260]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e073      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800777a:	4b3d      	ldr	r3, [pc, #244]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e06b      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800778a:	4b39      	ldr	r3, [pc, #228]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f023 0203 	bic.w	r2, r3, #3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	4936      	ldr	r1, [pc, #216]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 8007798:	4313      	orrs	r3, r2
 800779a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800779c:	f7fb fd1e 	bl	80031dc <HAL_GetTick>
 80077a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a2:	e00a      	b.n	80077ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a4:	f7fb fd1a 	bl	80031dc <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e053      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ba:	4b2d      	ldr	r3, [pc, #180]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 020c 	and.w	r2, r3, #12
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d1eb      	bne.n	80077a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077cc:	4b27      	ldr	r3, [pc, #156]	; (800786c <HAL_RCC_ClockConfig+0x1c4>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 030f 	and.w	r3, r3, #15
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d210      	bcs.n	80077fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077da:	4b24      	ldr	r3, [pc, #144]	; (800786c <HAL_RCC_ClockConfig+0x1c4>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f023 020f 	bic.w	r2, r3, #15
 80077e2:	4922      	ldr	r1, [pc, #136]	; (800786c <HAL_RCC_ClockConfig+0x1c4>)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ea:	4b20      	ldr	r3, [pc, #128]	; (800786c <HAL_RCC_ClockConfig+0x1c4>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d001      	beq.n	80077fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e032      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0304 	and.w	r3, r3, #4
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007808:	4b19      	ldr	r3, [pc, #100]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	4916      	ldr	r1, [pc, #88]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 8007816:	4313      	orrs	r3, r2
 8007818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007826:	4b12      	ldr	r3, [pc, #72]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	490e      	ldr	r1, [pc, #56]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 8007836:	4313      	orrs	r3, r2
 8007838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800783a:	f000 f821 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 800783e:	4602      	mov	r2, r0
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	091b      	lsrs	r3, r3, #4
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	490a      	ldr	r1, [pc, #40]	; (8007874 <HAL_RCC_ClockConfig+0x1cc>)
 800784c:	5ccb      	ldrb	r3, [r1, r3]
 800784e:	fa22 f303 	lsr.w	r3, r2, r3
 8007852:	4a09      	ldr	r2, [pc, #36]	; (8007878 <HAL_RCC_ClockConfig+0x1d0>)
 8007854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007856:	4b09      	ldr	r3, [pc, #36]	; (800787c <HAL_RCC_ClockConfig+0x1d4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f7fb fb96 	bl	8002f8c <HAL_InitTick>

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	40023c00 	.word	0x40023c00
 8007870:	40023800 	.word	0x40023800
 8007874:	08012f28 	.word	0x08012f28
 8007878:	20000064 	.word	0x20000064
 800787c:	20000068 	.word	0x20000068

08007880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007880:	b5b0      	push	{r4, r5, r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007886:	2100      	movs	r1, #0
 8007888:	6079      	str	r1, [r7, #4]
 800788a:	2100      	movs	r1, #0
 800788c:	60f9      	str	r1, [r7, #12]
 800788e:	2100      	movs	r1, #0
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007892:	2100      	movs	r1, #0
 8007894:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007896:	4952      	ldr	r1, [pc, #328]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007898:	6889      	ldr	r1, [r1, #8]
 800789a:	f001 010c 	and.w	r1, r1, #12
 800789e:	2908      	cmp	r1, #8
 80078a0:	d00d      	beq.n	80078be <HAL_RCC_GetSysClockFreq+0x3e>
 80078a2:	2908      	cmp	r1, #8
 80078a4:	f200 8094 	bhi.w	80079d0 <HAL_RCC_GetSysClockFreq+0x150>
 80078a8:	2900      	cmp	r1, #0
 80078aa:	d002      	beq.n	80078b2 <HAL_RCC_GetSysClockFreq+0x32>
 80078ac:	2904      	cmp	r1, #4
 80078ae:	d003      	beq.n	80078b8 <HAL_RCC_GetSysClockFreq+0x38>
 80078b0:	e08e      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078b2:	4b4c      	ldr	r3, [pc, #304]	; (80079e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80078b4:	60bb      	str	r3, [r7, #8]
      break;
 80078b6:	e08e      	b.n	80079d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078b8:	4b4b      	ldr	r3, [pc, #300]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80078ba:	60bb      	str	r3, [r7, #8]
      break;
 80078bc:	e08b      	b.n	80079d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078be:	4948      	ldr	r1, [pc, #288]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80078c0:	6849      	ldr	r1, [r1, #4]
 80078c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80078c6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80078c8:	4945      	ldr	r1, [pc, #276]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80078ca:	6849      	ldr	r1, [r1, #4]
 80078cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80078d0:	2900      	cmp	r1, #0
 80078d2:	d024      	beq.n	800791e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078d4:	4942      	ldr	r1, [pc, #264]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80078d6:	6849      	ldr	r1, [r1, #4]
 80078d8:	0989      	lsrs	r1, r1, #6
 80078da:	4608      	mov	r0, r1
 80078dc:	f04f 0100 	mov.w	r1, #0
 80078e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80078e4:	f04f 0500 	mov.w	r5, #0
 80078e8:	ea00 0204 	and.w	r2, r0, r4
 80078ec:	ea01 0305 	and.w	r3, r1, r5
 80078f0:	493d      	ldr	r1, [pc, #244]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80078f2:	fb01 f003 	mul.w	r0, r1, r3
 80078f6:	2100      	movs	r1, #0
 80078f8:	fb01 f102 	mul.w	r1, r1, r2
 80078fc:	1844      	adds	r4, r0, r1
 80078fe:	493a      	ldr	r1, [pc, #232]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8007900:	fba2 0101 	umull	r0, r1, r2, r1
 8007904:	1863      	adds	r3, r4, r1
 8007906:	4619      	mov	r1, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	461a      	mov	r2, r3
 800790c:	f04f 0300 	mov.w	r3, #0
 8007910:	f7f8 fe96 	bl	8000640 <__aeabi_uldivmod>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4613      	mov	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e04a      	b.n	80079b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800791e:	4b30      	ldr	r3, [pc, #192]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	099b      	lsrs	r3, r3, #6
 8007924:	461a      	mov	r2, r3
 8007926:	f04f 0300 	mov.w	r3, #0
 800792a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800792e:	f04f 0100 	mov.w	r1, #0
 8007932:	ea02 0400 	and.w	r4, r2, r0
 8007936:	ea03 0501 	and.w	r5, r3, r1
 800793a:	4620      	mov	r0, r4
 800793c:	4629      	mov	r1, r5
 800793e:	f04f 0200 	mov.w	r2, #0
 8007942:	f04f 0300 	mov.w	r3, #0
 8007946:	014b      	lsls	r3, r1, #5
 8007948:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800794c:	0142      	lsls	r2, r0, #5
 800794e:	4610      	mov	r0, r2
 8007950:	4619      	mov	r1, r3
 8007952:	1b00      	subs	r0, r0, r4
 8007954:	eb61 0105 	sbc.w	r1, r1, r5
 8007958:	f04f 0200 	mov.w	r2, #0
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	018b      	lsls	r3, r1, #6
 8007962:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007966:	0182      	lsls	r2, r0, #6
 8007968:	1a12      	subs	r2, r2, r0
 800796a:	eb63 0301 	sbc.w	r3, r3, r1
 800796e:	f04f 0000 	mov.w	r0, #0
 8007972:	f04f 0100 	mov.w	r1, #0
 8007976:	00d9      	lsls	r1, r3, #3
 8007978:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800797c:	00d0      	lsls	r0, r2, #3
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	1912      	adds	r2, r2, r4
 8007984:	eb45 0303 	adc.w	r3, r5, r3
 8007988:	f04f 0000 	mov.w	r0, #0
 800798c:	f04f 0100 	mov.w	r1, #0
 8007990:	0299      	lsls	r1, r3, #10
 8007992:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007996:	0290      	lsls	r0, r2, #10
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4610      	mov	r0, r2
 800799e:	4619      	mov	r1, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	461a      	mov	r2, r3
 80079a4:	f04f 0300 	mov.w	r3, #0
 80079a8:	f7f8 fe4a 	bl	8000640 <__aeabi_uldivmod>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4613      	mov	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80079b4:	4b0a      	ldr	r3, [pc, #40]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	3301      	adds	r3, #1
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079cc:	60bb      	str	r3, [r7, #8]
      break;
 80079ce:	e002      	b.n	80079d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079d0:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80079d2:	60bb      	str	r3, [r7, #8]
      break;
 80079d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079d6:	68bb      	ldr	r3, [r7, #8]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bdb0      	pop	{r4, r5, r7, pc}
 80079e0:	40023800 	.word	0x40023800
 80079e4:	00f42400 	.word	0x00f42400
 80079e8:	017d7840 	.word	0x017d7840

080079ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079f0:	4b03      	ldr	r3, [pc, #12]	; (8007a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80079f2:	681b      	ldr	r3, [r3, #0]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	20000064 	.word	0x20000064

08007a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a08:	f7ff fff0 	bl	80079ec <HAL_RCC_GetHCLKFreq>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	0a9b      	lsrs	r3, r3, #10
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	4903      	ldr	r1, [pc, #12]	; (8007a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a1a:	5ccb      	ldrb	r3, [r1, r3]
 8007a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40023800 	.word	0x40023800
 8007a28:	08012f38 	.word	0x08012f38

08007a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a30:	f7ff ffdc 	bl	80079ec <HAL_RCC_GetHCLKFreq>
 8007a34:	4602      	mov	r2, r0
 8007a36:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	0b5b      	lsrs	r3, r3, #13
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	4903      	ldr	r1, [pc, #12]	; (8007a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a42:	5ccb      	ldrb	r3, [r1, r3]
 8007a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	40023800 	.word	0x40023800
 8007a50:	08012f38 	.word	0x08012f38

08007a54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	220f      	movs	r2, #15
 8007a62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a64:	4b12      	ldr	r3, [pc, #72]	; (8007ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 0203 	and.w	r2, r3, #3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007a70:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007a88:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	08db      	lsrs	r3, r3, #3
 8007a8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a96:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <HAL_RCC_GetClockConfig+0x60>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 020f 	and.w	r2, r3, #15
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	601a      	str	r2, [r3, #0]
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	40023c00 	.word	0x40023c00

08007ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d012      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ae0:	4b69      	ldr	r3, [pc, #420]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	4a68      	ldr	r2, [pc, #416]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007aea:	6093      	str	r3, [r2, #8]
 8007aec:	4b66      	ldr	r3, [pc, #408]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af4:	4964      	ldr	r1, [pc, #400]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007b02:	2301      	movs	r3, #1
 8007b04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d017      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b12:	4b5d      	ldr	r3, [pc, #372]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b20:	4959      	ldr	r1, [pc, #356]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b30:	d101      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007b32:	2301      	movs	r3, #1
 8007b34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d017      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b4e:	4b4e      	ldr	r3, [pc, #312]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	494a      	ldr	r1, [pc, #296]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b6c:	d101      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 808b 	beq.w	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b9c:	4b3a      	ldr	r3, [pc, #232]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba0:	4a39      	ldr	r2, [pc, #228]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8007ba8:	4b37      	ldr	r3, [pc, #220]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb0:	60bb      	str	r3, [r7, #8]
 8007bb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007bb4:	4b35      	ldr	r3, [pc, #212]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a34      	ldr	r2, [pc, #208]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc0:	f7fb fb0c 	bl	80031dc <HAL_GetTick>
 8007bc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007bc6:	e008      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bc8:	f7fb fb08 	bl	80031dc <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b64      	cmp	r3, #100	; 0x64
 8007bd4:	d901      	bls.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e357      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007bda:	4b2c      	ldr	r3, [pc, #176]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0f0      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007be6:	4b28      	ldr	r3, [pc, #160]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d035      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d02e      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c04:	4b20      	ldr	r3, [pc, #128]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c0e:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	4a1d      	ldr	r2, [pc, #116]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c1a:	4b1b      	ldr	r3, [pc, #108]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1e:	4a1a      	ldr	r2, [pc, #104]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007c26:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c2c:	4b16      	ldr	r3, [pc, #88]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d114      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c38:	f7fb fad0 	bl	80031dc <HAL_GetTick>
 8007c3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c3e:	e00a      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c40:	f7fb facc 	bl	80031dc <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d901      	bls.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e319      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0ee      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c6e:	d111      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c7c:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c7e:	400b      	ands	r3, r1
 8007c80:	4901      	ldr	r1, [pc, #4]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	608b      	str	r3, [r1, #8]
 8007c86:	e00b      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007c88:	40023800 	.word	0x40023800
 8007c8c:	40007000 	.word	0x40007000
 8007c90:	0ffffcff 	.word	0x0ffffcff
 8007c94:	4bb1      	ldr	r3, [pc, #708]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	4ab0      	ldr	r2, [pc, #704]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c9e:	6093      	str	r3, [r2, #8]
 8007ca0:	4bae      	ldr	r3, [pc, #696]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cac:	49ab      	ldr	r1, [pc, #684]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0310 	and.w	r3, r3, #16
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d010      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cbe:	4ba7      	ldr	r3, [pc, #668]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc4:	4aa5      	ldr	r2, [pc, #660]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007cce:	4ba3      	ldr	r3, [pc, #652]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	49a0      	ldr	r1, [pc, #640]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cec:	4b9b      	ldr	r3, [pc, #620]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfa:	4998      	ldr	r1, [pc, #608]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d0e:	4b93      	ldr	r3, [pc, #588]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d1c:	498f      	ldr	r1, [pc, #572]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d30:	4b8a      	ldr	r3, [pc, #552]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d3e:	4987      	ldr	r1, [pc, #540]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d52:	4b82      	ldr	r3, [pc, #520]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d60:	497e      	ldr	r1, [pc, #504]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d74:	4b79      	ldr	r3, [pc, #484]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7a:	f023 0203 	bic.w	r2, r3, #3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d82:	4976      	ldr	r1, [pc, #472]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d96:	4b71      	ldr	r3, [pc, #452]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9c:	f023 020c 	bic.w	r2, r3, #12
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da4:	496d      	ldr	r1, [pc, #436]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00a      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007db8:	4b68      	ldr	r3, [pc, #416]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc6:	4965      	ldr	r1, [pc, #404]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007dda:	4b60      	ldr	r3, [pc, #384]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de8:	495c      	ldr	r1, [pc, #368]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007dfc:	4b57      	ldr	r3, [pc, #348]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0a:	4954      	ldr	r1, [pc, #336]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007e1e:	4b4f      	ldr	r3, [pc, #316]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2c:	494b      	ldr	r1, [pc, #300]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007e40:	4b46      	ldr	r3, [pc, #280]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4e:	4943      	ldr	r1, [pc, #268]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007e62:	4b3e      	ldr	r3, [pc, #248]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e70:	493a      	ldr	r1, [pc, #232]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e84:	4b35      	ldr	r3, [pc, #212]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e92:	4932      	ldr	r1, [pc, #200]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d011      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007ea6:	4b2d      	ldr	r3, [pc, #180]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb4:	4929      	ldr	r1, [pc, #164]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ec4:	d101      	bne.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0308 	and.w	r3, r3, #8
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ee6:	4b1d      	ldr	r3, [pc, #116]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef4:	4919      	ldr	r1, [pc, #100]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f08:	4b14      	ldr	r3, [pc, #80]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f18:	4910      	ldr	r1, [pc, #64]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d006      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 80d9 	beq.w	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f34:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a08      	ldr	r2, [pc, #32]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f40:	f7fb f94c 	bl	80031dc <HAL_GetTick>
 8007f44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f46:	e00b      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f48:	f7fb f948 	bl	80031dc <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b64      	cmp	r3, #100	; 0x64
 8007f54:	d904      	bls.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e197      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007f5a:	bf00      	nop
 8007f5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f60:	4b6c      	ldr	r3, [pc, #432]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1ed      	bne.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d021      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d11d      	bne.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007f80:	4b64      	ldr	r3, [pc, #400]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f86:	0c1b      	lsrs	r3, r3, #16
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f8e:	4b61      	ldr	r3, [pc, #388]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f94:	0e1b      	lsrs	r3, r3, #24
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	019a      	lsls	r2, r3, #6
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	041b      	lsls	r3, r3, #16
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	061b      	lsls	r3, r3, #24
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	071b      	lsls	r3, r3, #28
 8007fb4:	4957      	ldr	r1, [pc, #348]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd0:	d00a      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d02e      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fe6:	d129      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007fe8:	4b4a      	ldr	r3, [pc, #296]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fee:	0c1b      	lsrs	r3, r3, #16
 8007ff0:	f003 0303 	and.w	r3, r3, #3
 8007ff4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ff6:	4b47      	ldr	r3, [pc, #284]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ffc:	0f1b      	lsrs	r3, r3, #28
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	019a      	lsls	r2, r3, #6
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	041b      	lsls	r3, r3, #16
 800800e:	431a      	orrs	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	061b      	lsls	r3, r3, #24
 8008016:	431a      	orrs	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	071b      	lsls	r3, r3, #28
 800801c:	493d      	ldr	r1, [pc, #244]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800801e:	4313      	orrs	r3, r2
 8008020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008024:	4b3b      	ldr	r3, [pc, #236]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800802a:	f023 021f 	bic.w	r2, r3, #31
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	3b01      	subs	r3, #1
 8008034:	4937      	ldr	r1, [pc, #220]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008036:	4313      	orrs	r3, r2
 8008038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01d      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008048:	4b32      	ldr	r3, [pc, #200]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800804a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800804e:	0e1b      	lsrs	r3, r3, #24
 8008050:	f003 030f 	and.w	r3, r3, #15
 8008054:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008056:	4b2f      	ldr	r3, [pc, #188]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800805c:	0f1b      	lsrs	r3, r3, #28
 800805e:	f003 0307 	and.w	r3, r3, #7
 8008062:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	019a      	lsls	r2, r3, #6
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	041b      	lsls	r3, r3, #16
 8008070:	431a      	orrs	r2, r3
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	061b      	lsls	r3, r3, #24
 8008076:	431a      	orrs	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	071b      	lsls	r3, r3, #28
 800807c:	4925      	ldr	r1, [pc, #148]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800807e:	4313      	orrs	r3, r2
 8008080:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d011      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	019a      	lsls	r2, r3, #6
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	041b      	lsls	r3, r3, #16
 800809c:	431a      	orrs	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	061b      	lsls	r3, r3, #24
 80080a4:	431a      	orrs	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	071b      	lsls	r3, r3, #28
 80080ac:	4919      	ldr	r1, [pc, #100]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80080b4:	4b17      	ldr	r3, [pc, #92]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a16      	ldr	r2, [pc, #88]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080c0:	f7fb f88c 	bl	80031dc <HAL_GetTick>
 80080c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080c6:	e008      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80080c8:	f7fb f888 	bl	80031dc <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	2b64      	cmp	r3, #100	; 0x64
 80080d4:	d901      	bls.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e0d7      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080da:	4b0e      	ldr	r3, [pc, #56]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0f0      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	f040 80cd 	bne.w	8008288 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80080ee:	4b09      	ldr	r3, [pc, #36]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a08      	ldr	r2, [pc, #32]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080fa:	f7fb f86f 	bl	80031dc <HAL_GetTick>
 80080fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008100:	e00a      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008102:	f7fb f86b 	bl	80031dc <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b64      	cmp	r3, #100	; 0x64
 800810e:	d903      	bls.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e0ba      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008114:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008118:	4b5e      	ldr	r3, [pc, #376]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008124:	d0ed      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008142:	2b00      	cmp	r3, #0
 8008144:	d02e      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	2b00      	cmp	r3, #0
 800814c:	d12a      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800814e:	4b51      	ldr	r3, [pc, #324]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008154:	0c1b      	lsrs	r3, r3, #16
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800815c:	4b4d      	ldr	r3, [pc, #308]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800815e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008162:	0f1b      	lsrs	r3, r3, #28
 8008164:	f003 0307 	and.w	r3, r3, #7
 8008168:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	019a      	lsls	r2, r3, #6
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	041b      	lsls	r3, r3, #16
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	061b      	lsls	r3, r3, #24
 800817c:	431a      	orrs	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	071b      	lsls	r3, r3, #28
 8008182:	4944      	ldr	r1, [pc, #272]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800818a:	4b42      	ldr	r3, [pc, #264]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800818c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008190:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008198:	3b01      	subs	r3, #1
 800819a:	021b      	lsls	r3, r3, #8
 800819c:	493d      	ldr	r1, [pc, #244]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d022      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081b8:	d11d      	bne.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80081ba:	4b36      	ldr	r3, [pc, #216]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c0:	0e1b      	lsrs	r3, r3, #24
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80081c8:	4b32      	ldr	r3, [pc, #200]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ce:	0f1b      	lsrs	r3, r3, #28
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	019a      	lsls	r2, r3, #6
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	041b      	lsls	r3, r3, #16
 80081e2:	431a      	orrs	r2, r3
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	061b      	lsls	r3, r3, #24
 80081e8:	431a      	orrs	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	071b      	lsls	r3, r3, #28
 80081ee:	4929      	ldr	r1, [pc, #164]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d028      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008202:	4b24      	ldr	r3, [pc, #144]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008208:	0e1b      	lsrs	r3, r3, #24
 800820a:	f003 030f 	and.w	r3, r3, #15
 800820e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008210:	4b20      	ldr	r3, [pc, #128]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008216:	0c1b      	lsrs	r3, r3, #16
 8008218:	f003 0303 	and.w	r3, r3, #3
 800821c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	019a      	lsls	r2, r3, #6
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	041b      	lsls	r3, r3, #16
 8008228:	431a      	orrs	r2, r3
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	061b      	lsls	r3, r3, #24
 800822e:	431a      	orrs	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	071b      	lsls	r3, r3, #28
 8008236:	4917      	ldr	r1, [pc, #92]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008238:	4313      	orrs	r3, r2
 800823a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800823e:	4b15      	ldr	r3, [pc, #84]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	4911      	ldr	r1, [pc, #68]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800824e:	4313      	orrs	r3, r2
 8008250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008254:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a0e      	ldr	r2, [pc, #56]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800825a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800825e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008260:	f7fa ffbc 	bl	80031dc <HAL_GetTick>
 8008264:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008266:	e008      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008268:	f7fa ffb8 	bl	80031dc <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b64      	cmp	r3, #100	; 0x64
 8008274:	d901      	bls.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e007      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800827a:	4b06      	ldr	r3, [pc, #24]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008286:	d1ef      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3720      	adds	r7, #32
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	40023800 	.word	0x40023800

08008298 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082b6:	f040 808c 	bne.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80082ba:	4b95      	ldr	r3, [pc, #596]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082c0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80082c8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082d0:	d07c      	beq.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082d8:	d87d      	bhi.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082e6:	d039      	beq.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80082e8:	e075      	b.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80082ea:	4b89      	ldr	r3, [pc, #548]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d108      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80082f6:	4b86      	ldr	r3, [pc, #536]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082fe:	4a85      	ldr	r2, [pc, #532]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008300:	fbb2 f3f3 	udiv	r3, r2, r3
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	e007      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008308:	4b81      	ldr	r3, [pc, #516]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008310:	4a81      	ldr	r2, [pc, #516]	; (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008312:	fbb2 f3f3 	udiv	r3, r2, r3
 8008316:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008318:	4b7d      	ldr	r3, [pc, #500]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800831a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831e:	0e1b      	lsrs	r3, r3, #24
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008326:	4b7a      	ldr	r3, [pc, #488]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800832c:	099b      	lsrs	r3, r3, #6
 800832e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	fb02 f203 	mul.w	r2, r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	fbb2 f3f3 	udiv	r3, r2, r3
 800833e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008340:	4b73      	ldr	r3, [pc, #460]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008346:	0a1b      	lsrs	r3, r3, #8
 8008348:	f003 031f 	and.w	r3, r3, #31
 800834c:	3301      	adds	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	fbb2 f3f3 	udiv	r3, r2, r3
 8008358:	617b      	str	r3, [r7, #20]
        break;
 800835a:	e03d      	b.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800835c:	4b6c      	ldr	r3, [pc, #432]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d108      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008368:	4b69      	ldr	r3, [pc, #420]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008370:	4a68      	ldr	r2, [pc, #416]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008372:	fbb2 f3f3 	udiv	r3, r2, r3
 8008376:	613b      	str	r3, [r7, #16]
 8008378:	e007      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800837a:	4b65      	ldr	r3, [pc, #404]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008382:	4a65      	ldr	r2, [pc, #404]	; (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008384:	fbb2 f3f3 	udiv	r3, r2, r3
 8008388:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800838a:	4b61      	ldr	r3, [pc, #388]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800838c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008390:	0e1b      	lsrs	r3, r3, #24
 8008392:	f003 030f 	and.w	r3, r3, #15
 8008396:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008398:	4b5d      	ldr	r3, [pc, #372]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800839a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800839e:	099b      	lsrs	r3, r3, #6
 80083a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	fb02 f203 	mul.w	r2, r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80083b2:	4b57      	ldr	r3, [pc, #348]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083b8:	f003 031f 	and.w	r3, r3, #31
 80083bc:	3301      	adds	r3, #1
 80083be:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c8:	617b      	str	r3, [r7, #20]
        break;
 80083ca:	e005      	b.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 80083cc:	4b53      	ldr	r3, [pc, #332]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80083ce:	617b      	str	r3, [r7, #20]
        break;
 80083d0:	e002      	b.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 80083d2:	bf00      	nop
 80083d4:	e000      	b.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 80083d6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083de:	f040 808c 	bne.w	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 80083e2:	4b4b      	ldr	r3, [pc, #300]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083e8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80083f0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083f8:	d07c      	beq.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008400:	d87d      	bhi.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800840e:	d039      	beq.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008410:	e075      	b.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008412:	4b3f      	ldr	r3, [pc, #252]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d108      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800841e:	4b3c      	ldr	r3, [pc, #240]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008426:	4a3b      	ldr	r2, [pc, #236]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008428:	fbb2 f3f3 	udiv	r3, r2, r3
 800842c:	613b      	str	r3, [r7, #16]
 800842e:	e007      	b.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008430:	4b37      	ldr	r3, [pc, #220]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008438:	4a37      	ldr	r2, [pc, #220]	; (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800843a:	fbb2 f3f3 	udiv	r3, r2, r3
 800843e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008440:	4b33      	ldr	r3, [pc, #204]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008446:	0e1b      	lsrs	r3, r3, #24
 8008448:	f003 030f 	and.w	r3, r3, #15
 800844c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800844e:	4b30      	ldr	r3, [pc, #192]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008454:	099b      	lsrs	r3, r3, #6
 8008456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	fb02 f203 	mul.w	r2, r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	fbb2 f3f3 	udiv	r3, r2, r3
 8008466:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008468:	4b29      	ldr	r3, [pc, #164]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800846a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800846e:	0a1b      	lsrs	r3, r3, #8
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	3301      	adds	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008480:	617b      	str	r3, [r7, #20]
        break;
 8008482:	e03d      	b.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008484:	4b22      	ldr	r3, [pc, #136]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d108      	bne.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008490:	4b1f      	ldr	r3, [pc, #124]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008498:	4a1e      	ldr	r2, [pc, #120]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800849a:	fbb2 f3f3 	udiv	r3, r2, r3
 800849e:	613b      	str	r3, [r7, #16]
 80084a0:	e007      	b.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80084a2:	4b1b      	ldr	r3, [pc, #108]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084aa:	4a1b      	ldr	r2, [pc, #108]	; (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80084ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80084b2:	4b17      	ldr	r3, [pc, #92]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b8:	0e1b      	lsrs	r3, r3, #24
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80084c0:	4b13      	ldr	r3, [pc, #76]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084c6:	099b      	lsrs	r3, r3, #6
 80084c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	fb02 f203 	mul.w	r2, r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80084da:	4b0d      	ldr	r3, [pc, #52]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e0:	f003 031f 	and.w	r3, r3, #31
 80084e4:	3301      	adds	r3, #1
 80084e6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f0:	617b      	str	r3, [r7, #20]
        break;
 80084f2:	e005      	b.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80084f4:	4b09      	ldr	r3, [pc, #36]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80084f6:	617b      	str	r3, [r7, #20]
        break;
 80084f8:	e002      	b.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80084fa:	bf00      	nop
 80084fc:	e000      	b.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80084fe:	bf00      	nop

  return frequency;
 8008500:	697b      	ldr	r3, [r7, #20]
}
 8008502:	4618      	mov	r0, r3
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	40023800 	.word	0x40023800
 8008514:	00f42400 	.word	0x00f42400
 8008518:	017d7840 	.word	0x017d7840
 800851c:	00bb8000 	.word	0x00bb8000

08008520 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e081      	b.n	8008636 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7f5b      	ldrb	r3, [r3, #29]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	d105      	bne.n	8008548 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7fa f8a4 	bl	8002690 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2202      	movs	r2, #2
 800854c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	22ca      	movs	r2, #202	; 0xca
 8008554:	625a      	str	r2, [r3, #36]	; 0x24
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2253      	movs	r2, #83	; 0x53
 800855c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fb16 	bl	8008b90 <RTC_EnterInitMode>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d008      	beq.n	800857c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	22ff      	movs	r2, #255	; 0xff
 8008570:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2204      	movs	r2, #4
 8008576:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e05c      	b.n	8008636 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6899      	ldr	r1, [r3, #8]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	4b2e      	ldr	r3, [pc, #184]	; (8008640 <HAL_RTC_Init+0x120>)
 8008588:	400b      	ands	r3, r1
 800858a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6899      	ldr	r1, [r3, #8]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	431a      	orrs	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	431a      	orrs	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	68d2      	ldr	r2, [r2, #12]
 80085b2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6919      	ldr	r1, [r3, #16]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	041a      	lsls	r2, r3, #16
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085d6:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10e      	bne.n	8008604 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 faaa 	bl	8008b40 <HAL_RTC_WaitForSynchro>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d008      	beq.n	8008604 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	22ff      	movs	r2, #255	; 0xff
 80085f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2204      	movs	r2, #4
 80085fe:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e018      	b.n	8008636 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f022 0208 	bic.w	r2, r2, #8
 8008612:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	22ff      	movs	r2, #255	; 0xff
 800862c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008634:	2300      	movs	r3, #0
  }
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	ff8fffbf 	.word	0xff8fffbf

08008644 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008644:	b590      	push	{r4, r7, lr}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	7f1b      	ldrb	r3, [r3, #28]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d101      	bne.n	8008660 <HAL_RTC_SetTime+0x1c>
 800865c:	2302      	movs	r3, #2
 800865e:	e0a8      	b.n	80087b2 <HAL_RTC_SetTime+0x16e>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2201      	movs	r2, #1
 8008664:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2202      	movs	r2, #2
 800866a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d126      	bne.n	80086c0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2200      	movs	r2, #0
 8008684:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 faac 	bl	8008be8 <RTC_ByteToBcd2>
 8008690:	4603      	mov	r3, r0
 8008692:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	785b      	ldrb	r3, [r3, #1]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 faa5 	bl	8008be8 <RTC_ByteToBcd2>
 800869e:	4603      	mov	r3, r0
 80086a0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80086a2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	789b      	ldrb	r3, [r3, #2]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fa9d 	bl	8008be8 <RTC_ByteToBcd2>
 80086ae:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80086b0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	7b1b      	ldrb	r3, [r3, #12]
 80086b8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80086ba:	4313      	orrs	r3, r2
 80086bc:	617b      	str	r3, [r7, #20]
 80086be:	e018      	b.n	80086f2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d102      	bne.n	80086d4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2200      	movs	r2, #0
 80086d2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	785b      	ldrb	r3, [r3, #1]
 80086de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086e0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80086e6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	7b1b      	ldrb	r3, [r3, #12]
 80086ec:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086ee:	4313      	orrs	r3, r2
 80086f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	22ca      	movs	r2, #202	; 0xca
 80086f8:	625a      	str	r2, [r3, #36]	; 0x24
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2253      	movs	r2, #83	; 0x53
 8008700:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 fa44 	bl	8008b90 <RTC_EnterInitMode>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00b      	beq.n	8008726 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	22ff      	movs	r2, #255	; 0xff
 8008714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2204      	movs	r2, #4
 800871a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e045      	b.n	80087b2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	6979      	ldr	r1, [r7, #20]
 800872c:	4b23      	ldr	r3, [pc, #140]	; (80087bc <HAL_RTC_SetTime+0x178>)
 800872e:	400b      	ands	r3, r1
 8008730:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689a      	ldr	r2, [r3, #8]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008740:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6899      	ldr	r1, [r3, #8]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	691a      	ldr	r2, [r3, #16]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	431a      	orrs	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008768:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f003 0320 	and.w	r3, r3, #32
 8008774:	2b00      	cmp	r3, #0
 8008776:	d111      	bne.n	800879c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 f9e1 	bl	8008b40 <HAL_RTC_WaitForSynchro>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	22ff      	movs	r2, #255	; 0xff
 800878a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2204      	movs	r2, #4
 8008790:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e00a      	b.n	80087b2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	22ff      	movs	r2, #255	; 0xff
 80087a2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80087b0:	2300      	movs	r3, #0
  }
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	371c      	adds	r7, #28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd90      	pop	{r4, r7, pc}
 80087ba:	bf00      	nop
 80087bc:	007f7f7f 	.word	0x007f7f7f

080087c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80087c0:	b590      	push	{r4, r7, lr}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	7f1b      	ldrb	r3, [r3, #28]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_RTC_SetDate+0x1c>
 80087d8:	2302      	movs	r3, #2
 80087da:	e092      	b.n	8008902 <HAL_RTC_SetDate+0x142>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2202      	movs	r2, #2
 80087e6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10e      	bne.n	800880c <HAL_RTC_SetDate+0x4c>
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	f003 0310 	and.w	r3, r3, #16
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d008      	beq.n	800880c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	785b      	ldrb	r3, [r3, #1]
 80087fe:	f023 0310 	bic.w	r3, r3, #16
 8008802:	b2db      	uxtb	r3, r3
 8008804:	330a      	adds	r3, #10
 8008806:	b2da      	uxtb	r2, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d11c      	bne.n	800884c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	78db      	ldrb	r3, [r3, #3]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 f9e6 	bl	8008be8 <RTC_ByteToBcd2>
 800881c:	4603      	mov	r3, r0
 800881e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	785b      	ldrb	r3, [r3, #1]
 8008824:	4618      	mov	r0, r3
 8008826:	f000 f9df 	bl	8008be8 <RTC_ByteToBcd2>
 800882a:	4603      	mov	r3, r0
 800882c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800882e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	789b      	ldrb	r3, [r3, #2]
 8008834:	4618      	mov	r0, r3
 8008836:	f000 f9d7 	bl	8008be8 <RTC_ByteToBcd2>
 800883a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800883c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	e00e      	b.n	800886a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	78db      	ldrb	r3, [r3, #3]
 8008850:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008858:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800885e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	22ca      	movs	r2, #202	; 0xca
 8008870:	625a      	str	r2, [r3, #36]	; 0x24
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2253      	movs	r2, #83	; 0x53
 8008878:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 f988 	bl	8008b90 <RTC_EnterInitMode>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	22ff      	movs	r2, #255	; 0xff
 800888c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2204      	movs	r2, #4
 8008892:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e031      	b.n	8008902 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	6979      	ldr	r1, [r7, #20]
 80088a4:	4b19      	ldr	r3, [pc, #100]	; (800890c <HAL_RTC_SetDate+0x14c>)
 80088a6:	400b      	ands	r3, r1
 80088a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f003 0320 	and.w	r3, r3, #32
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d111      	bne.n	80088ec <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f939 	bl	8008b40 <HAL_RTC_WaitForSynchro>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	22ff      	movs	r2, #255	; 0xff
 80088da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2204      	movs	r2, #4
 80088e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e00a      	b.n	8008902 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	22ff      	movs	r2, #255	; 0xff
 80088f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2201      	movs	r2, #1
 80088f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008900:	2300      	movs	r3, #0
  }
}
 8008902:	4618      	mov	r0, r3
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	bd90      	pop	{r4, r7, pc}
 800890a:	bf00      	nop
 800890c:	00ffff3f 	.word	0x00ffff3f

08008910 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008910:	b590      	push	{r4, r7, lr}
 8008912:	b089      	sub	sp, #36	; 0x24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	61fb      	str	r3, [r7, #28]
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	7f1b      	ldrb	r3, [r3, #28]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_RTC_SetAlarm+0x24>
 8008930:	2302      	movs	r3, #2
 8008932:	e101      	b.n	8008b38 <HAL_RTC_SetAlarm+0x228>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2201      	movs	r2, #1
 8008938:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2202      	movs	r2, #2
 800893e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d137      	bne.n	80089b6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d102      	bne.n	800895a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2200      	movs	r2, #0
 8008958:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	4618      	mov	r0, r3
 8008960:	f000 f942 	bl	8008be8 <RTC_ByteToBcd2>
 8008964:	4603      	mov	r3, r0
 8008966:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	785b      	ldrb	r3, [r3, #1]
 800896c:	4618      	mov	r0, r3
 800896e:	f000 f93b 	bl	8008be8 <RTC_ByteToBcd2>
 8008972:	4603      	mov	r3, r0
 8008974:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008976:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	789b      	ldrb	r3, [r3, #2]
 800897c:	4618      	mov	r0, r3
 800897e:	f000 f933 	bl	8008be8 <RTC_ByteToBcd2>
 8008982:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008984:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	7b1b      	ldrb	r3, [r3, #12]
 800898c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800898e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008998:	4618      	mov	r0, r3
 800899a:	f000 f925 	bl	8008be8 <RTC_ByteToBcd2>
 800899e:	4603      	mov	r3, r0
 80089a0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80089a2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80089aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80089b0:	4313      	orrs	r3, r2
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	e023      	b.n	80089fe <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d102      	bne.n	80089ca <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2200      	movs	r2, #0
 80089c8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	785b      	ldrb	r3, [r3, #1]
 80089d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089d6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80089dc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	7b1b      	ldrb	r3, [r3, #12]
 80089e2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80089e4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089ec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80089ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80089f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089fa:	4313      	orrs	r3, r2
 80089fc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	22ca      	movs	r2, #202	; 0xca
 8008a10:	625a      	str	r2, [r3, #36]	; 0x24
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2253      	movs	r2, #83	; 0x53
 8008a18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a22:	d13f      	bne.n	8008aa4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a32:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a42:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a44:	f7fa fbca 	bl	80031dc <HAL_GetTick>
 8008a48:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008a4a:	e013      	b.n	8008a74 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a4c:	f7fa fbc6 	bl	80031dc <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a5a:	d90b      	bls.n	8008a74 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	22ff      	movs	r2, #255	; 0xff
 8008a62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2203      	movs	r2, #3
 8008a68:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e061      	b.n	8008b38 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d0e4      	beq.n	8008a4c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aa0:	609a      	str	r2, [r3, #8]
 8008aa2:	e03e      	b.n	8008b22 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ab2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689a      	ldr	r2, [r3, #8]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ac2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ac4:	f7fa fb8a 	bl	80031dc <HAL_GetTick>
 8008ac8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008aca:	e013      	b.n	8008af4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008acc:	f7fa fb86 	bl	80031dc <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ada:	d90b      	bls.n	8008af4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	22ff      	movs	r2, #255	; 0xff
 8008ae2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2203      	movs	r2, #3
 8008ae8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e021      	b.n	8008b38 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0e4      	beq.n	8008acc <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69fa      	ldr	r2, [r7, #28]
 8008b08:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b20:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	22ff      	movs	r2, #255	; 0xff
 8008b28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3724      	adds	r7, #36	; 0x24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd90      	pop	{r4, r7, pc}

08008b40 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b5a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b5c:	f7fa fb3e 	bl	80031dc <HAL_GetTick>
 8008b60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b62:	e009      	b.n	8008b78 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b64:	f7fa fb3a 	bl	80031dc <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b72:	d901      	bls.n	8008b78 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e007      	b.n	8008b88 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f003 0320 	and.w	r3, r3, #32
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0ee      	beq.n	8008b64 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d119      	bne.n	8008bde <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bb2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008bb4:	f7fa fb12 	bl	80031dc <HAL_GetTick>
 8008bb8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008bba:	e009      	b.n	8008bd0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008bbc:	f7fa fb0e 	bl	80031dc <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bca:	d901      	bls.n	8008bd0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e007      	b.n	8008be0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0ee      	beq.n	8008bbc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008bf6:	e005      	b.n	8008c04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008bfe:	79fb      	ldrb	r3, [r7, #7]
 8008c00:	3b0a      	subs	r3, #10
 8008c02:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008c04:	79fb      	ldrb	r3, [r7, #7]
 8008c06:	2b09      	cmp	r3, #9
 8008c08:	d8f6      	bhi.n	8008bf8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	b2db      	uxtb	r3, r3
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	7f1b      	ldrb	r3, [r3, #28]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e03e      	b.n	8008cbe <HAL_RTCEx_SetTimeStamp+0x9a>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2201      	movs	r2, #1
 8008c44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	4b1e      	ldr	r3, [pc, #120]	; (8008ccc <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	22ca      	movs	r2, #202	; 0xca
 8008c66:	625a      	str	r2, [r3, #36]	; 0x24
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2253      	movs	r2, #83	; 0x53
 8008c6e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f022 0206 	bic.w	r2, r2, #6
 8008c7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689a      	ldr	r2, [r3, #8]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ca6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	22ff      	movs	r2, #255	; 0xff
 8008cae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	fffff7f7 	.word	0xfffff7f7

08008cd0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e156      	b.n	8008f9c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7fa f8d8 	bl	8002eb8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f95b 	bl	8008fcc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d00c      	beq.n	8008d38 <HAL_SAI_Init+0x68>
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d80d      	bhi.n	8008d3e <HAL_SAI_Init+0x6e>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <HAL_SAI_Init+0x5c>
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d003      	beq.n	8008d32 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008d2a:	e008      	b.n	8008d3e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	61fb      	str	r3, [r7, #28]
      break;
 8008d30:	e006      	b.n	8008d40 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008d32:	2310      	movs	r3, #16
 8008d34:	61fb      	str	r3, [r7, #28]
      break;
 8008d36:	e003      	b.n	8008d40 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008d38:	2320      	movs	r3, #32
 8008d3a:	61fb      	str	r3, [r7, #28]
      break;
 8008d3c:	e000      	b.n	8008d40 <HAL_SAI_Init+0x70>
      break;
 8008d3e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d81e      	bhi.n	8008d86 <HAL_SAI_Init+0xb6>
 8008d48:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <HAL_SAI_Init+0x80>)
 8008d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4e:	bf00      	nop
 8008d50:	08008d61 	.word	0x08008d61
 8008d54:	08008d67 	.word	0x08008d67
 8008d58:	08008d6f 	.word	0x08008d6f
 8008d5c:	08008d77 	.word	0x08008d77
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	617b      	str	r3, [r7, #20]
    }
    break;
 8008d64:	e010      	b.n	8008d88 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d6a:	617b      	str	r3, [r7, #20]
    }
    break;
 8008d6c:	e00c      	b.n	8008d88 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d72:	617b      	str	r3, [r7, #20]
    }
    break;
 8008d74:	e008      	b.n	8008d88 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d7a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f043 0301 	orr.w	r3, r3, #1
 8008d82:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008d84:	e000      	b.n	8008d88 <HAL_SAI_Init+0xb8>
    default:
      break;
 8008d86:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a85      	ldr	r2, [pc, #532]	; (8008fa4 <HAL_SAI_Init+0x2d4>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d004      	beq.n	8008d9c <HAL_SAI_Init+0xcc>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a84      	ldr	r2, [pc, #528]	; (8008fa8 <HAL_SAI_Init+0x2d8>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d103      	bne.n	8008da4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008d9c:	4a83      	ldr	r2, [pc, #524]	; (8008fac <HAL_SAI_Init+0x2dc>)
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	e002      	b.n	8008daa <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008da4:	4a82      	ldr	r2, [pc, #520]	; (8008fb0 <HAL_SAI_Init+0x2e0>)
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d04c      	beq.n	8008e4c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a7a      	ldr	r2, [pc, #488]	; (8008fa4 <HAL_SAI_Init+0x2d4>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d004      	beq.n	8008dca <HAL_SAI_Init+0xfa>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a78      	ldr	r2, [pc, #480]	; (8008fa8 <HAL_SAI_Init+0x2d8>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d104      	bne.n	8008dd4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008dca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008dce:	f7ff fa63 	bl	8008298 <HAL_RCCEx_GetPeriphCLKFreq>
 8008dd2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a76      	ldr	r2, [pc, #472]	; (8008fb4 <HAL_SAI_Init+0x2e4>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d004      	beq.n	8008de8 <HAL_SAI_Init+0x118>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a75      	ldr	r2, [pc, #468]	; (8008fb8 <HAL_SAI_Init+0x2e8>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d104      	bne.n	8008df2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008de8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008dec:	f7ff fa54 	bl	8008298 <HAL_RCCEx_GetPeriphCLKFreq>
 8008df0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	4613      	mov	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	025b      	lsls	r3, r3, #9
 8008e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e08:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4a6b      	ldr	r2, [pc, #428]	; (8008fbc <HAL_SAI_Init+0x2ec>)
 8008e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e12:	08da      	lsrs	r2, r3, #3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008e18:	68f9      	ldr	r1, [r7, #12]
 8008e1a:	4b68      	ldr	r3, [pc, #416]	; (8008fbc <HAL_SAI_Init+0x2ec>)
 8008e1c:	fba3 2301 	umull	r2, r3, r3, r1
 8008e20:	08da      	lsrs	r2, r3, #3
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	1aca      	subs	r2, r1, r3
 8008e2c:	2a08      	cmp	r2, #8
 8008e2e:	d904      	bls.n	8008e3a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d104      	bne.n	8008e4c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	085a      	lsrs	r2, r3, #1
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <HAL_SAI_Init+0x18c>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d109      	bne.n	8008e70 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d101      	bne.n	8008e68 <HAL_SAI_Init+0x198>
 8008e64:	2300      	movs	r3, #0
 8008e66:	e001      	b.n	8008e6c <HAL_SAI_Init+0x19c>
 8008e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	e008      	b.n	8008e82 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d102      	bne.n	8008e7e <HAL_SAI_Init+0x1ae>
 8008e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e7c:	e000      	b.n	8008e80 <HAL_SAI_Init+0x1b0>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6819      	ldr	r1, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	4b4c      	ldr	r3, [pc, #304]	; (8008fc0 <HAL_SAI_Init+0x2f0>)
 8008e8e:	400b      	ands	r3, r1
 8008e90:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6819      	ldr	r1, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ea6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	431a      	orrs	r2, r3
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8008eba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008ec6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	051b      	lsls	r3, r3, #20
 8008ece:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6859      	ldr	r1, [r3, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	4b38      	ldr	r3, [pc, #224]	; (8008fc4 <HAL_SAI_Init+0x2f4>)
 8008ee4:	400b      	ands	r3, r1
 8008ee6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6859      	ldr	r1, [r3, #4]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	699a      	ldr	r2, [r3, #24]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	431a      	orrs	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6899      	ldr	r1, [r3, #8]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	4b2d      	ldr	r3, [pc, #180]	; (8008fc8 <HAL_SAI_Init+0x2f8>)
 8008f12:	400b      	ands	r3, r1
 8008f14:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6899      	ldr	r1, [r3, #8]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f20:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008f26:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008f2c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008f32:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008f3c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68d9      	ldr	r1, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008f54:	400b      	ands	r3, r1
 8008f56:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68d9      	ldr	r1, [r3, #12]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f66:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f6c:	041b      	lsls	r3, r3, #16
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f74:	3b01      	subs	r3, #1
 8008f76:	021b      	lsls	r3, r3, #8
 8008f78:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	40015804 	.word	0x40015804
 8008fa8:	40015824 	.word	0x40015824
 8008fac:	40015800 	.word	0x40015800
 8008fb0:	40015c00 	.word	0x40015c00
 8008fb4:	40015c04 	.word	0x40015c04
 8008fb8:	40015c24 	.word	0x40015c24
 8008fbc:	cccccccd 	.word	0xcccccccd
 8008fc0:	ff05c010 	.word	0xff05c010
 8008fc4:	ffff1ff0 	.word	0xffff1ff0
 8008fc8:	fff88000 	.word	0xfff88000

08008fcc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008fd4:	4b17      	ldr	r3, [pc, #92]	; (8009034 <SAI_Disable+0x68>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a17      	ldr	r2, [pc, #92]	; (8009038 <SAI_Disable+0x6c>)
 8008fda:	fba2 2303 	umull	r2, r3, r2, r3
 8008fde:	0b1b      	lsrs	r3, r3, #12
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008ff6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	1e5a      	subs	r2, r3, #1
 8008ffc:	60fa      	str	r2, [r7, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009008:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	72fb      	strb	r3, [r7, #11]
      break;
 8009016:	e006      	b.n	8009026 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e8      	bne.n	8008ff8 <SAI_Disable+0x2c>

  return status;
 8009026:	7afb      	ldrb	r3, [r7, #11]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	20000064 	.word	0x20000064
 8009038:	95cbec1b 	.word	0x95cbec1b

0800903c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e022      	b.n	8009094 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d105      	bne.n	8009066 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f7f9 fb43 	bl	80026ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2203      	movs	r2, #3
 800906a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f814 	bl	800909c <HAL_SD_InitCard>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e00a      	b.n	8009094 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800909c:	b5b0      	push	{r4, r5, r7, lr}
 800909e:	b08e      	sub	sp, #56	; 0x38
 80090a0:	af04      	add	r7, sp, #16
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80090ac:	2300      	movs	r3, #0
 80090ae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80090b0:	2300      	movs	r3, #0
 80090b2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80090b4:	2300      	movs	r3, #0
 80090b6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80090b8:	2376      	movs	r3, #118	; 0x76
 80090ba:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681d      	ldr	r5, [r3, #0]
 80090c0:	466c      	mov	r4, sp
 80090c2:	f107 0314 	add.w	r3, r7, #20
 80090c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090ce:	f107 0308 	add.w	r3, r7, #8
 80090d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090d4:	4628      	mov	r0, r5
 80090d6:	f002 ffa9 	bl	800c02c <SDMMC_Init>
 80090da:	4603      	mov	r3, r0
 80090dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80090e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e059      	b.n	80091a0 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090fa:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4618      	mov	r0, r3
 8009102:	f002 ffcc 	bl	800c09e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009114:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009116:	2002      	movs	r0, #2
 8009118:	f7fa f86c 	bl	80031f4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fe0d 	bl	8009d3c <SD_PowerON>
 8009122:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00b      	beq.n	8009142 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e02e      	b.n	80091a0 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fd2e 	bl	8009ba4 <SD_InitCard>
 8009148:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00b      	beq.n	8009168 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	431a      	orrs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e01b      	b.n	80091a0 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009170:	4618      	mov	r0, r3
 8009172:	f003 f827 	bl	800c1c4 <SDMMC_CmdBlockLength>
 8009176:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00f      	beq.n	800919e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a09      	ldr	r2, [pc, #36]	; (80091a8 <HAL_SD_InitCard+0x10c>)
 8009184:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	431a      	orrs	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e000      	b.n	80091a0 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3728      	adds	r7, #40	; 0x28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bdb0      	pop	{r4, r5, r7, pc}
 80091a8:	004005ff 	.word	0x004005ff

080091ac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08c      	sub	sp, #48	; 0x30
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
 80091b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d107      	bne.n	80091d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e0c3      	b.n	800935c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b01      	cmp	r3, #1
 80091de:	f040 80bc 	bne.w	800935a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	441a      	add	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d907      	bls.n	8009206 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e0aa      	b.n	800935c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2203      	movs	r2, #3
 800920a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2200      	movs	r2, #0
 8009214:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009224:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922a:	4a4e      	ldr	r2, [pc, #312]	; (8009364 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800922c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009232:	4a4d      	ldr	r2, [pc, #308]	; (8009368 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009234:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923a:	2200      	movs	r2, #0
 800923c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009242:	2200      	movs	r2, #0
 8009244:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3380      	adds	r3, #128	; 0x80
 800926c:	4619      	mov	r1, r3
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	025b      	lsls	r3, r3, #9
 8009274:	089b      	lsrs	r3, r3, #2
 8009276:	f7fa fcbb 	bl	8003bf0 <HAL_DMA_Start_IT>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d017      	beq.n	80092b0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800928e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a35      	ldr	r2, [pc, #212]	; (800936c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009296:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e055      	b.n	800935c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0208 	orr.w	r2, r2, #8
 80092be:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d002      	beq.n	80092ce <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80092c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ca:	025b      	lsls	r3, r3, #9
 80092cc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092d2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	025b      	lsls	r3, r3, #9
 80092d8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80092da:	2390      	movs	r3, #144	; 0x90
 80092dc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80092de:	2302      	movs	r3, #2
 80092e0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80092e6:	2301      	movs	r3, #1
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f107 0210 	add.w	r2, r7, #16
 80092f2:	4611      	mov	r1, r2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f002 ff39 	bl	800c16c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d90a      	bls.n	8009316 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2282      	movs	r2, #130	; 0x82
 8009304:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800930c:	4618      	mov	r0, r3
 800930e:	f002 ff9d 	bl	800c24c <SDMMC_CmdReadMultiBlock>
 8009312:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009314:	e009      	b.n	800932a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2281      	movs	r2, #129	; 0x81
 800931a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009322:	4618      	mov	r0, r3
 8009324:	f002 ff70 	bl	800c208 <SDMMC_CmdReadSingleBlock>
 8009328:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	2b00      	cmp	r3, #0
 800932e:	d012      	beq.n	8009356 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a0d      	ldr	r2, [pc, #52]	; (800936c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009336:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800933c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933e:	431a      	orrs	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e002      	b.n	800935c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	e000      	b.n	800935c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800935a:	2302      	movs	r3, #2
  }
}
 800935c:	4618      	mov	r0, r3
 800935e:	3730      	adds	r7, #48	; 0x30
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	08009a8f 	.word	0x08009a8f
 8009368:	08009b01 	.word	0x08009b01
 800936c:	004005ff 	.word	0x004005ff

08009370 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b08c      	sub	sp, #48	; 0x30
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d107      	bne.n	8009398 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e0c6      	b.n	8009526 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	f040 80bf 	bne.w	8009524 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80093ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	441a      	add	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d907      	bls.n	80093ca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e0ad      	b.n	8009526 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2203      	movs	r2, #3
 80093ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2200      	movs	r2, #0
 80093d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f042 021a 	orr.w	r2, r2, #26
 80093e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ee:	4a50      	ldr	r2, [pc, #320]	; (8009530 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80093f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f6:	4a4f      	ldr	r2, [pc, #316]	; (8009534 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80093f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093fe:	2200      	movs	r2, #0
 8009400:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009406:	2b01      	cmp	r3, #1
 8009408:	d002      	beq.n	8009410 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	025b      	lsls	r3, r3, #9
 800940e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d90a      	bls.n	800942c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	22a0      	movs	r2, #160	; 0xa0
 800941a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009422:	4618      	mov	r0, r3
 8009424:	f002 ff56 	bl	800c2d4 <SDMMC_CmdWriteMultiBlock>
 8009428:	62f8      	str	r0, [r7, #44]	; 0x2c
 800942a:	e009      	b.n	8009440 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2290      	movs	r2, #144	; 0x90
 8009430:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009438:	4618      	mov	r0, r3
 800943a:	f002 ff29 	bl	800c290 <SDMMC_CmdWriteSingleBlock>
 800943e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	2b00      	cmp	r3, #0
 8009444:	d012      	beq.n	800946c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a3b      	ldr	r2, [pc, #236]	; (8009538 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800944c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009454:	431a      	orrs	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e05c      	b.n	8009526 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f042 0208 	orr.w	r2, r2, #8
 800947a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009480:	2240      	movs	r2, #64	; 0x40
 8009482:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009494:	689a      	ldr	r2, [r3, #8]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3380      	adds	r3, #128	; 0x80
 80094ac:	461a      	mov	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	025b      	lsls	r3, r3, #9
 80094b2:	089b      	lsrs	r3, r3, #2
 80094b4:	f7fa fb9c 	bl	8003bf0 <HAL_DMA_Start_IT>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d01a      	beq.n	80094f4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 021a 	bic.w	r2, r2, #26
 80094cc:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a19      	ldr	r2, [pc, #100]	; (8009538 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80094d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e018      	b.n	8009526 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094f8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	025b      	lsls	r3, r3, #9
 80094fe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009500:	2390      	movs	r3, #144	; 0x90
 8009502:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009504:	2300      	movs	r3, #0
 8009506:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009508:	2300      	movs	r3, #0
 800950a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800950c:	2301      	movs	r3, #1
 800950e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f107 0210 	add.w	r2, r7, #16
 8009518:	4611      	mov	r1, r2
 800951a:	4618      	mov	r0, r3
 800951c:	f002 fe26 	bl	800c16c <SDMMC_ConfigData>

      return HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	e000      	b.n	8009526 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009524:	2302      	movs	r3, #2
  }
}
 8009526:	4618      	mov	r0, r3
 8009528:	3730      	adds	r7, #48	; 0x30
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	08009a65 	.word	0x08009a65
 8009534:	08009b01 	.word	0x08009b01
 8009538:	004005ff 	.word	0x004005ff

0800953c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800955e:	0f9b      	lsrs	r3, r3, #30
 8009560:	b2da      	uxtb	r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800956a:	0e9b      	lsrs	r3, r3, #26
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f003 030f 	and.w	r3, r3, #15
 8009572:	b2da      	uxtb	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800957c:	0e1b      	lsrs	r3, r3, #24
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f003 0303 	and.w	r3, r3, #3
 8009584:	b2da      	uxtb	r2, r3
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800958e:	0c1b      	lsrs	r3, r3, #16
 8009590:	b2da      	uxtb	r2, r3
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800959a:	0a1b      	lsrs	r3, r3, #8
 800959c:	b2da      	uxtb	r2, r3
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b0:	0d1b      	lsrs	r3, r3, #20
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095bc:	0c1b      	lsrs	r3, r3, #16
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	f003 030f 	and.w	r3, r3, #15
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ce:	0bdb      	lsrs	r3, r3, #15
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095e0:	0b9b      	lsrs	r3, r3, #14
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095f2:	0b5b      	lsrs	r3, r3, #13
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009604:	0b1b      	lsrs	r3, r3, #12
 8009606:	b2db      	uxtb	r3, r3
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	b2da      	uxtb	r2, r3
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2200      	movs	r2, #0
 8009616:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961c:	2b00      	cmp	r3, #0
 800961e:	d163      	bne.n	80096e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009624:	009a      	lsls	r2, r3, #2
 8009626:	f640 73fc 	movw	r3, #4092	; 0xffc
 800962a:	4013      	ands	r3, r2
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009630:	0f92      	lsrs	r2, r2, #30
 8009632:	431a      	orrs	r2, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963c:	0edb      	lsrs	r3, r3, #27
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f003 0307 	and.w	r3, r3, #7
 8009644:	b2da      	uxtb	r2, r3
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800964e:	0e1b      	lsrs	r3, r3, #24
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f003 0307 	and.w	r3, r3, #7
 8009656:	b2da      	uxtb	r2, r3
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009660:	0d5b      	lsrs	r3, r3, #21
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f003 0307 	and.w	r3, r3, #7
 8009668:	b2da      	uxtb	r2, r3
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009672:	0c9b      	lsrs	r3, r3, #18
 8009674:	b2db      	uxtb	r3, r3
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	b2da      	uxtb	r2, r3
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009684:	0bdb      	lsrs	r3, r3, #15
 8009686:	b2db      	uxtb	r3, r3
 8009688:	f003 0307 	and.w	r3, r3, #7
 800968c:	b2da      	uxtb	r2, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	1c5a      	adds	r2, r3, #1
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	7e1b      	ldrb	r3, [r3, #24]
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	3302      	adds	r3, #2
 80096a8:	2201      	movs	r2, #1
 80096aa:	fa02 f303 	lsl.w	r3, r2, r3
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80096b2:	fb02 f203 	mul.w	r2, r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	7a1b      	ldrb	r3, [r3, #8]
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	f003 030f 	and.w	r3, r3, #15
 80096c4:	2201      	movs	r2, #1
 80096c6:	409a      	lsls	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80096d4:	0a52      	lsrs	r2, r2, #9
 80096d6:	fb02 f203 	mul.w	r2, r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096e4:	661a      	str	r2, [r3, #96]	; 0x60
 80096e6:	e031      	b.n	800974c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d11d      	bne.n	800972c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096f4:	041b      	lsls	r3, r3, #16
 80096f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096fe:	0c1b      	lsrs	r3, r3, #16
 8009700:	431a      	orrs	r2, r3
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	3301      	adds	r3, #1
 800970c:	029a      	lsls	r2, r3, #10
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009720:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	661a      	str	r2, [r3, #96]	; 0x60
 800972a:	e00f      	b.n	800974c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a58      	ldr	r2, [pc, #352]	; (8009894 <HAL_SD_GetCardCSD+0x344>)
 8009732:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009738:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e09d      	b.n	8009888 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009750:	0b9b      	lsrs	r3, r3, #14
 8009752:	b2db      	uxtb	r3, r3
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	b2da      	uxtb	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009762:	09db      	lsrs	r3, r3, #7
 8009764:	b2db      	uxtb	r3, r3
 8009766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800976a:	b2da      	uxtb	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009774:	b2db      	uxtb	r3, r3
 8009776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800977a:	b2da      	uxtb	r2, r3
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009784:	0fdb      	lsrs	r3, r3, #31
 8009786:	b2da      	uxtb	r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009790:	0f5b      	lsrs	r3, r3, #29
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f003 0303 	and.w	r3, r3, #3
 8009798:	b2da      	uxtb	r2, r3
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a2:	0e9b      	lsrs	r3, r3, #26
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b4:	0d9b      	lsrs	r3, r3, #22
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c6:	0d5b      	lsrs	r3, r3, #21
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e2:	0c1b      	lsrs	r3, r3, #16
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f6:	0bdb      	lsrs	r3, r3, #15
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980a:	0b9b      	lsrs	r3, r3, #14
 800980c:	b2db      	uxtb	r3, r3
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	b2da      	uxtb	r2, r3
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981e:	0b5b      	lsrs	r3, r3, #13
 8009820:	b2db      	uxtb	r3, r3
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	b2da      	uxtb	r2, r3
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009832:	0b1b      	lsrs	r3, r3, #12
 8009834:	b2db      	uxtb	r3, r3
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	b2da      	uxtb	r2, r3
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009846:	0a9b      	lsrs	r3, r3, #10
 8009848:	b2db      	uxtb	r3, r3
 800984a:	f003 0303 	and.w	r3, r3, #3
 800984e:	b2da      	uxtb	r2, r3
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985a:	0a1b      	lsrs	r3, r3, #8
 800985c:	b2db      	uxtb	r3, r3
 800985e:	f003 0303 	and.w	r3, r3, #3
 8009862:	b2da      	uxtb	r2, r3
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800986e:	085b      	lsrs	r3, r3, #1
 8009870:	b2db      	uxtb	r3, r3
 8009872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009876:	b2da      	uxtb	r2, r3
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	004005ff 	.word	0x004005ff

08009898 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80098f0:	b5b0      	push	{r4, r5, r7, lr}
 80098f2:	b08e      	sub	sp, #56	; 0x38
 80098f4:	af04      	add	r7, sp, #16
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2203      	movs	r2, #3
 8009904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990c:	2b03      	cmp	r3, #3
 800990e:	d02e      	beq.n	800996e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009916:	d106      	bne.n	8009926 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	639a      	str	r2, [r3, #56]	; 0x38
 8009924:	e029      	b.n	800997a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800992c:	d10a      	bne.n	8009944 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 faba 	bl	8009ea8 <SD_WideBus_Enable>
 8009934:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	431a      	orrs	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	639a      	str	r2, [r3, #56]	; 0x38
 8009942:	e01a      	b.n	800997a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10a      	bne.n	8009960 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 faf7 	bl	8009f3e <SD_WideBus_Disable>
 8009950:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	431a      	orrs	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	639a      	str	r2, [r3, #56]	; 0x38
 800995e:	e00c      	b.n	800997a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009964:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	639a      	str	r2, [r3, #56]	; 0x38
 800996c:	e005      	b.n	800997a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009972:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00b      	beq.n	800999a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a26      	ldr	r2, [pc, #152]	; (8009a20 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009988:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009998:	e01f      	b.n	80099da <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681d      	ldr	r5, [r3, #0]
 80099c0:	466c      	mov	r4, sp
 80099c2:	f107 0314 	add.w	r3, r7, #20
 80099c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099ce:	f107 0308 	add.w	r3, r7, #8
 80099d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099d4:	4628      	mov	r0, r5
 80099d6:	f002 fb29 	bl	800c02c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099e2:	4618      	mov	r0, r3
 80099e4:	f002 fbee 	bl	800c1c4 <SDMMC_CmdBlockLength>
 80099e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00c      	beq.n	8009a0a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a0a      	ldr	r2, [pc, #40]	; (8009a20 <HAL_SD_ConfigWideBusOperation+0x130>)
 80099f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	431a      	orrs	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3728      	adds	r7, #40	; 0x28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	004005ff 	.word	0x004005ff

08009a24 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009a30:	f107 030c 	add.w	r3, r7, #12
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fa0e 	bl	8009e58 <SD_SendStatus>
 8009a3c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d005      	beq.n	8009a50 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	0a5b      	lsrs	r3, r3, #9
 8009a54:	f003 030f 	and.w	r3, r3, #15
 8009a58:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009a5a:	693b      	ldr	r3, [r7, #16]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a70:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a80:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009a82:	bf00      	nop
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa0:	2b82      	cmp	r3, #130	; 0x82
 8009aa2:	d111      	bne.n	8009ac8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f002 fc35 	bl	800c318 <SDMMC_CmdStopTransfer>
 8009aae:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d008      	beq.n	8009ac8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	431a      	orrs	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7ff fd3a 	bl	800953c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 0208 	bic.w	r2, r2, #8
 8009ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ae0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f004 f84f 	bl	800db94 <HAL_SD_RxCpltCallback>
#endif
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7fa f8ce 	bl	8003cb0 <HAL_DMA_GetError>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d03e      	beq.n	8009b98 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b20:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b28:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d002      	beq.n	8009b36 <SD_DMAError+0x36>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d12d      	bne.n	8009b92 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a19      	ldr	r2, [pc, #100]	; (8009ba0 <SD_DMAError+0xa0>)
 8009b3c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009b4c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009b5a:	6978      	ldr	r0, [r7, #20]
 8009b5c:	f7ff ff62 	bl	8009a24 <HAL_SD_GetCardState>
 8009b60:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	2b06      	cmp	r3, #6
 8009b66:	d002      	beq.n	8009b6e <SD_DMAError+0x6e>
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	2b05      	cmp	r3, #5
 8009b6c:	d10a      	bne.n	8009b84 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f002 fbd0 	bl	800c318 <SDMMC_CmdStopTransfer>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009b92:	6978      	ldr	r0, [r7, #20]
 8009b94:	f7ff fcd2 	bl	800953c <HAL_SD_ErrorCallback>
#endif
  }
}
 8009b98:	bf00      	nop
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	004005ff 	.word	0x004005ff

08009ba4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ba4:	b5b0      	push	{r4, r5, r7, lr}
 8009ba6:	b094      	sub	sp, #80	; 0x50
 8009ba8:	af04      	add	r7, sp, #16
 8009baa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009bac:	2301      	movs	r3, #1
 8009bae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f002 fa80 	bl	800c0ba <SDMMC_GetPowerState>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d102      	bne.n	8009bc6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009bc4:	e0b6      	b.n	8009d34 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d02f      	beq.n	8009c2e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f002 fcab 	bl	800c52e <SDMMC_CmdSendCID>
 8009bd8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <SD_InitCard+0x40>
    {
      return errorstate;
 8009be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be2:	e0a7      	b.n	8009d34 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2100      	movs	r1, #0
 8009bea:	4618      	mov	r0, r3
 8009bec:	f002 faab 	bl	800c146 <SDMMC_GetResponse>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2104      	movs	r1, #4
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f002 faa2 	bl	800c146 <SDMMC_GetResponse>
 8009c02:	4602      	mov	r2, r0
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2108      	movs	r1, #8
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f002 fa99 	bl	800c146 <SDMMC_GetResponse>
 8009c14:	4602      	mov	r2, r0
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	210c      	movs	r1, #12
 8009c20:	4618      	mov	r0, r3
 8009c22:	f002 fa90 	bl	800c146 <SDMMC_GetResponse>
 8009c26:	4602      	mov	r2, r0
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d00d      	beq.n	8009c52 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f107 020e 	add.w	r2, r7, #14
 8009c3e:	4611      	mov	r1, r2
 8009c40:	4618      	mov	r0, r3
 8009c42:	f002 fcb1 	bl	800c5a8 <SDMMC_CmdSetRelAdd>
 8009c46:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <SD_InitCard+0xae>
    {
      return errorstate;
 8009c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c50:	e070      	b.n	8009d34 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d036      	beq.n	8009cc8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009c5a:	89fb      	ldrh	r3, [r7, #14]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c6a:	041b      	lsls	r3, r3, #16
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4610      	mov	r0, r2
 8009c70:	f002 fc7b 	bl	800c56a <SDMMC_CmdSendCSD>
 8009c74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c7e:	e059      	b.n	8009d34 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2100      	movs	r1, #0
 8009c86:	4618      	mov	r0, r3
 8009c88:	f002 fa5d 	bl	800c146 <SDMMC_GetResponse>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2104      	movs	r1, #4
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f002 fa54 	bl	800c146 <SDMMC_GetResponse>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2108      	movs	r1, #8
 8009caa:	4618      	mov	r0, r3
 8009cac:	f002 fa4b 	bl	800c146 <SDMMC_GetResponse>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	210c      	movs	r1, #12
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f002 fa42 	bl	800c146 <SDMMC_GetResponse>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2104      	movs	r1, #4
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f002 fa39 	bl	800c146 <SDMMC_GetResponse>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	0d1a      	lsrs	r2, r3, #20
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009cdc:	f107 0310 	add.w	r3, r7, #16
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff fc34 	bl	8009550 <HAL_SD_GetCardCSD>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cf2:	e01f      	b.n	8009d34 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6819      	ldr	r1, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cfc:	041b      	lsls	r3, r3, #16
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f04f 0300 	mov.w	r3, #0
 8009d04:	4608      	mov	r0, r1
 8009d06:	f002 fb29 	bl	800c35c <SDMMC_CmdSelDesel>
 8009d0a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <SD_InitCard+0x172>
  {
    return errorstate;
 8009d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d14:	e00e      	b.n	8009d34 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681d      	ldr	r5, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	466c      	mov	r4, sp
 8009d1e:	f103 0210 	add.w	r2, r3, #16
 8009d22:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d28:	3304      	adds	r3, #4
 8009d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f002 f97d 	bl	800c02c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3740      	adds	r7, #64	; 0x40
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bdb0      	pop	{r4, r5, r7, pc}

08009d3c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f002 fb24 	bl	800c3a2 <SDMMC_CmdGoIdleState>
 8009d5a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	e072      	b.n	8009e4c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f002 fb37 	bl	800c3de <SDMMC_CmdOperCond>
 8009d70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00d      	beq.n	8009d94 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f002 fb0d 	bl	800c3a2 <SDMMC_CmdGoIdleState>
 8009d88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d004      	beq.n	8009d9a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	e05b      	b.n	8009e4c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d137      	bne.n	8009e12 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2100      	movs	r1, #0
 8009da8:	4618      	mov	r0, r3
 8009daa:	f002 fb37 	bl	800c41c <SDMMC_CmdAppCommand>
 8009dae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d02d      	beq.n	8009e12 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009db6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009dba:	e047      	b.n	8009e4c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f002 fb2a 	bl	800c41c <SDMMC_CmdAppCommand>
 8009dc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <SD_PowerON+0x98>
    {
      return errorstate;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	e03b      	b.n	8009e4c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	491e      	ldr	r1, [pc, #120]	; (8009e54 <SD_PowerON+0x118>)
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f002 fb40 	bl	800c460 <SDMMC_CmdAppOperCommand>
 8009de0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009de8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009dec:	e02e      	b.n	8009e4c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2100      	movs	r1, #0
 8009df4:	4618      	mov	r0, r3
 8009df6:	f002 f9a6 	bl	800c146 <SDMMC_GetResponse>
 8009dfa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	0fdb      	lsrs	r3, r3, #31
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <SD_PowerON+0xcc>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e000      	b.n	8009e0a <SD_PowerON+0xce>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	613b      	str	r3, [r7, #16]

    count++;
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d802      	bhi.n	8009e22 <SD_PowerON+0xe6>
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0cc      	beq.n	8009dbc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d902      	bls.n	8009e32 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009e2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e30:	e00c      	b.n	8009e4c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	645a      	str	r2, [r3, #68]	; 0x44
 8009e42:	e002      	b.n	8009e4a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	c1100000 	.word	0xc1100000

08009e58 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d102      	bne.n	8009e6e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e6c:	e018      	b.n	8009ea0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e76:	041b      	lsls	r3, r3, #16
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	f002 fbb5 	bl	800c5ea <SDMMC_CmdSendStatus>
 8009e80:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	e009      	b.n	8009ea0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2100      	movs	r1, #0
 8009e92:	4618      	mov	r0, r3
 8009e94:	f002 f957 	bl	800c146 <SDMMC_GetResponse>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f002 f941 	bl	800c146 <SDMMC_GetResponse>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ece:	d102      	bne.n	8009ed6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ed0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ed4:	e02f      	b.n	8009f36 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ed6:	f107 030c 	add.w	r3, r7, #12
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f879 	bl	8009fd4 <SD_FindSCR>
 8009ee2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	e023      	b.n	8009f36 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d01c      	beq.n	8009f32 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f00:	041b      	lsls	r3, r3, #16
 8009f02:	4619      	mov	r1, r3
 8009f04:	4610      	mov	r0, r2
 8009f06:	f002 fa89 	bl	800c41c <SDMMC_CmdAppCommand>
 8009f0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	e00f      	b.n	8009f36 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2102      	movs	r1, #2
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f002 fac3 	bl	800c4a8 <SDMMC_CmdBusWidth>
 8009f22:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	e003      	b.n	8009f36 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	e001      	b.n	8009f36 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b086      	sub	sp, #24
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2100      	movs	r1, #0
 8009f54:	4618      	mov	r0, r3
 8009f56:	f002 f8f6 	bl	800c146 <SDMMC_GetResponse>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f64:	d102      	bne.n	8009f6c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f6a:	e02f      	b.n	8009fcc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f6c:	f107 030c 	add.w	r3, r7, #12
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f82e 	bl	8009fd4 <SD_FindSCR>
 8009f78:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	e023      	b.n	8009fcc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01c      	beq.n	8009fc8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f96:	041b      	lsls	r3, r3, #16
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	f002 fa3e 	bl	800c41c <SDMMC_CmdAppCommand>
 8009fa0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	e00f      	b.n	8009fcc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f002 fa78 	bl	800c4a8 <SDMMC_CmdBusWidth>
 8009fb8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	e003      	b.n	8009fcc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e001      	b.n	8009fcc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009fd4:	b590      	push	{r4, r7, lr}
 8009fd6:	b08f      	sub	sp, #60	; 0x3c
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009fde:	f7f9 f8fd 	bl	80031dc <HAL_GetTick>
 8009fe2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60bb      	str	r3, [r7, #8]
 8009fec:	2300      	movs	r3, #0
 8009fee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2108      	movs	r1, #8
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f002 f8e2 	bl	800c1c4 <SDMMC_CmdBlockLength>
 800a000:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <SD_FindSCR+0x38>
  {
    return errorstate;
 800a008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00a:	e0b2      	b.n	800a172 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a014:	041b      	lsls	r3, r3, #16
 800a016:	4619      	mov	r1, r3
 800a018:	4610      	mov	r0, r2
 800a01a:	f002 f9ff 	bl	800c41c <SDMMC_CmdAppCommand>
 800a01e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	e0a3      	b.n	800a172 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a02a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a02e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a030:	2308      	movs	r3, #8
 800a032:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a034:	2330      	movs	r3, #48	; 0x30
 800a036:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a038:	2302      	movs	r3, #2
 800a03a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a040:	2301      	movs	r3, #1
 800a042:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f107 0210 	add.w	r2, r7, #16
 800a04c:	4611      	mov	r1, r2
 800a04e:	4618      	mov	r0, r3
 800a050:	f002 f88c 	bl	800c16c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4618      	mov	r0, r3
 800a05a:	f002 fa47 	bl	800c4ec <SDMMC_CmdSendSCR>
 800a05e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a062:	2b00      	cmp	r3, #0
 800a064:	d02a      	beq.n	800a0bc <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a068:	e083      	b.n	800a172 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00f      	beq.n	800a098 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6819      	ldr	r1, [r3, #0]
 800a07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	f107 0208 	add.w	r2, r7, #8
 800a084:	18d4      	adds	r4, r2, r3
 800a086:	4608      	mov	r0, r1
 800a088:	f001 fffc 	bl	800c084 <SDMMC_ReadFIFO>
 800a08c:	4603      	mov	r3, r0
 800a08e:	6023      	str	r3, [r4, #0]
      index++;
 800a090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a092:	3301      	adds	r3, #1
 800a094:	637b      	str	r3, [r7, #52]	; 0x34
 800a096:	e006      	b.n	800a0a6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a09e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d012      	beq.n	800a0cc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a0a6:	f7f9 f899 	bl	80031dc <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0b4:	d102      	bne.n	800a0bc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a0b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0ba:	e05a      	b.n	800a172 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0cf      	beq.n	800a06a <SD_FindSCR+0x96>
 800a0ca:	e000      	b.n	800a0ce <SD_FindSCR+0xfa>
      break;
 800a0cc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2208      	movs	r2, #8
 800a0e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a0e4:	2308      	movs	r3, #8
 800a0e6:	e044      	b.n	800a172 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d005      	beq.n	800a102 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0fe:	2302      	movs	r3, #2
 800a100:	e037      	b.n	800a172 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a108:	f003 0320 	and.w	r3, r3, #32
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d005      	beq.n	800a11c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2220      	movs	r2, #32
 800a116:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a118:	2320      	movs	r3, #32
 800a11a:	e02a      	b.n	800a172 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f240 523a 	movw	r2, #1338	; 0x53a
 800a124:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	061a      	lsls	r2, r3, #24
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a132:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	0a1b      	lsrs	r3, r3, #8
 800a138:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a13c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	0e1b      	lsrs	r3, r3, #24
 800a142:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	601a      	str	r2, [r3, #0]
    scr++;
 800a148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14a:	3304      	adds	r3, #4
 800a14c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	061a      	lsls	r2, r3, #24
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	021b      	lsls	r3, r3, #8
 800a156:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a15a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	0a1b      	lsrs	r3, r3, #8
 800a160:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a164:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	0e1b      	lsrs	r3, r3, #24
 800a16a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	373c      	adds	r7, #60	; 0x3c
 800a176:	46bd      	mov	sp, r7
 800a178:	bd90      	pop	{r4, r7, pc}

0800a17a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e025      	b.n	800a1da <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d106      	bne.n	800a1a8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7f8 fe7e 	bl	8002ea4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	f001 fe70 	bl	800bea0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6818      	ldr	r0, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	f001 fec4 	bl	800bf58 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
	...

0800a1e4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e04c      	b.n	800a290 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d106      	bne.n	800a210 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7f8 fad0 	bl	80027b0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2202      	movs	r2, #2
 800a214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f022 0203 	bic.w	r2, r2, #3
 800a226:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	4b19      	ldr	r3, [pc, #100]	; (800a298 <HAL_SPDIFRX_Init+0xb4>)
 800a234:	4013      	ands	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a240:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a246:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a24c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a252:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a258:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a25e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a264:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a26a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a270:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	4313      	orrs	r3, r2
 800a276:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	fff88407 	.word	0xfff88407

0800a29c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e09d      	b.n	800a3ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d108      	bne.n	800a2c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2be:	d009      	beq.n	800a2d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	61da      	str	r2, [r3, #28]
 800a2c6:	e005      	b.n	800a2d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7f8 fac2 	bl	8002878 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a30a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a314:	d902      	bls.n	800a31c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a316:	2300      	movs	r3, #0
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	e002      	b.n	800a322 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a31c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a320:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a32a:	d007      	beq.n	800a33c <HAL_SPI_Init+0xa0>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a334:	d002      	beq.n	800a33c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a34c:	431a      	orrs	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	431a      	orrs	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	695b      	ldr	r3, [r3, #20]
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	431a      	orrs	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a36a:	431a      	orrs	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a374:	431a      	orrs	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a37e:	ea42 0103 	orr.w	r1, r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a386:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	0c1b      	lsrs	r3, r3, #16
 800a398:	f003 0204 	and.w	r2, r3, #4
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a0:	f003 0310 	and.w	r3, r3, #16
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3aa:	f003 0308 	and.w	r3, r3, #8
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a3b8:	ea42 0103 	orr.w	r1, r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	69da      	ldr	r2, [r3, #28]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e049      	b.n	800a498 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d106      	bne.n	800a41e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7f8 fa8f 	bl	800293c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2202      	movs	r2, #2
 800a422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	3304      	adds	r3, #4
 800a42e:	4619      	mov	r1, r3
 800a430:	4610      	mov	r0, r2
 800a432:	f000 fc29 	bl	800ac88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d001      	beq.n	800a4b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e054      	b.n	800a562 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68da      	ldr	r2, [r3, #12]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f042 0201 	orr.w	r2, r2, #1
 800a4ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a26      	ldr	r2, [pc, #152]	; (800a570 <HAL_TIM_Base_Start_IT+0xd0>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d022      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e2:	d01d      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a22      	ldr	r2, [pc, #136]	; (800a574 <HAL_TIM_Base_Start_IT+0xd4>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d018      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a21      	ldr	r2, [pc, #132]	; (800a578 <HAL_TIM_Base_Start_IT+0xd8>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d013      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a1f      	ldr	r2, [pc, #124]	; (800a57c <HAL_TIM_Base_Start_IT+0xdc>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d00e      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a1e      	ldr	r2, [pc, #120]	; (800a580 <HAL_TIM_Base_Start_IT+0xe0>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d009      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a1c      	ldr	r2, [pc, #112]	; (800a584 <HAL_TIM_Base_Start_IT+0xe4>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d004      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x80>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a1b      	ldr	r2, [pc, #108]	; (800a588 <HAL_TIM_Base_Start_IT+0xe8>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d115      	bne.n	800a54c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689a      	ldr	r2, [r3, #8]
 800a526:	4b19      	ldr	r3, [pc, #100]	; (800a58c <HAL_TIM_Base_Start_IT+0xec>)
 800a528:	4013      	ands	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2b06      	cmp	r3, #6
 800a530:	d015      	beq.n	800a55e <HAL_TIM_Base_Start_IT+0xbe>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a538:	d011      	beq.n	800a55e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f042 0201 	orr.w	r2, r2, #1
 800a548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a54a:	e008      	b.n	800a55e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f042 0201 	orr.w	r2, r2, #1
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	e000      	b.n	800a560 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a55e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	40010000 	.word	0x40010000
 800a574:	40000400 	.word	0x40000400
 800a578:	40000800 	.word	0x40000800
 800a57c:	40000c00 	.word	0x40000c00
 800a580:	40010400 	.word	0x40010400
 800a584:	40014000 	.word	0x40014000
 800a588:	40001800 	.word	0x40001800
 800a58c:	00010007 	.word	0x00010007

0800a590 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e049      	b.n	800a636 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d106      	bne.n	800a5bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7f8 fa2e 	bl	8002a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	f000 fb5a 	bl	800ac88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b082      	sub	sp, #8
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	f003 0302 	and.w	r3, r3, #2
 800a650:	2b02      	cmp	r3, #2
 800a652:	d122      	bne.n	800a69a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	f003 0302 	and.w	r3, r3, #2
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d11b      	bne.n	800a69a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f06f 0202 	mvn.w	r2, #2
 800a66a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d003      	beq.n	800a688 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fae3 	bl	800ac4c <HAL_TIM_IC_CaptureCallback>
 800a686:	e005      	b.n	800a694 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fad5 	bl	800ac38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fae6 	bl	800ac60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	f003 0304 	and.w	r3, r3, #4
 800a6a4:	2b04      	cmp	r3, #4
 800a6a6:	d122      	bne.n	800a6ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d11b      	bne.n	800a6ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f06f 0204 	mvn.w	r2, #4
 800a6be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d003      	beq.n	800a6dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fab9 	bl	800ac4c <HAL_TIM_IC_CaptureCallback>
 800a6da:	e005      	b.n	800a6e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 faab 	bl	800ac38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fabc 	bl	800ac60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d122      	bne.n	800a742 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	f003 0308 	and.w	r3, r3, #8
 800a706:	2b08      	cmp	r3, #8
 800a708:	d11b      	bne.n	800a742 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f06f 0208 	mvn.w	r2, #8
 800a712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2204      	movs	r2, #4
 800a718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	f003 0303 	and.w	r3, r3, #3
 800a724:	2b00      	cmp	r3, #0
 800a726:	d003      	beq.n	800a730 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 fa8f 	bl	800ac4c <HAL_TIM_IC_CaptureCallback>
 800a72e:	e005      	b.n	800a73c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fa81 	bl	800ac38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fa92 	bl	800ac60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	f003 0310 	and.w	r3, r3, #16
 800a74c:	2b10      	cmp	r3, #16
 800a74e:	d122      	bne.n	800a796 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	f003 0310 	and.w	r3, r3, #16
 800a75a:	2b10      	cmp	r3, #16
 800a75c:	d11b      	bne.n	800a796 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f06f 0210 	mvn.w	r2, #16
 800a766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2208      	movs	r2, #8
 800a76c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d003      	beq.n	800a784 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fa65 	bl	800ac4c <HAL_TIM_IC_CaptureCallback>
 800a782:	e005      	b.n	800a790 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fa57 	bl	800ac38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fa68 	bl	800ac60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d10e      	bne.n	800a7c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d107      	bne.n	800a7c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f06f 0201 	mvn.w	r2, #1
 800a7ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7f7 fb31 	bl	8001e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7cc:	2b80      	cmp	r3, #128	; 0x80
 800a7ce:	d10e      	bne.n	800a7ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7da:	2b80      	cmp	r3, #128	; 0x80
 800a7dc:	d107      	bne.n	800a7ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fefb 	bl	800b5e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7fc:	d10e      	bne.n	800a81c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a808:	2b80      	cmp	r3, #128	; 0x80
 800a80a:	d107      	bne.n	800a81c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 feee 	bl	800b5f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a826:	2b40      	cmp	r3, #64	; 0x40
 800a828:	d10e      	bne.n	800a848 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a834:	2b40      	cmp	r3, #64	; 0x40
 800a836:	d107      	bne.n	800a848 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fa16 	bl	800ac74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	f003 0320 	and.w	r3, r3, #32
 800a852:	2b20      	cmp	r3, #32
 800a854:	d10e      	bne.n	800a874 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	f003 0320 	and.w	r3, r3, #32
 800a860:	2b20      	cmp	r3, #32
 800a862:	d107      	bne.n	800a874 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f06f 0220 	mvn.w	r2, #32
 800a86c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 feae 	bl	800b5d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a874:	bf00      	nop
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a892:	2b01      	cmp	r3, #1
 800a894:	d101      	bne.n	800a89a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a896:	2302      	movs	r3, #2
 800a898:	e0ff      	b.n	800aa9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b14      	cmp	r3, #20
 800a8a6:	f200 80f0 	bhi.w	800aa8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a8aa:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b0:	0800a905 	.word	0x0800a905
 800a8b4:	0800aa8b 	.word	0x0800aa8b
 800a8b8:	0800aa8b 	.word	0x0800aa8b
 800a8bc:	0800aa8b 	.word	0x0800aa8b
 800a8c0:	0800a945 	.word	0x0800a945
 800a8c4:	0800aa8b 	.word	0x0800aa8b
 800a8c8:	0800aa8b 	.word	0x0800aa8b
 800a8cc:	0800aa8b 	.word	0x0800aa8b
 800a8d0:	0800a987 	.word	0x0800a987
 800a8d4:	0800aa8b 	.word	0x0800aa8b
 800a8d8:	0800aa8b 	.word	0x0800aa8b
 800a8dc:	0800aa8b 	.word	0x0800aa8b
 800a8e0:	0800a9c7 	.word	0x0800a9c7
 800a8e4:	0800aa8b 	.word	0x0800aa8b
 800a8e8:	0800aa8b 	.word	0x0800aa8b
 800a8ec:	0800aa8b 	.word	0x0800aa8b
 800a8f0:	0800aa09 	.word	0x0800aa09
 800a8f4:	0800aa8b 	.word	0x0800aa8b
 800a8f8:	0800aa8b 	.word	0x0800aa8b
 800a8fc:	0800aa8b 	.word	0x0800aa8b
 800a900:	0800aa49 	.word	0x0800aa49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fa5c 	bl	800adc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 0208 	orr.w	r2, r2, #8
 800a91e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	699a      	ldr	r2, [r3, #24]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0204 	bic.w	r2, r2, #4
 800a92e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6999      	ldr	r1, [r3, #24]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	691a      	ldr	r2, [r3, #16]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	619a      	str	r2, [r3, #24]
      break;
 800a942:	e0a5      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 faae 	bl	800aeac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699a      	ldr	r2, [r3, #24]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a95e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	699a      	ldr	r2, [r3, #24]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a96e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6999      	ldr	r1, [r3, #24]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	021a      	lsls	r2, r3, #8
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	430a      	orrs	r2, r1
 800a982:	619a      	str	r2, [r3, #24]
      break;
 800a984:	e084      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 fb05 	bl	800af9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69da      	ldr	r2, [r3, #28]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f042 0208 	orr.w	r2, r2, #8
 800a9a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	69da      	ldr	r2, [r3, #28]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0204 	bic.w	r2, r2, #4
 800a9b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69d9      	ldr	r1, [r3, #28]
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	691a      	ldr	r2, [r3, #16]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	61da      	str	r2, [r3, #28]
      break;
 800a9c4:	e064      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 fb5b 	bl	800b088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	69da      	ldr	r2, [r3, #28]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	69da      	ldr	r2, [r3, #28]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	69d9      	ldr	r1, [r3, #28]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	021a      	lsls	r2, r3, #8
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	61da      	str	r2, [r3, #28]
      break;
 800aa06:	e043      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68b9      	ldr	r1, [r7, #8]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 fb92 	bl	800b138 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f042 0208 	orr.w	r2, r2, #8
 800aa22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f022 0204 	bic.w	r2, r2, #4
 800aa32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	691a      	ldr	r2, [r3, #16]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa46:	e023      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 fbc4 	bl	800b1dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	021a      	lsls	r2, r3, #8
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	430a      	orrs	r2, r1
 800aa86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa88:	e002      	b.n	800aa90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	75fb      	strb	r3, [r7, #23]
      break;
 800aa8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa98:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3718      	adds	r7, #24
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop

0800aaa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d101      	bne.n	800aac0 <HAL_TIM_ConfigClockSource+0x1c>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e0b4      	b.n	800ac2a <HAL_TIM_ConfigClockSource+0x186>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2202      	movs	r2, #2
 800aacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	4b56      	ldr	r3, [pc, #344]	; (800ac34 <HAL_TIM_ConfigClockSource+0x190>)
 800aadc:	4013      	ands	r3, r2
 800aade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaf8:	d03e      	beq.n	800ab78 <HAL_TIM_ConfigClockSource+0xd4>
 800aafa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aafe:	f200 8087 	bhi.w	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab06:	f000 8086 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x172>
 800ab0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab0e:	d87f      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab10:	2b70      	cmp	r3, #112	; 0x70
 800ab12:	d01a      	beq.n	800ab4a <HAL_TIM_ConfigClockSource+0xa6>
 800ab14:	2b70      	cmp	r3, #112	; 0x70
 800ab16:	d87b      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab18:	2b60      	cmp	r3, #96	; 0x60
 800ab1a:	d050      	beq.n	800abbe <HAL_TIM_ConfigClockSource+0x11a>
 800ab1c:	2b60      	cmp	r3, #96	; 0x60
 800ab1e:	d877      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab20:	2b50      	cmp	r3, #80	; 0x50
 800ab22:	d03c      	beq.n	800ab9e <HAL_TIM_ConfigClockSource+0xfa>
 800ab24:	2b50      	cmp	r3, #80	; 0x50
 800ab26:	d873      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab28:	2b40      	cmp	r3, #64	; 0x40
 800ab2a:	d058      	beq.n	800abde <HAL_TIM_ConfigClockSource+0x13a>
 800ab2c:	2b40      	cmp	r3, #64	; 0x40
 800ab2e:	d86f      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab30:	2b30      	cmp	r3, #48	; 0x30
 800ab32:	d064      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab34:	2b30      	cmp	r3, #48	; 0x30
 800ab36:	d86b      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab38:	2b20      	cmp	r3, #32
 800ab3a:	d060      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab3c:	2b20      	cmp	r3, #32
 800ab3e:	d867      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d05c      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab44:	2b10      	cmp	r3, #16
 800ab46:	d05a      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab48:	e062      	b.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	6899      	ldr	r1, [r3, #8]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	f000 fc0d 	bl	800b378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	609a      	str	r2, [r3, #8]
      break;
 800ab76:	e04f      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6818      	ldr	r0, [r3, #0]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	6899      	ldr	r1, [r3, #8]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	f000 fbf6 	bl	800b378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689a      	ldr	r2, [r3, #8]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab9a:	609a      	str	r2, [r3, #8]
      break;
 800ab9c:	e03c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6818      	ldr	r0, [r3, #0]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	6859      	ldr	r1, [r3, #4]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	461a      	mov	r2, r3
 800abac:	f000 fb6a 	bl	800b284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2150      	movs	r1, #80	; 0x50
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fbc3 	bl	800b342 <TIM_ITRx_SetConfig>
      break;
 800abbc:	e02c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	6859      	ldr	r1, [r3, #4]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	461a      	mov	r2, r3
 800abcc:	f000 fb89 	bl	800b2e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2160      	movs	r1, #96	; 0x60
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fbb3 	bl	800b342 <TIM_ITRx_SetConfig>
      break;
 800abdc:	e01c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	6859      	ldr	r1, [r3, #4]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	461a      	mov	r2, r3
 800abec:	f000 fb4a 	bl	800b284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2140      	movs	r1, #64	; 0x40
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fba3 	bl	800b342 <TIM_ITRx_SetConfig>
      break;
 800abfc:	e00c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4619      	mov	r1, r3
 800ac08:	4610      	mov	r0, r2
 800ac0a:	f000 fb9a 	bl	800b342 <TIM_ITRx_SetConfig>
      break;
 800ac0e:	e003      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	73fb      	strb	r3, [r7, #15]
      break;
 800ac14:	e000      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	fffeff88 	.word	0xfffeff88

0800ac38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a40      	ldr	r2, [pc, #256]	; (800ad9c <TIM_Base_SetConfig+0x114>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d013      	beq.n	800acc8 <TIM_Base_SetConfig+0x40>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aca6:	d00f      	beq.n	800acc8 <TIM_Base_SetConfig+0x40>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a3d      	ldr	r2, [pc, #244]	; (800ada0 <TIM_Base_SetConfig+0x118>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d00b      	beq.n	800acc8 <TIM_Base_SetConfig+0x40>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a3c      	ldr	r2, [pc, #240]	; (800ada4 <TIM_Base_SetConfig+0x11c>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d007      	beq.n	800acc8 <TIM_Base_SetConfig+0x40>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a3b      	ldr	r2, [pc, #236]	; (800ada8 <TIM_Base_SetConfig+0x120>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d003      	beq.n	800acc8 <TIM_Base_SetConfig+0x40>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a3a      	ldr	r2, [pc, #232]	; (800adac <TIM_Base_SetConfig+0x124>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d108      	bne.n	800acda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a2f      	ldr	r2, [pc, #188]	; (800ad9c <TIM_Base_SetConfig+0x114>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d02b      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ace8:	d027      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a2c      	ldr	r2, [pc, #176]	; (800ada0 <TIM_Base_SetConfig+0x118>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d023      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a2b      	ldr	r2, [pc, #172]	; (800ada4 <TIM_Base_SetConfig+0x11c>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d01f      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a2a      	ldr	r2, [pc, #168]	; (800ada8 <TIM_Base_SetConfig+0x120>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d01b      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a29      	ldr	r2, [pc, #164]	; (800adac <TIM_Base_SetConfig+0x124>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d017      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a28      	ldr	r2, [pc, #160]	; (800adb0 <TIM_Base_SetConfig+0x128>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d013      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a27      	ldr	r2, [pc, #156]	; (800adb4 <TIM_Base_SetConfig+0x12c>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d00f      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a26      	ldr	r2, [pc, #152]	; (800adb8 <TIM_Base_SetConfig+0x130>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d00b      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a25      	ldr	r2, [pc, #148]	; (800adbc <TIM_Base_SetConfig+0x134>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d007      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a24      	ldr	r2, [pc, #144]	; (800adc0 <TIM_Base_SetConfig+0x138>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d003      	beq.n	800ad3a <TIM_Base_SetConfig+0xb2>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a23      	ldr	r2, [pc, #140]	; (800adc4 <TIM_Base_SetConfig+0x13c>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d108      	bne.n	800ad4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	689a      	ldr	r2, [r3, #8]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a0a      	ldr	r2, [pc, #40]	; (800ad9c <TIM_Base_SetConfig+0x114>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d003      	beq.n	800ad80 <TIM_Base_SetConfig+0xf8>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a0c      	ldr	r2, [pc, #48]	; (800adac <TIM_Base_SetConfig+0x124>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d103      	bne.n	800ad88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	691a      	ldr	r2, [r3, #16]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	615a      	str	r2, [r3, #20]
}
 800ad8e:	bf00      	nop
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	40010000 	.word	0x40010000
 800ada0:	40000400 	.word	0x40000400
 800ada4:	40000800 	.word	0x40000800
 800ada8:	40000c00 	.word	0x40000c00
 800adac:	40010400 	.word	0x40010400
 800adb0:	40014000 	.word	0x40014000
 800adb4:	40014400 	.word	0x40014400
 800adb8:	40014800 	.word	0x40014800
 800adbc:	40001800 	.word	0x40001800
 800adc0:	40001c00 	.word	0x40001c00
 800adc4:	40002000 	.word	0x40002000

0800adc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adc8:	b480      	push	{r7}
 800adca:	b087      	sub	sp, #28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	f023 0201 	bic.w	r2, r3, #1
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	4b2b      	ldr	r3, [pc, #172]	; (800aea0 <TIM_OC1_SetConfig+0xd8>)
 800adf4:	4013      	ands	r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 0303 	bic.w	r3, r3, #3
 800adfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f023 0302 	bic.w	r3, r3, #2
 800ae10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a21      	ldr	r2, [pc, #132]	; (800aea4 <TIM_OC1_SetConfig+0xdc>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d003      	beq.n	800ae2c <TIM_OC1_SetConfig+0x64>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a20      	ldr	r2, [pc, #128]	; (800aea8 <TIM_OC1_SetConfig+0xe0>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d10c      	bne.n	800ae46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f023 0308 	bic.w	r3, r3, #8
 800ae32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f023 0304 	bic.w	r3, r3, #4
 800ae44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a16      	ldr	r2, [pc, #88]	; (800aea4 <TIM_OC1_SetConfig+0xdc>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d003      	beq.n	800ae56 <TIM_OC1_SetConfig+0x8e>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a15      	ldr	r2, [pc, #84]	; (800aea8 <TIM_OC1_SetConfig+0xe0>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d111      	bne.n	800ae7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	621a      	str	r2, [r3, #32]
}
 800ae94:	bf00      	nop
 800ae96:	371c      	adds	r7, #28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	fffeff8f 	.word	0xfffeff8f
 800aea4:	40010000 	.word	0x40010000
 800aea8:	40010400 	.word	0x40010400

0800aeac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b087      	sub	sp, #28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	f023 0210 	bic.w	r2, r3, #16
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	4b2e      	ldr	r3, [pc, #184]	; (800af90 <TIM_OC2_SetConfig+0xe4>)
 800aed8:	4013      	ands	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	021b      	lsls	r3, r3, #8
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f023 0320 	bic.w	r3, r3, #32
 800aef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	011b      	lsls	r3, r3, #4
 800aefe:	697a      	ldr	r2, [r7, #20]
 800af00:	4313      	orrs	r3, r2
 800af02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a23      	ldr	r2, [pc, #140]	; (800af94 <TIM_OC2_SetConfig+0xe8>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d003      	beq.n	800af14 <TIM_OC2_SetConfig+0x68>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a22      	ldr	r2, [pc, #136]	; (800af98 <TIM_OC2_SetConfig+0xec>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d10d      	bne.n	800af30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	4313      	orrs	r3, r2
 800af26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a18      	ldr	r2, [pc, #96]	; (800af94 <TIM_OC2_SetConfig+0xe8>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d003      	beq.n	800af40 <TIM_OC2_SetConfig+0x94>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a17      	ldr	r2, [pc, #92]	; (800af98 <TIM_OC2_SetConfig+0xec>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d113      	bne.n	800af68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	4313      	orrs	r3, r2
 800af5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	4313      	orrs	r3, r2
 800af66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	685a      	ldr	r2, [r3, #4]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	621a      	str	r2, [r3, #32]
}
 800af82:	bf00      	nop
 800af84:	371c      	adds	r7, #28
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	feff8fff 	.word	0xfeff8fff
 800af94:	40010000 	.word	0x40010000
 800af98:	40010400 	.word	0x40010400

0800af9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	69db      	ldr	r3, [r3, #28]
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	4b2d      	ldr	r3, [pc, #180]	; (800b07c <TIM_OC3_SetConfig+0xe0>)
 800afc8:	4013      	ands	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f023 0303 	bic.w	r3, r3, #3
 800afd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	4313      	orrs	r3, r2
 800afdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	021b      	lsls	r3, r3, #8
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	4313      	orrs	r3, r2
 800aff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a22      	ldr	r2, [pc, #136]	; (800b080 <TIM_OC3_SetConfig+0xe4>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d003      	beq.n	800b002 <TIM_OC3_SetConfig+0x66>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a21      	ldr	r2, [pc, #132]	; (800b084 <TIM_OC3_SetConfig+0xe8>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d10d      	bne.n	800b01e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	021b      	lsls	r3, r3, #8
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	4313      	orrs	r3, r2
 800b014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b01c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a17      	ldr	r2, [pc, #92]	; (800b080 <TIM_OC3_SetConfig+0xe4>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d003      	beq.n	800b02e <TIM_OC3_SetConfig+0x92>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a16      	ldr	r2, [pc, #88]	; (800b084 <TIM_OC3_SetConfig+0xe8>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d113      	bne.n	800b056 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b03c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	695b      	ldr	r3, [r3, #20]
 800b042:	011b      	lsls	r3, r3, #4
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	4313      	orrs	r3, r2
 800b048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	011b      	lsls	r3, r3, #4
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	4313      	orrs	r3, r2
 800b054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	693a      	ldr	r2, [r7, #16]
 800b05a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	685a      	ldr	r2, [r3, #4]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	621a      	str	r2, [r3, #32]
}
 800b070:	bf00      	nop
 800b072:	371c      	adds	r7, #28
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr
 800b07c:	fffeff8f 	.word	0xfffeff8f
 800b080:	40010000 	.word	0x40010000
 800b084:	40010400 	.word	0x40010400

0800b088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	4b1e      	ldr	r3, [pc, #120]	; (800b12c <TIM_OC4_SetConfig+0xa4>)
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	021b      	lsls	r3, r3, #8
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	031b      	lsls	r3, r3, #12
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a13      	ldr	r2, [pc, #76]	; (800b130 <TIM_OC4_SetConfig+0xa8>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d003      	beq.n	800b0f0 <TIM_OC4_SetConfig+0x68>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a12      	ldr	r2, [pc, #72]	; (800b134 <TIM_OC4_SetConfig+0xac>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d109      	bne.n	800b104 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	019b      	lsls	r3, r3, #6
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	4313      	orrs	r3, r2
 800b102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	621a      	str	r2, [r3, #32]
}
 800b11e:	bf00      	nop
 800b120:	371c      	adds	r7, #28
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	feff8fff 	.word	0xfeff8fff
 800b130:	40010000 	.word	0x40010000
 800b134:	40010400 	.word	0x40010400

0800b138 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b138:	b480      	push	{r7}
 800b13a:	b087      	sub	sp, #28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4b1b      	ldr	r3, [pc, #108]	; (800b1d0 <TIM_OC5_SetConfig+0x98>)
 800b164:	4013      	ands	r3, r2
 800b166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	4313      	orrs	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	041b      	lsls	r3, r3, #16
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	4313      	orrs	r3, r2
 800b184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a12      	ldr	r2, [pc, #72]	; (800b1d4 <TIM_OC5_SetConfig+0x9c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d003      	beq.n	800b196 <TIM_OC5_SetConfig+0x5e>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a11      	ldr	r2, [pc, #68]	; (800b1d8 <TIM_OC5_SetConfig+0xa0>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d109      	bne.n	800b1aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b19c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	021b      	lsls	r3, r3, #8
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	685a      	ldr	r2, [r3, #4]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	621a      	str	r2, [r3, #32]
}
 800b1c4:	bf00      	nop
 800b1c6:	371c      	adds	r7, #28
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	fffeff8f 	.word	0xfffeff8f
 800b1d4:	40010000 	.word	0x40010000
 800b1d8:	40010400 	.word	0x40010400

0800b1dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b087      	sub	sp, #28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	4b1c      	ldr	r3, [pc, #112]	; (800b278 <TIM_OC6_SetConfig+0x9c>)
 800b208:	4013      	ands	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	4313      	orrs	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b21e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	051b      	lsls	r3, r3, #20
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	4313      	orrs	r3, r2
 800b22a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a13      	ldr	r2, [pc, #76]	; (800b27c <TIM_OC6_SetConfig+0xa0>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d003      	beq.n	800b23c <TIM_OC6_SetConfig+0x60>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a12      	ldr	r2, [pc, #72]	; (800b280 <TIM_OC6_SetConfig+0xa4>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d109      	bne.n	800b250 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b242:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	029b      	lsls	r3, r3, #10
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	697a      	ldr	r2, [r7, #20]
 800b254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	621a      	str	r2, [r3, #32]
}
 800b26a:	bf00      	nop
 800b26c:	371c      	adds	r7, #28
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	feff8fff 	.word	0xfeff8fff
 800b27c:	40010000 	.word	0x40010000
 800b280:	40010400 	.word	0x40010400

0800b284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b284:	b480      	push	{r7}
 800b286:	b087      	sub	sp, #28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6a1b      	ldr	r3, [r3, #32]
 800b294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	f023 0201 	bic.w	r2, r3, #1
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	011b      	lsls	r3, r3, #4
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f023 030a 	bic.w	r3, r3, #10
 800b2c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	621a      	str	r2, [r3, #32]
}
 800b2d6:	bf00      	nop
 800b2d8:	371c      	adds	r7, #28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b087      	sub	sp, #28
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	60f8      	str	r0, [r7, #12]
 800b2ea:	60b9      	str	r1, [r7, #8]
 800b2ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	f023 0210 	bic.w	r2, r3, #16
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6a1b      	ldr	r3, [r3, #32]
 800b304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b30c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	031b      	lsls	r3, r3, #12
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	4313      	orrs	r3, r2
 800b316:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b31e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	693a      	ldr	r2, [r7, #16]
 800b326:	4313      	orrs	r3, r2
 800b328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	621a      	str	r2, [r3, #32]
}
 800b336:	bf00      	nop
 800b338:	371c      	adds	r7, #28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b342:	b480      	push	{r7}
 800b344:	b085      	sub	sp, #20
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4313      	orrs	r3, r2
 800b360:	f043 0307 	orr.w	r3, r3, #7
 800b364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	609a      	str	r2, [r3, #8]
}
 800b36c:	bf00      	nop
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b378:	b480      	push	{r7}
 800b37a:	b087      	sub	sp, #28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
 800b384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	021a      	lsls	r2, r3, #8
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	431a      	orrs	r2, r3
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	697a      	ldr	r2, [r7, #20]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	609a      	str	r2, [r3, #8]
}
 800b3ac:	bf00      	nop
 800b3ae:	371c      	adds	r7, #28
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d101      	bne.n	800b3d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	e06d      	b.n	800b4ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2202      	movs	r2, #2
 800b3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a30      	ldr	r2, [pc, #192]	; (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d004      	beq.n	800b404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a2f      	ldr	r2, [pc, #188]	; (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d108      	bne.n	800b416 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b40a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	4313      	orrs	r3, r2
 800b414:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b41c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	4313      	orrs	r3, r2
 800b426:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a20      	ldr	r2, [pc, #128]	; (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d022      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b442:	d01d      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a1d      	ldr	r2, [pc, #116]	; (800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d018      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a1c      	ldr	r2, [pc, #112]	; (800b4c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d013      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a1a      	ldr	r2, [pc, #104]	; (800b4c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d00e      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a15      	ldr	r2, [pc, #84]	; (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d009      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a16      	ldr	r2, [pc, #88]	; (800b4cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d004      	beq.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a15      	ldr	r2, [pc, #84]	; (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d10c      	bne.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b486:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	4313      	orrs	r3, r2
 800b490:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3714      	adds	r7, #20
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	40010000 	.word	0x40010000
 800b4bc:	40010400 	.word	0x40010400
 800b4c0:	40000400 	.word	0x40000400
 800b4c4:	40000800 	.word	0x40000800
 800b4c8:	40000c00 	.word	0x40000c00
 800b4cc:	40014000 	.word	0x40014000
 800b4d0:	40001800 	.word	0x40001800

0800b4d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d101      	bne.n	800b4f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	e065      	b.n	800b5bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	4313      	orrs	r3, r2
 800b504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	4313      	orrs	r3, r2
 800b512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	4313      	orrs	r3, r2
 800b520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	4313      	orrs	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b556:	4313      	orrs	r3, r2
 800b558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	699b      	ldr	r3, [r3, #24]
 800b564:	041b      	lsls	r3, r3, #16
 800b566:	4313      	orrs	r3, r2
 800b568:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a16      	ldr	r2, [pc, #88]	; (800b5c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d004      	beq.n	800b57e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a14      	ldr	r2, [pc, #80]	; (800b5cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d115      	bne.n	800b5aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b588:	051b      	lsls	r3, r3, #20
 800b58a:	4313      	orrs	r3, r2
 800b58c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	69db      	ldr	r3, [r3, #28]
 800b598:	4313      	orrs	r3, r2
 800b59a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	40010000 	.word	0x40010000
 800b5cc:	40010400 	.word	0x40010400

0800b5d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	e040      	b.n	800b6a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b622:	2b00      	cmp	r3, #0
 800b624:	d106      	bne.n	800b634 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7f7 fae0 	bl	8002bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2224      	movs	r2, #36	; 0x24
 800b638:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f022 0201 	bic.w	r2, r2, #1
 800b648:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f82c 	bl	800b6a8 <UART_SetConfig>
 800b650:	4603      	mov	r3, r0
 800b652:	2b01      	cmp	r3, #1
 800b654:	d101      	bne.n	800b65a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e022      	b.n	800b6a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fa82 	bl	800bb6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	689a      	ldr	r2, [r3, #8]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f042 0201 	orr.w	r2, r2, #1
 800b696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fb09 	bl	800bcb0 <UART_CheckIdleState>
 800b69e:	4603      	mov	r3, r0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	689a      	ldr	r2, [r3, #8]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	431a      	orrs	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	695b      	ldr	r3, [r3, #20]
 800b6c2:	431a      	orrs	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	4ba7      	ldr	r3, [pc, #668]	; (800b970 <UART_SetConfig+0x2c8>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	6812      	ldr	r2, [r2, #0]
 800b6da:	6979      	ldr	r1, [r7, #20]
 800b6dc:	430b      	orrs	r3, r1
 800b6de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68da      	ldr	r2, [r3, #12]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	430a      	orrs	r2, r1
 800b6f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	4313      	orrs	r3, r2
 800b704:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	430a      	orrs	r2, r1
 800b718:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a95      	ldr	r2, [pc, #596]	; (800b974 <UART_SetConfig+0x2cc>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d120      	bne.n	800b766 <UART_SetConfig+0xbe>
 800b724:	4b94      	ldr	r3, [pc, #592]	; (800b978 <UART_SetConfig+0x2d0>)
 800b726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b72a:	f003 0303 	and.w	r3, r3, #3
 800b72e:	2b03      	cmp	r3, #3
 800b730:	d816      	bhi.n	800b760 <UART_SetConfig+0xb8>
 800b732:	a201      	add	r2, pc, #4	; (adr r2, 800b738 <UART_SetConfig+0x90>)
 800b734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b738:	0800b749 	.word	0x0800b749
 800b73c:	0800b755 	.word	0x0800b755
 800b740:	0800b74f 	.word	0x0800b74f
 800b744:	0800b75b 	.word	0x0800b75b
 800b748:	2301      	movs	r3, #1
 800b74a:	77fb      	strb	r3, [r7, #31]
 800b74c:	e14f      	b.n	800b9ee <UART_SetConfig+0x346>
 800b74e:	2302      	movs	r3, #2
 800b750:	77fb      	strb	r3, [r7, #31]
 800b752:	e14c      	b.n	800b9ee <UART_SetConfig+0x346>
 800b754:	2304      	movs	r3, #4
 800b756:	77fb      	strb	r3, [r7, #31]
 800b758:	e149      	b.n	800b9ee <UART_SetConfig+0x346>
 800b75a:	2308      	movs	r3, #8
 800b75c:	77fb      	strb	r3, [r7, #31]
 800b75e:	e146      	b.n	800b9ee <UART_SetConfig+0x346>
 800b760:	2310      	movs	r3, #16
 800b762:	77fb      	strb	r3, [r7, #31]
 800b764:	e143      	b.n	800b9ee <UART_SetConfig+0x346>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a84      	ldr	r2, [pc, #528]	; (800b97c <UART_SetConfig+0x2d4>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d132      	bne.n	800b7d6 <UART_SetConfig+0x12e>
 800b770:	4b81      	ldr	r3, [pc, #516]	; (800b978 <UART_SetConfig+0x2d0>)
 800b772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b776:	f003 030c 	and.w	r3, r3, #12
 800b77a:	2b0c      	cmp	r3, #12
 800b77c:	d828      	bhi.n	800b7d0 <UART_SetConfig+0x128>
 800b77e:	a201      	add	r2, pc, #4	; (adr r2, 800b784 <UART_SetConfig+0xdc>)
 800b780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b784:	0800b7b9 	.word	0x0800b7b9
 800b788:	0800b7d1 	.word	0x0800b7d1
 800b78c:	0800b7d1 	.word	0x0800b7d1
 800b790:	0800b7d1 	.word	0x0800b7d1
 800b794:	0800b7c5 	.word	0x0800b7c5
 800b798:	0800b7d1 	.word	0x0800b7d1
 800b79c:	0800b7d1 	.word	0x0800b7d1
 800b7a0:	0800b7d1 	.word	0x0800b7d1
 800b7a4:	0800b7bf 	.word	0x0800b7bf
 800b7a8:	0800b7d1 	.word	0x0800b7d1
 800b7ac:	0800b7d1 	.word	0x0800b7d1
 800b7b0:	0800b7d1 	.word	0x0800b7d1
 800b7b4:	0800b7cb 	.word	0x0800b7cb
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	77fb      	strb	r3, [r7, #31]
 800b7bc:	e117      	b.n	800b9ee <UART_SetConfig+0x346>
 800b7be:	2302      	movs	r3, #2
 800b7c0:	77fb      	strb	r3, [r7, #31]
 800b7c2:	e114      	b.n	800b9ee <UART_SetConfig+0x346>
 800b7c4:	2304      	movs	r3, #4
 800b7c6:	77fb      	strb	r3, [r7, #31]
 800b7c8:	e111      	b.n	800b9ee <UART_SetConfig+0x346>
 800b7ca:	2308      	movs	r3, #8
 800b7cc:	77fb      	strb	r3, [r7, #31]
 800b7ce:	e10e      	b.n	800b9ee <UART_SetConfig+0x346>
 800b7d0:	2310      	movs	r3, #16
 800b7d2:	77fb      	strb	r3, [r7, #31]
 800b7d4:	e10b      	b.n	800b9ee <UART_SetConfig+0x346>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a69      	ldr	r2, [pc, #420]	; (800b980 <UART_SetConfig+0x2d8>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d120      	bne.n	800b822 <UART_SetConfig+0x17a>
 800b7e0:	4b65      	ldr	r3, [pc, #404]	; (800b978 <UART_SetConfig+0x2d0>)
 800b7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b7ea:	2b30      	cmp	r3, #48	; 0x30
 800b7ec:	d013      	beq.n	800b816 <UART_SetConfig+0x16e>
 800b7ee:	2b30      	cmp	r3, #48	; 0x30
 800b7f0:	d814      	bhi.n	800b81c <UART_SetConfig+0x174>
 800b7f2:	2b20      	cmp	r3, #32
 800b7f4:	d009      	beq.n	800b80a <UART_SetConfig+0x162>
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	d810      	bhi.n	800b81c <UART_SetConfig+0x174>
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d002      	beq.n	800b804 <UART_SetConfig+0x15c>
 800b7fe:	2b10      	cmp	r3, #16
 800b800:	d006      	beq.n	800b810 <UART_SetConfig+0x168>
 800b802:	e00b      	b.n	800b81c <UART_SetConfig+0x174>
 800b804:	2300      	movs	r3, #0
 800b806:	77fb      	strb	r3, [r7, #31]
 800b808:	e0f1      	b.n	800b9ee <UART_SetConfig+0x346>
 800b80a:	2302      	movs	r3, #2
 800b80c:	77fb      	strb	r3, [r7, #31]
 800b80e:	e0ee      	b.n	800b9ee <UART_SetConfig+0x346>
 800b810:	2304      	movs	r3, #4
 800b812:	77fb      	strb	r3, [r7, #31]
 800b814:	e0eb      	b.n	800b9ee <UART_SetConfig+0x346>
 800b816:	2308      	movs	r3, #8
 800b818:	77fb      	strb	r3, [r7, #31]
 800b81a:	e0e8      	b.n	800b9ee <UART_SetConfig+0x346>
 800b81c:	2310      	movs	r3, #16
 800b81e:	77fb      	strb	r3, [r7, #31]
 800b820:	e0e5      	b.n	800b9ee <UART_SetConfig+0x346>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a57      	ldr	r2, [pc, #348]	; (800b984 <UART_SetConfig+0x2dc>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d120      	bne.n	800b86e <UART_SetConfig+0x1c6>
 800b82c:	4b52      	ldr	r3, [pc, #328]	; (800b978 <UART_SetConfig+0x2d0>)
 800b82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b832:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b836:	2bc0      	cmp	r3, #192	; 0xc0
 800b838:	d013      	beq.n	800b862 <UART_SetConfig+0x1ba>
 800b83a:	2bc0      	cmp	r3, #192	; 0xc0
 800b83c:	d814      	bhi.n	800b868 <UART_SetConfig+0x1c0>
 800b83e:	2b80      	cmp	r3, #128	; 0x80
 800b840:	d009      	beq.n	800b856 <UART_SetConfig+0x1ae>
 800b842:	2b80      	cmp	r3, #128	; 0x80
 800b844:	d810      	bhi.n	800b868 <UART_SetConfig+0x1c0>
 800b846:	2b00      	cmp	r3, #0
 800b848:	d002      	beq.n	800b850 <UART_SetConfig+0x1a8>
 800b84a:	2b40      	cmp	r3, #64	; 0x40
 800b84c:	d006      	beq.n	800b85c <UART_SetConfig+0x1b4>
 800b84e:	e00b      	b.n	800b868 <UART_SetConfig+0x1c0>
 800b850:	2300      	movs	r3, #0
 800b852:	77fb      	strb	r3, [r7, #31]
 800b854:	e0cb      	b.n	800b9ee <UART_SetConfig+0x346>
 800b856:	2302      	movs	r3, #2
 800b858:	77fb      	strb	r3, [r7, #31]
 800b85a:	e0c8      	b.n	800b9ee <UART_SetConfig+0x346>
 800b85c:	2304      	movs	r3, #4
 800b85e:	77fb      	strb	r3, [r7, #31]
 800b860:	e0c5      	b.n	800b9ee <UART_SetConfig+0x346>
 800b862:	2308      	movs	r3, #8
 800b864:	77fb      	strb	r3, [r7, #31]
 800b866:	e0c2      	b.n	800b9ee <UART_SetConfig+0x346>
 800b868:	2310      	movs	r3, #16
 800b86a:	77fb      	strb	r3, [r7, #31]
 800b86c:	e0bf      	b.n	800b9ee <UART_SetConfig+0x346>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a45      	ldr	r2, [pc, #276]	; (800b988 <UART_SetConfig+0x2e0>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d125      	bne.n	800b8c4 <UART_SetConfig+0x21c>
 800b878:	4b3f      	ldr	r3, [pc, #252]	; (800b978 <UART_SetConfig+0x2d0>)
 800b87a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b87e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b886:	d017      	beq.n	800b8b8 <UART_SetConfig+0x210>
 800b888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b88c:	d817      	bhi.n	800b8be <UART_SetConfig+0x216>
 800b88e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b892:	d00b      	beq.n	800b8ac <UART_SetConfig+0x204>
 800b894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b898:	d811      	bhi.n	800b8be <UART_SetConfig+0x216>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d003      	beq.n	800b8a6 <UART_SetConfig+0x1fe>
 800b89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a2:	d006      	beq.n	800b8b2 <UART_SetConfig+0x20a>
 800b8a4:	e00b      	b.n	800b8be <UART_SetConfig+0x216>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	77fb      	strb	r3, [r7, #31]
 800b8aa:	e0a0      	b.n	800b9ee <UART_SetConfig+0x346>
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	77fb      	strb	r3, [r7, #31]
 800b8b0:	e09d      	b.n	800b9ee <UART_SetConfig+0x346>
 800b8b2:	2304      	movs	r3, #4
 800b8b4:	77fb      	strb	r3, [r7, #31]
 800b8b6:	e09a      	b.n	800b9ee <UART_SetConfig+0x346>
 800b8b8:	2308      	movs	r3, #8
 800b8ba:	77fb      	strb	r3, [r7, #31]
 800b8bc:	e097      	b.n	800b9ee <UART_SetConfig+0x346>
 800b8be:	2310      	movs	r3, #16
 800b8c0:	77fb      	strb	r3, [r7, #31]
 800b8c2:	e094      	b.n	800b9ee <UART_SetConfig+0x346>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a30      	ldr	r2, [pc, #192]	; (800b98c <UART_SetConfig+0x2e4>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d125      	bne.n	800b91a <UART_SetConfig+0x272>
 800b8ce:	4b2a      	ldr	r3, [pc, #168]	; (800b978 <UART_SetConfig+0x2d0>)
 800b8d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b8d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8dc:	d017      	beq.n	800b90e <UART_SetConfig+0x266>
 800b8de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8e2:	d817      	bhi.n	800b914 <UART_SetConfig+0x26c>
 800b8e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8e8:	d00b      	beq.n	800b902 <UART_SetConfig+0x25a>
 800b8ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8ee:	d811      	bhi.n	800b914 <UART_SetConfig+0x26c>
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d003      	beq.n	800b8fc <UART_SetConfig+0x254>
 800b8f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8f8:	d006      	beq.n	800b908 <UART_SetConfig+0x260>
 800b8fa:	e00b      	b.n	800b914 <UART_SetConfig+0x26c>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	77fb      	strb	r3, [r7, #31]
 800b900:	e075      	b.n	800b9ee <UART_SetConfig+0x346>
 800b902:	2302      	movs	r3, #2
 800b904:	77fb      	strb	r3, [r7, #31]
 800b906:	e072      	b.n	800b9ee <UART_SetConfig+0x346>
 800b908:	2304      	movs	r3, #4
 800b90a:	77fb      	strb	r3, [r7, #31]
 800b90c:	e06f      	b.n	800b9ee <UART_SetConfig+0x346>
 800b90e:	2308      	movs	r3, #8
 800b910:	77fb      	strb	r3, [r7, #31]
 800b912:	e06c      	b.n	800b9ee <UART_SetConfig+0x346>
 800b914:	2310      	movs	r3, #16
 800b916:	77fb      	strb	r3, [r7, #31]
 800b918:	e069      	b.n	800b9ee <UART_SetConfig+0x346>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a1c      	ldr	r2, [pc, #112]	; (800b990 <UART_SetConfig+0x2e8>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d137      	bne.n	800b994 <UART_SetConfig+0x2ec>
 800b924:	4b14      	ldr	r3, [pc, #80]	; (800b978 <UART_SetConfig+0x2d0>)
 800b926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b92a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b92e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b932:	d017      	beq.n	800b964 <UART_SetConfig+0x2bc>
 800b934:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b938:	d817      	bhi.n	800b96a <UART_SetConfig+0x2c2>
 800b93a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b93e:	d00b      	beq.n	800b958 <UART_SetConfig+0x2b0>
 800b940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b944:	d811      	bhi.n	800b96a <UART_SetConfig+0x2c2>
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <UART_SetConfig+0x2aa>
 800b94a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b94e:	d006      	beq.n	800b95e <UART_SetConfig+0x2b6>
 800b950:	e00b      	b.n	800b96a <UART_SetConfig+0x2c2>
 800b952:	2300      	movs	r3, #0
 800b954:	77fb      	strb	r3, [r7, #31]
 800b956:	e04a      	b.n	800b9ee <UART_SetConfig+0x346>
 800b958:	2302      	movs	r3, #2
 800b95a:	77fb      	strb	r3, [r7, #31]
 800b95c:	e047      	b.n	800b9ee <UART_SetConfig+0x346>
 800b95e:	2304      	movs	r3, #4
 800b960:	77fb      	strb	r3, [r7, #31]
 800b962:	e044      	b.n	800b9ee <UART_SetConfig+0x346>
 800b964:	2308      	movs	r3, #8
 800b966:	77fb      	strb	r3, [r7, #31]
 800b968:	e041      	b.n	800b9ee <UART_SetConfig+0x346>
 800b96a:	2310      	movs	r3, #16
 800b96c:	77fb      	strb	r3, [r7, #31]
 800b96e:	e03e      	b.n	800b9ee <UART_SetConfig+0x346>
 800b970:	efff69f3 	.word	0xefff69f3
 800b974:	40011000 	.word	0x40011000
 800b978:	40023800 	.word	0x40023800
 800b97c:	40004400 	.word	0x40004400
 800b980:	40004800 	.word	0x40004800
 800b984:	40004c00 	.word	0x40004c00
 800b988:	40005000 	.word	0x40005000
 800b98c:	40011400 	.word	0x40011400
 800b990:	40007800 	.word	0x40007800
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a71      	ldr	r2, [pc, #452]	; (800bb60 <UART_SetConfig+0x4b8>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d125      	bne.n	800b9ea <UART_SetConfig+0x342>
 800b99e:	4b71      	ldr	r3, [pc, #452]	; (800bb64 <UART_SetConfig+0x4bc>)
 800b9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b9a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b9ac:	d017      	beq.n	800b9de <UART_SetConfig+0x336>
 800b9ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b9b2:	d817      	bhi.n	800b9e4 <UART_SetConfig+0x33c>
 800b9b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9b8:	d00b      	beq.n	800b9d2 <UART_SetConfig+0x32a>
 800b9ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9be:	d811      	bhi.n	800b9e4 <UART_SetConfig+0x33c>
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d003      	beq.n	800b9cc <UART_SetConfig+0x324>
 800b9c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9c8:	d006      	beq.n	800b9d8 <UART_SetConfig+0x330>
 800b9ca:	e00b      	b.n	800b9e4 <UART_SetConfig+0x33c>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	77fb      	strb	r3, [r7, #31]
 800b9d0:	e00d      	b.n	800b9ee <UART_SetConfig+0x346>
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	77fb      	strb	r3, [r7, #31]
 800b9d6:	e00a      	b.n	800b9ee <UART_SetConfig+0x346>
 800b9d8:	2304      	movs	r3, #4
 800b9da:	77fb      	strb	r3, [r7, #31]
 800b9dc:	e007      	b.n	800b9ee <UART_SetConfig+0x346>
 800b9de:	2308      	movs	r3, #8
 800b9e0:	77fb      	strb	r3, [r7, #31]
 800b9e2:	e004      	b.n	800b9ee <UART_SetConfig+0x346>
 800b9e4:	2310      	movs	r3, #16
 800b9e6:	77fb      	strb	r3, [r7, #31]
 800b9e8:	e001      	b.n	800b9ee <UART_SetConfig+0x346>
 800b9ea:	2310      	movs	r3, #16
 800b9ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9f6:	d15a      	bne.n	800baae <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800b9f8:	7ffb      	ldrb	r3, [r7, #31]
 800b9fa:	2b08      	cmp	r3, #8
 800b9fc:	d827      	bhi.n	800ba4e <UART_SetConfig+0x3a6>
 800b9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ba04 <UART_SetConfig+0x35c>)
 800ba00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba04:	0800ba29 	.word	0x0800ba29
 800ba08:	0800ba31 	.word	0x0800ba31
 800ba0c:	0800ba39 	.word	0x0800ba39
 800ba10:	0800ba4f 	.word	0x0800ba4f
 800ba14:	0800ba3f 	.word	0x0800ba3f
 800ba18:	0800ba4f 	.word	0x0800ba4f
 800ba1c:	0800ba4f 	.word	0x0800ba4f
 800ba20:	0800ba4f 	.word	0x0800ba4f
 800ba24:	0800ba47 	.word	0x0800ba47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba28:	f7fb ffec 	bl	8007a04 <HAL_RCC_GetPCLK1Freq>
 800ba2c:	61b8      	str	r0, [r7, #24]
        break;
 800ba2e:	e013      	b.n	800ba58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba30:	f7fb fffc 	bl	8007a2c <HAL_RCC_GetPCLK2Freq>
 800ba34:	61b8      	str	r0, [r7, #24]
        break;
 800ba36:	e00f      	b.n	800ba58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba38:	4b4b      	ldr	r3, [pc, #300]	; (800bb68 <UART_SetConfig+0x4c0>)
 800ba3a:	61bb      	str	r3, [r7, #24]
        break;
 800ba3c:	e00c      	b.n	800ba58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba3e:	f7fb ff1f 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 800ba42:	61b8      	str	r0, [r7, #24]
        break;
 800ba44:	e008      	b.n	800ba58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba4a:	61bb      	str	r3, [r7, #24]
        break;
 800ba4c:	e004      	b.n	800ba58 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	77bb      	strb	r3, [r7, #30]
        break;
 800ba56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d074      	beq.n	800bb48 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	005a      	lsls	r2, r3, #1
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	085b      	lsrs	r3, r3, #1
 800ba68:	441a      	add	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	2b0f      	cmp	r3, #15
 800ba78:	d916      	bls.n	800baa8 <UART_SetConfig+0x400>
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba80:	d212      	bcs.n	800baa8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	f023 030f 	bic.w	r3, r3, #15
 800ba8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	085b      	lsrs	r3, r3, #1
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	f003 0307 	and.w	r3, r3, #7
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	89fb      	ldrh	r3, [r7, #14]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	89fa      	ldrh	r2, [r7, #14]
 800baa4:	60da      	str	r2, [r3, #12]
 800baa6:	e04f      	b.n	800bb48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	77bb      	strb	r3, [r7, #30]
 800baac:	e04c      	b.n	800bb48 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800baae:	7ffb      	ldrb	r3, [r7, #31]
 800bab0:	2b08      	cmp	r3, #8
 800bab2:	d828      	bhi.n	800bb06 <UART_SetConfig+0x45e>
 800bab4:	a201      	add	r2, pc, #4	; (adr r2, 800babc <UART_SetConfig+0x414>)
 800bab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baba:	bf00      	nop
 800babc:	0800bae1 	.word	0x0800bae1
 800bac0:	0800bae9 	.word	0x0800bae9
 800bac4:	0800baf1 	.word	0x0800baf1
 800bac8:	0800bb07 	.word	0x0800bb07
 800bacc:	0800baf7 	.word	0x0800baf7
 800bad0:	0800bb07 	.word	0x0800bb07
 800bad4:	0800bb07 	.word	0x0800bb07
 800bad8:	0800bb07 	.word	0x0800bb07
 800badc:	0800baff 	.word	0x0800baff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bae0:	f7fb ff90 	bl	8007a04 <HAL_RCC_GetPCLK1Freq>
 800bae4:	61b8      	str	r0, [r7, #24]
        break;
 800bae6:	e013      	b.n	800bb10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bae8:	f7fb ffa0 	bl	8007a2c <HAL_RCC_GetPCLK2Freq>
 800baec:	61b8      	str	r0, [r7, #24]
        break;
 800baee:	e00f      	b.n	800bb10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800baf0:	4b1d      	ldr	r3, [pc, #116]	; (800bb68 <UART_SetConfig+0x4c0>)
 800baf2:	61bb      	str	r3, [r7, #24]
        break;
 800baf4:	e00c      	b.n	800bb10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800baf6:	f7fb fec3 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 800bafa:	61b8      	str	r0, [r7, #24]
        break;
 800bafc:	e008      	b.n	800bb10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bafe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb02:	61bb      	str	r3, [r7, #24]
        break;
 800bb04:	e004      	b.n	800bb10 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800bb06:	2300      	movs	r3, #0
 800bb08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	77bb      	strb	r3, [r7, #30]
        break;
 800bb0e:	bf00      	nop
    }

    if (pclk != 0U)
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d018      	beq.n	800bb48 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	085a      	lsrs	r2, r3, #1
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	441a      	add	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	2b0f      	cmp	r3, #15
 800bb2e:	d909      	bls.n	800bb44 <UART_SetConfig+0x49c>
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb36:	d205      	bcs.n	800bb44 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	60da      	str	r2, [r3, #12]
 800bb42:	e001      	b.n	800bb48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
 800bb46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bb54:	7fbb      	ldrb	r3, [r7, #30]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3720      	adds	r7, #32
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	40007c00 	.word	0x40007c00
 800bb64:	40023800 	.word	0x40023800
 800bb68:	00f42400 	.word	0x00f42400

0800bb6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00a      	beq.n	800bb96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	430a      	orrs	r2, r1
 800bb94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9a:	f003 0302 	and.w	r3, r3, #2
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00a      	beq.n	800bbb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	430a      	orrs	r2, r1
 800bbb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00a      	beq.n	800bbda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	430a      	orrs	r2, r1
 800bbd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	f003 0308 	and.w	r3, r3, #8
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00a      	beq.n	800bbfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	430a      	orrs	r2, r1
 800bbfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc00:	f003 0310 	and.w	r3, r3, #16
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00a      	beq.n	800bc1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc22:	f003 0320 	and.w	r3, r3, #32
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	430a      	orrs	r2, r1
 800bc3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d01a      	beq.n	800bc82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc6a:	d10a      	bne.n	800bc82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	430a      	orrs	r2, r1
 800bc80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00a      	beq.n	800bca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	430a      	orrs	r2, r1
 800bca2:	605a      	str	r2, [r3, #4]
  }
}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af02      	add	r7, sp, #8
 800bcb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bcc0:	f7f7 fa8c 	bl	80031dc <HAL_GetTick>
 800bcc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 0308 	and.w	r3, r3, #8
 800bcd0:	2b08      	cmp	r3, #8
 800bcd2:	d10e      	bne.n	800bcf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f817 	bl	800bd16 <UART_WaitOnFlagUntilTimeout>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcee:	2303      	movs	r3, #3
 800bcf0:	e00d      	b.n	800bd0e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2220      	movs	r2, #32
 800bcfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b09c      	sub	sp, #112	; 0x70
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	60f8      	str	r0, [r7, #12]
 800bd1e:	60b9      	str	r1, [r7, #8]
 800bd20:	603b      	str	r3, [r7, #0]
 800bd22:	4613      	mov	r3, r2
 800bd24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd26:	e0a5      	b.n	800be74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd2e:	f000 80a1 	beq.w	800be74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd32:	f7f7 fa53 	bl	80031dc <HAL_GetTick>
 800bd36:	4602      	mov	r2, r0
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d302      	bcc.n	800bd48 <UART_WaitOnFlagUntilTimeout+0x32>
 800bd42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d13e      	bne.n	800bdc6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd50:	e853 3f00 	ldrex	r3, [r3]
 800bd54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd5c:	667b      	str	r3, [r7, #100]	; 0x64
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd6e:	e841 2300 	strex	r3, r2, [r1]
 800bd72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bd74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1e6      	bne.n	800bd48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3308      	adds	r3, #8
 800bd80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd84:	e853 3f00 	ldrex	r3, [r3]
 800bd88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8c:	f023 0301 	bic.w	r3, r3, #1
 800bd90:	663b      	str	r3, [r7, #96]	; 0x60
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	3308      	adds	r3, #8
 800bd98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd9a:	64ba      	str	r2, [r7, #72]	; 0x48
 800bd9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bda0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bda2:	e841 2300 	strex	r3, r2, [r1]
 800bda6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1e5      	bne.n	800bd7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2220      	movs	r2, #32
 800bdb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2220      	movs	r2, #32
 800bdb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e067      	b.n	800be96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f003 0304 	and.w	r3, r3, #4
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d04f      	beq.n	800be74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	69db      	ldr	r3, [r3, #28]
 800bdda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bde2:	d147      	bne.n	800be74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf6:	e853 3f00 	ldrex	r3, [r3]
 800bdfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be02:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	461a      	mov	r2, r3
 800be0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be0c:	637b      	str	r3, [r7, #52]	; 0x34
 800be0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be14:	e841 2300 	strex	r3, r2, [r1]
 800be18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1e6      	bne.n	800bdee <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3308      	adds	r3, #8
 800be26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	e853 3f00 	ldrex	r3, [r3]
 800be2e:	613b      	str	r3, [r7, #16]
   return(result);
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	f023 0301 	bic.w	r3, r3, #1
 800be36:	66bb      	str	r3, [r7, #104]	; 0x68
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3308      	adds	r3, #8
 800be3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be40:	623a      	str	r2, [r7, #32]
 800be42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be44:	69f9      	ldr	r1, [r7, #28]
 800be46:	6a3a      	ldr	r2, [r7, #32]
 800be48:	e841 2300 	strex	r3, r2, [r1]
 800be4c:	61bb      	str	r3, [r7, #24]
   return(result);
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1e5      	bne.n	800be20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2220      	movs	r2, #32
 800be58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2220      	movs	r2, #32
 800be5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2220      	movs	r2, #32
 800be64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800be70:	2303      	movs	r3, #3
 800be72:	e010      	b.n	800be96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	69da      	ldr	r2, [r3, #28]
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	4013      	ands	r3, r2
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	429a      	cmp	r2, r3
 800be82:	bf0c      	ite	eq
 800be84:	2301      	moveq	r3, #1
 800be86:	2300      	movne	r3, #0
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	461a      	mov	r2, r3
 800be8c:	79fb      	ldrb	r3, [r7, #7]
 800be8e:	429a      	cmp	r2, r3
 800be90:	f43f af4a 	beq.w	800bd28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3770      	adds	r7, #112	; 0x70
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
	...

0800bea0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d121      	bne.n	800bef6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	4b27      	ldr	r3, [pc, #156]	; (800bf54 <FMC_SDRAM_Init+0xb4>)
 800beb8:	4013      	ands	r3, r2
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	6851      	ldr	r1, [r2, #4]
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	6892      	ldr	r2, [r2, #8]
 800bec2:	4311      	orrs	r1, r2
 800bec4:	683a      	ldr	r2, [r7, #0]
 800bec6:	68d2      	ldr	r2, [r2, #12]
 800bec8:	4311      	orrs	r1, r2
 800beca:	683a      	ldr	r2, [r7, #0]
 800becc:	6912      	ldr	r2, [r2, #16]
 800bece:	4311      	orrs	r1, r2
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	6952      	ldr	r2, [r2, #20]
 800bed4:	4311      	orrs	r1, r2
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	6992      	ldr	r2, [r2, #24]
 800beda:	4311      	orrs	r1, r2
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	69d2      	ldr	r2, [r2, #28]
 800bee0:	4311      	orrs	r1, r2
 800bee2:	683a      	ldr	r2, [r7, #0]
 800bee4:	6a12      	ldr	r2, [r2, #32]
 800bee6:	4311      	orrs	r1, r2
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800beec:	430a      	orrs	r2, r1
 800beee:	431a      	orrs	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	e026      	b.n	800bf44 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	69d9      	ldr	r1, [r3, #28]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	6a1b      	ldr	r3, [r3, #32]
 800bf06:	4319      	orrs	r1, r3
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0c:	430b      	orrs	r3, r1
 800bf0e:	431a      	orrs	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685a      	ldr	r2, [r3, #4]
 800bf18:	4b0e      	ldr	r3, [pc, #56]	; (800bf54 <FMC_SDRAM_Init+0xb4>)
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	683a      	ldr	r2, [r7, #0]
 800bf1e:	6851      	ldr	r1, [r2, #4]
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	6892      	ldr	r2, [r2, #8]
 800bf24:	4311      	orrs	r1, r2
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	68d2      	ldr	r2, [r2, #12]
 800bf2a:	4311      	orrs	r1, r2
 800bf2c:	683a      	ldr	r2, [r7, #0]
 800bf2e:	6912      	ldr	r2, [r2, #16]
 800bf30:	4311      	orrs	r1, r2
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	6952      	ldr	r2, [r2, #20]
 800bf36:	4311      	orrs	r1, r2
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	6992      	ldr	r2, [r2, #24]
 800bf3c:	430a      	orrs	r2, r1
 800bf3e:	431a      	orrs	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	370c      	adds	r7, #12
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	ffff8000 	.word	0xffff8000

0800bf58 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d128      	bne.n	800bfbc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	1e59      	subs	r1, r3, #1
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	011b      	lsls	r3, r3, #4
 800bf80:	4319      	orrs	r1, r3
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	3b01      	subs	r3, #1
 800bf88:	021b      	lsls	r3, r3, #8
 800bf8a:	4319      	orrs	r1, r3
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	3b01      	subs	r3, #1
 800bf92:	031b      	lsls	r3, r3, #12
 800bf94:	4319      	orrs	r1, r3
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	041b      	lsls	r3, r3, #16
 800bf9e:	4319      	orrs	r1, r3
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	695b      	ldr	r3, [r3, #20]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	051b      	lsls	r3, r3, #20
 800bfa8:	4319      	orrs	r1, r3
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	061b      	lsls	r3, r3, #24
 800bfb2:	430b      	orrs	r3, r1
 800bfb4:	431a      	orrs	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	609a      	str	r2, [r3, #8]
 800bfba:	e02d      	b.n	800c018 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	4b19      	ldr	r3, [pc, #100]	; (800c028 <FMC_SDRAM_Timing_Init+0xd0>)
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	68d2      	ldr	r2, [r2, #12]
 800bfc8:	3a01      	subs	r2, #1
 800bfca:	0311      	lsls	r1, r2, #12
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	6952      	ldr	r2, [r2, #20]
 800bfd0:	3a01      	subs	r2, #1
 800bfd2:	0512      	lsls	r2, r2, #20
 800bfd4:	430a      	orrs	r2, r1
 800bfd6:	431a      	orrs	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	1e59      	subs	r1, r3, #1
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	3b01      	subs	r3, #1
 800bff0:	011b      	lsls	r3, r3, #4
 800bff2:	4319      	orrs	r1, r3
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	021b      	lsls	r3, r3, #8
 800bffc:	4319      	orrs	r1, r3
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	3b01      	subs	r3, #1
 800c004:	041b      	lsls	r3, r3, #16
 800c006:	4319      	orrs	r1, r3
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	3b01      	subs	r3, #1
 800c00e:	061b      	lsls	r3, r3, #24
 800c010:	430b      	orrs	r3, r1
 800c012:	431a      	orrs	r2, r3
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	ff0f0fff 	.word	0xff0f0fff

0800c02c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c02c:	b084      	sub	sp, #16
 800c02e:	b480      	push	{r7}
 800c030:	b085      	sub	sp, #20
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	f107 001c 	add.w	r0, r7, #28
 800c03a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c03e:	2300      	movs	r3, #0
 800c040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c042:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c044:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c046:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c04a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c04e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c052:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c056:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685a      	ldr	r2, [r3, #4]
 800c062:	4b07      	ldr	r3, [pc, #28]	; (800c080 <SDMMC_Init+0x54>)
 800c064:	4013      	ands	r3, r2
 800c066:	68fa      	ldr	r2, [r7, #12]
 800c068:	431a      	orrs	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	b004      	add	sp, #16
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	ffff8100 	.word	0xffff8100

0800c084 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c092:	4618      	mov	r0, r3
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c09e:	b480      	push	{r7}
 800c0a0:	b083      	sub	sp, #12
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2203      	movs	r2, #3
 800c0aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b083      	sub	sp, #12
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0303 	and.w	r3, r3, #3
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c0f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c0fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c102:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	4313      	orrs	r3, r2
 800c108:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68da      	ldr	r2, [r3, #12]
 800c10e:	4b06      	ldr	r3, [pc, #24]	; (800c128 <SDMMC_SendCommand+0x50>)
 800c110:	4013      	ands	r3, r2
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	431a      	orrs	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	fffff000 	.word	0xfffff000

0800c12c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	b2db      	uxtb	r3, r3
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr

0800c146 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c146:	b480      	push	{r7}
 800c148:	b085      	sub	sp, #20
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3314      	adds	r3, #20
 800c154:	461a      	mov	r2, r3
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	4413      	add	r3, r2
 800c15a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
}  
 800c160:	4618      	mov	r0, r3
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c192:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c198:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c19e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1aa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	431a      	orrs	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c1b6:	2300      	movs	r3, #0

}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3714      	adds	r7, #20
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c1d2:	2310      	movs	r3, #16
 800c1d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1d6:	2340      	movs	r3, #64	; 0x40
 800c1d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1e4:	f107 0308 	add.w	r3, r7, #8
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7ff ff74 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1f4:	2110      	movs	r1, #16
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fa1a 	bl	800c630 <SDMMC_GetCmdResp1>
 800c1fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1fe:	69fb      	ldr	r3, [r7, #28]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3720      	adds	r7, #32
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c216:	2311      	movs	r3, #17
 800c218:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c21a:	2340      	movs	r3, #64	; 0x40
 800c21c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c21e:	2300      	movs	r3, #0
 800c220:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c226:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c228:	f107 0308 	add.w	r3, r7, #8
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7ff ff52 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c234:	f241 3288 	movw	r2, #5000	; 0x1388
 800c238:	2111      	movs	r1, #17
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f9f8 	bl	800c630 <SDMMC_GetCmdResp1>
 800c240:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c242:	69fb      	ldr	r3, [r7, #28]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3720      	adds	r7, #32
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c25a:	2312      	movs	r3, #18
 800c25c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c25e:	2340      	movs	r3, #64	; 0x40
 800c260:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c262:	2300      	movs	r3, #0
 800c264:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c26a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c26c:	f107 0308 	add.w	r3, r7, #8
 800c270:	4619      	mov	r1, r3
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7ff ff30 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c278:	f241 3288 	movw	r2, #5000	; 0x1388
 800c27c:	2112      	movs	r1, #18
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f9d6 	bl	800c630 <SDMMC_GetCmdResp1>
 800c284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c286:	69fb      	ldr	r3, [r7, #28]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3720      	adds	r7, #32
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c29e:	2318      	movs	r3, #24
 800c2a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2a2:	2340      	movs	r3, #64	; 0x40
 800c2a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2b0:	f107 0308 	add.w	r3, r7, #8
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff ff0e 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c2bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2c0:	2118      	movs	r1, #24
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f9b4 	bl	800c630 <SDMMC_GetCmdResp1>
 800c2c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2ca:	69fb      	ldr	r3, [r7, #28]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3720      	adds	r7, #32
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b088      	sub	sp, #32
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c2e2:	2319      	movs	r3, #25
 800c2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2e6:	2340      	movs	r3, #64	; 0x40
 800c2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2f4:	f107 0308 	add.w	r3, r7, #8
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff feec 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c300:	f241 3288 	movw	r2, #5000	; 0x1388
 800c304:	2119      	movs	r1, #25
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f992 	bl	800c630 <SDMMC_GetCmdResp1>
 800c30c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c30e:	69fb      	ldr	r3, [r7, #28]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3720      	adds	r7, #32
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c320:	2300      	movs	r3, #0
 800c322:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c324:	230c      	movs	r3, #12
 800c326:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c328:	2340      	movs	r3, #64	; 0x40
 800c32a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c32c:	2300      	movs	r3, #0
 800c32e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c334:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c336:	f107 0308 	add.w	r3, r7, #8
 800c33a:	4619      	mov	r1, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f7ff fecb 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c342:	4a05      	ldr	r2, [pc, #20]	; (800c358 <SDMMC_CmdStopTransfer+0x40>)
 800c344:	210c      	movs	r1, #12
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 f972 	bl	800c630 <SDMMC_GetCmdResp1>
 800c34c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c34e:	69fb      	ldr	r3, [r7, #28]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3720      	adds	r7, #32
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	05f5e100 	.word	0x05f5e100

0800c35c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08a      	sub	sp, #40	; 0x28
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c36c:	2307      	movs	r3, #7
 800c36e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c370:	2340      	movs	r3, #64	; 0x40
 800c372:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c374:	2300      	movs	r3, #0
 800c376:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c37c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c37e:	f107 0310 	add.w	r3, r7, #16
 800c382:	4619      	mov	r1, r3
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f7ff fea7 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c38a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c38e:	2107      	movs	r1, #7
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f000 f94d 	bl	800c630 <SDMMC_GetCmdResp1>
 800c396:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3728      	adds	r7, #40	; 0x28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b088      	sub	sp, #32
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3c0:	f107 0308 	add.w	r3, r7, #8
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7ff fe86 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fb67 	bl	800caa0 <SDMMC_GetCmdError>
 800c3d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3d4:	69fb      	ldr	r3, [r7, #28]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3720      	adds	r7, #32
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b088      	sub	sp, #32
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c3e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c3ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c3ec:	2308      	movs	r3, #8
 800c3ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3f0:	2340      	movs	r3, #64	; 0x40
 800c3f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3fe:	f107 0308 	add.w	r3, r7, #8
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f7ff fe67 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fafa 	bl	800ca04 <SDMMC_GetCmdResp7>
 800c410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c412:	69fb      	ldr	r3, [r7, #28]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3720      	adds	r7, #32
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b088      	sub	sp, #32
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c42a:	2337      	movs	r3, #55	; 0x37
 800c42c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c42e:	2340      	movs	r3, #64	; 0x40
 800c430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c432:	2300      	movs	r3, #0
 800c434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c43a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c43c:	f107 0308 	add.w	r3, r7, #8
 800c440:	4619      	mov	r1, r3
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7ff fe48 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c448:	f241 3288 	movw	r2, #5000	; 0x1388
 800c44c:	2137      	movs	r1, #55	; 0x37
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f8ee 	bl	800c630 <SDMMC_GetCmdResp1>
 800c454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c456:	69fb      	ldr	r3, [r7, #28]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3720      	adds	r7, #32
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	4b0d      	ldr	r3, [pc, #52]	; (800c4a4 <SDMMC_CmdAppOperCommand+0x44>)
 800c46e:	4313      	orrs	r3, r2
 800c470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c472:	2329      	movs	r3, #41	; 0x29
 800c474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c476:	2340      	movs	r3, #64	; 0x40
 800c478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c47a:	2300      	movs	r3, #0
 800c47c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c47e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c482:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c484:	f107 0308 	add.w	r3, r7, #8
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7ff fe24 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fa03 	bl	800c89c <SDMMC_GetCmdResp3>
 800c496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c498:	69fb      	ldr	r3, [r7, #28]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3720      	adds	r7, #32
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	80100000 	.word	0x80100000

0800c4a8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c4b6:	2306      	movs	r3, #6
 800c4b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4ba:	2340      	movs	r3, #64	; 0x40
 800c4bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4c8:	f107 0308 	add.w	r3, r7, #8
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff fe02 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c4d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4d8:	2106      	movs	r1, #6
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f8a8 	bl	800c630 <SDMMC_GetCmdResp1>
 800c4e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4e2:	69fb      	ldr	r3, [r7, #28]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3720      	adds	r7, #32
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b088      	sub	sp, #32
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c4f8:	2333      	movs	r3, #51	; 0x33
 800c4fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4fc:	2340      	movs	r3, #64	; 0x40
 800c4fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c500:	2300      	movs	r3, #0
 800c502:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c508:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c50a:	f107 0308 	add.w	r3, r7, #8
 800c50e:	4619      	mov	r1, r3
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7ff fde1 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c516:	f241 3288 	movw	r2, #5000	; 0x1388
 800c51a:	2133      	movs	r1, #51	; 0x33
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f887 	bl	800c630 <SDMMC_GetCmdResp1>
 800c522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c524:	69fb      	ldr	r3, [r7, #28]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3720      	adds	r7, #32
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b088      	sub	sp, #32
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c536:	2300      	movs	r3, #0
 800c538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c53a:	2302      	movs	r3, #2
 800c53c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c53e:	23c0      	movs	r3, #192	; 0xc0
 800c540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c542:	2300      	movs	r3, #0
 800c544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c54a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c54c:	f107 0308 	add.w	r3, r7, #8
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7ff fdc0 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f957 	bl	800c80c <SDMMC_GetCmdResp2>
 800c55e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c560:	69fb      	ldr	r3, [r7, #28]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3720      	adds	r7, #32
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b088      	sub	sp, #32
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c578:	2309      	movs	r3, #9
 800c57a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c57c:	23c0      	movs	r3, #192	; 0xc0
 800c57e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c580:	2300      	movs	r3, #0
 800c582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c588:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c58a:	f107 0308 	add.w	r3, r7, #8
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7ff fda1 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f938 	bl	800c80c <SDMMC_GetCmdResp2>
 800c59c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c59e:	69fb      	ldr	r3, [r7, #28]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3720      	adds	r7, #32
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b088      	sub	sp, #32
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c5b6:	2303      	movs	r3, #3
 800c5b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5ba:	2340      	movs	r3, #64	; 0x40
 800c5bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5c8:	f107 0308 	add.w	r3, r7, #8
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7ff fd82 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c5d4:	683a      	ldr	r2, [r7, #0]
 800c5d6:	2103      	movs	r1, #3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 f99d 	bl	800c918 <SDMMC_GetCmdResp6>
 800c5de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5e0:	69fb      	ldr	r3, [r7, #28]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3720      	adds	r7, #32
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b088      	sub	sp, #32
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c5f8:	230d      	movs	r3, #13
 800c5fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5fc:	2340      	movs	r3, #64	; 0x40
 800c5fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c600:	2300      	movs	r3, #0
 800c602:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c608:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c60a:	f107 0308 	add.w	r3, r7, #8
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7ff fd61 	bl	800c0d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c616:	f241 3288 	movw	r2, #5000	; 0x1388
 800c61a:	210d      	movs	r1, #13
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 f807 	bl	800c630 <SDMMC_GetCmdResp1>
 800c622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c624:	69fb      	ldr	r3, [r7, #28]
}
 800c626:	4618      	mov	r0, r3
 800c628:	3720      	adds	r7, #32
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
	...

0800c630 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b088      	sub	sp, #32
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	460b      	mov	r3, r1
 800c63a:	607a      	str	r2, [r7, #4]
 800c63c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c63e:	4b70      	ldr	r3, [pc, #448]	; (800c800 <SDMMC_GetCmdResp1+0x1d0>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a70      	ldr	r2, [pc, #448]	; (800c804 <SDMMC_GetCmdResp1+0x1d4>)
 800c644:	fba2 2303 	umull	r2, r3, r2, r3
 800c648:	0a5a      	lsrs	r2, r3, #9
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	fb02 f303 	mul.w	r3, r2, r3
 800c650:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	1e5a      	subs	r2, r3, #1
 800c656:	61fa      	str	r2, [r7, #28]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d102      	bne.n	800c662 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c65c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c660:	e0c9      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c666:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d0ef      	beq.n	800c652 <SDMMC_GetCmdResp1+0x22>
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1ea      	bne.n	800c652 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c680:	f003 0304 	and.w	r3, r3, #4
 800c684:	2b00      	cmp	r3, #0
 800c686:	d004      	beq.n	800c692 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2204      	movs	r2, #4
 800c68c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c68e:	2304      	movs	r3, #4
 800c690:	e0b1      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c696:	f003 0301 	and.w	r3, r3, #1
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d004      	beq.n	800c6a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e0a6      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	22c5      	movs	r2, #197	; 0xc5
 800c6ac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f7ff fd3c 	bl	800c12c <SDMMC_GetCommandResponse>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	7afb      	ldrb	r3, [r7, #11]
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d001      	beq.n	800c6c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e099      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f7ff fd3e 	bl	800c146 <SDMMC_GetResponse>
 800c6ca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c6cc:	697a      	ldr	r2, [r7, #20]
 800c6ce:	4b4e      	ldr	r3, [pc, #312]	; (800c808 <SDMMC_GetCmdResp1+0x1d8>)
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d101      	bne.n	800c6da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e08d      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	da02      	bge.n	800c6e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c6e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c6e4:	e087      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c6f0:	2340      	movs	r3, #64	; 0x40
 800c6f2:	e080      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c6fe:	2380      	movs	r3, #128	; 0x80
 800c700:	e079      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c70c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c710:	e071      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c71c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c720:	e069      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d002      	beq.n	800c732 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c72c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c730:	e061      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d002      	beq.n	800c742 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c73c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c740:	e059      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d002      	beq.n	800c752 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c750:	e051      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c75c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c760:	e049      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d002      	beq.n	800c772 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c76c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c770:	e041      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d002      	beq.n	800c782 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c77c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c780:	e039      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c78c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c790:	e031      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d002      	beq.n	800c7a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c79c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c7a0:	e029      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c7ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c7b0:	e021      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d002      	beq.n	800c7c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c7bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c7c0:	e019      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c7cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c7d0:	e011      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c7dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c7e0:	e009      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	f003 0308 	and.w	r3, r3, #8
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c7ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c7f0:	e001      	b.n	800c7f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c7f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3720      	adds	r7, #32
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	20000064 	.word	0x20000064
 800c804:	10624dd3 	.word	0x10624dd3
 800c808:	fdffe008 	.word	0xfdffe008

0800c80c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c814:	4b1f      	ldr	r3, [pc, #124]	; (800c894 <SDMMC_GetCmdResp2+0x88>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a1f      	ldr	r2, [pc, #124]	; (800c898 <SDMMC_GetCmdResp2+0x8c>)
 800c81a:	fba2 2303 	umull	r2, r3, r2, r3
 800c81e:	0a5b      	lsrs	r3, r3, #9
 800c820:	f241 3288 	movw	r2, #5000	; 0x1388
 800c824:	fb02 f303 	mul.w	r3, r2, r3
 800c828:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	1e5a      	subs	r2, r3, #1
 800c82e:	60fa      	str	r2, [r7, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d102      	bne.n	800c83a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c834:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c838:	e026      	b.n	800c888 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c83e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c846:	2b00      	cmp	r3, #0
 800c848:	d0ef      	beq.n	800c82a <SDMMC_GetCmdResp2+0x1e>
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1ea      	bne.n	800c82a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c858:	f003 0304 	and.w	r3, r3, #4
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d004      	beq.n	800c86a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2204      	movs	r2, #4
 800c864:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c866:	2304      	movs	r3, #4
 800c868:	e00e      	b.n	800c888 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c86e:	f003 0301 	and.w	r3, r3, #1
 800c872:	2b00      	cmp	r3, #0
 800c874:	d004      	beq.n	800c880 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c87c:	2301      	movs	r3, #1
 800c87e:	e003      	b.n	800c888 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	22c5      	movs	r2, #197	; 0xc5
 800c884:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3714      	adds	r7, #20
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr
 800c894:	20000064 	.word	0x20000064
 800c898:	10624dd3 	.word	0x10624dd3

0800c89c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8a4:	4b1a      	ldr	r3, [pc, #104]	; (800c910 <SDMMC_GetCmdResp3+0x74>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a1a      	ldr	r2, [pc, #104]	; (800c914 <SDMMC_GetCmdResp3+0x78>)
 800c8aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ae:	0a5b      	lsrs	r3, r3, #9
 800c8b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8b4:	fb02 f303 	mul.w	r3, r2, r3
 800c8b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	1e5a      	subs	r2, r3, #1
 800c8be:	60fa      	str	r2, [r7, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d102      	bne.n	800c8ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8c8:	e01b      	b.n	800c902 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d0ef      	beq.n	800c8ba <SDMMC_GetCmdResp3+0x1e>
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1ea      	bne.n	800c8ba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e8:	f003 0304 	and.w	r3, r3, #4
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d004      	beq.n	800c8fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2204      	movs	r2, #4
 800c8f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8f6:	2304      	movs	r3, #4
 800c8f8:	e003      	b.n	800c902 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	22c5      	movs	r2, #197	; 0xc5
 800c8fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3714      	adds	r7, #20
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	20000064 	.word	0x20000064
 800c914:	10624dd3 	.word	0x10624dd3

0800c918 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b088      	sub	sp, #32
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	460b      	mov	r3, r1
 800c922:	607a      	str	r2, [r7, #4]
 800c924:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c926:	4b35      	ldr	r3, [pc, #212]	; (800c9fc <SDMMC_GetCmdResp6+0xe4>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a35      	ldr	r2, [pc, #212]	; (800ca00 <SDMMC_GetCmdResp6+0xe8>)
 800c92c:	fba2 2303 	umull	r2, r3, r2, r3
 800c930:	0a5b      	lsrs	r3, r3, #9
 800c932:	f241 3288 	movw	r2, #5000	; 0x1388
 800c936:	fb02 f303 	mul.w	r3, r2, r3
 800c93a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	1e5a      	subs	r2, r3, #1
 800c940:	61fa      	str	r2, [r7, #28]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d102      	bne.n	800c94c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c946:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c94a:	e052      	b.n	800c9f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c950:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c952:	69bb      	ldr	r3, [r7, #24]
 800c954:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d0ef      	beq.n	800c93c <SDMMC_GetCmdResp6+0x24>
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1ea      	bne.n	800c93c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c96a:	f003 0304 	and.w	r3, r3, #4
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d004      	beq.n	800c97c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2204      	movs	r2, #4
 800c976:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c978:	2304      	movs	r3, #4
 800c97a:	e03a      	b.n	800c9f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c980:	f003 0301 	and.w	r3, r3, #1
 800c984:	2b00      	cmp	r3, #0
 800c986:	d004      	beq.n	800c992 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2201      	movs	r2, #1
 800c98c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c98e:	2301      	movs	r3, #1
 800c990:	e02f      	b.n	800c9f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f7ff fbca 	bl	800c12c <SDMMC_GetCommandResponse>
 800c998:	4603      	mov	r3, r0
 800c99a:	461a      	mov	r2, r3
 800c99c:	7afb      	ldrb	r3, [r7, #11]
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d001      	beq.n	800c9a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e025      	b.n	800c9f2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	22c5      	movs	r2, #197	; 0xc5
 800c9aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f7ff fbc9 	bl	800c146 <SDMMC_GetResponse>
 800c9b4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d106      	bne.n	800c9ce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	0c1b      	lsrs	r3, r3, #16
 800c9c4:	b29a      	uxth	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	e011      	b.n	800c9f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c9d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c9dc:	e009      	b.n	800c9f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d002      	beq.n	800c9ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c9e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9ec:	e001      	b.n	800c9f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c9ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3720      	adds	r7, #32
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	20000064 	.word	0x20000064
 800ca00:	10624dd3 	.word	0x10624dd3

0800ca04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca0c:	4b22      	ldr	r3, [pc, #136]	; (800ca98 <SDMMC_GetCmdResp7+0x94>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a22      	ldr	r2, [pc, #136]	; (800ca9c <SDMMC_GetCmdResp7+0x98>)
 800ca12:	fba2 2303 	umull	r2, r3, r2, r3
 800ca16:	0a5b      	lsrs	r3, r3, #9
 800ca18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca1c:	fb02 f303 	mul.w	r3, r2, r3
 800ca20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	1e5a      	subs	r2, r3, #1
 800ca26:	60fa      	str	r2, [r7, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d102      	bne.n	800ca32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca30:	e02c      	b.n	800ca8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d0ef      	beq.n	800ca22 <SDMMC_GetCmdResp7+0x1e>
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1ea      	bne.n	800ca22 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca50:	f003 0304 	and.w	r3, r3, #4
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d004      	beq.n	800ca62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2204      	movs	r2, #4
 800ca5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca5e:	2304      	movs	r3, #4
 800ca60:	e014      	b.n	800ca8c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d004      	beq.n	800ca78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e009      	b.n	800ca8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d002      	beq.n	800ca8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2240      	movs	r2, #64	; 0x40
 800ca88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ca8a:	2300      	movs	r3, #0
  
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3714      	adds	r7, #20
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	20000064 	.word	0x20000064
 800ca9c:	10624dd3 	.word	0x10624dd3

0800caa0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800caa8:	4b11      	ldr	r3, [pc, #68]	; (800caf0 <SDMMC_GetCmdError+0x50>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a11      	ldr	r2, [pc, #68]	; (800caf4 <SDMMC_GetCmdError+0x54>)
 800caae:	fba2 2303 	umull	r2, r3, r2, r3
 800cab2:	0a5b      	lsrs	r3, r3, #9
 800cab4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cab8:	fb02 f303 	mul.w	r3, r2, r3
 800cabc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	1e5a      	subs	r2, r3, #1
 800cac2:	60fa      	str	r2, [r7, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d102      	bne.n	800cace <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cacc:	e009      	b.n	800cae2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d0f1      	beq.n	800cabe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	22c5      	movs	r2, #197	; 0xc5
 800cade:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	20000064 	.word	0x20000064
 800caf4:	10624dd3 	.word	0x10624dd3

0800caf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800caf8:	b084      	sub	sp, #16
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	f107 001c 	add.w	r0, r7, #28
 800cb06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d120      	bne.n	800cb52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	68da      	ldr	r2, [r3, #12]
 800cb20:	4b20      	ldr	r3, [pc, #128]	; (800cba4 <USB_CoreInit+0xac>)
 800cb22:	4013      	ands	r3, r2
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cb34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d105      	bne.n	800cb46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 f9b4 	bl	800ceb4 <USB_CoreReset>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	73fb      	strb	r3, [r7, #15]
 800cb50:	e010      	b.n	800cb74 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 f9a8 	bl	800ceb4 <USB_CoreReset>
 800cb64:	4603      	mov	r3, r0
 800cb66:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d10b      	bne.n	800cb92 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	f043 0206 	orr.w	r2, r3, #6
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	f043 0220 	orr.w	r2, r3, #32
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cb92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3710      	adds	r7, #16
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb9e:	b004      	add	sp, #16
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	ffbdffbf 	.word	0xffbdffbf

0800cba8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	f043 0201 	orr.w	r2, r3, #1
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	370c      	adds	r7, #12
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b083      	sub	sp, #12
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	f023 0201 	bic.w	r2, r3, #1
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cc08:	78fb      	ldrb	r3, [r7, #3]
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d115      	bne.n	800cc3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cc1a:	2001      	movs	r0, #1
 800cc1c:	f7f6 faea 	bl	80031f4 <HAL_Delay>
      ms++;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	3301      	adds	r3, #1
 800cc24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f935 	bl	800ce96 <USB_GetMode>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d01e      	beq.n	800cc70 <USB_SetCurrentMode+0x84>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2b31      	cmp	r3, #49	; 0x31
 800cc36:	d9f0      	bls.n	800cc1a <USB_SetCurrentMode+0x2e>
 800cc38:	e01a      	b.n	800cc70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cc3a:	78fb      	ldrb	r3, [r7, #3]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d115      	bne.n	800cc6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cc4c:	2001      	movs	r0, #1
 800cc4e:	f7f6 fad1 	bl	80031f4 <HAL_Delay>
      ms++;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3301      	adds	r3, #1
 800cc56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 f91c 	bl	800ce96 <USB_GetMode>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d005      	beq.n	800cc70 <USB_SetCurrentMode+0x84>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b31      	cmp	r3, #49	; 0x31
 800cc68:	d9f0      	bls.n	800cc4c <USB_SetCurrentMode+0x60>
 800cc6a:	e001      	b.n	800cc70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e005      	b.n	800cc7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2b32      	cmp	r3, #50	; 0x32
 800cc74:	d101      	bne.n	800cc7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e000      	b.n	800cc7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	3301      	adds	r3, #1
 800cc96:	60fb      	str	r3, [r7, #12]
 800cc98:	4a12      	ldr	r2, [pc, #72]	; (800cce4 <USB_FlushTxFifo+0x60>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d901      	bls.n	800cca2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cc9e:	2303      	movs	r3, #3
 800cca0:	e01a      	b.n	800ccd8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	daf3      	bge.n	800cc92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	019b      	lsls	r3, r3, #6
 800ccb2:	f043 0220 	orr.w	r2, r3, #32
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	60fb      	str	r3, [r7, #12]
 800ccc0:	4a08      	ldr	r2, [pc, #32]	; (800cce4 <USB_FlushTxFifo+0x60>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d901      	bls.n	800ccca <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800ccc6:	2303      	movs	r3, #3
 800ccc8:	e006      	b.n	800ccd8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	f003 0320 	and.w	r3, r3, #32
 800ccd2:	2b20      	cmp	r3, #32
 800ccd4:	d0f1      	beq.n	800ccba <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800ccd6:	2300      	movs	r3, #0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3714      	adds	r7, #20
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	00030d40 	.word	0x00030d40

0800cce8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	60fb      	str	r3, [r7, #12]
 800ccfa:	4a11      	ldr	r2, [pc, #68]	; (800cd40 <USB_FlushRxFifo+0x58>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d901      	bls.n	800cd04 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800cd00:	2303      	movs	r3, #3
 800cd02:	e017      	b.n	800cd34 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	daf3      	bge.n	800ccf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2210      	movs	r2, #16
 800cd14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	60fb      	str	r3, [r7, #12]
 800cd1c:	4a08      	ldr	r2, [pc, #32]	; (800cd40 <USB_FlushRxFifo+0x58>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d901      	bls.n	800cd26 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800cd22:	2303      	movs	r3, #3
 800cd24:	e006      	b.n	800cd34 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	691b      	ldr	r3, [r3, #16]
 800cd2a:	f003 0310 	and.w	r3, r3, #16
 800cd2e:	2b10      	cmp	r3, #16
 800cd30:	d0f1      	beq.n	800cd16 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr
 800cd40:	00030d40 	.word	0x00030d40

0800cd44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b089      	sub	sp, #36	; 0x24
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	4611      	mov	r1, r2
 800cd50:	461a      	mov	r2, r3
 800cd52:	460b      	mov	r3, r1
 800cd54:	71fb      	strb	r3, [r7, #7]
 800cd56:	4613      	mov	r3, r2
 800cd58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cd62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d123      	bne.n	800cdb2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cd6a:	88bb      	ldrh	r3, [r7, #4]
 800cd6c:	3303      	adds	r3, #3
 800cd6e:	089b      	lsrs	r3, r3, #2
 800cd70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cd72:	2300      	movs	r3, #0
 800cd74:	61bb      	str	r3, [r7, #24]
 800cd76:	e018      	b.n	800cdaa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cd78:	79fb      	ldrb	r3, [r7, #7]
 800cd7a:	031a      	lsls	r2, r3, #12
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	4413      	add	r3, r2
 800cd80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd84:	461a      	mov	r2, r3
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	3301      	adds	r3, #1
 800cd96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	3301      	adds	r3, #1
 800cda2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	3301      	adds	r3, #1
 800cda8:	61bb      	str	r3, [r7, #24]
 800cdaa:	69ba      	ldr	r2, [r7, #24]
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d3e2      	bcc.n	800cd78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3724      	adds	r7, #36	; 0x24
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b08b      	sub	sp, #44	; 0x2c
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cdd6:	88fb      	ldrh	r3, [r7, #6]
 800cdd8:	089b      	lsrs	r3, r3, #2
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cdde:	88fb      	ldrh	r3, [r7, #6]
 800cde0:	f003 0303 	and.w	r3, r3, #3
 800cde4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cde6:	2300      	movs	r3, #0
 800cde8:	623b      	str	r3, [r7, #32]
 800cdea:	e014      	b.n	800ce16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	601a      	str	r2, [r3, #0]
    pDest++;
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce00:	3301      	adds	r3, #1
 800ce02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	3301      	adds	r3, #1
 800ce08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ce10:	6a3b      	ldr	r3, [r7, #32]
 800ce12:	3301      	adds	r3, #1
 800ce14:	623b      	str	r3, [r7, #32]
 800ce16:	6a3a      	ldr	r2, [r7, #32]
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d3e6      	bcc.n	800cdec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ce1e:	8bfb      	ldrh	r3, [r7, #30]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d01e      	beq.n	800ce62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ce24:	2300      	movs	r3, #0
 800ce26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce2e:	461a      	mov	r2, r3
 800ce30:	f107 0310 	add.w	r3, r7, #16
 800ce34:	6812      	ldr	r2, [r2, #0]
 800ce36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ce38:	693a      	ldr	r2, [r7, #16]
 800ce3a:	6a3b      	ldr	r3, [r7, #32]
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	fa22 f303 	lsr.w	r3, r2, r3
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce48:	701a      	strb	r2, [r3, #0]
      i++;
 800ce4a:	6a3b      	ldr	r3, [r7, #32]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce52:	3301      	adds	r3, #1
 800ce54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ce56:	8bfb      	ldrh	r3, [r7, #30]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ce5c:	8bfb      	ldrh	r3, [r7, #30]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1ea      	bne.n	800ce38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	372c      	adds	r7, #44	; 0x2c
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	695b      	ldr	r3, [r3, #20]
 800ce7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	699b      	ldr	r3, [r3, #24]
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	4013      	ands	r3, r2
 800ce86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ce88:	68fb      	ldr	r3, [r7, #12]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3714      	adds	r7, #20
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr

0800ce96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ce96:	b480      	push	{r7}
 800ce98:	b083      	sub	sp, #12
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	695b      	ldr	r3, [r3, #20]
 800cea2:	f003 0301 	and.w	r3, r3, #1
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
	...

0800ceb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cebc:	2300      	movs	r3, #0
 800cebe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	3301      	adds	r3, #1
 800cec4:	60fb      	str	r3, [r7, #12]
 800cec6:	4a13      	ldr	r2, [pc, #76]	; (800cf14 <USB_CoreReset+0x60>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d901      	bls.n	800ced0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800cecc:	2303      	movs	r3, #3
 800cece:	e01a      	b.n	800cf06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	daf3      	bge.n	800cec0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ced8:	2300      	movs	r3, #0
 800ceda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	691b      	ldr	r3, [r3, #16]
 800cee0:	f043 0201 	orr.w	r2, r3, #1
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3301      	adds	r3, #1
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	4a09      	ldr	r2, [pc, #36]	; (800cf14 <USB_CoreReset+0x60>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d901      	bls.n	800cef8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800cef4:	2303      	movs	r3, #3
 800cef6:	e006      	b.n	800cf06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	f003 0301 	and.w	r3, r3, #1
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d0f1      	beq.n	800cee8 <USB_CoreReset+0x34>

  return HAL_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	00030d40 	.word	0x00030d40

0800cf18 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf18:	b084      	sub	sp, #16
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b086      	sub	sp, #24
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cf26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf38:	461a      	mov	r2, r3
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d018      	beq.n	800cf88 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d10a      	bne.n	800cf72 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf6a:	f043 0304 	orr.w	r3, r3, #4
 800cf6e:	6013      	str	r3, [r2, #0]
 800cf70:	e014      	b.n	800cf9c <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf80:	f023 0304 	bic.w	r3, r3, #4
 800cf84:	6013      	str	r3, [r2, #0]
 800cf86:	e009      	b.n	800cf9c <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf96:	f023 0304 	bic.w	r3, r3, #4
 800cf9a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cf9c:	2110      	movs	r1, #16
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7ff fe70 	bl	800cc84 <USB_FlushTxFifo>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d001      	beq.n	800cfae <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff fe9a 	bl	800cce8 <USB_FlushRxFifo>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d001      	beq.n	800cfbe <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	613b      	str	r3, [r7, #16]
 800cfc2:	e015      	b.n	800cff0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	015a      	lsls	r2, r3, #5
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	4413      	add	r3, r2
 800cfcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfd6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	015a      	lsls	r2, r3, #5
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	3301      	adds	r3, #1
 800cfee:	613b      	str	r3, [r7, #16]
 800cff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff2:	693a      	ldr	r2, [r7, #16]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d3e5      	bcc.n	800cfc4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d004:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00b      	beq.n	800d02a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d018:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4a13      	ldr	r2, [pc, #76]	; (800d06c <USB_HostInit+0x154>)
 800d01e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a13      	ldr	r2, [pc, #76]	; (800d070 <USB_HostInit+0x158>)
 800d024:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d028:	e009      	b.n	800d03e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2280      	movs	r2, #128	; 0x80
 800d02e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a10      	ldr	r2, [pc, #64]	; (800d074 <USB_HostInit+0x15c>)
 800d034:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4a0f      	ldr	r2, [pc, #60]	; (800d078 <USB_HostInit+0x160>)
 800d03a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d040:	2b00      	cmp	r3, #0
 800d042:	d105      	bne.n	800d050 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	699b      	ldr	r3, [r3, #24]
 800d048:	f043 0210 	orr.w	r2, r3, #16
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	699a      	ldr	r2, [r3, #24]
 800d054:	4b09      	ldr	r3, [pc, #36]	; (800d07c <USB_HostInit+0x164>)
 800d056:	4313      	orrs	r3, r2
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3718      	adds	r7, #24
 800d062:	46bd      	mov	sp, r7
 800d064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d068:	b004      	add	sp, #16
 800d06a:	4770      	bx	lr
 800d06c:	01000200 	.word	0x01000200
 800d070:	00e00300 	.word	0x00e00300
 800d074:	00600080 	.word	0x00600080
 800d078:	004000e0 	.word	0x004000e0
 800d07c:	a3200008 	.word	0xa3200008

0800d080 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	460b      	mov	r3, r1
 800d08a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d09e:	f023 0303 	bic.w	r3, r3, #3
 800d0a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	78fb      	ldrb	r3, [r7, #3]
 800d0ae:	f003 0303 	and.w	r3, r3, #3
 800d0b2:	68f9      	ldr	r1, [r7, #12]
 800d0b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d0bc:	78fb      	ldrb	r3, [r7, #3]
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d107      	bne.n	800d0d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d0ce:	6053      	str	r3, [r2, #4]
 800d0d0:	e009      	b.n	800d0e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d0d2:	78fb      	ldrb	r3, [r7, #3]
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d106      	bne.n	800d0e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0de:	461a      	mov	r2, r3
 800d0e0:	f241 7370 	movw	r3, #6000	; 0x1770
 800d0e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3714      	adds	r7, #20
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d100:	2300      	movs	r3, #0
 800d102:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d114:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d11e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d122:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d124:	2064      	movs	r0, #100	; 0x64
 800d126:	f7f6 f865 	bl	80031f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	68fa      	ldr	r2, [r7, #12]
 800d12e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d136:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d138:	200a      	movs	r0, #10
 800d13a:	f7f6 f85b 	bl	80031f4 <HAL_Delay>

  return HAL_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d148:	b480      	push	{r7}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	460b      	mov	r3, r1
 800d152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d158:	2300      	movs	r3, #0
 800d15a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d16c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d174:	2b00      	cmp	r3, #0
 800d176:	d109      	bne.n	800d18c <USB_DriveVbus+0x44>
 800d178:	78fb      	ldrb	r3, [r7, #3]
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d106      	bne.n	800d18c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d18a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d196:	d109      	bne.n	800d1ac <USB_DriveVbus+0x64>
 800d198:	78fb      	ldrb	r3, [r7, #3]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d106      	bne.n	800d1ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d1a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3714      	adds	r7, #20
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b085      	sub	sp, #20
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	0c5b      	lsrs	r3, r3, #17
 800d1d8:	f003 0303 	and.w	r3, r3, #3
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3714      	adds	r7, #20
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	b29b      	uxth	r3, r3
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3714      	adds	r7, #20
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr
	...

0800d20c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b088      	sub	sp, #32
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	4608      	mov	r0, r1
 800d216:	4611      	mov	r1, r2
 800d218:	461a      	mov	r2, r3
 800d21a:	4603      	mov	r3, r0
 800d21c:	70fb      	strb	r3, [r7, #3]
 800d21e:	460b      	mov	r3, r1
 800d220:	70bb      	strb	r3, [r7, #2]
 800d222:	4613      	mov	r3, r2
 800d224:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d22e:	78fb      	ldrb	r3, [r7, #3]
 800d230:	015a      	lsls	r2, r3, #5
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	4413      	add	r3, r2
 800d236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d23a:	461a      	mov	r2, r3
 800d23c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d240:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d242:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d246:	2b03      	cmp	r3, #3
 800d248:	d87e      	bhi.n	800d348 <USB_HC_Init+0x13c>
 800d24a:	a201      	add	r2, pc, #4	; (adr r2, 800d250 <USB_HC_Init+0x44>)
 800d24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d250:	0800d261 	.word	0x0800d261
 800d254:	0800d30b 	.word	0x0800d30b
 800d258:	0800d261 	.word	0x0800d261
 800d25c:	0800d2cd 	.word	0x0800d2cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d260:	78fb      	ldrb	r3, [r7, #3]
 800d262:	015a      	lsls	r2, r3, #5
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	4413      	add	r3, r2
 800d268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d26c:	461a      	mov	r2, r3
 800d26e:	f240 439d 	movw	r3, #1181	; 0x49d
 800d272:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d274:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	da10      	bge.n	800d29e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d27c:	78fb      	ldrb	r3, [r7, #3]
 800d27e:	015a      	lsls	r2, r3, #5
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	4413      	add	r3, r2
 800d284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	78fa      	ldrb	r2, [r7, #3]
 800d28c:	0151      	lsls	r1, r2, #5
 800d28e:	693a      	ldr	r2, [r7, #16]
 800d290:	440a      	add	r2, r1
 800d292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d29a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d29c:	e057      	b.n	800d34e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d051      	beq.n	800d34e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d2aa:	78fb      	ldrb	r3, [r7, #3]
 800d2ac:	015a      	lsls	r2, r3, #5
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	78fa      	ldrb	r2, [r7, #3]
 800d2ba:	0151      	lsls	r1, r2, #5
 800d2bc:	693a      	ldr	r2, [r7, #16]
 800d2be:	440a      	add	r2, r1
 800d2c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d2c8:	60d3      	str	r3, [r2, #12]
      break;
 800d2ca:	e040      	b.n	800d34e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d2cc:	78fb      	ldrb	r3, [r7, #3]
 800d2ce:	015a      	lsls	r2, r3, #5
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2d8:	461a      	mov	r2, r3
 800d2da:	f240 639d 	movw	r3, #1693	; 0x69d
 800d2de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d2e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	da34      	bge.n	800d352 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d2e8:	78fb      	ldrb	r3, [r7, #3]
 800d2ea:	015a      	lsls	r2, r3, #5
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	78fa      	ldrb	r2, [r7, #3]
 800d2f8:	0151      	lsls	r1, r2, #5
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	440a      	add	r2, r1
 800d2fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d306:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d308:	e023      	b.n	800d352 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d30a:	78fb      	ldrb	r3, [r7, #3]
 800d30c:	015a      	lsls	r2, r3, #5
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	4413      	add	r3, r2
 800d312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d316:	461a      	mov	r2, r3
 800d318:	f240 2325 	movw	r3, #549	; 0x225
 800d31c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d31e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d322:	2b00      	cmp	r3, #0
 800d324:	da17      	bge.n	800d356 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d326:	78fb      	ldrb	r3, [r7, #3]
 800d328:	015a      	lsls	r2, r3, #5
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	4413      	add	r3, r2
 800d32e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	78fa      	ldrb	r2, [r7, #3]
 800d336:	0151      	lsls	r1, r2, #5
 800d338:	693a      	ldr	r2, [r7, #16]
 800d33a:	440a      	add	r2, r1
 800d33c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d340:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d344:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d346:	e006      	b.n	800d356 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d348:	2301      	movs	r3, #1
 800d34a:	77fb      	strb	r3, [r7, #31]
      break;
 800d34c:	e004      	b.n	800d358 <USB_HC_Init+0x14c>
      break;
 800d34e:	bf00      	nop
 800d350:	e002      	b.n	800d358 <USB_HC_Init+0x14c>
      break;
 800d352:	bf00      	nop
 800d354:	e000      	b.n	800d358 <USB_HC_Init+0x14c>
      break;
 800d356:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800d358:	78fb      	ldrb	r3, [r7, #3]
 800d35a:	015a      	lsls	r2, r3, #5
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	4413      	add	r3, r2
 800d360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	78fa      	ldrb	r2, [r7, #3]
 800d368:	0151      	lsls	r1, r2, #5
 800d36a:	693a      	ldr	r2, [r7, #16]
 800d36c:	440a      	add	r2, r1
 800d36e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d372:	f043 0302 	orr.w	r3, r3, #2
 800d376:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d37e:	699a      	ldr	r2, [r3, #24]
 800d380:	78fb      	ldrb	r3, [r7, #3]
 800d382:	f003 030f 	and.w	r3, r3, #15
 800d386:	2101      	movs	r1, #1
 800d388:	fa01 f303 	lsl.w	r3, r1, r3
 800d38c:	6939      	ldr	r1, [r7, #16]
 800d38e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d392:	4313      	orrs	r3, r2
 800d394:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	699b      	ldr	r3, [r3, #24]
 800d39a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d3a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	da03      	bge.n	800d3b2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d3aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3ae:	61bb      	str	r3, [r7, #24]
 800d3b0:	e001      	b.n	800d3b6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7ff feff 	bl	800d1ba <USB_GetHostSpeed>
 800d3bc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d3be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d3c2:	2b02      	cmp	r3, #2
 800d3c4:	d106      	bne.n	800d3d4 <USB_HC_Init+0x1c8>
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d003      	beq.n	800d3d4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d3cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d3d0:	617b      	str	r3, [r7, #20]
 800d3d2:	e001      	b.n	800d3d8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d3d8:	787b      	ldrb	r3, [r7, #1]
 800d3da:	059b      	lsls	r3, r3, #22
 800d3dc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d3e0:	78bb      	ldrb	r3, [r7, #2]
 800d3e2:	02db      	lsls	r3, r3, #11
 800d3e4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d3e8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d3ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d3ee:	049b      	lsls	r3, r3, #18
 800d3f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d3f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d3f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d3f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d3fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d402:	78fb      	ldrb	r3, [r7, #3]
 800d404:	0159      	lsls	r1, r3, #5
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	440b      	add	r3, r1
 800d40a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d40e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d414:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d416:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d41a:	2b03      	cmp	r3, #3
 800d41c:	d10f      	bne.n	800d43e <USB_HC_Init+0x232>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d41e:	78fb      	ldrb	r3, [r7, #3]
 800d420:	015a      	lsls	r2, r3, #5
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	4413      	add	r3, r2
 800d426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	78fa      	ldrb	r2, [r7, #3]
 800d42e:	0151      	lsls	r1, r2, #5
 800d430:	693a      	ldr	r2, [r7, #16]
 800d432:	440a      	add	r2, r1
 800d434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d438:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d43c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d43e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3720      	adds	r7, #32
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08c      	sub	sp, #48	; 0x30
 800d44c:	af02      	add	r7, sp, #8
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	4613      	mov	r3, r2
 800d454:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	785b      	ldrb	r3, [r3, #1]
 800d45e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d460:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d464:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d46a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d02d      	beq.n	800d4ce <USB_HC_StartXfer+0x86>
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	791b      	ldrb	r3, [r3, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d129      	bne.n	800d4ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d117      	bne.n	800d4b0 <USB_HC_StartXfer+0x68>
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	79db      	ldrb	r3, [r3, #7]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d003      	beq.n	800d490 <USB_HC_StartXfer+0x48>
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	79db      	ldrb	r3, [r3, #7]
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	d10f      	bne.n	800d4b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	015a      	lsls	r2, r3, #5
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	4413      	add	r3, r2
 800d498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	69fa      	ldr	r2, [r7, #28]
 800d4a0:	0151      	lsls	r1, r2, #5
 800d4a2:	6a3a      	ldr	r2, [r7, #32]
 800d4a4:	440a      	add	r2, r1
 800d4a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d4b0:	79fb      	ldrb	r3, [r7, #7]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d10b      	bne.n	800d4ce <USB_HC_StartXfer+0x86>
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	795b      	ldrb	r3, [r3, #5]
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d107      	bne.n	800d4ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	785b      	ldrb	r3, [r3, #1]
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f000 fa0d 	bl	800d8e4 <USB_DoPing>
      return HAL_OK;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	e0f8      	b.n	800d6c0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	695b      	ldr	r3, [r3, #20]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d018      	beq.n	800d508 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	695b      	ldr	r3, [r3, #20]
 800d4da:	68ba      	ldr	r2, [r7, #8]
 800d4dc:	8912      	ldrh	r2, [r2, #8]
 800d4de:	4413      	add	r3, r2
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	68ba      	ldr	r2, [r7, #8]
 800d4e4:	8912      	ldrh	r2, [r2, #8]
 800d4e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d4ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d4ee:	8b7b      	ldrh	r3, [r7, #26]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d90b      	bls.n	800d50c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d4f4:	8b7b      	ldrh	r3, [r7, #26]
 800d4f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d4f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	8912      	ldrh	r2, [r2, #8]
 800d4fe:	fb02 f203 	mul.w	r2, r2, r3
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	611a      	str	r2, [r3, #16]
 800d506:	e001      	b.n	800d50c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d508:	2301      	movs	r3, #1
 800d50a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	78db      	ldrb	r3, [r3, #3]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d007      	beq.n	800d524 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d514:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	8912      	ldrh	r2, [r2, #8]
 800d51a:	fb02 f203 	mul.w	r2, r2, r3
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	611a      	str	r2, [r3, #16]
 800d522:	e003      	b.n	800d52c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	695a      	ldr	r2, [r3, #20]
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	691b      	ldr	r3, [r3, #16]
 800d530:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d536:	04d9      	lsls	r1, r3, #19
 800d538:	4b63      	ldr	r3, [pc, #396]	; (800d6c8 <USB_HC_StartXfer+0x280>)
 800d53a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d53c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	7a9b      	ldrb	r3, [r3, #10]
 800d542:	075b      	lsls	r3, r3, #29
 800d544:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d548:	69f9      	ldr	r1, [r7, #28]
 800d54a:	0148      	lsls	r0, r1, #5
 800d54c:	6a39      	ldr	r1, [r7, #32]
 800d54e:	4401      	add	r1, r0
 800d550:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d554:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d556:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d558:	79fb      	ldrb	r3, [r7, #7]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d009      	beq.n	800d572 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	68d9      	ldr	r1, [r3, #12]
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	015a      	lsls	r2, r3, #5
 800d566:	6a3b      	ldr	r3, [r7, #32]
 800d568:	4413      	add	r3, r2
 800d56a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d56e:	460a      	mov	r2, r1
 800d570:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d572:	6a3b      	ldr	r3, [r7, #32]
 800d574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	f003 0301 	and.w	r3, r3, #1
 800d57e:	2b00      	cmp	r3, #0
 800d580:	bf0c      	ite	eq
 800d582:	2301      	moveq	r3, #1
 800d584:	2300      	movne	r3, #0
 800d586:	b2db      	uxtb	r3, r3
 800d588:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	015a      	lsls	r2, r3, #5
 800d58e:	6a3b      	ldr	r3, [r7, #32]
 800d590:	4413      	add	r3, r2
 800d592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	69fa      	ldr	r2, [r7, #28]
 800d59a:	0151      	lsls	r1, r2, #5
 800d59c:	6a3a      	ldr	r2, [r7, #32]
 800d59e:	440a      	add	r2, r1
 800d5a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d5a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	015a      	lsls	r2, r3, #5
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	7e7b      	ldrb	r3, [r7, #25]
 800d5ba:	075b      	lsls	r3, r3, #29
 800d5bc:	69f9      	ldr	r1, [r7, #28]
 800d5be:	0148      	lsls	r0, r1, #5
 800d5c0:	6a39      	ldr	r1, [r7, #32]
 800d5c2:	4401      	add	r1, r0
 800d5c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	015a      	lsls	r2, r3, #5
 800d5d0:	6a3b      	ldr	r3, [r7, #32]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d5e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	78db      	ldrb	r3, [r3, #3]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d004      	beq.n	800d5f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5f2:	613b      	str	r3, [r7, #16]
 800d5f4:	e003      	b.n	800d5fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d604:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	015a      	lsls	r2, r3, #5
 800d60a:	6a3b      	ldr	r3, [r7, #32]
 800d60c:	4413      	add	r3, r2
 800d60e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d612:	461a      	mov	r2, r3
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d618:	79fb      	ldrb	r3, [r7, #7]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d001      	beq.n	800d622 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d61e:	2300      	movs	r3, #0
 800d620:	e04e      	b.n	800d6c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	78db      	ldrb	r3, [r3, #3]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d149      	bne.n	800d6be <USB_HC_StartXfer+0x276>
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	695b      	ldr	r3, [r3, #20]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d045      	beq.n	800d6be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	79db      	ldrb	r3, [r3, #7]
 800d636:	2b03      	cmp	r3, #3
 800d638:	d830      	bhi.n	800d69c <USB_HC_StartXfer+0x254>
 800d63a:	a201      	add	r2, pc, #4	; (adr r2, 800d640 <USB_HC_StartXfer+0x1f8>)
 800d63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d640:	0800d651 	.word	0x0800d651
 800d644:	0800d675 	.word	0x0800d675
 800d648:	0800d651 	.word	0x0800d651
 800d64c:	0800d675 	.word	0x0800d675
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	695b      	ldr	r3, [r3, #20]
 800d654:	3303      	adds	r3, #3
 800d656:	089b      	lsrs	r3, r3, #2
 800d658:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d65a:	8afa      	ldrh	r2, [r7, #22]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	b29b      	uxth	r3, r3
 800d662:	429a      	cmp	r2, r3
 800d664:	d91c      	bls.n	800d6a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	699b      	ldr	r3, [r3, #24]
 800d66a:	f043 0220 	orr.w	r2, r3, #32
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	619a      	str	r2, [r3, #24]
        }
        break;
 800d672:	e015      	b.n	800d6a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	695b      	ldr	r3, [r3, #20]
 800d678:	3303      	adds	r3, #3
 800d67a:	089b      	lsrs	r3, r3, #2
 800d67c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d67e:	8afa      	ldrh	r2, [r7, #22]
 800d680:	6a3b      	ldr	r3, [r7, #32]
 800d682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	b29b      	uxth	r3, r3
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d90a      	bls.n	800d6a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	699b      	ldr	r3, [r3, #24]
 800d692:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	619a      	str	r2, [r3, #24]
        }
        break;
 800d69a:	e003      	b.n	800d6a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d69c:	bf00      	nop
 800d69e:	e002      	b.n	800d6a6 <USB_HC_StartXfer+0x25e>
        break;
 800d6a0:	bf00      	nop
 800d6a2:	e000      	b.n	800d6a6 <USB_HC_StartXfer+0x25e>
        break;
 800d6a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	68d9      	ldr	r1, [r3, #12]
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	785a      	ldrb	r2, [r3, #1]
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	695b      	ldr	r3, [r3, #20]
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	9000      	str	r0, [sp, #0]
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f7ff fb43 	bl	800cd44 <USB_WritePacket>
  }

  return HAL_OK;
 800d6be:	2300      	movs	r3, #0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3728      	adds	r7, #40	; 0x28
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	1ff80000 	.word	0x1ff80000

0800d6cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b085      	sub	sp, #20
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6de:	695b      	ldr	r3, [r3, #20]
 800d6e0:	b29b      	uxth	r3, r3
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3714      	adds	r7, #20
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	b089      	sub	sp, #36	; 0x24
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800d6fe:	78fb      	ldrb	r3, [r7, #3]
 800d700:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d702:	2300      	movs	r3, #0
 800d704:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	015a      	lsls	r2, r3, #5
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	4413      	add	r3, r2
 800d70e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	0c9b      	lsrs	r3, r3, #18
 800d716:	f003 0303 	and.w	r3, r3, #3
 800d71a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	015a      	lsls	r2, r3, #5
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	4413      	add	r3, r2
 800d724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	0fdb      	lsrs	r3, r3, #31
 800d72c:	f003 0301 	and.w	r3, r3, #1
 800d730:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	f003 0320 	and.w	r3, r3, #32
 800d73a:	2b20      	cmp	r3, #32
 800d73c:	d104      	bne.n	800d748 <USB_HC_Halt+0x5a>
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d101      	bne.n	800d748 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	e0c6      	b.n	800d8d6 <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d002      	beq.n	800d754 <USB_HC_Halt+0x66>
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	2b02      	cmp	r3, #2
 800d752:	d162      	bne.n	800d81a <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	015a      	lsls	r2, r3, #5
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	4413      	add	r3, r2
 800d75c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	69ba      	ldr	r2, [r7, #24]
 800d764:	0151      	lsls	r1, r2, #5
 800d766:	69fa      	ldr	r2, [r7, #28]
 800d768:	440a      	add	r2, r1
 800d76a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d76e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d772:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	689b      	ldr	r3, [r3, #8]
 800d778:	f003 0320 	and.w	r3, r3, #32
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f040 80a9 	bne.w	800d8d4 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d786:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d132      	bne.n	800d7f4 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	015a      	lsls	r2, r3, #5
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	4413      	add	r3, r2
 800d796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	69ba      	ldr	r2, [r7, #24]
 800d79e:	0151      	lsls	r1, r2, #5
 800d7a0:	69fa      	ldr	r2, [r7, #28]
 800d7a2:	440a      	add	r2, r1
 800d7a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d7ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	015a      	lsls	r2, r3, #5
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	69ba      	ldr	r2, [r7, #24]
 800d7be:	0151      	lsls	r1, r2, #5
 800d7c0:	69fa      	ldr	r2, [r7, #28]
 800d7c2:	440a      	add	r2, r1
 800d7c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d7cc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	60fb      	str	r3, [r7, #12]
 800d7d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7d8:	d81d      	bhi.n	800d816 <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	015a      	lsls	r2, r3, #5
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d7ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7f0:	d0ed      	beq.n	800d7ce <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d7f2:	e06f      	b.n	800d8d4 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	015a      	lsls	r2, r3, #5
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	69ba      	ldr	r2, [r7, #24]
 800d804:	0151      	lsls	r1, r2, #5
 800d806:	69fa      	ldr	r2, [r7, #28]
 800d808:	440a      	add	r2, r1
 800d80a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d80e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d812:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d814:	e05e      	b.n	800d8d4 <USB_HC_Halt+0x1e6>
            break;
 800d816:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d818:	e05c      	b.n	800d8d4 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	015a      	lsls	r2, r3, #5
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	4413      	add	r3, r2
 800d822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	69ba      	ldr	r2, [r7, #24]
 800d82a:	0151      	lsls	r1, r2, #5
 800d82c:	69fa      	ldr	r2, [r7, #28]
 800d82e:	440a      	add	r2, r1
 800d830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d838:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d840:	691b      	ldr	r3, [r3, #16]
 800d842:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d846:	2b00      	cmp	r3, #0
 800d848:	d132      	bne.n	800d8b0 <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	015a      	lsls	r2, r3, #5
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	4413      	add	r3, r2
 800d852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	69ba      	ldr	r2, [r7, #24]
 800d85a:	0151      	lsls	r1, r2, #5
 800d85c:	69fa      	ldr	r2, [r7, #28]
 800d85e:	440a      	add	r2, r1
 800d860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d868:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	015a      	lsls	r2, r3, #5
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	4413      	add	r3, r2
 800d872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	69ba      	ldr	r2, [r7, #24]
 800d87a:	0151      	lsls	r1, r2, #5
 800d87c:	69fa      	ldr	r2, [r7, #28]
 800d87e:	440a      	add	r2, r1
 800d880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d888:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	3301      	adds	r3, #1
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d894:	d81d      	bhi.n	800d8d2 <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	015a      	lsls	r2, r3, #5
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	4413      	add	r3, r2
 800d89e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8ac:	d0ed      	beq.n	800d88a <USB_HC_Halt+0x19c>
 800d8ae:	e011      	b.n	800d8d4 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	015a      	lsls	r2, r3, #5
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	69ba      	ldr	r2, [r7, #24]
 800d8c0:	0151      	lsls	r1, r2, #5
 800d8c2:	69fa      	ldr	r2, [r7, #28]
 800d8c4:	440a      	add	r2, r1
 800d8c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d8ce:	6013      	str	r3, [r2, #0]
 800d8d0:	e000      	b.n	800d8d4 <USB_HC_Halt+0x1e6>
          break;
 800d8d2:	bf00      	nop
    }
  }

  return HAL_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3724      	adds	r7, #36	; 0x24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr
	...

0800d8e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b087      	sub	sp, #28
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d8f4:	78fb      	ldrb	r3, [r7, #3]
 800d8f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	04da      	lsls	r2, r3, #19
 800d900:	4b15      	ldr	r3, [pc, #84]	; (800d958 <USB_DoPing+0x74>)
 800d902:	4013      	ands	r3, r2
 800d904:	693a      	ldr	r2, [r7, #16]
 800d906:	0151      	lsls	r1, r2, #5
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	440a      	add	r2, r1
 800d90c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d914:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	015a      	lsls	r2, r3, #5
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	4413      	add	r3, r2
 800d91e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d92c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d934:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	015a      	lsls	r2, r3, #5
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	4413      	add	r3, r2
 800d93e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d942:	461a      	mov	r2, r3
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	371c      	adds	r7, #28
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	1ff80000 	.word	0x1ff80000

0800d95c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b088      	sub	sp, #32
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800d96c:	2300      	movs	r3, #0
 800d96e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f7ff f92a 	bl	800cbca <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d976:	2110      	movs	r1, #16
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff f983 	bl	800cc84 <USB_FlushTxFifo>
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d001      	beq.n	800d988 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800d984:	2301      	movs	r3, #1
 800d986:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7ff f9ad 	bl	800cce8 <USB_FlushRxFifo>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d001      	beq.n	800d998 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800d994:	2301      	movs	r3, #1
 800d996:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d998:	2300      	movs	r3, #0
 800d99a:	61bb      	str	r3, [r7, #24]
 800d99c:	e01f      	b.n	800d9de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	015a      	lsls	r2, r3, #5
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d9b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d9c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	015a      	lsls	r2, r3, #5
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	61bb      	str	r3, [r7, #24]
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	2b0f      	cmp	r3, #15
 800d9e2:	d9dc      	bls.n	800d99e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	61bb      	str	r3, [r7, #24]
 800d9e8:	e033      	b.n	800da52 <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	015a      	lsls	r2, r3, #5
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800da10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	015a      	lsls	r2, r3, #5
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	4413      	add	r3, r2
 800da1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da1e:	461a      	mov	r2, r3
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	3301      	adds	r3, #1
 800da28:	60fb      	str	r3, [r7, #12]
 800da2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da2e:	d80c      	bhi.n	800da4a <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	015a      	lsls	r2, r3, #5
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	4413      	add	r3, r2
 800da38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da46:	d0ed      	beq.n	800da24 <USB_StopHost+0xc8>
 800da48:	e000      	b.n	800da4c <USB_StopHost+0xf0>
        break;
 800da4a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	3301      	adds	r3, #1
 800da50:	61bb      	str	r3, [r7, #24]
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	2b0f      	cmp	r3, #15
 800da56:	d9c8      	bls.n	800d9ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da5e:	461a      	mov	r2, r3
 800da60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da64:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da6c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7ff f89a 	bl	800cba8 <USB_EnableGlobalInt>

  return ret;
 800da74:	7ffb      	ldrb	r3, [r7, #31]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3720      	adds	r7, #32
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
	...

0800da80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800da84:	4904      	ldr	r1, [pc, #16]	; (800da98 <MX_FATFS_Init+0x18>)
 800da86:	4805      	ldr	r0, [pc, #20]	; (800da9c <MX_FATFS_Init+0x1c>)
 800da88:	f002 fbe8 	bl	801025c <FATFS_LinkDriver>
 800da8c:	4603      	mov	r3, r0
 800da8e:	461a      	mov	r2, r3
 800da90:	4b03      	ldr	r3, [pc, #12]	; (800daa0 <MX_FATFS_Init+0x20>)
 800da92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800da94:	bf00      	nop
 800da96:	bd80      	pop	{r7, pc}
 800da98:	20008d0c 	.word	0x20008d0c
 800da9c:	08012f40 	.word	0x08012f40
 800daa0:	20008d08 	.word	0x20008d08

0800daa4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800daaa:	2300      	movs	r3, #0
 800daac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800daae:	f000 f87b 	bl	800dba8 <BSP_SD_IsDetected>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d001      	beq.n	800dabc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800dab8:	2302      	movs	r3, #2
 800daba:	e012      	b.n	800dae2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800dabc:	480b      	ldr	r0, [pc, #44]	; (800daec <BSP_SD_Init+0x48>)
 800dabe:	f7fb fabd 	bl	800903c <HAL_SD_Init>
 800dac2:	4603      	mov	r3, r0
 800dac4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d109      	bne.n	800dae0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800dacc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dad0:	4806      	ldr	r0, [pc, #24]	; (800daec <BSP_SD_Init+0x48>)
 800dad2:	f7fb ff0d 	bl	80098f0 <HAL_SD_ConfigWideBusOperation>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800dadc:	2301      	movs	r3, #1
 800dade:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800dae0:	79fb      	ldrb	r3, [r7, #7]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	20008748 	.word	0x20008748

0800daf0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	68f9      	ldr	r1, [r7, #12]
 800db06:	4806      	ldr	r0, [pc, #24]	; (800db20 <BSP_SD_ReadBlocks_DMA+0x30>)
 800db08:	f7fb fb50 	bl	80091ac <HAL_SD_ReadBlocks_DMA>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d001      	beq.n	800db16 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800db16:	7dfb      	ldrb	r3, [r7, #23]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3718      	adds	r7, #24
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	20008748 	.word	0x20008748

0800db24 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b086      	sub	sp, #24
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800db30:	2300      	movs	r3, #0
 800db32:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	68ba      	ldr	r2, [r7, #8]
 800db38:	68f9      	ldr	r1, [r7, #12]
 800db3a:	4806      	ldr	r0, [pc, #24]	; (800db54 <BSP_SD_WriteBlocks_DMA+0x30>)
 800db3c:	f7fb fc18 	bl	8009370 <HAL_SD_WriteBlocks_DMA>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d001      	beq.n	800db4a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800db4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3718      	adds	r7, #24
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	20008748 	.word	0x20008748

0800db58 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800db5c:	4805      	ldr	r0, [pc, #20]	; (800db74 <BSP_SD_GetCardState+0x1c>)
 800db5e:	f7fb ff61 	bl	8009a24 <HAL_SD_GetCardState>
 800db62:	4603      	mov	r3, r0
 800db64:	2b04      	cmp	r3, #4
 800db66:	bf14      	ite	ne
 800db68:	2301      	movne	r3, #1
 800db6a:	2300      	moveq	r3, #0
 800db6c:	b2db      	uxtb	r3, r3
}
 800db6e:	4618      	mov	r0, r3
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	20008748 	.word	0x20008748

0800db78 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800db80:	6879      	ldr	r1, [r7, #4]
 800db82:	4803      	ldr	r0, [pc, #12]	; (800db90 <BSP_SD_GetCardInfo+0x18>)
 800db84:	f7fb fe88 	bl	8009898 <HAL_SD_GetCardInfo>
}
 800db88:	bf00      	nop
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	20008748 	.word	0x20008748

0800db94 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800db9c:	f000 f9b2 	bl	800df04 <BSP_SD_ReadCpltCallback>
}
 800dba0:	bf00      	nop
 800dba2:	3708      	adds	r7, #8
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dbb2:	f000 f80b 	bl	800dbcc <BSP_PlatformIsDetected>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d101      	bne.n	800dbc0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	b2db      	uxtb	r3, r3
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dbd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dbda:	4806      	ldr	r0, [pc, #24]	; (800dbf4 <BSP_PlatformIsDetected+0x28>)
 800dbdc:	f7f7 f8a4 	bl	8004d28 <HAL_GPIO_ReadPin>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d001      	beq.n	800dbea <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dbea:	79fb      	ldrb	r3, [r7, #7]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	40020800 	.word	0x40020800

0800dbf8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800dc00:	f002 fb78 	bl	80102f4 <osKernelSysTick>
 800dc04:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800dc06:	e006      	b.n	800dc16 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dc08:	f7ff ffa6 	bl	800db58 <BSP_SD_GetCardState>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d101      	bne.n	800dc16 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	e009      	b.n	800dc2a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800dc16:	f002 fb6d 	bl	80102f4 <osKernelSysTick>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	1ad3      	subs	r3, r2, r3
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d8f0      	bhi.n	800dc08 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dc26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
	...

0800dc34 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dc3e:	4b0b      	ldr	r3, [pc, #44]	; (800dc6c <SD_CheckStatus+0x38>)
 800dc40:	2201      	movs	r2, #1
 800dc42:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dc44:	f7ff ff88 	bl	800db58 <BSP_SD_GetCardState>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d107      	bne.n	800dc5e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dc4e:	4b07      	ldr	r3, [pc, #28]	; (800dc6c <SD_CheckStatus+0x38>)
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	f023 0301 	bic.w	r3, r3, #1
 800dc58:	b2da      	uxtb	r2, r3
 800dc5a:	4b04      	ldr	r3, [pc, #16]	; (800dc6c <SD_CheckStatus+0x38>)
 800dc5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dc5e:	4b03      	ldr	r3, [pc, #12]	; (800dc6c <SD_CheckStatus+0x38>)
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	b2db      	uxtb	r3, r3
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	2000006d 	.word	0x2000006d

0800dc70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dc70:	b590      	push	{r4, r7, lr}
 800dc72:	b087      	sub	sp, #28
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	4603      	mov	r3, r0
 800dc78:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dc7a:	4b20      	ldr	r3, [pc, #128]	; (800dcfc <SD_initialize+0x8c>)
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800dc80:	f002 fb2c 	bl	80102dc <osKernelRunning>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d030      	beq.n	800dcec <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800dc8a:	f7ff ff0b 	bl	800daa4 <BSP_SD_Init>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d107      	bne.n	800dca4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800dc94:	79fb      	ldrb	r3, [r7, #7]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff ffcc 	bl	800dc34 <SD_CheckStatus>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	461a      	mov	r2, r3
 800dca0:	4b16      	ldr	r3, [pc, #88]	; (800dcfc <SD_initialize+0x8c>)
 800dca2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800dca4:	4b15      	ldr	r3, [pc, #84]	; (800dcfc <SD_initialize+0x8c>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d01e      	beq.n	800dcec <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800dcae:	4b14      	ldr	r3, [pc, #80]	; (800dd00 <SD_initialize+0x90>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d10e      	bne.n	800dcd4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800dcb6:	4b13      	ldr	r3, [pc, #76]	; (800dd04 <SD_initialize+0x94>)
 800dcb8:	f107 0408 	add.w	r4, r7, #8
 800dcbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800dcc2:	f107 0308 	add.w	r3, r7, #8
 800dcc6:	2100      	movs	r1, #0
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f002 fb83 	bl	80103d4 <osMessageCreate>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	4a0b      	ldr	r2, [pc, #44]	; (800dd00 <SD_initialize+0x90>)
 800dcd2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800dcd4:	4b0a      	ldr	r3, [pc, #40]	; (800dd00 <SD_initialize+0x90>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d107      	bne.n	800dcec <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800dcdc:	4b07      	ldr	r3, [pc, #28]	; (800dcfc <SD_initialize+0x8c>)
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	f043 0301 	orr.w	r3, r3, #1
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	4b04      	ldr	r3, [pc, #16]	; (800dcfc <SD_initialize+0x8c>)
 800dcea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800dcec:	4b03      	ldr	r3, [pc, #12]	; (800dcfc <SD_initialize+0x8c>)
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	b2db      	uxtb	r3, r3
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	371c      	adds	r7, #28
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd90      	pop	{r4, r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	2000006d 	.word	0x2000006d
 800dd00:	20000324 	.word	0x20000324
 800dd04:	08012ed4 	.word	0x08012ed4

0800dd08 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	4603      	mov	r3, r0
 800dd10:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dd12:	79fb      	ldrb	r3, [r7, #7]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7ff ff8d 	bl	800dc34 <SD_CheckStatus>
 800dd1a:	4603      	mov	r3, r0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b08a      	sub	sp, #40	; 0x28
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60b9      	str	r1, [r7, #8]
 800dd2c:	607a      	str	r2, [r7, #4]
 800dd2e:	603b      	str	r3, [r7, #0]
 800dd30:	4603      	mov	r3, r0
 800dd32:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800dd34:	2301      	movs	r3, #1
 800dd36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dd3a:	f247 5030 	movw	r0, #30000	; 0x7530
 800dd3e:	f7ff ff5b 	bl	800dbf8 <SD_CheckStatusWithTimeout>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	da02      	bge.n	800dd4e <SD_read+0x2a>
  {
    return res;
 800dd48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd4c:	e032      	b.n	800ddb4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	6879      	ldr	r1, [r7, #4]
 800dd52:	68b8      	ldr	r0, [r7, #8]
 800dd54:	f7ff fecc 	bl	800daf0 <BSP_SD_ReadBlocks_DMA>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800dd5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d124      	bne.n	800ddb0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800dd66:	4b15      	ldr	r3, [pc, #84]	; (800ddbc <SD_read+0x98>)
 800dd68:	6819      	ldr	r1, [r3, #0]
 800dd6a:	f107 0314 	add.w	r3, r7, #20
 800dd6e:	f247 5230 	movw	r2, #30000	; 0x7530
 800dd72:	4618      	mov	r0, r3
 800dd74:	f002 fb96 	bl	80104a4 <osMessageGet>

    if (event.status == osEventMessage)
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	2b10      	cmp	r3, #16
 800dd7c:	d118      	bne.n	800ddb0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d115      	bne.n	800ddb0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800dd84:	f002 fab6 	bl	80102f4 <osKernelSysTick>
 800dd88:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800dd8a:	e008      	b.n	800dd9e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd8c:	f7ff fee4 	bl	800db58 <BSP_SD_GetCardState>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d103      	bne.n	800dd9e <SD_read+0x7a>
              {
                res = RES_OK;
 800dd96:	2300      	movs	r3, #0
 800dd98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800dd9c:	e008      	b.n	800ddb0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800dd9e:	f002 faa9 	bl	80102f4 <osKernelSysTick>
 800dda2:	4602      	mov	r2, r0
 800dda4:	6a3b      	ldr	r3, [r7, #32]
 800dda6:	1ad3      	subs	r3, r2, r3
 800dda8:	f247 522f 	movw	r2, #29999	; 0x752f
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d9ed      	bls.n	800dd8c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ddb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3728      	adds	r7, #40	; 0x28
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	20000324 	.word	0x20000324

0800ddc0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08a      	sub	sp, #40	; 0x28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60b9      	str	r1, [r7, #8]
 800ddc8:	607a      	str	r2, [r7, #4]
 800ddca:	603b      	str	r3, [r7, #0]
 800ddcc:	4603      	mov	r3, r0
 800ddce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ddd6:	f247 5030 	movw	r0, #30000	; 0x7530
 800ddda:	f7ff ff0d 	bl	800dbf8 <SD_CheckStatusWithTimeout>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	da02      	bge.n	800ddea <SD_write+0x2a>
  {
    return res;
 800dde4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dde8:	e02e      	b.n	800de48 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	6879      	ldr	r1, [r7, #4]
 800ddee:	68b8      	ldr	r0, [r7, #8]
 800ddf0:	f7ff fe98 	bl	800db24 <BSP_SD_WriteBlocks_DMA>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d124      	bne.n	800de44 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ddfa:	4b15      	ldr	r3, [pc, #84]	; (800de50 <SD_write+0x90>)
 800ddfc:	6819      	ldr	r1, [r3, #0]
 800ddfe:	f107 0314 	add.w	r3, r7, #20
 800de02:	f247 5230 	movw	r2, #30000	; 0x7530
 800de06:	4618      	mov	r0, r3
 800de08:	f002 fb4c 	bl	80104a4 <osMessageGet>

    if (event.status == osEventMessage)
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	2b10      	cmp	r3, #16
 800de10:	d118      	bne.n	800de44 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	2b02      	cmp	r3, #2
 800de16:	d115      	bne.n	800de44 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800de18:	f002 fa6c 	bl	80102f4 <osKernelSysTick>
 800de1c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800de1e:	e008      	b.n	800de32 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de20:	f7ff fe9a 	bl	800db58 <BSP_SD_GetCardState>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d103      	bne.n	800de32 <SD_write+0x72>
          {
            res = RES_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800de30:	e008      	b.n	800de44 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800de32:	f002 fa5f 	bl	80102f4 <osKernelSysTick>
 800de36:	4602      	mov	r2, r0
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	1ad3      	subs	r3, r2, r3
 800de3c:	f247 522f 	movw	r2, #29999	; 0x752f
 800de40:	4293      	cmp	r3, r2
 800de42:	d9ed      	bls.n	800de20 <SD_write+0x60>
    }

  }
#endif

  return res;
 800de44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3728      	adds	r7, #40	; 0x28
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	20000324 	.word	0x20000324

0800de54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b08c      	sub	sp, #48	; 0x30
 800de58:	af00      	add	r7, sp, #0
 800de5a:	4603      	mov	r3, r0
 800de5c:	603a      	str	r2, [r7, #0]
 800de5e:	71fb      	strb	r3, [r7, #7]
 800de60:	460b      	mov	r3, r1
 800de62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800de64:	2301      	movs	r3, #1
 800de66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800de6a:	4b25      	ldr	r3, [pc, #148]	; (800df00 <SD_ioctl+0xac>)
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	f003 0301 	and.w	r3, r3, #1
 800de74:	2b00      	cmp	r3, #0
 800de76:	d001      	beq.n	800de7c <SD_ioctl+0x28>
 800de78:	2303      	movs	r3, #3
 800de7a:	e03c      	b.n	800def6 <SD_ioctl+0xa2>

  switch (cmd)
 800de7c:	79bb      	ldrb	r3, [r7, #6]
 800de7e:	2b03      	cmp	r3, #3
 800de80:	d834      	bhi.n	800deec <SD_ioctl+0x98>
 800de82:	a201      	add	r2, pc, #4	; (adr r2, 800de88 <SD_ioctl+0x34>)
 800de84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de88:	0800de99 	.word	0x0800de99
 800de8c:	0800dea1 	.word	0x0800dea1
 800de90:	0800deb9 	.word	0x0800deb9
 800de94:	0800ded3 	.word	0x0800ded3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de9e:	e028      	b.n	800def2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dea0:	f107 030c 	add.w	r3, r7, #12
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7ff fe67 	bl	800db78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800deaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800deb0:	2300      	movs	r3, #0
 800deb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800deb6:	e01c      	b.n	800def2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800deb8:	f107 030c 	add.w	r3, r7, #12
 800debc:	4618      	mov	r0, r3
 800debe:	f7ff fe5b 	bl	800db78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800deca:	2300      	movs	r3, #0
 800decc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ded0:	e00f      	b.n	800def2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ded2:	f107 030c 	add.w	r3, r7, #12
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7ff fe4e 	bl	800db78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dede:	0a5a      	lsrs	r2, r3, #9
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800deea:	e002      	b.n	800def2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800deec:	2304      	movs	r3, #4
 800deee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800def2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800def6:	4618      	mov	r0, r3
 800def8:	3730      	adds	r7, #48	; 0x30
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	2000006d 	.word	0x2000006d

0800df04 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800df08:	4b04      	ldr	r3, [pc, #16]	; (800df1c <BSP_SD_ReadCpltCallback+0x18>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2200      	movs	r2, #0
 800df0e:	2101      	movs	r1, #1
 800df10:	4618      	mov	r0, r3
 800df12:	f002 fa87 	bl	8010424 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800df16:	bf00      	nop
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	20000324 	.word	0x20000324

0800df20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800df20:	b590      	push	{r4, r7, lr}
 800df22:	b089      	sub	sp, #36	; 0x24
 800df24:	af04      	add	r7, sp, #16
 800df26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800df28:	2301      	movs	r3, #1
 800df2a:	2202      	movs	r2, #2
 800df2c:	2102      	movs	r1, #2
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fcb8 	bl	800e8a4 <USBH_FindInterface>
 800df34:	4603      	mov	r3, r0
 800df36:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800df38:	7bfb      	ldrb	r3, [r7, #15]
 800df3a:	2bff      	cmp	r3, #255	; 0xff
 800df3c:	d002      	beq.n	800df44 <USBH_CDC_InterfaceInit+0x24>
 800df3e:	7bfb      	ldrb	r3, [r7, #15]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d901      	bls.n	800df48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800df44:	2302      	movs	r3, #2
 800df46:	e13d      	b.n	800e1c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800df48:	7bfb      	ldrb	r3, [r7, #15]
 800df4a:	4619      	mov	r1, r3
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 fc8d 	bl	800e86c <USBH_SelectInterface>
 800df52:	4603      	mov	r3, r0
 800df54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800df56:	7bbb      	ldrb	r3, [r7, #14]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d001      	beq.n	800df60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800df5c:	2302      	movs	r3, #2
 800df5e:	e131      	b.n	800e1c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800df66:	2050      	movs	r0, #80	; 0x50
 800df68:	f7f2 f9a0 	bl	80002ac <malloc>
 800df6c:	4603      	mov	r3, r0
 800df6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df76:	69db      	ldr	r3, [r3, #28]
 800df78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d101      	bne.n	800df84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800df80:	2302      	movs	r3, #2
 800df82:	e11f      	b.n	800e1c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800df84:	2250      	movs	r2, #80	; 0x50
 800df86:	2100      	movs	r1, #0
 800df88:	68b8      	ldr	r0, [r7, #8]
 800df8a:	f7f2 fa39 	bl	8000400 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	211a      	movs	r1, #26
 800df94:	fb01 f303 	mul.w	r3, r1, r3
 800df98:	4413      	add	r3, r2
 800df9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	b25b      	sxtb	r3, r3
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	da15      	bge.n	800dfd2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dfa6:	7bfb      	ldrb	r3, [r7, #15]
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	211a      	movs	r1, #26
 800dfac:	fb01 f303 	mul.w	r3, r1, r3
 800dfb0:	4413      	add	r3, r2
 800dfb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dfb6:	781a      	ldrb	r2, [r3, #0]
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	211a      	movs	r1, #26
 800dfc2:	fb01 f303 	mul.w	r3, r1, r3
 800dfc6:	4413      	add	r3, r2
 800dfc8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dfcc:	881a      	ldrh	r2, [r3, #0]
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	785b      	ldrb	r3, [r3, #1]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f002 f890 	bl	80100fe <USBH_AllocPipe>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	7819      	ldrb	r1, [r3, #0]
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	7858      	ldrb	r0, [r3, #1]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	8952      	ldrh	r2, [r2, #10]
 800dffe:	9202      	str	r2, [sp, #8]
 800e000:	2203      	movs	r2, #3
 800e002:	9201      	str	r2, [sp, #4]
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	4623      	mov	r3, r4
 800e008:	4602      	mov	r2, r0
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f002 f848 	bl	80100a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	2200      	movs	r2, #0
 800e016:	4619      	mov	r1, r3
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f004 feb7 	bl	8012d8c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e01e:	2300      	movs	r3, #0
 800e020:	2200      	movs	r2, #0
 800e022:	210a      	movs	r1, #10
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fc3d 	bl	800e8a4 <USBH_FindInterface>
 800e02a:	4603      	mov	r3, r0
 800e02c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
 800e030:	2bff      	cmp	r3, #255	; 0xff
 800e032:	d002      	beq.n	800e03a <USBH_CDC_InterfaceInit+0x11a>
 800e034:	7bfb      	ldrb	r3, [r7, #15]
 800e036:	2b01      	cmp	r3, #1
 800e038:	d901      	bls.n	800e03e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e03a:	2302      	movs	r3, #2
 800e03c:	e0c2      	b.n	800e1c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	211a      	movs	r1, #26
 800e044:	fb01 f303 	mul.w	r3, r1, r3
 800e048:	4413      	add	r3, r2
 800e04a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	b25b      	sxtb	r3, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	da16      	bge.n	800e084 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e056:	7bfb      	ldrb	r3, [r7, #15]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	211a      	movs	r1, #26
 800e05c:	fb01 f303 	mul.w	r3, r1, r3
 800e060:	4413      	add	r3, r2
 800e062:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e066:	781a      	ldrb	r2, [r3, #0]
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	211a      	movs	r1, #26
 800e072:	fb01 f303 	mul.w	r3, r1, r3
 800e076:	4413      	add	r3, r2
 800e078:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e07c:	881a      	ldrh	r2, [r3, #0]
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	835a      	strh	r2, [r3, #26]
 800e082:	e015      	b.n	800e0b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e084:	7bfb      	ldrb	r3, [r7, #15]
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	211a      	movs	r1, #26
 800e08a:	fb01 f303 	mul.w	r3, r1, r3
 800e08e:	4413      	add	r3, r2
 800e090:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e094:	781a      	ldrb	r2, [r3, #0]
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e09a:	7bfb      	ldrb	r3, [r7, #15]
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	211a      	movs	r1, #26
 800e0a0:	fb01 f303 	mul.w	r3, r1, r3
 800e0a4:	4413      	add	r3, r2
 800e0a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e0aa:	881a      	ldrh	r2, [r3, #0]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e0b0:	7bfb      	ldrb	r3, [r7, #15]
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	211a      	movs	r1, #26
 800e0b6:	fb01 f303 	mul.w	r3, r1, r3
 800e0ba:	4413      	add	r3, r2
 800e0bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	b25b      	sxtb	r3, r3
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	da16      	bge.n	800e0f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	211a      	movs	r1, #26
 800e0ce:	fb01 f303 	mul.w	r3, r1, r3
 800e0d2:	4413      	add	r3, r2
 800e0d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e0d8:	781a      	ldrb	r2, [r3, #0]
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e0de:	7bfb      	ldrb	r3, [r7, #15]
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	211a      	movs	r1, #26
 800e0e4:	fb01 f303 	mul.w	r3, r1, r3
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e0ee:	881a      	ldrh	r2, [r3, #0]
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	835a      	strh	r2, [r3, #26]
 800e0f4:	e015      	b.n	800e122 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	211a      	movs	r1, #26
 800e0fc:	fb01 f303 	mul.w	r3, r1, r3
 800e100:	4413      	add	r3, r2
 800e102:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e106:	781a      	ldrb	r2, [r3, #0]
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	211a      	movs	r1, #26
 800e112:	fb01 f303 	mul.w	r3, r1, r3
 800e116:	4413      	add	r3, r2
 800e118:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e11c:	881a      	ldrh	r2, [r3, #0]
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	7b9b      	ldrb	r3, [r3, #14]
 800e126:	4619      	mov	r1, r3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f001 ffe8 	bl	80100fe <USBH_AllocPipe>
 800e12e:	4603      	mov	r3, r0
 800e130:	461a      	mov	r2, r3
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	7bdb      	ldrb	r3, [r3, #15]
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f001 ffde 	bl	80100fe <USBH_AllocPipe>
 800e142:	4603      	mov	r3, r0
 800e144:	461a      	mov	r2, r3
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	7b59      	ldrb	r1, [r3, #13]
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	7b98      	ldrb	r0, [r3, #14]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e15e:	68ba      	ldr	r2, [r7, #8]
 800e160:	8b12      	ldrh	r2, [r2, #24]
 800e162:	9202      	str	r2, [sp, #8]
 800e164:	2202      	movs	r2, #2
 800e166:	9201      	str	r2, [sp, #4]
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	4623      	mov	r3, r4
 800e16c:	4602      	mov	r2, r0
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f001 ff96 	bl	80100a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	7b19      	ldrb	r1, [r3, #12]
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	7bd8      	ldrb	r0, [r3, #15]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	8b52      	ldrh	r2, [r2, #26]
 800e18c:	9202      	str	r2, [sp, #8]
 800e18e:	2202      	movs	r2, #2
 800e190:	9201      	str	r2, [sp, #4]
 800e192:	9300      	str	r3, [sp, #0]
 800e194:	4623      	mov	r3, r4
 800e196:	4602      	mov	r2, r0
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f001 ff81 	bl	80100a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	7b5b      	ldrb	r3, [r3, #13]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f004 fdec 	bl	8012d8c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	7b1b      	ldrb	r3, [r3, #12]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f004 fde5 	bl	8012d8c <USBH_LL_SetToggle>

  return USBH_OK;
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd90      	pop	{r4, r7, pc}

0800e1cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1da:	69db      	ldr	r3, [r3, #28]
 800e1dc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00e      	beq.n	800e204 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f001 ff76 	bl	80100de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f001 ffa1 	bl	8010140 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2200      	movs	r2, #0
 800e202:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	7b1b      	ldrb	r3, [r3, #12]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d00e      	beq.n	800e22a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	7b1b      	ldrb	r3, [r3, #12]
 800e210:	4619      	mov	r1, r3
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f001 ff63 	bl	80100de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	7b1b      	ldrb	r3, [r3, #12]
 800e21c:	4619      	mov	r1, r3
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f001 ff8e 	bl	8010140 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2200      	movs	r2, #0
 800e228:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	7b5b      	ldrb	r3, [r3, #13]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d00e      	beq.n	800e250 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	7b5b      	ldrb	r3, [r3, #13]
 800e236:	4619      	mov	r1, r3
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f001 ff50 	bl	80100de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	7b5b      	ldrb	r3, [r3, #13]
 800e242:	4619      	mov	r1, r3
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f001 ff7b 	bl	8010140 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2200      	movs	r2, #0
 800e24e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e256:	69db      	ldr	r3, [r3, #28]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00b      	beq.n	800e274 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e262:	69db      	ldr	r3, [r3, #28]
 800e264:	4618      	mov	r0, r3
 800e266:	f7f2 f829 	bl	80002bc <free>
    phost->pActiveClass->pData = 0U;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e270:	2200      	movs	r2, #0
 800e272:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b084      	sub	sp, #16
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e28c:	69db      	ldr	r3, [r3, #28]
 800e28e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	3340      	adds	r3, #64	; 0x40
 800e294:	4619      	mov	r1, r3
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 f8b1 	bl	800e3fe <GetLineCoding>
 800e29c:	4603      	mov	r3, r0
 800e29e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e2a0:	7afb      	ldrb	r3, [r7, #11]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d105      	bne.n	800e2b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e2ac:	2102      	movs	r1, #2
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e2b2:	7afb      	ldrb	r3, [r7, #11]
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3710      	adds	r7, #16
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2d2:	69db      	ldr	r3, [r3, #28]
 800e2d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e2dc:	2b04      	cmp	r3, #4
 800e2de:	d877      	bhi.n	800e3d0 <USBH_CDC_Process+0x114>
 800e2e0:	a201      	add	r2, pc, #4	; (adr r2, 800e2e8 <USBH_CDC_Process+0x2c>)
 800e2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e6:	bf00      	nop
 800e2e8:	0800e2fd 	.word	0x0800e2fd
 800e2ec:	0800e303 	.word	0x0800e303
 800e2f0:	0800e333 	.word	0x0800e333
 800e2f4:	0800e3a7 	.word	0x0800e3a7
 800e2f8:	0800e3b5 	.word	0x0800e3b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e300:	e06d      	b.n	800e3de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e306:	4619      	mov	r1, r3
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 f897 	bl	800e43c <SetLineCoding>
 800e30e:	4603      	mov	r3, r0
 800e310:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e312:	7bbb      	ldrb	r3, [r7, #14]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d104      	bne.n	800e322 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	2202      	movs	r2, #2
 800e31c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e320:	e058      	b.n	800e3d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e322:	7bbb      	ldrb	r3, [r7, #14]
 800e324:	2b01      	cmp	r3, #1
 800e326:	d055      	beq.n	800e3d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	2204      	movs	r2, #4
 800e32c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e330:	e050      	b.n	800e3d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	3340      	adds	r3, #64	; 0x40
 800e336:	4619      	mov	r1, r3
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f860 	bl	800e3fe <GetLineCoding>
 800e33e:	4603      	mov	r3, r0
 800e340:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e342:	7bbb      	ldrb	r3, [r7, #14]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d126      	bne.n	800e396 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e35a:	791b      	ldrb	r3, [r3, #4]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d13b      	bne.n	800e3d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e36a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d133      	bne.n	800e3d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e37a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d12b      	bne.n	800e3d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e388:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d124      	bne.n	800e3d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 f982 	bl	800e698 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e394:	e020      	b.n	800e3d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e396:	7bbb      	ldrb	r3, [r7, #14]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d01d      	beq.n	800e3d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2204      	movs	r2, #4
 800e3a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e3a4:	e018      	b.n	800e3d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 f867 	bl	800e47a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f000 f8f6 	bl	800e59e <CDC_ProcessReception>
      break;
 800e3b2:	e014      	b.n	800e3de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e3b4:	2100      	movs	r1, #0
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f001 f951 	bl	800f65e <USBH_ClrFeature>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e3c0:	7bbb      	ldrb	r3, [r7, #14]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d10a      	bne.n	800e3dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e3ce:	e005      	b.n	800e3dc <USBH_CDC_Process+0x120>

    default:
      break;
 800e3d0:	bf00      	nop
 800e3d2:	e004      	b.n	800e3de <USBH_CDC_Process+0x122>
      break;
 800e3d4:	bf00      	nop
 800e3d6:	e002      	b.n	800e3de <USBH_CDC_Process+0x122>
      break;
 800e3d8:	bf00      	nop
 800e3da:	e000      	b.n	800e3de <USBH_CDC_Process+0x122>
      break;
 800e3dc:	bf00      	nop

  }

  return status;
 800e3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e3f0:	2300      	movs	r3, #0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	370c      	adds	r7, #12
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b082      	sub	sp, #8
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
 800e406:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	22a1      	movs	r2, #161	; 0xa1
 800e40c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2221      	movs	r2, #33	; 0x21
 800e412:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2207      	movs	r2, #7
 800e424:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2207      	movs	r2, #7
 800e42a:	4619      	mov	r1, r3
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f001 faf6 	bl	800fa1e <USBH_CtlReq>
 800e432:	4603      	mov	r3, r0
}
 800e434:	4618      	mov	r0, r3
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2221      	movs	r2, #33	; 0x21
 800e44a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2220      	movs	r2, #32
 800e450:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2200      	movs	r2, #0
 800e45c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2207      	movs	r2, #7
 800e462:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2207      	movs	r2, #7
 800e468:	4619      	mov	r1, r3
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f001 fad7 	bl	800fa1e <USBH_CtlReq>
 800e470:	4603      	mov	r3, r0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3708      	adds	r7, #8
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b086      	sub	sp, #24
 800e47e:	af02      	add	r7, sp, #8
 800e480:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e488:	69db      	ldr	r3, [r3, #28]
 800e48a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e48c:	2300      	movs	r3, #0
 800e48e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e496:	2b01      	cmp	r3, #1
 800e498:	d002      	beq.n	800e4a0 <CDC_ProcessTransmission+0x26>
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d023      	beq.n	800e4e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e49e:	e07a      	b.n	800e596 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	8b12      	ldrh	r2, [r2, #24]
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d90b      	bls.n	800e4c4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	69d9      	ldr	r1, [r3, #28]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	8b1a      	ldrh	r2, [r3, #24]
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	7b5b      	ldrb	r3, [r3, #13]
 800e4b8:	2001      	movs	r0, #1
 800e4ba:	9000      	str	r0, [sp, #0]
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f001 fdac 	bl	801001a <USBH_BulkSendData>
 800e4c2:	e00b      	b.n	800e4dc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	7b5b      	ldrb	r3, [r3, #13]
 800e4d2:	2001      	movs	r0, #1
 800e4d4:	9000      	str	r0, [sp, #0]
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f001 fd9f 	bl	801001a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2202      	movs	r2, #2
 800e4e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e4e4:	e057      	b.n	800e596 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	7b5b      	ldrb	r3, [r3, #13]
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f004 fc23 	bl	8012d38 <USBH_LL_GetURBState>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e4f6:	7afb      	ldrb	r3, [r7, #11]
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	d136      	bne.n	800e56a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	8b12      	ldrh	r2, [r2, #24]
 800e504:	4293      	cmp	r3, r2
 800e506:	d90e      	bls.n	800e526 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e50c:	68fa      	ldr	r2, [r7, #12]
 800e50e:	8b12      	ldrh	r2, [r2, #24]
 800e510:	1a9a      	subs	r2, r3, r2
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	69db      	ldr	r3, [r3, #28]
 800e51a:	68fa      	ldr	r2, [r7, #12]
 800e51c:	8b12      	ldrh	r2, [r2, #24]
 800e51e:	441a      	add	r2, r3
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	61da      	str	r2, [r3, #28]
 800e524:	e002      	b.n	800e52c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e530:	2b00      	cmp	r3, #0
 800e532:	d004      	beq.n	800e53e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2201      	movs	r2, #1
 800e538:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e53c:	e006      	b.n	800e54c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2200      	movs	r2, #0
 800e542:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 f892 	bl	800e670 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2204      	movs	r2, #4
 800e550:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e560:	2200      	movs	r2, #0
 800e562:	4619      	mov	r1, r3
 800e564:	f001 ff5e 	bl	8010424 <osMessagePut>
      break;
 800e568:	e014      	b.n	800e594 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800e56a:	7afb      	ldrb	r3, [r7, #11]
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	d111      	bne.n	800e594 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2201      	movs	r2, #1
 800e574:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2204      	movs	r2, #4
 800e57c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e58c:	2200      	movs	r2, #0
 800e58e:	4619      	mov	r1, r3
 800e590:	f001 ff48 	bl	8010424 <osMessagePut>
      break;
 800e594:	bf00      	nop
  }
}
 800e596:	bf00      	nop
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b086      	sub	sp, #24
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5ac:	69db      	ldr	r3, [r3, #28]
 800e5ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e5ba:	2b03      	cmp	r3, #3
 800e5bc:	d002      	beq.n	800e5c4 <CDC_ProcessReception+0x26>
 800e5be:	2b04      	cmp	r3, #4
 800e5c0:	d00e      	beq.n	800e5e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e5c2:	e051      	b.n	800e668 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	6a19      	ldr	r1, [r3, #32]
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	8b5a      	ldrh	r2, [r3, #26]
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	7b1b      	ldrb	r3, [r3, #12]
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f001 fd47 	bl	8010064 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	2204      	movs	r2, #4
 800e5da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e5de:	e043      	b.n	800e668 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	7b1b      	ldrb	r3, [r3, #12]
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f004 fba6 	bl	8012d38 <USBH_LL_GetURBState>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e5f0:	7cfb      	ldrb	r3, [r7, #19]
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d137      	bne.n	800e666 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	7b1b      	ldrb	r3, [r3, #12]
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f004 fb09 	bl	8012c14 <USBH_LL_GetLastXferSize>
 800e602:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d016      	beq.n	800e63c <CDC_ProcessReception+0x9e>
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	8b5b      	ldrh	r3, [r3, #26]
 800e612:	461a      	mov	r2, r3
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	4293      	cmp	r3, r2
 800e618:	d910      	bls.n	800e63c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	1ad2      	subs	r2, r2, r3
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	6a1a      	ldr	r2, [r3, #32]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	441a      	add	r2, r3
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	2203      	movs	r2, #3
 800e636:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e63a:	e006      	b.n	800e64a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 f81d 	bl	800e684 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2204      	movs	r2, #4
 800e64e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e65e:	2200      	movs	r2, #0
 800e660:	4619      	mov	r1, r3
 800e662:	f001 fedf 	bl	8010424 <osMessagePut>
      break;
 800e666:	bf00      	nop
  }
}
 800e668:	bf00      	nop
 800e66a:	3718      	adds	r7, #24
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e670:	b480      	push	{r7}
 800e672:	b083      	sub	sp, #12
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e678:	bf00      	nop
 800e67a:	370c      	adds	r7, #12
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e68c:	bf00      	nop
 800e68e:	370c      	adds	r7, #12
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e698:	b480      	push	{r7}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e6a0:	bf00      	nop
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr

0800e6ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e6ac:	b5b0      	push	{r4, r5, r7, lr}
 800e6ae:	b090      	sub	sp, #64	; 0x40
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	4613      	mov	r3, r2
 800e6b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d101      	bne.n	800e6c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e6c0:	2302      	movs	r3, #2
 800e6c2:	e04d      	b.n	800e760 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	79fa      	ldrb	r2, [r7, #7]
 800e6c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f000 f847 	bl	800e770 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d003      	beq.n	800e710 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800e710:	4b15      	ldr	r3, [pc, #84]	; (800e768 <USBH_Init+0xbc>)
 800e712:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800e71c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e720:	2100      	movs	r1, #0
 800e722:	4618      	mov	r0, r3
 800e724:	f001 fe56 	bl	80103d4 <osMessageCreate>
 800e728:	4602      	mov	r2, r0
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800e730:	4b0e      	ldr	r3, [pc, #56]	; (800e76c <USBH_Init+0xc0>)
 800e732:	f107 0414 	add.w	r4, r7, #20
 800e736:	461d      	mov	r5, r3
 800e738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e73a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e73c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800e744:	f107 0314 	add.w	r3, r7, #20
 800e748:	68f9      	ldr	r1, [r7, #12]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f001 fde2 	bl	8010314 <osThreadCreate>
 800e750:	4602      	mov	r2, r0
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f004 f9a7 	bl	8012aac <USBH_LL_Init>

  return USBH_OK;
 800e75e:	2300      	movs	r3, #0
}
 800e760:	4618      	mov	r0, r3
 800e762:	3740      	adds	r7, #64	; 0x40
 800e764:	46bd      	mov	sp, r7
 800e766:	bdb0      	pop	{r4, r5, r7, pc}
 800e768:	08012ef4 	.word	0x08012ef4
 800e76c:	08012f04 	.word	0x08012f04

0800e770 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e778:	2300      	movs	r3, #0
 800e77a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e77c:	2300      	movs	r3, #0
 800e77e:	60fb      	str	r3, [r7, #12]
 800e780:	e009      	b.n	800e796 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	33e0      	adds	r3, #224	; 0xe0
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	4413      	add	r3, r2
 800e78c:	2200      	movs	r2, #0
 800e78e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	3301      	adds	r3, #1
 800e794:	60fb      	str	r3, [r7, #12]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2b0e      	cmp	r3, #14
 800e79a:	d9f2      	bls.n	800e782 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e79c:	2300      	movs	r3, #0
 800e79e:	60fb      	str	r3, [r7, #12]
 800e7a0:	e009      	b.n	800e7b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	60fb      	str	r3, [r7, #12]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7bc:	d3f1      	bcc.n	800e7a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2240      	movs	r2, #64	; 0x40
 800e7e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2200      	movs	r2, #0
 800e806:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e822:	2300      	movs	r3, #0
 800e824:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d016      	beq.n	800e85a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10e      	bne.n	800e854 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e83c:	1c59      	adds	r1, r3, #1
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	33de      	adds	r3, #222	; 0xde
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e84e:	2300      	movs	r3, #0
 800e850:	73fb      	strb	r3, [r7, #15]
 800e852:	e004      	b.n	800e85e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e854:	2302      	movs	r3, #2
 800e856:	73fb      	strb	r3, [r7, #15]
 800e858:	e001      	b.n	800e85e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e85a:	2302      	movs	r3, #2
 800e85c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e860:	4618      	mov	r0, r3
 800e862:	3714      	adds	r7, #20
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	460b      	mov	r3, r1
 800e876:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e878:	2300      	movs	r3, #0
 800e87a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e882:	78fa      	ldrb	r2, [r7, #3]
 800e884:	429a      	cmp	r2, r3
 800e886:	d204      	bcs.n	800e892 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	78fa      	ldrb	r2, [r7, #3]
 800e88c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e890:	e001      	b.n	800e896 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e892:	2302      	movs	r3, #2
 800e894:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e896:	7bfb      	ldrb	r3, [r7, #15]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3714      	adds	r7, #20
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b087      	sub	sp, #28
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	4608      	mov	r0, r1
 800e8ae:	4611      	mov	r1, r2
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	70fb      	strb	r3, [r7, #3]
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	70bb      	strb	r3, [r7, #2]
 800e8ba:	4613      	mov	r3, r2
 800e8bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e8cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e8ce:	e025      	b.n	800e91c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e8d0:	7dfb      	ldrb	r3, [r7, #23]
 800e8d2:	221a      	movs	r2, #26
 800e8d4:	fb02 f303 	mul.w	r3, r2, r3
 800e8d8:	3308      	adds	r3, #8
 800e8da:	68fa      	ldr	r2, [r7, #12]
 800e8dc:	4413      	add	r3, r2
 800e8de:	3302      	adds	r3, #2
 800e8e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	795b      	ldrb	r3, [r3, #5]
 800e8e6:	78fa      	ldrb	r2, [r7, #3]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d002      	beq.n	800e8f2 <USBH_FindInterface+0x4e>
 800e8ec:	78fb      	ldrb	r3, [r7, #3]
 800e8ee:	2bff      	cmp	r3, #255	; 0xff
 800e8f0:	d111      	bne.n	800e916 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e8f6:	78ba      	ldrb	r2, [r7, #2]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d002      	beq.n	800e902 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e8fc:	78bb      	ldrb	r3, [r7, #2]
 800e8fe:	2bff      	cmp	r3, #255	; 0xff
 800e900:	d109      	bne.n	800e916 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e906:	787a      	ldrb	r2, [r7, #1]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d002      	beq.n	800e912 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e90c:	787b      	ldrb	r3, [r7, #1]
 800e90e:	2bff      	cmp	r3, #255	; 0xff
 800e910:	d101      	bne.n	800e916 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e912:	7dfb      	ldrb	r3, [r7, #23]
 800e914:	e006      	b.n	800e924 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e916:	7dfb      	ldrb	r3, [r7, #23]
 800e918:	3301      	adds	r3, #1
 800e91a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e91c:	7dfb      	ldrb	r3, [r7, #23]
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d9d6      	bls.n	800e8d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e922:	23ff      	movs	r3, #255	; 0xff
}
 800e924:	4618      	mov	r0, r3
 800e926:	371c      	adds	r7, #28
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f004 f8f3 	bl	8012b24 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e93e:	2101      	movs	r1, #1
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f004 fa0c 	bl	8012d5e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3708      	adds	r7, #8
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b088      	sub	sp, #32
 800e954:	af04      	add	r7, sp, #16
 800e956:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e958:	2302      	movs	r3, #2
 800e95a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e95c:	2300      	movs	r3, #0
 800e95e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e966:	b2db      	uxtb	r3, r3
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d102      	bne.n	800e972 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2203      	movs	r2, #3
 800e970:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	b2db      	uxtb	r3, r3
 800e978:	2b0b      	cmp	r3, #11
 800e97a:	f200 823c 	bhi.w	800edf6 <USBH_Process+0x4a6>
 800e97e:	a201      	add	r2, pc, #4	; (adr r2, 800e984 <USBH_Process+0x34>)
 800e980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e984:	0800e9b5 	.word	0x0800e9b5
 800e988:	0800ea03 	.word	0x0800ea03
 800e98c:	0800ea87 	.word	0x0800ea87
 800e990:	0800ed75 	.word	0x0800ed75
 800e994:	0800edf7 	.word	0x0800edf7
 800e998:	0800eb47 	.word	0x0800eb47
 800e99c:	0800ecff 	.word	0x0800ecff
 800e9a0:	0800eb99 	.word	0x0800eb99
 800e9a4:	0800ebd5 	.word	0x0800ebd5
 800e9a8:	0800ec0f 	.word	0x0800ec0f
 800e9ac:	0800ec57 	.word	0x0800ec57
 800e9b0:	0800ed5d 	.word	0x0800ed5d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f000 821c 	beq.w	800edfa <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e9c8:	20c8      	movs	r0, #200	; 0xc8
 800e9ca:	f004 fa0f 	bl	8012dec <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f004 f905 	bl	8012bde <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	f001 fd12 	bl	8010424 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ea00:	e1fb      	b.n	800edfa <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ea08:	2b01      	cmp	r3, #1
 800ea0a:	d107      	bne.n	800ea1c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2202      	movs	r2, #2
 800ea18:	701a      	strb	r2, [r3, #0]
 800ea1a:	e025      	b.n	800ea68 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ea22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ea26:	d914      	bls.n	800ea52 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ea2e:	3301      	adds	r3, #1
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ea3e:	2b03      	cmp	r3, #3
 800ea40:	d903      	bls.n	800ea4a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	220d      	movs	r2, #13
 800ea46:	701a      	strb	r2, [r3, #0]
 800ea48:	e00e      	b.n	800ea68 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	701a      	strb	r2, [r3, #0]
 800ea50:	e00a      	b.n	800ea68 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ea58:	f103 020a 	add.w	r2, r3, #10
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ea62:	200a      	movs	r0, #10
 800ea64:	f004 f9c2 	bl	8012dec <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	4619      	mov	r1, r3
 800ea80:	f001 fcd0 	bl	8010424 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ea84:	e1c0      	b.n	800ee08 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d005      	beq.n	800ea9c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ea96:	2104      	movs	r1, #4
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ea9c:	2064      	movs	r0, #100	; 0x64
 800ea9e:	f004 f9a5 	bl	8012dec <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f004 f874 	bl	8012b90 <USBH_LL_GetSpeed>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	461a      	mov	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2205      	movs	r2, #5
 800eab6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800eab8:	2100      	movs	r1, #0
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f001 fb1f 	bl	80100fe <USBH_AllocPipe>
 800eac0:	4603      	mov	r3, r0
 800eac2:	461a      	mov	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800eac8:	2180      	movs	r1, #128	; 0x80
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f001 fb17 	bl	80100fe <USBH_AllocPipe>
 800ead0:	4603      	mov	r3, r0
 800ead2:	461a      	mov	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	7919      	ldrb	r1, [r3, #4]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800eae8:	687a      	ldr	r2, [r7, #4]
 800eaea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800eaec:	b292      	uxth	r2, r2
 800eaee:	9202      	str	r2, [sp, #8]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	9201      	str	r2, [sp, #4]
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2280      	movs	r2, #128	; 0x80
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f001 fad0 	bl	80100a0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	7959      	ldrb	r1, [r3, #5]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800eb14:	b292      	uxth	r2, r2
 800eb16:	9202      	str	r2, [sp, #8]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	9201      	str	r2, [sp, #4]
 800eb1c:	9300      	str	r3, [sp, #0]
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2200      	movs	r2, #0
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f001 fabc 	bl	80100a0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	4619      	mov	r1, r3
 800eb40:	f001 fc70 	bl	8010424 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eb44:	e160      	b.n	800ee08 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 f964 	bl	800ee14 <USBH_HandleEnum>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800eb50:	7bbb      	ldrb	r3, [r7, #14]
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	f040 8152 	bne.w	800edfe <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d103      	bne.n	800eb74 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2208      	movs	r2, #8
 800eb70:	701a      	strb	r2, [r3, #0]
 800eb72:	e002      	b.n	800eb7a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2207      	movs	r2, #7
 800eb78:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2205      	movs	r2, #5
 800eb7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eb8e:	2200      	movs	r2, #0
 800eb90:	4619      	mov	r1, r3
 800eb92:	f001 fc47 	bl	8010424 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800eb96:	e132      	b.n	800edfe <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f000 812f 	beq.w	800ee02 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ebaa:	2101      	movs	r1, #1
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2208      	movs	r2, #8
 800ebb4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2205      	movs	r2, #5
 800ebba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ebca:	2200      	movs	r2, #0
 800ebcc:	4619      	mov	r1, r3
 800ebce:	f001 fc29 	bl	8010424 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ebd2:	e116      	b.n	800ee02 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	4619      	mov	r1, r3
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 fcf6 	bl	800f5d0 <USBH_SetCfg>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d102      	bne.n	800ebf0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2209      	movs	r2, #9
 800ebee:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ec04:	2200      	movs	r2, #0
 800ec06:	4619      	mov	r1, r3
 800ec08:	f001 fc0c 	bl	8010424 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ec0c:	e0fc      	b.n	800ee08 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ec14:	f003 0320 	and.w	r3, r3, #32
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d00a      	beq.n	800ec32 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ec1c:	2101      	movs	r1, #1
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 fcf9 	bl	800f616 <USBH_SetFeature>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d106      	bne.n	800ec38 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	220a      	movs	r2, #10
 800ec2e:	701a      	strb	r2, [r3, #0]
 800ec30:	e002      	b.n	800ec38 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	220a      	movs	r2, #10
 800ec36:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	4619      	mov	r1, r3
 800ec50:	f001 fbe8 	bl	8010424 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ec54:	e0d8      	b.n	800ee08 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d03f      	beq.n	800ece0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2200      	movs	r2, #0
 800ec64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ec68:	2300      	movs	r3, #0
 800ec6a:	73fb      	strb	r3, [r7, #15]
 800ec6c:	e016      	b.n	800ec9c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ec6e:	7bfa      	ldrb	r2, [r7, #15]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	32de      	adds	r2, #222	; 0xde
 800ec74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec78:	791a      	ldrb	r2, [r3, #4]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d108      	bne.n	800ec96 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ec84:	7bfa      	ldrb	r2, [r7, #15]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	32de      	adds	r2, #222	; 0xde
 800ec8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ec94:	e005      	b.n	800eca2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ec96:	7bfb      	ldrb	r3, [r7, #15]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	73fb      	strb	r3, [r7, #15]
 800ec9c:	7bfb      	ldrb	r3, [r7, #15]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d0e5      	beq.n	800ec6e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d016      	beq.n	800ecda <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	4798      	blx	r3
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d109      	bne.n	800ecd2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2206      	movs	r2, #6
 800ecc2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ecca:	2103      	movs	r1, #3
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	4798      	blx	r3
 800ecd0:	e006      	b.n	800ece0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	220d      	movs	r2, #13
 800ecd6:	701a      	strb	r2, [r3, #0]
 800ecd8:	e002      	b.n	800ece0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	220d      	movs	r2, #13
 800ecde:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2205      	movs	r2, #5
 800ece4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	f001 fb94 	bl	8010424 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ecfc:	e084      	b.n	800ee08 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d017      	beq.n	800ed38 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed0e:	691b      	ldr	r3, [r3, #16]
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	4798      	blx	r3
 800ed14:	4603      	mov	r3, r0
 800ed16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ed18:	7bbb      	ldrb	r3, [r7, #14]
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d103      	bne.n	800ed28 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	220b      	movs	r2, #11
 800ed24:	701a      	strb	r2, [r3, #0]
 800ed26:	e00a      	b.n	800ed3e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800ed28:	7bbb      	ldrb	r3, [r7, #14]
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	2b02      	cmp	r3, #2
 800ed2e:	d106      	bne.n	800ed3e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	220d      	movs	r2, #13
 800ed34:	701a      	strb	r2, [r3, #0]
 800ed36:	e002      	b.n	800ed3e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	220d      	movs	r2, #13
 800ed3c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2205      	movs	r2, #5
 800ed42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed52:	2200      	movs	r2, #0
 800ed54:	4619      	mov	r1, r3
 800ed56:	f001 fb65 	bl	8010424 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ed5a:	e055      	b.n	800ee08 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d04f      	beq.n	800ee06 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed6c:	695b      	ldr	r3, [r3, #20]
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	4798      	blx	r3
      }
      break;
 800ed72:	e048      	b.n	800ee06 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2200      	movs	r2, #0
 800ed78:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f7ff fcf7 	bl	800e770 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d009      	beq.n	800eda0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d005      	beq.n	800edb6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800edb0:	2105      	movs	r1, #5
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d107      	bne.n	800edd2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7ff fdb0 	bl	800e930 <USBH_Start>
 800edd0:	e002      	b.n	800edd8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f003 fea6 	bl	8012b24 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800edec:	2200      	movs	r2, #0
 800edee:	4619      	mov	r1, r3
 800edf0:	f001 fb18 	bl	8010424 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800edf4:	e008      	b.n	800ee08 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800edf6:	bf00      	nop
 800edf8:	e006      	b.n	800ee08 <USBH_Process+0x4b8>
      break;
 800edfa:	bf00      	nop
 800edfc:	e004      	b.n	800ee08 <USBH_Process+0x4b8>
      break;
 800edfe:	bf00      	nop
 800ee00:	e002      	b.n	800ee08 <USBH_Process+0x4b8>
    break;
 800ee02:	bf00      	nop
 800ee04:	e000      	b.n	800ee08 <USBH_Process+0x4b8>
      break;
 800ee06:	bf00      	nop
  }
  return USBH_OK;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop

0800ee14 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b088      	sub	sp, #32
 800ee18:	af04      	add	r7, sp, #16
 800ee1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ee20:	2301      	movs	r3, #1
 800ee22:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	785b      	ldrb	r3, [r3, #1]
 800ee28:	2b07      	cmp	r3, #7
 800ee2a:	f200 8208 	bhi.w	800f23e <USBH_HandleEnum+0x42a>
 800ee2e:	a201      	add	r2, pc, #4	; (adr r2, 800ee34 <USBH_HandleEnum+0x20>)
 800ee30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee34:	0800ee55 	.word	0x0800ee55
 800ee38:	0800ef13 	.word	0x0800ef13
 800ee3c:	0800ef7d 	.word	0x0800ef7d
 800ee40:	0800f00b 	.word	0x0800f00b
 800ee44:	0800f075 	.word	0x0800f075
 800ee48:	0800f0e5 	.word	0x0800f0e5
 800ee4c:	0800f181 	.word	0x0800f181
 800ee50:	0800f1ff 	.word	0x0800f1ff
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ee54:	2108      	movs	r1, #8
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 faea 	bl	800f430 <USBH_Get_DevDesc>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ee60:	7bbb      	ldrb	r3, [r7, #14]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d130      	bne.n	800eec8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2201      	movs	r2, #1
 800ee74:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	7919      	ldrb	r1, [r3, #4]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ee8a:	b292      	uxth	r2, r2
 800ee8c:	9202      	str	r2, [sp, #8]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	9201      	str	r2, [sp, #4]
 800ee92:	9300      	str	r3, [sp, #0]
 800ee94:	4603      	mov	r3, r0
 800ee96:	2280      	movs	r2, #128	; 0x80
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f001 f901 	bl	80100a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	7959      	ldrb	r1, [r3, #5]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800eeb2:	b292      	uxth	r2, r2
 800eeb4:	9202      	str	r2, [sp, #8]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	9201      	str	r2, [sp, #4]
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	4603      	mov	r3, r0
 800eebe:	2200      	movs	r2, #0
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f001 f8ed 	bl	80100a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800eec6:	e1bc      	b.n	800f242 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eec8:	7bbb      	ldrb	r3, [r7, #14]
 800eeca:	2b03      	cmp	r3, #3
 800eecc:	f040 81b9 	bne.w	800f242 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eed6:	3301      	adds	r3, #1
 800eed8:	b2da      	uxtb	r2, r3
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eee6:	2b03      	cmp	r3, #3
 800eee8:	d903      	bls.n	800eef2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	220d      	movs	r2, #13
 800eeee:	701a      	strb	r2, [r3, #0]
      break;
 800eef0:	e1a7      	b.n	800f242 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	795b      	ldrb	r3, [r3, #5]
 800eef6:	4619      	mov	r1, r3
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f001 f921 	bl	8010140 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	791b      	ldrb	r3, [r3, #4]
 800ef02:	4619      	mov	r1, r3
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f001 f91b 	bl	8010140 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	701a      	strb	r2, [r3, #0]
      break;
 800ef10:	e197      	b.n	800f242 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ef12:	2112      	movs	r1, #18
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 fa8b 	bl	800f430 <USBH_Get_DevDesc>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ef1e:	7bbb      	ldrb	r3, [r7, #14]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d103      	bne.n	800ef2c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2202      	movs	r2, #2
 800ef28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ef2a:	e18c      	b.n	800f246 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ef2c:	7bbb      	ldrb	r3, [r7, #14]
 800ef2e:	2b03      	cmp	r3, #3
 800ef30:	f040 8189 	bne.w	800f246 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	b2da      	uxtb	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ef4a:	2b03      	cmp	r3, #3
 800ef4c:	d903      	bls.n	800ef56 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	220d      	movs	r2, #13
 800ef52:	701a      	strb	r2, [r3, #0]
      break;
 800ef54:	e177      	b.n	800f246 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	795b      	ldrb	r3, [r3, #5]
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f001 f8ef 	bl	8010140 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	791b      	ldrb	r3, [r3, #4]
 800ef66:	4619      	mov	r1, r3
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f001 f8e9 	bl	8010140 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	701a      	strb	r2, [r3, #0]
      break;
 800ef7a:	e164      	b.n	800f246 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ef7c:	2101      	movs	r1, #1
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 fb02 	bl	800f588 <USBH_SetAddress>
 800ef84:	4603      	mov	r3, r0
 800ef86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ef88:	7bbb      	ldrb	r3, [r7, #14]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d132      	bne.n	800eff4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ef8e:	2002      	movs	r0, #2
 800ef90:	f003 ff2c 	bl	8012dec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2203      	movs	r2, #3
 800efa0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	7919      	ldrb	r1, [r3, #4]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800efb6:	b292      	uxth	r2, r2
 800efb8:	9202      	str	r2, [sp, #8]
 800efba:	2200      	movs	r2, #0
 800efbc:	9201      	str	r2, [sp, #4]
 800efbe:	9300      	str	r3, [sp, #0]
 800efc0:	4603      	mov	r3, r0
 800efc2:	2280      	movs	r2, #128	; 0x80
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f001 f86b 	bl	80100a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	7959      	ldrb	r1, [r3, #5]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800efda:	687a      	ldr	r2, [r7, #4]
 800efdc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800efde:	b292      	uxth	r2, r2
 800efe0:	9202      	str	r2, [sp, #8]
 800efe2:	2200      	movs	r2, #0
 800efe4:	9201      	str	r2, [sp, #4]
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	4603      	mov	r3, r0
 800efea:	2200      	movs	r2, #0
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f001 f857 	bl	80100a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800eff2:	e12a      	b.n	800f24a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eff4:	7bbb      	ldrb	r3, [r7, #14]
 800eff6:	2b03      	cmp	r3, #3
 800eff8:	f040 8127 	bne.w	800f24a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	220d      	movs	r2, #13
 800f000:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	705a      	strb	r2, [r3, #1]
      break;
 800f008:	e11f      	b.n	800f24a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f00a:	2109      	movs	r1, #9
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 fa37 	bl	800f480 <USBH_Get_CfgDesc>
 800f012:	4603      	mov	r3, r0
 800f014:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f016:	7bbb      	ldrb	r3, [r7, #14]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d103      	bne.n	800f024 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2204      	movs	r2, #4
 800f020:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f022:	e114      	b.n	800f24e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f024:	7bbb      	ldrb	r3, [r7, #14]
 800f026:	2b03      	cmp	r3, #3
 800f028:	f040 8111 	bne.w	800f24e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f032:	3301      	adds	r3, #1
 800f034:	b2da      	uxtb	r2, r3
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f042:	2b03      	cmp	r3, #3
 800f044:	d903      	bls.n	800f04e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	220d      	movs	r2, #13
 800f04a:	701a      	strb	r2, [r3, #0]
      break;
 800f04c:	e0ff      	b.n	800f24e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	795b      	ldrb	r3, [r3, #5]
 800f052:	4619      	mov	r1, r3
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f001 f873 	bl	8010140 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	791b      	ldrb	r3, [r3, #4]
 800f05e:	4619      	mov	r1, r3
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f001 f86d 	bl	8010140 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2200      	movs	r2, #0
 800f06a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2200      	movs	r2, #0
 800f070:	701a      	strb	r2, [r3, #0]
      break;
 800f072:	e0ec      	b.n	800f24e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f07a:	4619      	mov	r1, r3
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f000 f9ff 	bl	800f480 <USBH_Get_CfgDesc>
 800f082:	4603      	mov	r3, r0
 800f084:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f086:	7bbb      	ldrb	r3, [r7, #14]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d103      	bne.n	800f094 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2205      	movs	r2, #5
 800f090:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f092:	e0de      	b.n	800f252 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f094:	7bbb      	ldrb	r3, [r7, #14]
 800f096:	2b03      	cmp	r3, #3
 800f098:	f040 80db 	bne.w	800f252 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	b2da      	uxtb	r2, r3
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f0b2:	2b03      	cmp	r3, #3
 800f0b4:	d903      	bls.n	800f0be <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	220d      	movs	r2, #13
 800f0ba:	701a      	strb	r2, [r3, #0]
      break;
 800f0bc:	e0c9      	b.n	800f252 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	795b      	ldrb	r3, [r3, #5]
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f001 f83b 	bl	8010140 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	791b      	ldrb	r3, [r3, #4]
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f001 f835 	bl	8010140 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	701a      	strb	r2, [r3, #0]
      break;
 800f0e2:	e0b6      	b.n	800f252 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d036      	beq.n	800f15c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f0fa:	23ff      	movs	r3, #255	; 0xff
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 f9e3 	bl	800f4c8 <USBH_Get_StringDesc>
 800f102:	4603      	mov	r3, r0
 800f104:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f106:	7bbb      	ldrb	r3, [r7, #14]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d111      	bne.n	800f130 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2206      	movs	r2, #6
 800f110:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2205      	movs	r2, #5
 800f116:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f126:	2200      	movs	r2, #0
 800f128:	4619      	mov	r1, r3
 800f12a:	f001 f97b 	bl	8010424 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f12e:	e092      	b.n	800f256 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f130:	7bbb      	ldrb	r3, [r7, #14]
 800f132:	2b03      	cmp	r3, #3
 800f134:	f040 808f 	bne.w	800f256 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2206      	movs	r2, #6
 800f13c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2205      	movs	r2, #5
 800f142:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f152:	2200      	movs	r2, #0
 800f154:	4619      	mov	r1, r3
 800f156:	f001 f965 	bl	8010424 <osMessagePut>
      break;
 800f15a:	e07c      	b.n	800f256 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2206      	movs	r2, #6
 800f160:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2205      	movs	r2, #5
 800f166:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f176:	2200      	movs	r2, #0
 800f178:	4619      	mov	r1, r3
 800f17a:	f001 f953 	bl	8010424 <osMessagePut>
      break;
 800f17e:	e06a      	b.n	800f256 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f186:	2b00      	cmp	r3, #0
 800f188:	d027      	beq.n	800f1da <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f196:	23ff      	movs	r3, #255	; 0xff
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 f995 	bl	800f4c8 <USBH_Get_StringDesc>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f1a2:	7bbb      	ldrb	r3, [r7, #14]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d103      	bne.n	800f1b0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2207      	movs	r2, #7
 800f1ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f1ae:	e054      	b.n	800f25a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f1b0:	7bbb      	ldrb	r3, [r7, #14]
 800f1b2:	2b03      	cmp	r3, #3
 800f1b4:	d151      	bne.n	800f25a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2207      	movs	r2, #7
 800f1ba:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2205      	movs	r2, #5
 800f1c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	f001 f926 	bl	8010424 <osMessagePut>
      break;
 800f1d8:	e03f      	b.n	800f25a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2207      	movs	r2, #7
 800f1de:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2205      	movs	r2, #5
 800f1e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	f001 f914 	bl	8010424 <osMessagePut>
      break;
 800f1fc:	e02d      	b.n	800f25a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f204:	2b00      	cmp	r3, #0
 800f206:	d017      	beq.n	800f238 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f214:	23ff      	movs	r3, #255	; 0xff
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f000 f956 	bl	800f4c8 <USBH_Get_StringDesc>
 800f21c:	4603      	mov	r3, r0
 800f21e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f220:	7bbb      	ldrb	r3, [r7, #14]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d102      	bne.n	800f22c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f226:	2300      	movs	r3, #0
 800f228:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f22a:	e018      	b.n	800f25e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f22c:	7bbb      	ldrb	r3, [r7, #14]
 800f22e:	2b03      	cmp	r3, #3
 800f230:	d115      	bne.n	800f25e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800f232:	2300      	movs	r3, #0
 800f234:	73fb      	strb	r3, [r7, #15]
      break;
 800f236:	e012      	b.n	800f25e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800f238:	2300      	movs	r3, #0
 800f23a:	73fb      	strb	r3, [r7, #15]
      break;
 800f23c:	e00f      	b.n	800f25e <USBH_HandleEnum+0x44a>

    default:
      break;
 800f23e:	bf00      	nop
 800f240:	e00e      	b.n	800f260 <USBH_HandleEnum+0x44c>
      break;
 800f242:	bf00      	nop
 800f244:	e00c      	b.n	800f260 <USBH_HandleEnum+0x44c>
      break;
 800f246:	bf00      	nop
 800f248:	e00a      	b.n	800f260 <USBH_HandleEnum+0x44c>
      break;
 800f24a:	bf00      	nop
 800f24c:	e008      	b.n	800f260 <USBH_HandleEnum+0x44c>
      break;
 800f24e:	bf00      	nop
 800f250:	e006      	b.n	800f260 <USBH_HandleEnum+0x44c>
      break;
 800f252:	bf00      	nop
 800f254:	e004      	b.n	800f260 <USBH_HandleEnum+0x44c>
      break;
 800f256:	bf00      	nop
 800f258:	e002      	b.n	800f260 <USBH_HandleEnum+0x44c>
      break;
 800f25a:	bf00      	nop
 800f25c:	e000      	b.n	800f260 <USBH_HandleEnum+0x44c>
      break;
 800f25e:	bf00      	nop
  }
  return Status;
 800f260:	7bfb      	ldrb	r3, [r7, #15]
}
 800f262:	4618      	mov	r0, r3
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop

0800f26c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	683a      	ldr	r2, [r7, #0]
 800f27a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f27e:	bf00      	nop
 800f280:	370c      	adds	r7, #12
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr

0800f28a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b082      	sub	sp, #8
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f298:	1c5a      	adds	r2, r3, #1
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 f804 	bl	800f2ae <USBH_HandleSof>
}
 800f2a6:	bf00      	nop
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b082      	sub	sp, #8
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	2b0b      	cmp	r3, #11
 800f2be:	d10a      	bne.n	800f2d6 <USBH_HandleSof+0x28>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d005      	beq.n	800f2d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f2d0:	699b      	ldr	r3, [r3, #24]
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	4798      	blx	r3
  }
}
 800f2d6:	bf00      	nop
 800f2d8:	3708      	adds	r7, #8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b082      	sub	sp, #8
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f302:	2200      	movs	r2, #0
 800f304:	4619      	mov	r1, r3
 800f306:	f001 f88d 	bl	8010424 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f30a:	bf00      	nop
}
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f312:	b480      	push	{r7}
 800f314:	b083      	sub	sp, #12
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2200      	movs	r2, #0
 800f31e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f322:	bf00      	nop
}
 800f324:	370c      	adds	r7, #12
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr

0800f32e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f32e:	b580      	push	{r7, lr}
 800f330:	b082      	sub	sp, #8
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2200      	movs	r2, #0
 800f342:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2200      	movs	r2, #0
 800f34a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2201      	movs	r2, #1
 800f352:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f362:	2200      	movs	r2, #0
 800f364:	4619      	mov	r1, r3
 800f366:	f001 f85d 	bl	8010424 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3708      	adds	r7, #8
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2201      	movs	r2, #1
 800f380:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2200      	movs	r2, #0
 800f388:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2200      	movs	r2, #0
 800f390:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f003 fbe0 	bl	8012b5a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	791b      	ldrb	r3, [r3, #4]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fecd 	bl	8010140 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	795b      	ldrb	r3, [r3, #5]
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 fec7 	bl	8010140 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	f001 f82b 	bl	8010424 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f3ce:	2300      	movs	r3, #0
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3708      	adds	r7, #8
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b086      	sub	sp, #24
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800f3e6:	f107 030c 	add.w	r3, r7, #12
 800f3ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f001 f858 	bl	80104a4 <osMessageGet>
    if (event.status == osEventMessage)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2b10      	cmp	r3, #16
 800f3f8:	d1f2      	bne.n	800f3e0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f7ff faa8 	bl	800e950 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f400:	e7ee      	b.n	800f3e0 <USBH_Process_OS+0x8>

0800f402 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800f402:	b580      	push	{r7, lr}
 800f404:	b082      	sub	sp, #8
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2201      	movs	r2, #1
 800f40e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f41e:	2200      	movs	r2, #0
 800f420:	4619      	mov	r1, r3
 800f422:	f000 ffff 	bl	8010424 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3708      	adds	r7, #8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b086      	sub	sp, #24
 800f434:	af02      	add	r7, sp, #8
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	460b      	mov	r3, r1
 800f43a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f442:	78fb      	ldrb	r3, [r7, #3]
 800f444:	b29b      	uxth	r3, r3
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	4613      	mov	r3, r2
 800f44a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f44e:	2100      	movs	r1, #0
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f000 f864 	bl	800f51e <USBH_GetDescriptor>
 800f456:	4603      	mov	r3, r0
 800f458:	73fb      	strb	r3, [r7, #15]
 800f45a:	7bfb      	ldrb	r3, [r7, #15]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d10a      	bne.n	800f476 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f46c:	78fa      	ldrb	r2, [r7, #3]
 800f46e:	b292      	uxth	r2, r2
 800f470:	4619      	mov	r1, r3
 800f472:	f000 f918 	bl	800f6a6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f476:	7bfb      	ldrb	r3, [r7, #15]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af02      	add	r7, sp, #8
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	460b      	mov	r3, r1
 800f48a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	331c      	adds	r3, #28
 800f490:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f492:	887b      	ldrh	r3, [r7, #2]
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f49c:	2100      	movs	r1, #0
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 f83d 	bl	800f51e <USBH_GetDescriptor>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	72fb      	strb	r3, [r7, #11]
 800f4a8:	7afb      	ldrb	r3, [r7, #11]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d107      	bne.n	800f4be <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f4b4:	887a      	ldrh	r2, [r7, #2]
 800f4b6:	68f9      	ldr	r1, [r7, #12]
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f000 f964 	bl	800f786 <USBH_ParseCfgDesc>
  }

  return status;
 800f4be:	7afb      	ldrb	r3, [r7, #11]
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3710      	adds	r7, #16
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b088      	sub	sp, #32
 800f4cc:	af02      	add	r7, sp, #8
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	607a      	str	r2, [r7, #4]
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	460b      	mov	r3, r1
 800f4d6:	72fb      	strb	r3, [r7, #11]
 800f4d8:	4613      	mov	r3, r2
 800f4da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f4dc:	7afb      	ldrb	r3, [r7, #11]
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f4e4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f4ec:	893b      	ldrh	r3, [r7, #8]
 800f4ee:	9300      	str	r3, [sp, #0]
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	2100      	movs	r1, #0
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f000 f812 	bl	800f51e <USBH_GetDescriptor>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	75fb      	strb	r3, [r7, #23]
 800f4fe:	7dfb      	ldrb	r3, [r7, #23]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d107      	bne.n	800f514 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f50a:	893a      	ldrh	r2, [r7, #8]
 800f50c:	6879      	ldr	r1, [r7, #4]
 800f50e:	4618      	mov	r0, r3
 800f510:	f000 fa37 	bl	800f982 <USBH_ParseStringDesc>
  }

  return status;
 800f514:	7dfb      	ldrb	r3, [r7, #23]
}
 800f516:	4618      	mov	r0, r3
 800f518:	3718      	adds	r7, #24
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}

0800f51e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f51e:	b580      	push	{r7, lr}
 800f520:	b084      	sub	sp, #16
 800f522:	af00      	add	r7, sp, #0
 800f524:	60f8      	str	r0, [r7, #12]
 800f526:	607b      	str	r3, [r7, #4]
 800f528:	460b      	mov	r3, r1
 800f52a:	72fb      	strb	r3, [r7, #11]
 800f52c:	4613      	mov	r3, r2
 800f52e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	789b      	ldrb	r3, [r3, #2]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d11c      	bne.n	800f572 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f538:	7afb      	ldrb	r3, [r7, #11]
 800f53a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f53e:	b2da      	uxtb	r2, r3
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2206      	movs	r2, #6
 800f548:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	893a      	ldrh	r2, [r7, #8]
 800f54e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f550:	893b      	ldrh	r3, [r7, #8]
 800f552:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f55a:	d104      	bne.n	800f566 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f240 4209 	movw	r2, #1033	; 0x409
 800f562:	829a      	strh	r2, [r3, #20]
 800f564:	e002      	b.n	800f56c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2200      	movs	r2, #0
 800f56a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	8b3a      	ldrh	r2, [r7, #24]
 800f570:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f572:	8b3b      	ldrh	r3, [r7, #24]
 800f574:	461a      	mov	r2, r3
 800f576:	6879      	ldr	r1, [r7, #4]
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f000 fa50 	bl	800fa1e <USBH_CtlReq>
 800f57e:	4603      	mov	r3, r0
}
 800f580:	4618      	mov	r0, r3
 800f582:	3710      	adds	r7, #16
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	460b      	mov	r3, r1
 800f592:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	789b      	ldrb	r3, [r3, #2]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d10f      	bne.n	800f5bc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2205      	movs	r2, #5
 800f5a6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f5a8:	78fb      	ldrb	r3, [r7, #3]
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f5bc:	2200      	movs	r2, #0
 800f5be:	2100      	movs	r1, #0
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 fa2c 	bl	800fa1e <USBH_CtlReq>
 800f5c6:	4603      	mov	r3, r0
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3708      	adds	r7, #8
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	789b      	ldrb	r3, [r3, #2]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d10e      	bne.n	800f602 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2209      	movs	r2, #9
 800f5ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	887a      	ldrh	r2, [r7, #2]
 800f5f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f602:	2200      	movs	r2, #0
 800f604:	2100      	movs	r1, #0
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 fa09 	bl	800fa1e <USBH_CtlReq>
 800f60c:	4603      	mov	r3, r0
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3708      	adds	r7, #8
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}

0800f616 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f616:	b580      	push	{r7, lr}
 800f618:	b082      	sub	sp, #8
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6078      	str	r0, [r7, #4]
 800f61e:	460b      	mov	r3, r1
 800f620:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	789b      	ldrb	r3, [r3, #2]
 800f626:	2b01      	cmp	r3, #1
 800f628:	d10f      	bne.n	800f64a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2200      	movs	r2, #0
 800f62e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2203      	movs	r2, #3
 800f634:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f636:	78fb      	ldrb	r3, [r7, #3]
 800f638:	b29a      	uxth	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2200      	movs	r2, #0
 800f642:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f64a:	2200      	movs	r2, #0
 800f64c:	2100      	movs	r1, #0
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f000 f9e5 	bl	800fa1e <USBH_CtlReq>
 800f654:	4603      	mov	r3, r0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3708      	adds	r7, #8
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}

0800f65e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f65e:	b580      	push	{r7, lr}
 800f660:	b082      	sub	sp, #8
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
 800f666:	460b      	mov	r3, r1
 800f668:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	789b      	ldrb	r3, [r3, #2]
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d10f      	bne.n	800f692 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2202      	movs	r2, #2
 800f676:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2201      	movs	r2, #1
 800f67c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f684:	78fb      	ldrb	r3, [r7, #3]
 800f686:	b29a      	uxth	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2200      	movs	r2, #0
 800f690:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f692:	2200      	movs	r2, #0
 800f694:	2100      	movs	r1, #0
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 f9c1 	bl	800fa1e <USBH_CtlReq>
 800f69c:	4603      	mov	r3, r0
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3708      	adds	r7, #8
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}

0800f6a6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f6a6:	b480      	push	{r7}
 800f6a8:	b085      	sub	sp, #20
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	60f8      	str	r0, [r7, #12]
 800f6ae:	60b9      	str	r1, [r7, #8]
 800f6b0:	4613      	mov	r3, r2
 800f6b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	781a      	ldrb	r2, [r3, #0]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	785a      	ldrb	r2, [r3, #1]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	3302      	adds	r3, #2
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	3303      	adds	r3, #3
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	021b      	lsls	r3, r3, #8
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	791a      	ldrb	r2, [r3, #4]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	795a      	ldrb	r2, [r3, #5]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	799a      	ldrb	r2, [r3, #6]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	79da      	ldrb	r2, [r3, #7]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f700:	88fb      	ldrh	r3, [r7, #6]
 800f702:	2b08      	cmp	r3, #8
 800f704:	d939      	bls.n	800f77a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	3308      	adds	r3, #8
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	3309      	adds	r3, #9
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	b29b      	uxth	r3, r3
 800f716:	021b      	lsls	r3, r3, #8
 800f718:	b29b      	uxth	r3, r3
 800f71a:	4313      	orrs	r3, r2
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	330a      	adds	r3, #10
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	b29a      	uxth	r2, r3
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	330b      	adds	r3, #11
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	b29b      	uxth	r3, r3
 800f732:	021b      	lsls	r3, r3, #8
 800f734:	b29b      	uxth	r3, r3
 800f736:	4313      	orrs	r3, r2
 800f738:	b29a      	uxth	r2, r3
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	330c      	adds	r3, #12
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	b29a      	uxth	r2, r3
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	330d      	adds	r3, #13
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	021b      	lsls	r3, r3, #8
 800f750:	b29b      	uxth	r3, r3
 800f752:	4313      	orrs	r3, r2
 800f754:	b29a      	uxth	r2, r3
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	7b9a      	ldrb	r2, [r3, #14]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	7bda      	ldrb	r2, [r3, #15]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	7c1a      	ldrb	r2, [r3, #16]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	7c5a      	ldrb	r2, [r3, #17]
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	745a      	strb	r2, [r3, #17]
  }
}
 800f77a:	bf00      	nop
 800f77c:	3714      	adds	r7, #20
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr

0800f786 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f786:	b580      	push	{r7, lr}
 800f788:	b08a      	sub	sp, #40	; 0x28
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	60f8      	str	r0, [r7, #12]
 800f78e:	60b9      	str	r1, [r7, #8]
 800f790:	4613      	mov	r3, r2
 800f792:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f798:	2300      	movs	r3, #0
 800f79a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	781a      	ldrb	r2, [r3, #0]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	785a      	ldrb	r2, [r3, #1]
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	3302      	adds	r3, #2
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	b29a      	uxth	r2, r3
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	3303      	adds	r3, #3
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	021b      	lsls	r3, r3, #8
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	791a      	ldrb	r2, [r3, #4]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	795a      	ldrb	r2, [r3, #5]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	799a      	ldrb	r2, [r3, #6]
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	79da      	ldrb	r2, [r3, #7]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	7a1a      	ldrb	r2, [r3, #8]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f7fc:	88fb      	ldrh	r3, [r7, #6]
 800f7fe:	2b09      	cmp	r3, #9
 800f800:	d95f      	bls.n	800f8c2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f802:	2309      	movs	r3, #9
 800f804:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f806:	2300      	movs	r3, #0
 800f808:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f80a:	e051      	b.n	800f8b0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f80c:	f107 0316 	add.w	r3, r7, #22
 800f810:	4619      	mov	r1, r3
 800f812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f814:	f000 f8e8 	bl	800f9e8 <USBH_GetNextDesc>
 800f818:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81c:	785b      	ldrb	r3, [r3, #1]
 800f81e:	2b04      	cmp	r3, #4
 800f820:	d146      	bne.n	800f8b0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f822:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f826:	221a      	movs	r2, #26
 800f828:	fb02 f303 	mul.w	r3, r2, r3
 800f82c:	3308      	adds	r3, #8
 800f82e:	68fa      	ldr	r2, [r7, #12]
 800f830:	4413      	add	r3, r2
 800f832:	3302      	adds	r3, #2
 800f834:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f838:	69f8      	ldr	r0, [r7, #28]
 800f83a:	f000 f846 	bl	800f8ca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f83e:	2300      	movs	r3, #0
 800f840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f844:	2300      	movs	r3, #0
 800f846:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f848:	e022      	b.n	800f890 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f84a:	f107 0316 	add.w	r3, r7, #22
 800f84e:	4619      	mov	r1, r3
 800f850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f852:	f000 f8c9 	bl	800f9e8 <USBH_GetNextDesc>
 800f856:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85a:	785b      	ldrb	r3, [r3, #1]
 800f85c:	2b05      	cmp	r3, #5
 800f85e:	d117      	bne.n	800f890 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f860:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f864:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f868:	3201      	adds	r2, #1
 800f86a:	00d2      	lsls	r2, r2, #3
 800f86c:	211a      	movs	r1, #26
 800f86e:	fb01 f303 	mul.w	r3, r1, r3
 800f872:	4413      	add	r3, r2
 800f874:	3308      	adds	r3, #8
 800f876:	68fa      	ldr	r2, [r7, #12]
 800f878:	4413      	add	r3, r2
 800f87a:	3304      	adds	r3, #4
 800f87c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f87e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f880:	69b8      	ldr	r0, [r7, #24]
 800f882:	f000 f851 	bl	800f928 <USBH_ParseEPDesc>
            ep_ix++;
 800f886:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f88a:	3301      	adds	r3, #1
 800f88c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	791b      	ldrb	r3, [r3, #4]
 800f894:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f898:	429a      	cmp	r2, r3
 800f89a:	d204      	bcs.n	800f8a6 <USBH_ParseCfgDesc+0x120>
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	885a      	ldrh	r2, [r3, #2]
 800f8a0:	8afb      	ldrh	r3, [r7, #22]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d8d1      	bhi.n	800f84a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f8a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f8b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d804      	bhi.n	800f8c2 <USBH_ParseCfgDesc+0x13c>
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	885a      	ldrh	r2, [r3, #2]
 800f8bc:	8afb      	ldrh	r3, [r7, #22]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d8a4      	bhi.n	800f80c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f8c2:	bf00      	nop
 800f8c4:	3728      	adds	r7, #40	; 0x28
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f8ca:	b480      	push	{r7}
 800f8cc:	b083      	sub	sp, #12
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
 800f8d2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	781a      	ldrb	r2, [r3, #0]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	785a      	ldrb	r2, [r3, #1]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	789a      	ldrb	r2, [r3, #2]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	78da      	ldrb	r2, [r3, #3]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	791a      	ldrb	r2, [r3, #4]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	795a      	ldrb	r2, [r3, #5]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	799a      	ldrb	r2, [r3, #6]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	79da      	ldrb	r2, [r3, #7]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	7a1a      	ldrb	r2, [r3, #8]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	721a      	strb	r2, [r3, #8]
}
 800f91c:	bf00      	nop
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	781a      	ldrb	r2, [r3, #0]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	785a      	ldrb	r2, [r3, #1]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	789a      	ldrb	r2, [r3, #2]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	78da      	ldrb	r2, [r3, #3]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	3304      	adds	r3, #4
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	b29a      	uxth	r2, r3
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	3305      	adds	r3, #5
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	b29b      	uxth	r3, r3
 800f962:	021b      	lsls	r3, r3, #8
 800f964:	b29b      	uxth	r3, r3
 800f966:	4313      	orrs	r3, r2
 800f968:	b29a      	uxth	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	799a      	ldrb	r2, [r3, #6]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	719a      	strb	r2, [r3, #6]
}
 800f976:	bf00      	nop
 800f978:	370c      	adds	r7, #12
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f982:	b480      	push	{r7}
 800f984:	b087      	sub	sp, #28
 800f986:	af00      	add	r7, sp, #0
 800f988:	60f8      	str	r0, [r7, #12]
 800f98a:	60b9      	str	r1, [r7, #8]
 800f98c:	4613      	mov	r3, r2
 800f98e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	3301      	adds	r3, #1
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	2b03      	cmp	r3, #3
 800f998:	d120      	bne.n	800f9dc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	1e9a      	subs	r2, r3, #2
 800f9a0:	88fb      	ldrh	r3, [r7, #6]
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	bf28      	it	cs
 800f9a6:	4613      	movcs	r3, r2
 800f9a8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	3302      	adds	r3, #2
 800f9ae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	82fb      	strh	r3, [r7, #22]
 800f9b4:	e00b      	b.n	800f9ce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f9b6:	8afb      	ldrh	r3, [r7, #22]
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	781a      	ldrb	r2, [r3, #0]
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f9c8:	8afb      	ldrh	r3, [r7, #22]
 800f9ca:	3302      	adds	r3, #2
 800f9cc:	82fb      	strh	r3, [r7, #22]
 800f9ce:	8afa      	ldrh	r2, [r7, #22]
 800f9d0:	8abb      	ldrh	r3, [r7, #20]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d3ef      	bcc.n	800f9b6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	701a      	strb	r2, [r3, #0]
  }
}
 800f9dc:	bf00      	nop
 800f9de:	371c      	adds	r7, #28
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr

0800f9e8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b085      	sub	sp, #20
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	881a      	ldrh	r2, [r3, #0]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	4413      	add	r3, r2
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fa10:	68fb      	ldr	r3, [r7, #12]
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3714      	adds	r7, #20
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr

0800fa1e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fa1e:	b580      	push	{r7, lr}
 800fa20:	b086      	sub	sp, #24
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	60f8      	str	r0, [r7, #12]
 800fa26:	60b9      	str	r1, [r7, #8]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	789b      	ldrb	r3, [r3, #2]
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d002      	beq.n	800fa3e <USBH_CtlReq+0x20>
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d01d      	beq.n	800fa78 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800fa3c:	e043      	b.n	800fac6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	68ba      	ldr	r2, [r7, #8]
 800fa42:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	88fa      	ldrh	r2, [r7, #6]
 800fa48:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2202      	movs	r2, #2
 800fa54:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fa56:	2301      	movs	r3, #1
 800fa58:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2203      	movs	r2, #3
 800fa5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa6e:	2200      	movs	r2, #0
 800fa70:	4619      	mov	r1, r3
 800fa72:	f000 fcd7 	bl	8010424 <osMessagePut>
      break;
 800fa76:	e026      	b.n	800fac6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	f000 f829 	bl	800fad0 <USBH_HandleControl>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fa82:	7dfb      	ldrb	r3, [r7, #23]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d002      	beq.n	800fa8e <USBH_CtlReq+0x70>
 800fa88:	7dfb      	ldrb	r3, [r7, #23]
 800fa8a:	2b03      	cmp	r3, #3
 800fa8c:	d106      	bne.n	800fa9c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2201      	movs	r2, #1
 800fa92:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2200      	movs	r2, #0
 800fa98:	761a      	strb	r2, [r3, #24]
 800fa9a:	e005      	b.n	800faa8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800fa9c:	7dfb      	ldrb	r3, [r7, #23]
 800fa9e:	2b02      	cmp	r3, #2
 800faa0:	d102      	bne.n	800faa8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2201      	movs	r2, #1
 800faa6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2203      	movs	r2, #3
 800faac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fabc:	2200      	movs	r2, #0
 800fabe:	4619      	mov	r1, r3
 800fac0:	f000 fcb0 	bl	8010424 <osMessagePut>
      break;
 800fac4:	bf00      	nop
  }
  return status;
 800fac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3718      	adds	r7, #24
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af02      	add	r7, sp, #8
 800fad6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fad8:	2301      	movs	r3, #1
 800fada:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fadc:	2300      	movs	r3, #0
 800fade:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	7e1b      	ldrb	r3, [r3, #24]
 800fae4:	3b01      	subs	r3, #1
 800fae6:	2b0a      	cmp	r3, #10
 800fae8:	f200 8229 	bhi.w	800ff3e <USBH_HandleControl+0x46e>
 800faec:	a201      	add	r2, pc, #4	; (adr r2, 800faf4 <USBH_HandleControl+0x24>)
 800faee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf2:	bf00      	nop
 800faf4:	0800fb21 	.word	0x0800fb21
 800faf8:	0800fb3b 	.word	0x0800fb3b
 800fafc:	0800fbdd 	.word	0x0800fbdd
 800fb00:	0800fc03 	.word	0x0800fc03
 800fb04:	0800fc8f 	.word	0x0800fc8f
 800fb08:	0800fcb9 	.word	0x0800fcb9
 800fb0c:	0800fd7b 	.word	0x0800fd7b
 800fb10:	0800fd9d 	.word	0x0800fd9d
 800fb14:	0800fe2f 	.word	0x0800fe2f
 800fb18:	0800fe55 	.word	0x0800fe55
 800fb1c:	0800fee7 	.word	0x0800fee7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f103 0110 	add.w	r1, r3, #16
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	795b      	ldrb	r3, [r3, #5]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fa17 	bl	800ff60 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2202      	movs	r2, #2
 800fb36:	761a      	strb	r2, [r3, #24]
      break;
 800fb38:	e20c      	b.n	800ff54 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	795b      	ldrb	r3, [r3, #5]
 800fb3e:	4619      	mov	r1, r3
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f003 f8f9 	bl	8012d38 <USBH_LL_GetURBState>
 800fb46:	4603      	mov	r3, r0
 800fb48:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fb4a:	7bbb      	ldrb	r3, [r7, #14]
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	d12c      	bne.n	800fbaa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	7c1b      	ldrb	r3, [r3, #16]
 800fb54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fb58:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	8adb      	ldrh	r3, [r3, #22]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00a      	beq.n	800fb78 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fb62:	7b7b      	ldrb	r3, [r7, #13]
 800fb64:	2b80      	cmp	r3, #128	; 0x80
 800fb66:	d103      	bne.n	800fb70 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2203      	movs	r2, #3
 800fb6c:	761a      	strb	r2, [r3, #24]
 800fb6e:	e00d      	b.n	800fb8c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2205      	movs	r2, #5
 800fb74:	761a      	strb	r2, [r3, #24]
 800fb76:	e009      	b.n	800fb8c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800fb78:	7b7b      	ldrb	r3, [r7, #13]
 800fb7a:	2b80      	cmp	r3, #128	; 0x80
 800fb7c:	d103      	bne.n	800fb86 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2209      	movs	r2, #9
 800fb82:	761a      	strb	r2, [r3, #24]
 800fb84:	e002      	b.n	800fb8c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2207      	movs	r2, #7
 800fb8a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2203      	movs	r2, #3
 800fb90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fba0:	2200      	movs	r2, #0
 800fba2:	4619      	mov	r1, r3
 800fba4:	f000 fc3e 	bl	8010424 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fba8:	e1cb      	b.n	800ff42 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fbaa:	7bbb      	ldrb	r3, [r7, #14]
 800fbac:	2b04      	cmp	r3, #4
 800fbae:	d003      	beq.n	800fbb8 <USBH_HandleControl+0xe8>
 800fbb0:	7bbb      	ldrb	r3, [r7, #14]
 800fbb2:	2b02      	cmp	r3, #2
 800fbb4:	f040 81c5 	bne.w	800ff42 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	220b      	movs	r2, #11
 800fbbc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2203      	movs	r2, #3
 800fbc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	f000 fc25 	bl	8010424 <osMessagePut>
      break;
 800fbda:	e1b2      	b.n	800ff42 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fbe2:	b29a      	uxth	r2, r3
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6899      	ldr	r1, [r3, #8]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	899a      	ldrh	r2, [r3, #12]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	791b      	ldrb	r3, [r3, #4]
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 f9f2 	bl	800ffde <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2204      	movs	r2, #4
 800fbfe:	761a      	strb	r2, [r3, #24]
      break;
 800fc00:	e1a8      	b.n	800ff54 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	791b      	ldrb	r3, [r3, #4]
 800fc06:	4619      	mov	r1, r3
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f003 f895 	bl	8012d38 <USBH_LL_GetURBState>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fc12:	7bbb      	ldrb	r3, [r7, #14]
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d110      	bne.n	800fc3a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2209      	movs	r2, #9
 800fc1c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2203      	movs	r2, #3
 800fc22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc32:	2200      	movs	r2, #0
 800fc34:	4619      	mov	r1, r3
 800fc36:	f000 fbf5 	bl	8010424 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fc3a:	7bbb      	ldrb	r3, [r7, #14]
 800fc3c:	2b05      	cmp	r3, #5
 800fc3e:	d110      	bne.n	800fc62 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fc40:	2303      	movs	r3, #3
 800fc42:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2203      	movs	r2, #3
 800fc48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc58:	2200      	movs	r2, #0
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	f000 fbe2 	bl	8010424 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fc60:	e171      	b.n	800ff46 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800fc62:	7bbb      	ldrb	r3, [r7, #14]
 800fc64:	2b04      	cmp	r3, #4
 800fc66:	f040 816e 	bne.w	800ff46 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	220b      	movs	r2, #11
 800fc6e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2203      	movs	r2, #3
 800fc74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc84:	2200      	movs	r2, #0
 800fc86:	4619      	mov	r1, r3
 800fc88:	f000 fbcc 	bl	8010424 <osMessagePut>
      break;
 800fc8c:	e15b      	b.n	800ff46 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6899      	ldr	r1, [r3, #8]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	899a      	ldrh	r2, [r3, #12]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	795b      	ldrb	r3, [r3, #5]
 800fc9a:	2001      	movs	r0, #1
 800fc9c:	9000      	str	r0, [sp, #0]
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 f978 	bl	800ff94 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2206      	movs	r2, #6
 800fcb4:	761a      	strb	r2, [r3, #24]
      break;
 800fcb6:	e14d      	b.n	800ff54 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	795b      	ldrb	r3, [r3, #5]
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f003 f83a 	bl	8012d38 <USBH_LL_GetURBState>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fcc8:	7bbb      	ldrb	r3, [r7, #14]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d111      	bne.n	800fcf2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2207      	movs	r2, #7
 800fcd2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2203      	movs	r2, #3
 800fcd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fce8:	2200      	movs	r2, #0
 800fcea:	4619      	mov	r1, r3
 800fcec:	f000 fb9a 	bl	8010424 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fcf0:	e12b      	b.n	800ff4a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800fcf2:	7bbb      	ldrb	r3, [r7, #14]
 800fcf4:	2b05      	cmp	r3, #5
 800fcf6:	d113      	bne.n	800fd20 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	220c      	movs	r2, #12
 800fcfc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fcfe:	2303      	movs	r3, #3
 800fd00:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2203      	movs	r2, #3
 800fd06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fd16:	2200      	movs	r2, #0
 800fd18:	4619      	mov	r1, r3
 800fd1a:	f000 fb83 	bl	8010424 <osMessagePut>
      break;
 800fd1e:	e114      	b.n	800ff4a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fd20:	7bbb      	ldrb	r3, [r7, #14]
 800fd22:	2b02      	cmp	r3, #2
 800fd24:	d111      	bne.n	800fd4a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2205      	movs	r2, #5
 800fd2a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2203      	movs	r2, #3
 800fd30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fd40:	2200      	movs	r2, #0
 800fd42:	4619      	mov	r1, r3
 800fd44:	f000 fb6e 	bl	8010424 <osMessagePut>
      break;
 800fd48:	e0ff      	b.n	800ff4a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800fd4a:	7bbb      	ldrb	r3, [r7, #14]
 800fd4c:	2b04      	cmp	r3, #4
 800fd4e:	f040 80fc 	bne.w	800ff4a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	220b      	movs	r2, #11
 800fd56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800fd58:	2302      	movs	r3, #2
 800fd5a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2203      	movs	r2, #3
 800fd60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fd70:	2200      	movs	r2, #0
 800fd72:	4619      	mov	r1, r3
 800fd74:	f000 fb56 	bl	8010424 <osMessagePut>
      break;
 800fd78:	e0e7      	b.n	800ff4a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	791b      	ldrb	r3, [r3, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	2100      	movs	r1, #0
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f000 f92b 	bl	800ffde <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fd8e:	b29a      	uxth	r2, r3
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2208      	movs	r2, #8
 800fd98:	761a      	strb	r2, [r3, #24]

      break;
 800fd9a:	e0db      	b.n	800ff54 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	791b      	ldrb	r3, [r3, #4]
 800fda0:	4619      	mov	r1, r3
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f002 ffc8 	bl	8012d38 <USBH_LL_GetURBState>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fdac:	7bbb      	ldrb	r3, [r7, #14]
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d113      	bne.n	800fdda <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	220d      	movs	r2, #13
 800fdb6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2203      	movs	r2, #3
 800fdc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	f000 fb26 	bl	8010424 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fdd8:	e0b9      	b.n	800ff4e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800fdda:	7bbb      	ldrb	r3, [r7, #14]
 800fddc:	2b04      	cmp	r3, #4
 800fdde:	d111      	bne.n	800fe04 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	220b      	movs	r2, #11
 800fde4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2203      	movs	r2, #3
 800fdea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	f000 fb11 	bl	8010424 <osMessagePut>
      break;
 800fe02:	e0a4      	b.n	800ff4e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800fe04:	7bbb      	ldrb	r3, [r7, #14]
 800fe06:	2b05      	cmp	r3, #5
 800fe08:	f040 80a1 	bne.w	800ff4e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800fe0c:	2303      	movs	r3, #3
 800fe0e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2203      	movs	r2, #3
 800fe14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fe24:	2200      	movs	r2, #0
 800fe26:	4619      	mov	r1, r3
 800fe28:	f000 fafc 	bl	8010424 <osMessagePut>
      break;
 800fe2c:	e08f      	b.n	800ff4e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	795b      	ldrb	r3, [r3, #5]
 800fe32:	2201      	movs	r2, #1
 800fe34:	9200      	str	r2, [sp, #0]
 800fe36:	2200      	movs	r2, #0
 800fe38:	2100      	movs	r1, #0
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f000 f8aa 	bl	800ff94 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fe46:	b29a      	uxth	r2, r3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	220a      	movs	r2, #10
 800fe50:	761a      	strb	r2, [r3, #24]
      break;
 800fe52:	e07f      	b.n	800ff54 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	795b      	ldrb	r3, [r3, #5]
 800fe58:	4619      	mov	r1, r3
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f002 ff6c 	bl	8012d38 <USBH_LL_GetURBState>
 800fe60:	4603      	mov	r3, r0
 800fe62:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fe64:	7bbb      	ldrb	r3, [r7, #14]
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d113      	bne.n	800fe92 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	220d      	movs	r2, #13
 800fe72:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2203      	movs	r2, #3
 800fe78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fe88:	2200      	movs	r2, #0
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	f000 faca 	bl	8010424 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fe90:	e05f      	b.n	800ff52 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fe92:	7bbb      	ldrb	r3, [r7, #14]
 800fe94:	2b02      	cmp	r3, #2
 800fe96:	d111      	bne.n	800febc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2209      	movs	r2, #9
 800fe9c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2203      	movs	r2, #3
 800fea2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800feb2:	2200      	movs	r2, #0
 800feb4:	4619      	mov	r1, r3
 800feb6:	f000 fab5 	bl	8010424 <osMessagePut>
      break;
 800feba:	e04a      	b.n	800ff52 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800febc:	7bbb      	ldrb	r3, [r7, #14]
 800febe:	2b04      	cmp	r3, #4
 800fec0:	d147      	bne.n	800ff52 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	220b      	movs	r2, #11
 800fec6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2203      	movs	r2, #3
 800fecc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fedc:	2200      	movs	r2, #0
 800fede:	4619      	mov	r1, r3
 800fee0:	f000 faa0 	bl	8010424 <osMessagePut>
      break;
 800fee4:	e035      	b.n	800ff52 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	7e5b      	ldrb	r3, [r3, #25]
 800feea:	3301      	adds	r3, #1
 800feec:	b2da      	uxtb	r2, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	765a      	strb	r2, [r3, #25]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	7e5b      	ldrb	r3, [r3, #25]
 800fef6:	2b02      	cmp	r3, #2
 800fef8:	d806      	bhi.n	800ff08 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2201      	movs	r2, #1
 800fefe:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2201      	movs	r2, #1
 800ff04:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ff06:	e025      	b.n	800ff54 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ff0e:	2106      	movs	r1, #6
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	795b      	ldrb	r3, [r3, #5]
 800ff1e:	4619      	mov	r1, r3
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 f90d 	bl	8010140 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	791b      	ldrb	r3, [r3, #4]
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 f907 	bl	8010140 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2200      	movs	r2, #0
 800ff36:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ff38:	2302      	movs	r3, #2
 800ff3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ff3c:	e00a      	b.n	800ff54 <USBH_HandleControl+0x484>

    default:
      break;
 800ff3e:	bf00      	nop
 800ff40:	e008      	b.n	800ff54 <USBH_HandleControl+0x484>
      break;
 800ff42:	bf00      	nop
 800ff44:	e006      	b.n	800ff54 <USBH_HandleControl+0x484>
      break;
 800ff46:	bf00      	nop
 800ff48:	e004      	b.n	800ff54 <USBH_HandleControl+0x484>
      break;
 800ff4a:	bf00      	nop
 800ff4c:	e002      	b.n	800ff54 <USBH_HandleControl+0x484>
      break;
 800ff4e:	bf00      	nop
 800ff50:	e000      	b.n	800ff54 <USBH_HandleControl+0x484>
      break;
 800ff52:	bf00      	nop
  }

  return status;
 800ff54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop

0800ff60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b088      	sub	sp, #32
 800ff64:	af04      	add	r7, sp, #16
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	4613      	mov	r3, r2
 800ff6c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ff6e:	79f9      	ldrb	r1, [r7, #7]
 800ff70:	2300      	movs	r3, #0
 800ff72:	9303      	str	r3, [sp, #12]
 800ff74:	2308      	movs	r3, #8
 800ff76:	9302      	str	r3, [sp, #8]
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	9301      	str	r3, [sp, #4]
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	2300      	movs	r3, #0
 800ff82:	2200      	movs	r2, #0
 800ff84:	68f8      	ldr	r0, [r7, #12]
 800ff86:	f002 fea6 	bl	8012cd6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b088      	sub	sp, #32
 800ff98:	af04      	add	r7, sp, #16
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	4611      	mov	r1, r2
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	80fb      	strh	r3, [r7, #6]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d001      	beq.n	800ffb8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ffb8:	7979      	ldrb	r1, [r7, #5]
 800ffba:	7e3b      	ldrb	r3, [r7, #24]
 800ffbc:	9303      	str	r3, [sp, #12]
 800ffbe:	88fb      	ldrh	r3, [r7, #6]
 800ffc0:	9302      	str	r3, [sp, #8]
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	9301      	str	r3, [sp, #4]
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	9300      	str	r3, [sp, #0]
 800ffca:	2300      	movs	r3, #0
 800ffcc:	2200      	movs	r2, #0
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f002 fe81 	bl	8012cd6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ffd4:	2300      	movs	r3, #0
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3710      	adds	r7, #16
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}

0800ffde <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ffde:	b580      	push	{r7, lr}
 800ffe0:	b088      	sub	sp, #32
 800ffe2:	af04      	add	r7, sp, #16
 800ffe4:	60f8      	str	r0, [r7, #12]
 800ffe6:	60b9      	str	r1, [r7, #8]
 800ffe8:	4611      	mov	r1, r2
 800ffea:	461a      	mov	r2, r3
 800ffec:	460b      	mov	r3, r1
 800ffee:	80fb      	strh	r3, [r7, #6]
 800fff0:	4613      	mov	r3, r2
 800fff2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fff4:	7979      	ldrb	r1, [r7, #5]
 800fff6:	2300      	movs	r3, #0
 800fff8:	9303      	str	r3, [sp, #12]
 800fffa:	88fb      	ldrh	r3, [r7, #6]
 800fffc:	9302      	str	r3, [sp, #8]
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	9301      	str	r3, [sp, #4]
 8010002:	2301      	movs	r3, #1
 8010004:	9300      	str	r3, [sp, #0]
 8010006:	2300      	movs	r3, #0
 8010008:	2201      	movs	r2, #1
 801000a:	68f8      	ldr	r0, [r7, #12]
 801000c:	f002 fe63 	bl	8012cd6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010010:	2300      	movs	r3, #0

}
 8010012:	4618      	mov	r0, r3
 8010014:	3710      	adds	r7, #16
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}

0801001a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801001a:	b580      	push	{r7, lr}
 801001c:	b088      	sub	sp, #32
 801001e:	af04      	add	r7, sp, #16
 8010020:	60f8      	str	r0, [r7, #12]
 8010022:	60b9      	str	r1, [r7, #8]
 8010024:	4611      	mov	r1, r2
 8010026:	461a      	mov	r2, r3
 8010028:	460b      	mov	r3, r1
 801002a:	80fb      	strh	r3, [r7, #6]
 801002c:	4613      	mov	r3, r2
 801002e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010036:	2b00      	cmp	r3, #0
 8010038:	d001      	beq.n	801003e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801003a:	2300      	movs	r3, #0
 801003c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801003e:	7979      	ldrb	r1, [r7, #5]
 8010040:	7e3b      	ldrb	r3, [r7, #24]
 8010042:	9303      	str	r3, [sp, #12]
 8010044:	88fb      	ldrh	r3, [r7, #6]
 8010046:	9302      	str	r3, [sp, #8]
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	9301      	str	r3, [sp, #4]
 801004c:	2301      	movs	r3, #1
 801004e:	9300      	str	r3, [sp, #0]
 8010050:	2302      	movs	r3, #2
 8010052:	2200      	movs	r2, #0
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f002 fe3e 	bl	8012cd6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3710      	adds	r7, #16
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b088      	sub	sp, #32
 8010068:	af04      	add	r7, sp, #16
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	4611      	mov	r1, r2
 8010070:	461a      	mov	r2, r3
 8010072:	460b      	mov	r3, r1
 8010074:	80fb      	strh	r3, [r7, #6]
 8010076:	4613      	mov	r3, r2
 8010078:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801007a:	7979      	ldrb	r1, [r7, #5]
 801007c:	2300      	movs	r3, #0
 801007e:	9303      	str	r3, [sp, #12]
 8010080:	88fb      	ldrh	r3, [r7, #6]
 8010082:	9302      	str	r3, [sp, #8]
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	9301      	str	r3, [sp, #4]
 8010088:	2301      	movs	r3, #1
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	2302      	movs	r3, #2
 801008e:	2201      	movs	r2, #1
 8010090:	68f8      	ldr	r0, [r7, #12]
 8010092:	f002 fe20 	bl	8012cd6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010096:	2300      	movs	r3, #0
}
 8010098:	4618      	mov	r0, r3
 801009a:	3710      	adds	r7, #16
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b086      	sub	sp, #24
 80100a4:	af04      	add	r7, sp, #16
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	4608      	mov	r0, r1
 80100aa:	4611      	mov	r1, r2
 80100ac:	461a      	mov	r2, r3
 80100ae:	4603      	mov	r3, r0
 80100b0:	70fb      	strb	r3, [r7, #3]
 80100b2:	460b      	mov	r3, r1
 80100b4:	70bb      	strb	r3, [r7, #2]
 80100b6:	4613      	mov	r3, r2
 80100b8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80100ba:	7878      	ldrb	r0, [r7, #1]
 80100bc:	78ba      	ldrb	r2, [r7, #2]
 80100be:	78f9      	ldrb	r1, [r7, #3]
 80100c0:	8b3b      	ldrh	r3, [r7, #24]
 80100c2:	9302      	str	r3, [sp, #8]
 80100c4:	7d3b      	ldrb	r3, [r7, #20]
 80100c6:	9301      	str	r3, [sp, #4]
 80100c8:	7c3b      	ldrb	r3, [r7, #16]
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	4603      	mov	r3, r0
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f002 fdb3 	bl	8012c3a <USBH_LL_OpenPipe>

  return USBH_OK;
 80100d4:	2300      	movs	r3, #0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3708      	adds	r7, #8
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b082      	sub	sp, #8
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
 80100e6:	460b      	mov	r3, r1
 80100e8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80100ea:	78fb      	ldrb	r3, [r7, #3]
 80100ec:	4619      	mov	r1, r3
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f002 fdd2 	bl	8012c98 <USBH_LL_ClosePipe>

  return USBH_OK;
 80100f4:	2300      	movs	r3, #0
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	3708      	adds	r7, #8
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}

080100fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80100fe:	b580      	push	{r7, lr}
 8010100:	b084      	sub	sp, #16
 8010102:	af00      	add	r7, sp, #0
 8010104:	6078      	str	r0, [r7, #4]
 8010106:	460b      	mov	r3, r1
 8010108:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f000 f836 	bl	801017c <USBH_GetFreePipe>
 8010110:	4603      	mov	r3, r0
 8010112:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010114:	89fb      	ldrh	r3, [r7, #14]
 8010116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801011a:	4293      	cmp	r3, r2
 801011c:	d00a      	beq.n	8010134 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801011e:	78fa      	ldrb	r2, [r7, #3]
 8010120:	89fb      	ldrh	r3, [r7, #14]
 8010122:	f003 030f 	and.w	r3, r3, #15
 8010126:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801012a:	6879      	ldr	r1, [r7, #4]
 801012c:	33e0      	adds	r3, #224	; 0xe0
 801012e:	009b      	lsls	r3, r3, #2
 8010130:	440b      	add	r3, r1
 8010132:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010134:	89fb      	ldrh	r3, [r7, #14]
 8010136:	b2db      	uxtb	r3, r3
}
 8010138:	4618      	mov	r0, r3
 801013a:	3710      	adds	r7, #16
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	460b      	mov	r3, r1
 801014a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 801014c:	78fb      	ldrb	r3, [r7, #3]
 801014e:	2b0a      	cmp	r3, #10
 8010150:	d80d      	bhi.n	801016e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010152:	78fb      	ldrb	r3, [r7, #3]
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	33e0      	adds	r3, #224	; 0xe0
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	4413      	add	r3, r2
 801015c:	685a      	ldr	r2, [r3, #4]
 801015e:	78fb      	ldrb	r3, [r7, #3]
 8010160:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010164:	6879      	ldr	r1, [r7, #4]
 8010166:	33e0      	adds	r3, #224	; 0xe0
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	440b      	add	r3, r1
 801016c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801016e:	2300      	movs	r3, #0
}
 8010170:	4618      	mov	r0, r3
 8010172:	370c      	adds	r7, #12
 8010174:	46bd      	mov	sp, r7
 8010176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017a:	4770      	bx	lr

0801017c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801017c:	b480      	push	{r7}
 801017e:	b085      	sub	sp, #20
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010184:	2300      	movs	r3, #0
 8010186:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8010188:	2300      	movs	r3, #0
 801018a:	73fb      	strb	r3, [r7, #15]
 801018c:	e00f      	b.n	80101ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801018e:	7bfb      	ldrb	r3, [r7, #15]
 8010190:	687a      	ldr	r2, [r7, #4]
 8010192:	33e0      	adds	r3, #224	; 0xe0
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	4413      	add	r3, r2
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d102      	bne.n	80101a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80101a2:	7bfb      	ldrb	r3, [r7, #15]
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	e007      	b.n	80101b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80101a8:	7bfb      	ldrb	r3, [r7, #15]
 80101aa:	3301      	adds	r3, #1
 80101ac:	73fb      	strb	r3, [r7, #15]
 80101ae:	7bfb      	ldrb	r3, [r7, #15]
 80101b0:	2b0a      	cmp	r3, #10
 80101b2:	d9ec      	bls.n	801018e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80101b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3714      	adds	r7, #20
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr

080101c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b087      	sub	sp, #28
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	4613      	mov	r3, r2
 80101d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80101d2:	2301      	movs	r3, #1
 80101d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80101d6:	2300      	movs	r3, #0
 80101d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80101da:	4b1f      	ldr	r3, [pc, #124]	; (8010258 <FATFS_LinkDriverEx+0x94>)
 80101dc:	7a5b      	ldrb	r3, [r3, #9]
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d131      	bne.n	8010248 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80101e4:	4b1c      	ldr	r3, [pc, #112]	; (8010258 <FATFS_LinkDriverEx+0x94>)
 80101e6:	7a5b      	ldrb	r3, [r3, #9]
 80101e8:	b2db      	uxtb	r3, r3
 80101ea:	461a      	mov	r2, r3
 80101ec:	4b1a      	ldr	r3, [pc, #104]	; (8010258 <FATFS_LinkDriverEx+0x94>)
 80101ee:	2100      	movs	r1, #0
 80101f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80101f2:	4b19      	ldr	r3, [pc, #100]	; (8010258 <FATFS_LinkDriverEx+0x94>)
 80101f4:	7a5b      	ldrb	r3, [r3, #9]
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	4a17      	ldr	r2, [pc, #92]	; (8010258 <FATFS_LinkDriverEx+0x94>)
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	4413      	add	r3, r2
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010202:	4b15      	ldr	r3, [pc, #84]	; (8010258 <FATFS_LinkDriverEx+0x94>)
 8010204:	7a5b      	ldrb	r3, [r3, #9]
 8010206:	b2db      	uxtb	r3, r3
 8010208:	461a      	mov	r2, r3
 801020a:	4b13      	ldr	r3, [pc, #76]	; (8010258 <FATFS_LinkDriverEx+0x94>)
 801020c:	4413      	add	r3, r2
 801020e:	79fa      	ldrb	r2, [r7, #7]
 8010210:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010212:	4b11      	ldr	r3, [pc, #68]	; (8010258 <FATFS_LinkDriverEx+0x94>)
 8010214:	7a5b      	ldrb	r3, [r3, #9]
 8010216:	b2db      	uxtb	r3, r3
 8010218:	1c5a      	adds	r2, r3, #1
 801021a:	b2d1      	uxtb	r1, r2
 801021c:	4a0e      	ldr	r2, [pc, #56]	; (8010258 <FATFS_LinkDriverEx+0x94>)
 801021e:	7251      	strb	r1, [r2, #9]
 8010220:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010222:	7dbb      	ldrb	r3, [r7, #22]
 8010224:	3330      	adds	r3, #48	; 0x30
 8010226:	b2da      	uxtb	r2, r3
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	3301      	adds	r3, #1
 8010230:	223a      	movs	r2, #58	; 0x3a
 8010232:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	3302      	adds	r3, #2
 8010238:	222f      	movs	r2, #47	; 0x2f
 801023a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	3303      	adds	r3, #3
 8010240:	2200      	movs	r2, #0
 8010242:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010244:	2300      	movs	r3, #0
 8010246:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010248:	7dfb      	ldrb	r3, [r7, #23]
}
 801024a:	4618      	mov	r0, r3
 801024c:	371c      	adds	r7, #28
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr
 8010256:	bf00      	nop
 8010258:	20000328 	.word	0x20000328

0801025c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010266:	2200      	movs	r2, #0
 8010268:	6839      	ldr	r1, [r7, #0]
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f7ff ffaa 	bl	80101c4 <FATFS_LinkDriverEx>
 8010270:	4603      	mov	r3, r0
}
 8010272:	4618      	mov	r0, r3
 8010274:	3708      	adds	r7, #8
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801027a:	b480      	push	{r7}
 801027c:	b085      	sub	sp, #20
 801027e:	af00      	add	r7, sp, #0
 8010280:	4603      	mov	r3, r0
 8010282:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010284:	2300      	movs	r3, #0
 8010286:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801028c:	2b84      	cmp	r3, #132	; 0x84
 801028e:	d005      	beq.n	801029c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010290:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	4413      	add	r3, r2
 8010298:	3303      	adds	r3, #3
 801029a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801029c:	68fb      	ldr	r3, [r7, #12]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3714      	adds	r7, #20
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr

080102aa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80102aa:	b480      	push	{r7}
 80102ac:	b083      	sub	sp, #12
 80102ae:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102b0:	f3ef 8305 	mrs	r3, IPSR
 80102b4:	607b      	str	r3, [r7, #4]
  return(result);
 80102b6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	bf14      	ite	ne
 80102bc:	2301      	movne	r3, #1
 80102be:	2300      	moveq	r3, #0
 80102c0:	b2db      	uxtb	r3, r3
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	370c      	adds	r7, #12
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr

080102ce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80102ce:	b580      	push	{r7, lr}
 80102d0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80102d2:	f001 f95b 	bl	801158c <vTaskStartScheduler>
  
  return osOK;
 80102d6:	2300      	movs	r3, #0
}
 80102d8:	4618      	mov	r0, r3
 80102da:	bd80      	pop	{r7, pc}

080102dc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80102e0:	f001 fdae 	bl	8011e40 <xTaskGetSchedulerState>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b01      	cmp	r3, #1
 80102e8:	d101      	bne.n	80102ee <osKernelRunning+0x12>
    return 0;
 80102ea:	2300      	movs	r3, #0
 80102ec:	e000      	b.n	80102f0 <osKernelRunning+0x14>
  else
    return 1;
 80102ee:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80102f8:	f7ff ffd7 	bl	80102aa <inHandlerMode>
 80102fc:	4603      	mov	r3, r0
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d003      	beq.n	801030a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010302:	f001 fa63 	bl	80117cc <xTaskGetTickCountFromISR>
 8010306:	4603      	mov	r3, r0
 8010308:	e002      	b.n	8010310 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801030a:	f001 fa4f 	bl	80117ac <xTaskGetTickCount>
 801030e:	4603      	mov	r3, r0
  }
}
 8010310:	4618      	mov	r0, r3
 8010312:	bd80      	pop	{r7, pc}

08010314 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010316:	b089      	sub	sp, #36	; 0x24
 8010318:	af04      	add	r7, sp, #16
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	695b      	ldr	r3, [r3, #20]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d020      	beq.n	8010368 <osThreadCreate+0x54>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	699b      	ldr	r3, [r3, #24]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d01c      	beq.n	8010368 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	685c      	ldr	r4, [r3, #4]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681d      	ldr	r5, [r3, #0]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	691e      	ldr	r6, [r3, #16]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010340:	4618      	mov	r0, r3
 8010342:	f7ff ff9a 	bl	801027a <makeFreeRtosPriority>
 8010346:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	695b      	ldr	r3, [r3, #20]
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010350:	9202      	str	r2, [sp, #8]
 8010352:	9301      	str	r3, [sp, #4]
 8010354:	9100      	str	r1, [sp, #0]
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	4632      	mov	r2, r6
 801035a:	4629      	mov	r1, r5
 801035c:	4620      	mov	r0, r4
 801035e:	f000 ff39 	bl	80111d4 <xTaskCreateStatic>
 8010362:	4603      	mov	r3, r0
 8010364:	60fb      	str	r3, [r7, #12]
 8010366:	e01c      	b.n	80103a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	685c      	ldr	r4, [r3, #4]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010374:	b29e      	uxth	r6, r3
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801037c:	4618      	mov	r0, r3
 801037e:	f7ff ff7c 	bl	801027a <makeFreeRtosPriority>
 8010382:	4602      	mov	r2, r0
 8010384:	f107 030c 	add.w	r3, r7, #12
 8010388:	9301      	str	r3, [sp, #4]
 801038a:	9200      	str	r2, [sp, #0]
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	4632      	mov	r2, r6
 8010390:	4629      	mov	r1, r5
 8010392:	4620      	mov	r0, r4
 8010394:	f000 ff81 	bl	801129a <xTaskCreate>
 8010398:	4603      	mov	r3, r0
 801039a:	2b01      	cmp	r3, #1
 801039c:	d001      	beq.n	80103a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801039e:	2300      	movs	r3, #0
 80103a0:	e000      	b.n	80103a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80103a2:	68fb      	ldr	r3, [r7, #12]
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3714      	adds	r7, #20
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080103ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d001      	beq.n	80103c2 <osDelay+0x16>
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	e000      	b.n	80103c4 <osDelay+0x18>
 80103c2:	2301      	movs	r3, #1
 80103c4:	4618      	mov	r0, r3
 80103c6:	f001 f8ab 	bl	8011520 <vTaskDelay>
  
  return osOK;
 80103ca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3710      	adds	r7, #16
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80103d4:	b590      	push	{r4, r7, lr}
 80103d6:	b085      	sub	sp, #20
 80103d8:	af02      	add	r7, sp, #8
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	689b      	ldr	r3, [r3, #8]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d011      	beq.n	801040a <osMessageCreate+0x36>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d00d      	beq.n	801040a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6818      	ldr	r0, [r3, #0]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6859      	ldr	r1, [r3, #4]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	689a      	ldr	r2, [r3, #8]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	2400      	movs	r4, #0
 8010400:	9400      	str	r4, [sp, #0]
 8010402:	f000 f9e1 	bl	80107c8 <xQueueGenericCreateStatic>
 8010406:	4603      	mov	r3, r0
 8010408:	e008      	b.n	801041c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6818      	ldr	r0, [r3, #0]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	685b      	ldr	r3, [r3, #4]
 8010412:	2200      	movs	r2, #0
 8010414:	4619      	mov	r1, r3
 8010416:	f000 fa59 	bl	80108cc <xQueueGenericCreate>
 801041a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801041c:	4618      	mov	r0, r3
 801041e:	370c      	adds	r7, #12
 8010420:	46bd      	mov	sp, r7
 8010422:	bd90      	pop	{r4, r7, pc}

08010424 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b086      	sub	sp, #24
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010430:	2300      	movs	r3, #0
 8010432:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d101      	bne.n	8010442 <osMessagePut+0x1e>
    ticks = 1;
 801043e:	2301      	movs	r3, #1
 8010440:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010442:	f7ff ff32 	bl	80102aa <inHandlerMode>
 8010446:	4603      	mov	r3, r0
 8010448:	2b00      	cmp	r3, #0
 801044a:	d018      	beq.n	801047e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801044c:	f107 0210 	add.w	r2, r7, #16
 8010450:	f107 0108 	add.w	r1, r7, #8
 8010454:	2300      	movs	r3, #0
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	f000 fba0 	bl	8010b9c <xQueueGenericSendFromISR>
 801045c:	4603      	mov	r3, r0
 801045e:	2b01      	cmp	r3, #1
 8010460:	d001      	beq.n	8010466 <osMessagePut+0x42>
      return osErrorOS;
 8010462:	23ff      	movs	r3, #255	; 0xff
 8010464:	e018      	b.n	8010498 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d014      	beq.n	8010496 <osMessagePut+0x72>
 801046c:	4b0c      	ldr	r3, [pc, #48]	; (80104a0 <osMessagePut+0x7c>)
 801046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010472:	601a      	str	r2, [r3, #0]
 8010474:	f3bf 8f4f 	dsb	sy
 8010478:	f3bf 8f6f 	isb	sy
 801047c:	e00b      	b.n	8010496 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801047e:	f107 0108 	add.w	r1, r7, #8
 8010482:	2300      	movs	r3, #0
 8010484:	697a      	ldr	r2, [r7, #20]
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f000 fa82 	bl	8010990 <xQueueGenericSend>
 801048c:	4603      	mov	r3, r0
 801048e:	2b01      	cmp	r3, #1
 8010490:	d001      	beq.n	8010496 <osMessagePut+0x72>
      return osErrorOS;
 8010492:	23ff      	movs	r3, #255	; 0xff
 8010494:	e000      	b.n	8010498 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010496:	2300      	movs	r3, #0
}
 8010498:	4618      	mov	r0, r3
 801049a:	3718      	adds	r7, #24
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}
 80104a0:	e000ed04 	.word	0xe000ed04

080104a4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80104a4:	b590      	push	{r4, r7, lr}
 80104a6:	b08b      	sub	sp, #44	; 0x2c
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80104b4:	2300      	movs	r3, #0
 80104b6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10a      	bne.n	80104d4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80104be:	2380      	movs	r3, #128	; 0x80
 80104c0:	617b      	str	r3, [r7, #20]
    return event;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	461c      	mov	r4, r3
 80104c6:	f107 0314 	add.w	r3, r7, #20
 80104ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80104ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80104d2:	e054      	b.n	801057e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80104d4:	2300      	movs	r3, #0
 80104d6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80104d8:	2300      	movs	r3, #0
 80104da:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104e2:	d103      	bne.n	80104ec <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80104e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104e8:	627b      	str	r3, [r7, #36]	; 0x24
 80104ea:	e009      	b.n	8010500 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d006      	beq.n	8010500 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80104f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d101      	bne.n	8010500 <osMessageGet+0x5c>
      ticks = 1;
 80104fc:	2301      	movs	r3, #1
 80104fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010500:	f7ff fed3 	bl	80102aa <inHandlerMode>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d01c      	beq.n	8010544 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801050a:	f107 0220 	add.w	r2, r7, #32
 801050e:	f107 0314 	add.w	r3, r7, #20
 8010512:	3304      	adds	r3, #4
 8010514:	4619      	mov	r1, r3
 8010516:	68b8      	ldr	r0, [r7, #8]
 8010518:	f000 fcc6 	bl	8010ea8 <xQueueReceiveFromISR>
 801051c:	4603      	mov	r3, r0
 801051e:	2b01      	cmp	r3, #1
 8010520:	d102      	bne.n	8010528 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010522:	2310      	movs	r3, #16
 8010524:	617b      	str	r3, [r7, #20]
 8010526:	e001      	b.n	801052c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010528:	2300      	movs	r3, #0
 801052a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801052c:	6a3b      	ldr	r3, [r7, #32]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d01d      	beq.n	801056e <osMessageGet+0xca>
 8010532:	4b15      	ldr	r3, [pc, #84]	; (8010588 <osMessageGet+0xe4>)
 8010534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010538:	601a      	str	r2, [r3, #0]
 801053a:	f3bf 8f4f 	dsb	sy
 801053e:	f3bf 8f6f 	isb	sy
 8010542:	e014      	b.n	801056e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010544:	f107 0314 	add.w	r3, r7, #20
 8010548:	3304      	adds	r3, #4
 801054a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801054c:	4619      	mov	r1, r3
 801054e:	68b8      	ldr	r0, [r7, #8]
 8010550:	f000 fbc4 	bl	8010cdc <xQueueReceive>
 8010554:	4603      	mov	r3, r0
 8010556:	2b01      	cmp	r3, #1
 8010558:	d102      	bne.n	8010560 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801055a:	2310      	movs	r3, #16
 801055c:	617b      	str	r3, [r7, #20]
 801055e:	e006      	b.n	801056e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010562:	2b00      	cmp	r3, #0
 8010564:	d101      	bne.n	801056a <osMessageGet+0xc6>
 8010566:	2300      	movs	r3, #0
 8010568:	e000      	b.n	801056c <osMessageGet+0xc8>
 801056a:	2340      	movs	r3, #64	; 0x40
 801056c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	461c      	mov	r4, r3
 8010572:	f107 0314 	add.w	r3, r7, #20
 8010576:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801057a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801057e:	68f8      	ldr	r0, [r7, #12]
 8010580:	372c      	adds	r7, #44	; 0x2c
 8010582:	46bd      	mov	sp, r7
 8010584:	bd90      	pop	{r4, r7, pc}
 8010586:	bf00      	nop
 8010588:	e000ed04 	.word	0xe000ed04

0801058c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801058c:	b480      	push	{r7}
 801058e:	b083      	sub	sp, #12
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f103 0208 	add.w	r2, r3, #8
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f103 0208 	add.w	r2, r3, #8
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f103 0208 	add.w	r2, r3, #8
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2200      	movs	r2, #0
 80105be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80105c0:	bf00      	nop
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2200      	movs	r2, #0
 80105d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80105da:	bf00      	nop
 80105dc:	370c      	adds	r7, #12
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr

080105e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80105e6:	b480      	push	{r7}
 80105e8:	b085      	sub	sp, #20
 80105ea:	af00      	add	r7, sp, #0
 80105ec:	6078      	str	r0, [r7, #4]
 80105ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	68fa      	ldr	r2, [r7, #12]
 80105fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	689a      	ldr	r2, [r3, #8]
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	683a      	ldr	r2, [r7, #0]
 801060a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	683a      	ldr	r2, [r7, #0]
 8010610:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	687a      	ldr	r2, [r7, #4]
 8010616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	1c5a      	adds	r2, r3, #1
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	601a      	str	r2, [r3, #0]
}
 8010622:	bf00      	nop
 8010624:	3714      	adds	r7, #20
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr

0801062e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801062e:	b480      	push	{r7}
 8010630:	b085      	sub	sp, #20
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
 8010636:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010644:	d103      	bne.n	801064e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	691b      	ldr	r3, [r3, #16]
 801064a:	60fb      	str	r3, [r7, #12]
 801064c:	e00c      	b.n	8010668 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	3308      	adds	r3, #8
 8010652:	60fb      	str	r3, [r7, #12]
 8010654:	e002      	b.n	801065c <vListInsert+0x2e>
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	60fb      	str	r3, [r7, #12]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	68ba      	ldr	r2, [r7, #8]
 8010664:	429a      	cmp	r2, r3
 8010666:	d2f6      	bcs.n	8010656 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	685a      	ldr	r2, [r3, #4]
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	683a      	ldr	r2, [r7, #0]
 8010676:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	683a      	ldr	r2, [r7, #0]
 8010682:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	1c5a      	adds	r2, r3, #1
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	601a      	str	r2, [r3, #0]
}
 8010694:	bf00      	nop
 8010696:	3714      	adds	r7, #20
 8010698:	46bd      	mov	sp, r7
 801069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069e:	4770      	bx	lr

080106a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80106a0:	b480      	push	{r7}
 80106a2:	b085      	sub	sp, #20
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	691b      	ldr	r3, [r3, #16]
 80106ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	685b      	ldr	r3, [r3, #4]
 80106b2:	687a      	ldr	r2, [r7, #4]
 80106b4:	6892      	ldr	r2, [r2, #8]
 80106b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	689b      	ldr	r3, [r3, #8]
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	6852      	ldr	r2, [r2, #4]
 80106c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d103      	bne.n	80106d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	689a      	ldr	r2, [r3, #8]
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	1e5a      	subs	r2, r3, #1
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	681b      	ldr	r3, [r3, #0]
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3714      	adds	r7, #20
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d10c      	bne.n	8010722 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801070c:	b672      	cpsid	i
 801070e:	f383 8811 	msr	BASEPRI, r3
 8010712:	f3bf 8f6f 	isb	sy
 8010716:	f3bf 8f4f 	dsb	sy
 801071a:	b662      	cpsie	i
 801071c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801071e:	bf00      	nop
 8010720:	e7fe      	b.n	8010720 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8010722:	f001 fdab 	bl	801227c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801072e:	68f9      	ldr	r1, [r7, #12]
 8010730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010732:	fb01 f303 	mul.w	r3, r1, r3
 8010736:	441a      	add	r2, r3
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2200      	movs	r2, #0
 8010740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	681a      	ldr	r2, [r3, #0]
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681a      	ldr	r2, [r3, #0]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010752:	3b01      	subs	r3, #1
 8010754:	68f9      	ldr	r1, [r7, #12]
 8010756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010758:	fb01 f303 	mul.w	r3, r1, r3
 801075c:	441a      	add	r2, r3
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	22ff      	movs	r2, #255	; 0xff
 8010766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	22ff      	movs	r2, #255	; 0xff
 801076e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d114      	bne.n	80107a2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	691b      	ldr	r3, [r3, #16]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d01a      	beq.n	80107b6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	3310      	adds	r3, #16
 8010784:	4618      	mov	r0, r3
 8010786:	f001 f995 	bl	8011ab4 <xTaskRemoveFromEventList>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d012      	beq.n	80107b6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010790:	4b0c      	ldr	r3, [pc, #48]	; (80107c4 <xQueueGenericReset+0xd0>)
 8010792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010796:	601a      	str	r2, [r3, #0]
 8010798:	f3bf 8f4f 	dsb	sy
 801079c:	f3bf 8f6f 	isb	sy
 80107a0:	e009      	b.n	80107b6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	3310      	adds	r3, #16
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7ff fef0 	bl	801058c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	3324      	adds	r3, #36	; 0x24
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7ff feeb 	bl	801058c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80107b6:	f001 fd95 	bl	80122e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80107ba:	2301      	movs	r3, #1
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3710      	adds	r7, #16
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	e000ed04 	.word	0xe000ed04

080107c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b08e      	sub	sp, #56	; 0x38
 80107cc:	af02      	add	r7, sp, #8
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	60b9      	str	r1, [r7, #8]
 80107d2:	607a      	str	r2, [r7, #4]
 80107d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d10c      	bne.n	80107f6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80107dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e0:	b672      	cpsid	i
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	b662      	cpsie	i
 80107f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80107f2:	bf00      	nop
 80107f4:	e7fe      	b.n	80107f4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d10c      	bne.n	8010816 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80107fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010800:	b672      	cpsid	i
 8010802:	f383 8811 	msr	BASEPRI, r3
 8010806:	f3bf 8f6f 	isb	sy
 801080a:	f3bf 8f4f 	dsb	sy
 801080e:	b662      	cpsie	i
 8010810:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010812:	bf00      	nop
 8010814:	e7fe      	b.n	8010814 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d002      	beq.n	8010822 <xQueueGenericCreateStatic+0x5a>
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d001      	beq.n	8010826 <xQueueGenericCreateStatic+0x5e>
 8010822:	2301      	movs	r3, #1
 8010824:	e000      	b.n	8010828 <xQueueGenericCreateStatic+0x60>
 8010826:	2300      	movs	r3, #0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d10c      	bne.n	8010846 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 801082c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010830:	b672      	cpsid	i
 8010832:	f383 8811 	msr	BASEPRI, r3
 8010836:	f3bf 8f6f 	isb	sy
 801083a:	f3bf 8f4f 	dsb	sy
 801083e:	b662      	cpsie	i
 8010840:	623b      	str	r3, [r7, #32]
}
 8010842:	bf00      	nop
 8010844:	e7fe      	b.n	8010844 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d102      	bne.n	8010852 <xQueueGenericCreateStatic+0x8a>
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d101      	bne.n	8010856 <xQueueGenericCreateStatic+0x8e>
 8010852:	2301      	movs	r3, #1
 8010854:	e000      	b.n	8010858 <xQueueGenericCreateStatic+0x90>
 8010856:	2300      	movs	r3, #0
 8010858:	2b00      	cmp	r3, #0
 801085a:	d10c      	bne.n	8010876 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 801085c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010860:	b672      	cpsid	i
 8010862:	f383 8811 	msr	BASEPRI, r3
 8010866:	f3bf 8f6f 	isb	sy
 801086a:	f3bf 8f4f 	dsb	sy
 801086e:	b662      	cpsie	i
 8010870:	61fb      	str	r3, [r7, #28]
}
 8010872:	bf00      	nop
 8010874:	e7fe      	b.n	8010874 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010876:	2348      	movs	r3, #72	; 0x48
 8010878:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	2b48      	cmp	r3, #72	; 0x48
 801087e:	d00c      	beq.n	801089a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8010880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010884:	b672      	cpsid	i
 8010886:	f383 8811 	msr	BASEPRI, r3
 801088a:	f3bf 8f6f 	isb	sy
 801088e:	f3bf 8f4f 	dsb	sy
 8010892:	b662      	cpsie	i
 8010894:	61bb      	str	r3, [r7, #24]
}
 8010896:	bf00      	nop
 8010898:	e7fe      	b.n	8010898 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801089a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80108a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d00d      	beq.n	80108c2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80108a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a8:	2201      	movs	r2, #1
 80108aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80108ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80108b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b4:	9300      	str	r3, [sp, #0]
 80108b6:	4613      	mov	r3, r2
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	68b9      	ldr	r1, [r7, #8]
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	f000 f847 	bl	8010950 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80108c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3730      	adds	r7, #48	; 0x30
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b08a      	sub	sp, #40	; 0x28
 80108d0:	af02      	add	r7, sp, #8
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	4613      	mov	r3, r2
 80108d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d10c      	bne.n	80108fa <xQueueGenericCreate+0x2e>
	__asm volatile
 80108e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e4:	b672      	cpsid	i
 80108e6:	f383 8811 	msr	BASEPRI, r3
 80108ea:	f3bf 8f6f 	isb	sy
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	b662      	cpsie	i
 80108f4:	613b      	str	r3, [r7, #16]
}
 80108f6:	bf00      	nop
 80108f8:	e7fe      	b.n	80108f8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d102      	bne.n	8010906 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010900:	2300      	movs	r3, #0
 8010902:	61fb      	str	r3, [r7, #28]
 8010904:	e004      	b.n	8010910 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	68ba      	ldr	r2, [r7, #8]
 801090a:	fb02 f303 	mul.w	r3, r2, r3
 801090e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010910:	69fb      	ldr	r3, [r7, #28]
 8010912:	3348      	adds	r3, #72	; 0x48
 8010914:	4618      	mov	r0, r3
 8010916:	f001 fddd 	bl	80124d4 <pvPortMalloc>
 801091a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d011      	beq.n	8010946 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010922:	69bb      	ldr	r3, [r7, #24]
 8010924:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	3348      	adds	r3, #72	; 0x48
 801092a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801092c:	69bb      	ldr	r3, [r7, #24]
 801092e:	2200      	movs	r2, #0
 8010930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010934:	79fa      	ldrb	r2, [r7, #7]
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	4613      	mov	r3, r2
 801093c:	697a      	ldr	r2, [r7, #20]
 801093e:	68b9      	ldr	r1, [r7, #8]
 8010940:	68f8      	ldr	r0, [r7, #12]
 8010942:	f000 f805 	bl	8010950 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010946:	69bb      	ldr	r3, [r7, #24]
	}
 8010948:	4618      	mov	r0, r3
 801094a:	3720      	adds	r7, #32
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
 801095c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d103      	bne.n	801096c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010964:	69bb      	ldr	r3, [r7, #24]
 8010966:	69ba      	ldr	r2, [r7, #24]
 8010968:	601a      	str	r2, [r3, #0]
 801096a:	e002      	b.n	8010972 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801096c:	69bb      	ldr	r3, [r7, #24]
 801096e:	687a      	ldr	r2, [r7, #4]
 8010970:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010972:	69bb      	ldr	r3, [r7, #24]
 8010974:	68fa      	ldr	r2, [r7, #12]
 8010976:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010978:	69bb      	ldr	r3, [r7, #24]
 801097a:	68ba      	ldr	r2, [r7, #8]
 801097c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801097e:	2101      	movs	r1, #1
 8010980:	69b8      	ldr	r0, [r7, #24]
 8010982:	f7ff feb7 	bl	80106f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010986:	bf00      	nop
 8010988:	3710      	adds	r7, #16
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}
	...

08010990 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b08e      	sub	sp, #56	; 0x38
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
 801099c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801099e:	2300      	movs	r3, #0
 80109a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80109a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d10c      	bne.n	80109c6 <xQueueGenericSend+0x36>
	__asm volatile
 80109ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b0:	b672      	cpsid	i
 80109b2:	f383 8811 	msr	BASEPRI, r3
 80109b6:	f3bf 8f6f 	isb	sy
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	b662      	cpsie	i
 80109c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80109c2:	bf00      	nop
 80109c4:	e7fe      	b.n	80109c4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d103      	bne.n	80109d4 <xQueueGenericSend+0x44>
 80109cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d101      	bne.n	80109d8 <xQueueGenericSend+0x48>
 80109d4:	2301      	movs	r3, #1
 80109d6:	e000      	b.n	80109da <xQueueGenericSend+0x4a>
 80109d8:	2300      	movs	r3, #0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d10c      	bne.n	80109f8 <xQueueGenericSend+0x68>
	__asm volatile
 80109de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e2:	b672      	cpsid	i
 80109e4:	f383 8811 	msr	BASEPRI, r3
 80109e8:	f3bf 8f6f 	isb	sy
 80109ec:	f3bf 8f4f 	dsb	sy
 80109f0:	b662      	cpsie	i
 80109f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80109f4:	bf00      	nop
 80109f6:	e7fe      	b.n	80109f6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	2b02      	cmp	r3, #2
 80109fc:	d103      	bne.n	8010a06 <xQueueGenericSend+0x76>
 80109fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d101      	bne.n	8010a0a <xQueueGenericSend+0x7a>
 8010a06:	2301      	movs	r3, #1
 8010a08:	e000      	b.n	8010a0c <xQueueGenericSend+0x7c>
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d10c      	bne.n	8010a2a <xQueueGenericSend+0x9a>
	__asm volatile
 8010a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a14:	b672      	cpsid	i
 8010a16:	f383 8811 	msr	BASEPRI, r3
 8010a1a:	f3bf 8f6f 	isb	sy
 8010a1e:	f3bf 8f4f 	dsb	sy
 8010a22:	b662      	cpsie	i
 8010a24:	623b      	str	r3, [r7, #32]
}
 8010a26:	bf00      	nop
 8010a28:	e7fe      	b.n	8010a28 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a2a:	f001 fa09 	bl	8011e40 <xTaskGetSchedulerState>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d102      	bne.n	8010a3a <xQueueGenericSend+0xaa>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d101      	bne.n	8010a3e <xQueueGenericSend+0xae>
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	e000      	b.n	8010a40 <xQueueGenericSend+0xb0>
 8010a3e:	2300      	movs	r3, #0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d10c      	bne.n	8010a5e <xQueueGenericSend+0xce>
	__asm volatile
 8010a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a48:	b672      	cpsid	i
 8010a4a:	f383 8811 	msr	BASEPRI, r3
 8010a4e:	f3bf 8f6f 	isb	sy
 8010a52:	f3bf 8f4f 	dsb	sy
 8010a56:	b662      	cpsie	i
 8010a58:	61fb      	str	r3, [r7, #28]
}
 8010a5a:	bf00      	nop
 8010a5c:	e7fe      	b.n	8010a5c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a5e:	f001 fc0d 	bl	801227c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d302      	bcc.n	8010a74 <xQueueGenericSend+0xe4>
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	2b02      	cmp	r3, #2
 8010a72:	d129      	bne.n	8010ac8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a74:	683a      	ldr	r2, [r7, #0]
 8010a76:	68b9      	ldr	r1, [r7, #8]
 8010a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a7a:	f000 fa9b 	bl	8010fb4 <prvCopyDataToQueue>
 8010a7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d010      	beq.n	8010aaa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8a:	3324      	adds	r3, #36	; 0x24
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f001 f811 	bl	8011ab4 <xTaskRemoveFromEventList>
 8010a92:	4603      	mov	r3, r0
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d013      	beq.n	8010ac0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010a98:	4b3f      	ldr	r3, [pc, #252]	; (8010b98 <xQueueGenericSend+0x208>)
 8010a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a9e:	601a      	str	r2, [r3, #0]
 8010aa0:	f3bf 8f4f 	dsb	sy
 8010aa4:	f3bf 8f6f 	isb	sy
 8010aa8:	e00a      	b.n	8010ac0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d007      	beq.n	8010ac0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010ab0:	4b39      	ldr	r3, [pc, #228]	; (8010b98 <xQueueGenericSend+0x208>)
 8010ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ab6:	601a      	str	r2, [r3, #0]
 8010ab8:	f3bf 8f4f 	dsb	sy
 8010abc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010ac0:	f001 fc10 	bl	80122e4 <vPortExitCritical>
				return pdPASS;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	e063      	b.n	8010b90 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d103      	bne.n	8010ad6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010ace:	f001 fc09 	bl	80122e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	e05c      	b.n	8010b90 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d106      	bne.n	8010aea <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010adc:	f107 0314 	add.w	r3, r7, #20
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f001 f84b 	bl	8011b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010aea:	f001 fbfb 	bl	80122e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010aee:	f000 fdb1 	bl	8011654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010af2:	f001 fbc3 	bl	801227c <vPortEnterCritical>
 8010af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010afc:	b25b      	sxtb	r3, r3
 8010afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b02:	d103      	bne.n	8010b0c <xQueueGenericSend+0x17c>
 8010b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b06:	2200      	movs	r2, #0
 8010b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b12:	b25b      	sxtb	r3, r3
 8010b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b18:	d103      	bne.n	8010b22 <xQueueGenericSend+0x192>
 8010b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b22:	f001 fbdf 	bl	80122e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b26:	1d3a      	adds	r2, r7, #4
 8010b28:	f107 0314 	add.w	r3, r7, #20
 8010b2c:	4611      	mov	r1, r2
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f001 f83a 	bl	8011ba8 <xTaskCheckForTimeOut>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d124      	bne.n	8010b84 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b3c:	f000 fb32 	bl	80111a4 <prvIsQueueFull>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d018      	beq.n	8010b78 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b48:	3310      	adds	r3, #16
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	4611      	mov	r1, r2
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f000 ff8a 	bl	8011a68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b56:	f000 fabd 	bl	80110d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010b5a:	f000 fd89 	bl	8011670 <xTaskResumeAll>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f47f af7c 	bne.w	8010a5e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8010b66:	4b0c      	ldr	r3, [pc, #48]	; (8010b98 <xQueueGenericSend+0x208>)
 8010b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b6c:	601a      	str	r2, [r3, #0]
 8010b6e:	f3bf 8f4f 	dsb	sy
 8010b72:	f3bf 8f6f 	isb	sy
 8010b76:	e772      	b.n	8010a5e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b7a:	f000 faab 	bl	80110d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b7e:	f000 fd77 	bl	8011670 <xTaskResumeAll>
 8010b82:	e76c      	b.n	8010a5e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b86:	f000 faa5 	bl	80110d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b8a:	f000 fd71 	bl	8011670 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010b8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3738      	adds	r7, #56	; 0x38
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	e000ed04 	.word	0xe000ed04

08010b9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b08e      	sub	sp, #56	; 0x38
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	607a      	str	r2, [r7, #4]
 8010ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d10c      	bne.n	8010bce <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8010bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb8:	b672      	cpsid	i
 8010bba:	f383 8811 	msr	BASEPRI, r3
 8010bbe:	f3bf 8f6f 	isb	sy
 8010bc2:	f3bf 8f4f 	dsb	sy
 8010bc6:	b662      	cpsie	i
 8010bc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010bca:	bf00      	nop
 8010bcc:	e7fe      	b.n	8010bcc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d103      	bne.n	8010bdc <xQueueGenericSendFromISR+0x40>
 8010bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d101      	bne.n	8010be0 <xQueueGenericSendFromISR+0x44>
 8010bdc:	2301      	movs	r3, #1
 8010bde:	e000      	b.n	8010be2 <xQueueGenericSendFromISR+0x46>
 8010be0:	2300      	movs	r3, #0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d10c      	bne.n	8010c00 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8010be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bea:	b672      	cpsid	i
 8010bec:	f383 8811 	msr	BASEPRI, r3
 8010bf0:	f3bf 8f6f 	isb	sy
 8010bf4:	f3bf 8f4f 	dsb	sy
 8010bf8:	b662      	cpsie	i
 8010bfa:	623b      	str	r3, [r7, #32]
}
 8010bfc:	bf00      	nop
 8010bfe:	e7fe      	b.n	8010bfe <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	2b02      	cmp	r3, #2
 8010c04:	d103      	bne.n	8010c0e <xQueueGenericSendFromISR+0x72>
 8010c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	d101      	bne.n	8010c12 <xQueueGenericSendFromISR+0x76>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e000      	b.n	8010c14 <xQueueGenericSendFromISR+0x78>
 8010c12:	2300      	movs	r3, #0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d10c      	bne.n	8010c32 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8010c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c1c:	b672      	cpsid	i
 8010c1e:	f383 8811 	msr	BASEPRI, r3
 8010c22:	f3bf 8f6f 	isb	sy
 8010c26:	f3bf 8f4f 	dsb	sy
 8010c2a:	b662      	cpsie	i
 8010c2c:	61fb      	str	r3, [r7, #28]
}
 8010c2e:	bf00      	nop
 8010c30:	e7fe      	b.n	8010c30 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c32:	f001 fc0b 	bl	801244c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010c36:	f3ef 8211 	mrs	r2, BASEPRI
 8010c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3e:	b672      	cpsid	i
 8010c40:	f383 8811 	msr	BASEPRI, r3
 8010c44:	f3bf 8f6f 	isb	sy
 8010c48:	f3bf 8f4f 	dsb	sy
 8010c4c:	b662      	cpsie	i
 8010c4e:	61ba      	str	r2, [r7, #24]
 8010c50:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010c52:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d302      	bcc.n	8010c68 <xQueueGenericSendFromISR+0xcc>
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	2b02      	cmp	r3, #2
 8010c66:	d12c      	bne.n	8010cc2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010c72:	683a      	ldr	r2, [r7, #0]
 8010c74:	68b9      	ldr	r1, [r7, #8]
 8010c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c78:	f000 f99c 	bl	8010fb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010c7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c84:	d112      	bne.n	8010cac <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d016      	beq.n	8010cbc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c90:	3324      	adds	r3, #36	; 0x24
 8010c92:	4618      	mov	r0, r3
 8010c94:	f000 ff0e 	bl	8011ab4 <xTaskRemoveFromEventList>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d00e      	beq.n	8010cbc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00b      	beq.n	8010cbc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	e007      	b.n	8010cbc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010cac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	b25a      	sxtb	r2, r3
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010cc0:	e001      	b.n	8010cc6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8010cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010cd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3738      	adds	r7, #56	; 0x38
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b08c      	sub	sp, #48	; 0x30
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d10c      	bne.n	8010d10 <xQueueReceive+0x34>
	__asm volatile
 8010cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cfa:	b672      	cpsid	i
 8010cfc:	f383 8811 	msr	BASEPRI, r3
 8010d00:	f3bf 8f6f 	isb	sy
 8010d04:	f3bf 8f4f 	dsb	sy
 8010d08:	b662      	cpsie	i
 8010d0a:	623b      	str	r3, [r7, #32]
}
 8010d0c:	bf00      	nop
 8010d0e:	e7fe      	b.n	8010d0e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d103      	bne.n	8010d1e <xQueueReceive+0x42>
 8010d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d101      	bne.n	8010d22 <xQueueReceive+0x46>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	e000      	b.n	8010d24 <xQueueReceive+0x48>
 8010d22:	2300      	movs	r3, #0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d10c      	bne.n	8010d42 <xQueueReceive+0x66>
	__asm volatile
 8010d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2c:	b672      	cpsid	i
 8010d2e:	f383 8811 	msr	BASEPRI, r3
 8010d32:	f3bf 8f6f 	isb	sy
 8010d36:	f3bf 8f4f 	dsb	sy
 8010d3a:	b662      	cpsie	i
 8010d3c:	61fb      	str	r3, [r7, #28]
}
 8010d3e:	bf00      	nop
 8010d40:	e7fe      	b.n	8010d40 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d42:	f001 f87d 	bl	8011e40 <xTaskGetSchedulerState>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d102      	bne.n	8010d52 <xQueueReceive+0x76>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d101      	bne.n	8010d56 <xQueueReceive+0x7a>
 8010d52:	2301      	movs	r3, #1
 8010d54:	e000      	b.n	8010d58 <xQueueReceive+0x7c>
 8010d56:	2300      	movs	r3, #0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d10c      	bne.n	8010d76 <xQueueReceive+0x9a>
	__asm volatile
 8010d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d60:	b672      	cpsid	i
 8010d62:	f383 8811 	msr	BASEPRI, r3
 8010d66:	f3bf 8f6f 	isb	sy
 8010d6a:	f3bf 8f4f 	dsb	sy
 8010d6e:	b662      	cpsie	i
 8010d70:	61bb      	str	r3, [r7, #24]
}
 8010d72:	bf00      	nop
 8010d74:	e7fe      	b.n	8010d74 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d76:	f001 fa81 	bl	801227c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d01f      	beq.n	8010dc6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010d86:	68b9      	ldr	r1, [r7, #8]
 8010d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d8a:	f000 f97d 	bl	8011088 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d90:	1e5a      	subs	r2, r3, #1
 8010d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d98:	691b      	ldr	r3, [r3, #16]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00f      	beq.n	8010dbe <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da0:	3310      	adds	r3, #16
 8010da2:	4618      	mov	r0, r3
 8010da4:	f000 fe86 	bl	8011ab4 <xTaskRemoveFromEventList>
 8010da8:	4603      	mov	r3, r0
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d007      	beq.n	8010dbe <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010dae:	4b3d      	ldr	r3, [pc, #244]	; (8010ea4 <xQueueReceive+0x1c8>)
 8010db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010db4:	601a      	str	r2, [r3, #0]
 8010db6:	f3bf 8f4f 	dsb	sy
 8010dba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010dbe:	f001 fa91 	bl	80122e4 <vPortExitCritical>
				return pdPASS;
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e069      	b.n	8010e9a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d103      	bne.n	8010dd4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010dcc:	f001 fa8a 	bl	80122e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	e062      	b.n	8010e9a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d106      	bne.n	8010de8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010dda:	f107 0310 	add.w	r3, r7, #16
 8010dde:	4618      	mov	r0, r3
 8010de0:	f000 fecc 	bl	8011b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010de4:	2301      	movs	r3, #1
 8010de6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010de8:	f001 fa7c 	bl	80122e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010dec:	f000 fc32 	bl	8011654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010df0:	f001 fa44 	bl	801227c <vPortEnterCritical>
 8010df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010dfa:	b25b      	sxtb	r3, r3
 8010dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e00:	d103      	bne.n	8010e0a <xQueueReceive+0x12e>
 8010e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e04:	2200      	movs	r2, #0
 8010e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e10:	b25b      	sxtb	r3, r3
 8010e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e16:	d103      	bne.n	8010e20 <xQueueReceive+0x144>
 8010e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e20:	f001 fa60 	bl	80122e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e24:	1d3a      	adds	r2, r7, #4
 8010e26:	f107 0310 	add.w	r3, r7, #16
 8010e2a:	4611      	mov	r1, r2
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f000 febb 	bl	8011ba8 <xTaskCheckForTimeOut>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d123      	bne.n	8010e80 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e3a:	f000 f99d 	bl	8011178 <prvIsQueueEmpty>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d017      	beq.n	8010e74 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e46:	3324      	adds	r3, #36	; 0x24
 8010e48:	687a      	ldr	r2, [r7, #4]
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f000 fe0b 	bl	8011a68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e54:	f000 f93e 	bl	80110d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e58:	f000 fc0a 	bl	8011670 <xTaskResumeAll>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d189      	bne.n	8010d76 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8010e62:	4b10      	ldr	r3, [pc, #64]	; (8010ea4 <xQueueReceive+0x1c8>)
 8010e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e68:	601a      	str	r2, [r3, #0]
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	f3bf 8f6f 	isb	sy
 8010e72:	e780      	b.n	8010d76 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e76:	f000 f92d 	bl	80110d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e7a:	f000 fbf9 	bl	8011670 <xTaskResumeAll>
 8010e7e:	e77a      	b.n	8010d76 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e82:	f000 f927 	bl	80110d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e86:	f000 fbf3 	bl	8011670 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e8c:	f000 f974 	bl	8011178 <prvIsQueueEmpty>
 8010e90:	4603      	mov	r3, r0
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	f43f af6f 	beq.w	8010d76 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010e98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3730      	adds	r7, #48	; 0x30
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}
 8010ea2:	bf00      	nop
 8010ea4:	e000ed04 	.word	0xe000ed04

08010ea8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b08e      	sub	sp, #56	; 0x38
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	60f8      	str	r0, [r7, #12]
 8010eb0:	60b9      	str	r1, [r7, #8]
 8010eb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d10c      	bne.n	8010ed8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8010ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec2:	b672      	cpsid	i
 8010ec4:	f383 8811 	msr	BASEPRI, r3
 8010ec8:	f3bf 8f6f 	isb	sy
 8010ecc:	f3bf 8f4f 	dsb	sy
 8010ed0:	b662      	cpsie	i
 8010ed2:	623b      	str	r3, [r7, #32]
}
 8010ed4:	bf00      	nop
 8010ed6:	e7fe      	b.n	8010ed6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d103      	bne.n	8010ee6 <xQueueReceiveFromISR+0x3e>
 8010ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d101      	bne.n	8010eea <xQueueReceiveFromISR+0x42>
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	e000      	b.n	8010eec <xQueueReceiveFromISR+0x44>
 8010eea:	2300      	movs	r3, #0
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d10c      	bne.n	8010f0a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8010ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef4:	b672      	cpsid	i
 8010ef6:	f383 8811 	msr	BASEPRI, r3
 8010efa:	f3bf 8f6f 	isb	sy
 8010efe:	f3bf 8f4f 	dsb	sy
 8010f02:	b662      	cpsie	i
 8010f04:	61fb      	str	r3, [r7, #28]
}
 8010f06:	bf00      	nop
 8010f08:	e7fe      	b.n	8010f08 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f0a:	f001 fa9f 	bl	801244c <vPortValidateInterruptPriority>
	__asm volatile
 8010f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8010f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f16:	b672      	cpsid	i
 8010f18:	f383 8811 	msr	BASEPRI, r3
 8010f1c:	f3bf 8f6f 	isb	sy
 8010f20:	f3bf 8f4f 	dsb	sy
 8010f24:	b662      	cpsie	i
 8010f26:	61ba      	str	r2, [r7, #24]
 8010f28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010f2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d02f      	beq.n	8010f9a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f44:	68b9      	ldr	r1, [r7, #8]
 8010f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f48:	f000 f89e 	bl	8011088 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4e:	1e5a      	subs	r2, r3, #1
 8010f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f5c:	d112      	bne.n	8010f84 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f60:	691b      	ldr	r3, [r3, #16]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d016      	beq.n	8010f94 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f68:	3310      	adds	r3, #16
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f000 fda2 	bl	8011ab4 <xTaskRemoveFromEventList>
 8010f70:	4603      	mov	r3, r0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d00e      	beq.n	8010f94 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d00b      	beq.n	8010f94 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2201      	movs	r2, #1
 8010f80:	601a      	str	r2, [r3, #0]
 8010f82:	e007      	b.n	8010f94 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f88:	3301      	adds	r3, #1
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	b25a      	sxtb	r2, r3
 8010f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010f94:	2301      	movs	r3, #1
 8010f96:	637b      	str	r3, [r7, #52]	; 0x34
 8010f98:	e001      	b.n	8010f9e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8010f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	f383 8811 	msr	BASEPRI, r3
}
 8010fa8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3738      	adds	r7, #56	; 0x38
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b086      	sub	sp, #24
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d10d      	bne.n	8010fee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d14d      	bne.n	8011076 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	689b      	ldr	r3, [r3, #8]
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f000 ff4c 	bl	8011e7c <xTaskPriorityDisinherit>
 8010fe4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	609a      	str	r2, [r3, #8]
 8010fec:	e043      	b.n	8011076 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d119      	bne.n	8011028 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	6858      	ldr	r0, [r3, #4]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	68b9      	ldr	r1, [r7, #8]
 8011000:	f7ef f964 	bl	80002cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	685a      	ldr	r2, [r3, #4]
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801100c:	441a      	add	r2, r3
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	685a      	ldr	r2, [r3, #4]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	689b      	ldr	r3, [r3, #8]
 801101a:	429a      	cmp	r2, r3
 801101c:	d32b      	bcc.n	8011076 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	681a      	ldr	r2, [r3, #0]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	605a      	str	r2, [r3, #4]
 8011026:	e026      	b.n	8011076 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	68d8      	ldr	r0, [r3, #12]
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011030:	461a      	mov	r2, r3
 8011032:	68b9      	ldr	r1, [r7, #8]
 8011034:	f7ef f94a 	bl	80002cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	68da      	ldr	r2, [r3, #12]
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011040:	425b      	negs	r3, r3
 8011042:	441a      	add	r2, r3
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	68da      	ldr	r2, [r3, #12]
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	429a      	cmp	r2, r3
 8011052:	d207      	bcs.n	8011064 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	689a      	ldr	r2, [r3, #8]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801105c:	425b      	negs	r3, r3
 801105e:	441a      	add	r2, r3
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2b02      	cmp	r3, #2
 8011068:	d105      	bne.n	8011076 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d002      	beq.n	8011076 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	3b01      	subs	r3, #1
 8011074:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	1c5a      	adds	r2, r3, #1
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801107e:	697b      	ldr	r3, [r7, #20]
}
 8011080:	4618      	mov	r0, r3
 8011082:	3718      	adds	r7, #24
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b082      	sub	sp, #8
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011096:	2b00      	cmp	r3, #0
 8011098:	d018      	beq.n	80110cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	68da      	ldr	r2, [r3, #12]
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110a2:	441a      	add	r2, r3
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	68da      	ldr	r2, [r3, #12]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	689b      	ldr	r3, [r3, #8]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d303      	bcc.n	80110bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	68d9      	ldr	r1, [r3, #12]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110c4:	461a      	mov	r2, r3
 80110c6:	6838      	ldr	r0, [r7, #0]
 80110c8:	f7ef f900 	bl	80002cc <memcpy>
	}
}
 80110cc:	bf00      	nop
 80110ce:	3708      	adds	r7, #8
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b084      	sub	sp, #16
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80110dc:	f001 f8ce 	bl	801227c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110e8:	e011      	b.n	801110e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d012      	beq.n	8011118 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	3324      	adds	r3, #36	; 0x24
 80110f6:	4618      	mov	r0, r3
 80110f8:	f000 fcdc 	bl	8011ab4 <xTaskRemoveFromEventList>
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d001      	beq.n	8011106 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011102:	f000 fdb7 	bl	8011c74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011106:	7bfb      	ldrb	r3, [r7, #15]
 8011108:	3b01      	subs	r3, #1
 801110a:	b2db      	uxtb	r3, r3
 801110c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011112:	2b00      	cmp	r3, #0
 8011114:	dce9      	bgt.n	80110ea <prvUnlockQueue+0x16>
 8011116:	e000      	b.n	801111a <prvUnlockQueue+0x46>
					break;
 8011118:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	22ff      	movs	r2, #255	; 0xff
 801111e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011122:	f001 f8df 	bl	80122e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011126:	f001 f8a9 	bl	801227c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011130:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011132:	e011      	b.n	8011158 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	691b      	ldr	r3, [r3, #16]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d012      	beq.n	8011162 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	3310      	adds	r3, #16
 8011140:	4618      	mov	r0, r3
 8011142:	f000 fcb7 	bl	8011ab4 <xTaskRemoveFromEventList>
 8011146:	4603      	mov	r3, r0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d001      	beq.n	8011150 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801114c:	f000 fd92 	bl	8011c74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011150:	7bbb      	ldrb	r3, [r7, #14]
 8011152:	3b01      	subs	r3, #1
 8011154:	b2db      	uxtb	r3, r3
 8011156:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801115c:	2b00      	cmp	r3, #0
 801115e:	dce9      	bgt.n	8011134 <prvUnlockQueue+0x60>
 8011160:	e000      	b.n	8011164 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011162:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	22ff      	movs	r2, #255	; 0xff
 8011168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801116c:	f001 f8ba 	bl	80122e4 <vPortExitCritical>
}
 8011170:	bf00      	nop
 8011172:	3710      	adds	r7, #16
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011180:	f001 f87c 	bl	801227c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011188:	2b00      	cmp	r3, #0
 801118a:	d102      	bne.n	8011192 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801118c:	2301      	movs	r3, #1
 801118e:	60fb      	str	r3, [r7, #12]
 8011190:	e001      	b.n	8011196 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011192:	2300      	movs	r3, #0
 8011194:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011196:	f001 f8a5 	bl	80122e4 <vPortExitCritical>

	return xReturn;
 801119a:	68fb      	ldr	r3, [r7, #12]
}
 801119c:	4618      	mov	r0, r3
 801119e:	3710      	adds	r7, #16
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111ac:	f001 f866 	bl	801227c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d102      	bne.n	80111c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80111bc:	2301      	movs	r3, #1
 80111be:	60fb      	str	r3, [r7, #12]
 80111c0:	e001      	b.n	80111c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80111c2:	2300      	movs	r3, #0
 80111c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80111c6:	f001 f88d 	bl	80122e4 <vPortExitCritical>

	return xReturn;
 80111ca:	68fb      	ldr	r3, [r7, #12]
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3710      	adds	r7, #16
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b08e      	sub	sp, #56	; 0x38
 80111d8:	af04      	add	r7, sp, #16
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
 80111e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80111e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d10c      	bne.n	8011202 <xTaskCreateStatic+0x2e>
	__asm volatile
 80111e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ec:	b672      	cpsid	i
 80111ee:	f383 8811 	msr	BASEPRI, r3
 80111f2:	f3bf 8f6f 	isb	sy
 80111f6:	f3bf 8f4f 	dsb	sy
 80111fa:	b662      	cpsie	i
 80111fc:	623b      	str	r3, [r7, #32]
}
 80111fe:	bf00      	nop
 8011200:	e7fe      	b.n	8011200 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011204:	2b00      	cmp	r3, #0
 8011206:	d10c      	bne.n	8011222 <xTaskCreateStatic+0x4e>
	__asm volatile
 8011208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801120c:	b672      	cpsid	i
 801120e:	f383 8811 	msr	BASEPRI, r3
 8011212:	f3bf 8f6f 	isb	sy
 8011216:	f3bf 8f4f 	dsb	sy
 801121a:	b662      	cpsie	i
 801121c:	61fb      	str	r3, [r7, #28]
}
 801121e:	bf00      	nop
 8011220:	e7fe      	b.n	8011220 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011222:	2358      	movs	r3, #88	; 0x58
 8011224:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	2b58      	cmp	r3, #88	; 0x58
 801122a:	d00c      	beq.n	8011246 <xTaskCreateStatic+0x72>
	__asm volatile
 801122c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011230:	b672      	cpsid	i
 8011232:	f383 8811 	msr	BASEPRI, r3
 8011236:	f3bf 8f6f 	isb	sy
 801123a:	f3bf 8f4f 	dsb	sy
 801123e:	b662      	cpsie	i
 8011240:	61bb      	str	r3, [r7, #24]
}
 8011242:	bf00      	nop
 8011244:	e7fe      	b.n	8011244 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011246:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124a:	2b00      	cmp	r3, #0
 801124c:	d01e      	beq.n	801128c <xTaskCreateStatic+0xb8>
 801124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011250:	2b00      	cmp	r3, #0
 8011252:	d01b      	beq.n	801128c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011256:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801125c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011260:	2202      	movs	r2, #2
 8011262:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011266:	2300      	movs	r3, #0
 8011268:	9303      	str	r3, [sp, #12]
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	9302      	str	r3, [sp, #8]
 801126e:	f107 0314 	add.w	r3, r7, #20
 8011272:	9301      	str	r3, [sp, #4]
 8011274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011276:	9300      	str	r3, [sp, #0]
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	68b9      	ldr	r1, [r7, #8]
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f000 f850 	bl	8011324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011286:	f000 f8e1 	bl	801144c <prvAddNewTaskToReadyList>
 801128a:	e001      	b.n	8011290 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801128c:	2300      	movs	r3, #0
 801128e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011290:	697b      	ldr	r3, [r7, #20]
	}
 8011292:	4618      	mov	r0, r3
 8011294:	3728      	adds	r7, #40	; 0x28
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}

0801129a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801129a:	b580      	push	{r7, lr}
 801129c:	b08c      	sub	sp, #48	; 0x30
 801129e:	af04      	add	r7, sp, #16
 80112a0:	60f8      	str	r0, [r7, #12]
 80112a2:	60b9      	str	r1, [r7, #8]
 80112a4:	603b      	str	r3, [r7, #0]
 80112a6:	4613      	mov	r3, r2
 80112a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80112aa:	88fb      	ldrh	r3, [r7, #6]
 80112ac:	009b      	lsls	r3, r3, #2
 80112ae:	4618      	mov	r0, r3
 80112b0:	f001 f910 	bl	80124d4 <pvPortMalloc>
 80112b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d00e      	beq.n	80112da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80112bc:	2058      	movs	r0, #88	; 0x58
 80112be:	f001 f909 	bl	80124d4 <pvPortMalloc>
 80112c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80112c4:	69fb      	ldr	r3, [r7, #28]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d003      	beq.n	80112d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80112ca:	69fb      	ldr	r3, [r7, #28]
 80112cc:	697a      	ldr	r2, [r7, #20]
 80112ce:	631a      	str	r2, [r3, #48]	; 0x30
 80112d0:	e005      	b.n	80112de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80112d2:	6978      	ldr	r0, [r7, #20]
 80112d4:	f001 f9ce 	bl	8012674 <vPortFree>
 80112d8:	e001      	b.n	80112de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80112da:	2300      	movs	r3, #0
 80112dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80112de:	69fb      	ldr	r3, [r7, #28]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d017      	beq.n	8011314 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	2200      	movs	r2, #0
 80112e8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80112ec:	88fa      	ldrh	r2, [r7, #6]
 80112ee:	2300      	movs	r3, #0
 80112f0:	9303      	str	r3, [sp, #12]
 80112f2:	69fb      	ldr	r3, [r7, #28]
 80112f4:	9302      	str	r3, [sp, #8]
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	9301      	str	r3, [sp, #4]
 80112fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fc:	9300      	str	r3, [sp, #0]
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	68b9      	ldr	r1, [r7, #8]
 8011302:	68f8      	ldr	r0, [r7, #12]
 8011304:	f000 f80e 	bl	8011324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011308:	69f8      	ldr	r0, [r7, #28]
 801130a:	f000 f89f 	bl	801144c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801130e:	2301      	movs	r3, #1
 8011310:	61bb      	str	r3, [r7, #24]
 8011312:	e002      	b.n	801131a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011318:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801131a:	69bb      	ldr	r3, [r7, #24]
	}
 801131c:	4618      	mov	r0, r3
 801131e:	3720      	adds	r7, #32
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b088      	sub	sp, #32
 8011328:	af00      	add	r7, sp, #0
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	60b9      	str	r1, [r7, #8]
 801132e:	607a      	str	r2, [r7, #4]
 8011330:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011334:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	461a      	mov	r2, r3
 801133c:	21a5      	movs	r1, #165	; 0xa5
 801133e:	f7ef f85f 	bl	8000400 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011346:	6879      	ldr	r1, [r7, #4]
 8011348:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801134c:	440b      	add	r3, r1
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	4413      	add	r3, r2
 8011352:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	f023 0307 	bic.w	r3, r3, #7
 801135a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801135c:	69bb      	ldr	r3, [r7, #24]
 801135e:	f003 0307 	and.w	r3, r3, #7
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00c      	beq.n	8011380 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8011366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801136a:	b672      	cpsid	i
 801136c:	f383 8811 	msr	BASEPRI, r3
 8011370:	f3bf 8f6f 	isb	sy
 8011374:	f3bf 8f4f 	dsb	sy
 8011378:	b662      	cpsie	i
 801137a:	617b      	str	r3, [r7, #20]
}
 801137c:	bf00      	nop
 801137e:	e7fe      	b.n	801137e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d01f      	beq.n	80113c6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011386:	2300      	movs	r3, #0
 8011388:	61fb      	str	r3, [r7, #28]
 801138a:	e012      	b.n	80113b2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801138c:	68ba      	ldr	r2, [r7, #8]
 801138e:	69fb      	ldr	r3, [r7, #28]
 8011390:	4413      	add	r3, r2
 8011392:	7819      	ldrb	r1, [r3, #0]
 8011394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011396:	69fb      	ldr	r3, [r7, #28]
 8011398:	4413      	add	r3, r2
 801139a:	3334      	adds	r3, #52	; 0x34
 801139c:	460a      	mov	r2, r1
 801139e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80113a0:	68ba      	ldr	r2, [r7, #8]
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	4413      	add	r3, r2
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d006      	beq.n	80113ba <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80113ac:	69fb      	ldr	r3, [r7, #28]
 80113ae:	3301      	adds	r3, #1
 80113b0:	61fb      	str	r3, [r7, #28]
 80113b2:	69fb      	ldr	r3, [r7, #28]
 80113b4:	2b0f      	cmp	r3, #15
 80113b6:	d9e9      	bls.n	801138c <prvInitialiseNewTask+0x68>
 80113b8:	e000      	b.n	80113bc <prvInitialiseNewTask+0x98>
			{
				break;
 80113ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80113bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113be:	2200      	movs	r2, #0
 80113c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80113c4:	e003      	b.n	80113ce <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80113c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c8:	2200      	movs	r2, #0
 80113ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80113ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d0:	2b06      	cmp	r3, #6
 80113d2:	d901      	bls.n	80113d8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80113d4:	2306      	movs	r3, #6
 80113d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80113d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80113de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80113e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e6:	2200      	movs	r2, #0
 80113e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80113ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ec:	3304      	adds	r3, #4
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7ff f8ec 	bl	80105cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80113f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f6:	3318      	adds	r3, #24
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7ff f8e7 	bl	80105cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80113fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011402:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011406:	f1c3 0207 	rsb	r2, r3, #7
 801140a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801140c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011412:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8011414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011416:	2200      	movs	r2, #0
 8011418:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801141c:	2200      	movs	r2, #0
 801141e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011422:	2200      	movs	r2, #0
 8011424:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011428:	683a      	ldr	r2, [r7, #0]
 801142a:	68f9      	ldr	r1, [r7, #12]
 801142c:	69b8      	ldr	r0, [r7, #24]
 801142e:	f000 fe15 	bl	801205c <pxPortInitialiseStack>
 8011432:	4602      	mov	r2, r0
 8011434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011436:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143a:	2b00      	cmp	r3, #0
 801143c:	d002      	beq.n	8011444 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801143e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011442:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011444:	bf00      	nop
 8011446:	3720      	adds	r7, #32
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b082      	sub	sp, #8
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011454:	f000 ff12 	bl	801227c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011458:	4b2a      	ldr	r3, [pc, #168]	; (8011504 <prvAddNewTaskToReadyList+0xb8>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	3301      	adds	r3, #1
 801145e:	4a29      	ldr	r2, [pc, #164]	; (8011504 <prvAddNewTaskToReadyList+0xb8>)
 8011460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011462:	4b29      	ldr	r3, [pc, #164]	; (8011508 <prvAddNewTaskToReadyList+0xbc>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d109      	bne.n	801147e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801146a:	4a27      	ldr	r2, [pc, #156]	; (8011508 <prvAddNewTaskToReadyList+0xbc>)
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011470:	4b24      	ldr	r3, [pc, #144]	; (8011504 <prvAddNewTaskToReadyList+0xb8>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	2b01      	cmp	r3, #1
 8011476:	d110      	bne.n	801149a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011478:	f000 fc22 	bl	8011cc0 <prvInitialiseTaskLists>
 801147c:	e00d      	b.n	801149a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801147e:	4b23      	ldr	r3, [pc, #140]	; (801150c <prvAddNewTaskToReadyList+0xc0>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d109      	bne.n	801149a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011486:	4b20      	ldr	r3, [pc, #128]	; (8011508 <prvAddNewTaskToReadyList+0xbc>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011490:	429a      	cmp	r2, r3
 8011492:	d802      	bhi.n	801149a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011494:	4a1c      	ldr	r2, [pc, #112]	; (8011508 <prvAddNewTaskToReadyList+0xbc>)
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801149a:	4b1d      	ldr	r3, [pc, #116]	; (8011510 <prvAddNewTaskToReadyList+0xc4>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	3301      	adds	r3, #1
 80114a0:	4a1b      	ldr	r2, [pc, #108]	; (8011510 <prvAddNewTaskToReadyList+0xc4>)
 80114a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a8:	2201      	movs	r2, #1
 80114aa:	409a      	lsls	r2, r3
 80114ac:	4b19      	ldr	r3, [pc, #100]	; (8011514 <prvAddNewTaskToReadyList+0xc8>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	4313      	orrs	r3, r2
 80114b2:	4a18      	ldr	r2, [pc, #96]	; (8011514 <prvAddNewTaskToReadyList+0xc8>)
 80114b4:	6013      	str	r3, [r2, #0]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ba:	4613      	mov	r3, r2
 80114bc:	009b      	lsls	r3, r3, #2
 80114be:	4413      	add	r3, r2
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	4a15      	ldr	r2, [pc, #84]	; (8011518 <prvAddNewTaskToReadyList+0xcc>)
 80114c4:	441a      	add	r2, r3
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	3304      	adds	r3, #4
 80114ca:	4619      	mov	r1, r3
 80114cc:	4610      	mov	r0, r2
 80114ce:	f7ff f88a 	bl	80105e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80114d2:	f000 ff07 	bl	80122e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80114d6:	4b0d      	ldr	r3, [pc, #52]	; (801150c <prvAddNewTaskToReadyList+0xc0>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d00e      	beq.n	80114fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80114de:	4b0a      	ldr	r3, [pc, #40]	; (8011508 <prvAddNewTaskToReadyList+0xbc>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d207      	bcs.n	80114fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80114ec:	4b0b      	ldr	r3, [pc, #44]	; (801151c <prvAddNewTaskToReadyList+0xd0>)
 80114ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114f2:	601a      	str	r2, [r3, #0]
 80114f4:	f3bf 8f4f 	dsb	sy
 80114f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114fc:	bf00      	nop
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	20000434 	.word	0x20000434
 8011508:	20000334 	.word	0x20000334
 801150c:	20000440 	.word	0x20000440
 8011510:	20000450 	.word	0x20000450
 8011514:	2000043c 	.word	0x2000043c
 8011518:	20000338 	.word	0x20000338
 801151c:	e000ed04 	.word	0xe000ed04

08011520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011528:	2300      	movs	r3, #0
 801152a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d019      	beq.n	8011566 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011532:	4b14      	ldr	r3, [pc, #80]	; (8011584 <vTaskDelay+0x64>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d00c      	beq.n	8011554 <vTaskDelay+0x34>
	__asm volatile
 801153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153e:	b672      	cpsid	i
 8011540:	f383 8811 	msr	BASEPRI, r3
 8011544:	f3bf 8f6f 	isb	sy
 8011548:	f3bf 8f4f 	dsb	sy
 801154c:	b662      	cpsie	i
 801154e:	60bb      	str	r3, [r7, #8]
}
 8011550:	bf00      	nop
 8011552:	e7fe      	b.n	8011552 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011554:	f000 f87e 	bl	8011654 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011558:	2100      	movs	r1, #0
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f000 fd18 	bl	8011f90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011560:	f000 f886 	bl	8011670 <xTaskResumeAll>
 8011564:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d107      	bne.n	801157c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 801156c:	4b06      	ldr	r3, [pc, #24]	; (8011588 <vTaskDelay+0x68>)
 801156e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011572:	601a      	str	r2, [r3, #0]
 8011574:	f3bf 8f4f 	dsb	sy
 8011578:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801157c:	bf00      	nop
 801157e:	3710      	adds	r7, #16
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	2000045c 	.word	0x2000045c
 8011588:	e000ed04 	.word	0xe000ed04

0801158c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b08a      	sub	sp, #40	; 0x28
 8011590:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011592:	2300      	movs	r3, #0
 8011594:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011596:	2300      	movs	r3, #0
 8011598:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801159a:	463a      	mov	r2, r7
 801159c:	1d39      	adds	r1, r7, #4
 801159e:	f107 0308 	add.w	r3, r7, #8
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7ef f9e2 	bl	800096c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80115a8:	6839      	ldr	r1, [r7, #0]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	68ba      	ldr	r2, [r7, #8]
 80115ae:	9202      	str	r2, [sp, #8]
 80115b0:	9301      	str	r3, [sp, #4]
 80115b2:	2300      	movs	r3, #0
 80115b4:	9300      	str	r3, [sp, #0]
 80115b6:	2300      	movs	r3, #0
 80115b8:	460a      	mov	r2, r1
 80115ba:	4920      	ldr	r1, [pc, #128]	; (801163c <vTaskStartScheduler+0xb0>)
 80115bc:	4820      	ldr	r0, [pc, #128]	; (8011640 <vTaskStartScheduler+0xb4>)
 80115be:	f7ff fe09 	bl	80111d4 <xTaskCreateStatic>
 80115c2:	4603      	mov	r3, r0
 80115c4:	4a1f      	ldr	r2, [pc, #124]	; (8011644 <vTaskStartScheduler+0xb8>)
 80115c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80115c8:	4b1e      	ldr	r3, [pc, #120]	; (8011644 <vTaskStartScheduler+0xb8>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d002      	beq.n	80115d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80115d0:	2301      	movs	r3, #1
 80115d2:	617b      	str	r3, [r7, #20]
 80115d4:	e001      	b.n	80115da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80115d6:	2300      	movs	r3, #0
 80115d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d118      	bne.n	8011612 <vTaskStartScheduler+0x86>
	__asm volatile
 80115e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e4:	b672      	cpsid	i
 80115e6:	f383 8811 	msr	BASEPRI, r3
 80115ea:	f3bf 8f6f 	isb	sy
 80115ee:	f3bf 8f4f 	dsb	sy
 80115f2:	b662      	cpsie	i
 80115f4:	613b      	str	r3, [r7, #16]
}
 80115f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80115f8:	4b13      	ldr	r3, [pc, #76]	; (8011648 <vTaskStartScheduler+0xbc>)
 80115fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011600:	4b12      	ldr	r3, [pc, #72]	; (801164c <vTaskStartScheduler+0xc0>)
 8011602:	2201      	movs	r2, #1
 8011604:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011606:	4b12      	ldr	r3, [pc, #72]	; (8011650 <vTaskStartScheduler+0xc4>)
 8011608:	2200      	movs	r2, #0
 801160a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801160c:	f000 fdb8 	bl	8012180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011610:	e010      	b.n	8011634 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011618:	d10c      	bne.n	8011634 <vTaskStartScheduler+0xa8>
	__asm volatile
 801161a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161e:	b672      	cpsid	i
 8011620:	f383 8811 	msr	BASEPRI, r3
 8011624:	f3bf 8f6f 	isb	sy
 8011628:	f3bf 8f4f 	dsb	sy
 801162c:	b662      	cpsie	i
 801162e:	60fb      	str	r3, [r7, #12]
}
 8011630:	bf00      	nop
 8011632:	e7fe      	b.n	8011632 <vTaskStartScheduler+0xa6>
}
 8011634:	bf00      	nop
 8011636:	3718      	adds	r7, #24
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	08012f20 	.word	0x08012f20
 8011640:	08011c8d 	.word	0x08011c8d
 8011644:	20000458 	.word	0x20000458
 8011648:	20000454 	.word	0x20000454
 801164c:	20000440 	.word	0x20000440
 8011650:	20000438 	.word	0x20000438

08011654 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011654:	b480      	push	{r7}
 8011656:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011658:	4b04      	ldr	r3, [pc, #16]	; (801166c <vTaskSuspendAll+0x18>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	3301      	adds	r3, #1
 801165e:	4a03      	ldr	r2, [pc, #12]	; (801166c <vTaskSuspendAll+0x18>)
 8011660:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011662:	bf00      	nop
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr
 801166c:	2000045c 	.word	0x2000045c

08011670 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011676:	2300      	movs	r3, #0
 8011678:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801167a:	2300      	movs	r3, #0
 801167c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801167e:	4b42      	ldr	r3, [pc, #264]	; (8011788 <xTaskResumeAll+0x118>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d10c      	bne.n	80116a0 <xTaskResumeAll+0x30>
	__asm volatile
 8011686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801168a:	b672      	cpsid	i
 801168c:	f383 8811 	msr	BASEPRI, r3
 8011690:	f3bf 8f6f 	isb	sy
 8011694:	f3bf 8f4f 	dsb	sy
 8011698:	b662      	cpsie	i
 801169a:	603b      	str	r3, [r7, #0]
}
 801169c:	bf00      	nop
 801169e:	e7fe      	b.n	801169e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80116a0:	f000 fdec 	bl	801227c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80116a4:	4b38      	ldr	r3, [pc, #224]	; (8011788 <xTaskResumeAll+0x118>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	3b01      	subs	r3, #1
 80116aa:	4a37      	ldr	r2, [pc, #220]	; (8011788 <xTaskResumeAll+0x118>)
 80116ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116ae:	4b36      	ldr	r3, [pc, #216]	; (8011788 <xTaskResumeAll+0x118>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d161      	bne.n	801177a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80116b6:	4b35      	ldr	r3, [pc, #212]	; (801178c <xTaskResumeAll+0x11c>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d05d      	beq.n	801177a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116be:	e02e      	b.n	801171e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116c0:	4b33      	ldr	r3, [pc, #204]	; (8011790 <xTaskResumeAll+0x120>)
 80116c2:	68db      	ldr	r3, [r3, #12]
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	3318      	adds	r3, #24
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7fe ffe7 	bl	80106a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	3304      	adds	r3, #4
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7fe ffe2 	bl	80106a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e0:	2201      	movs	r2, #1
 80116e2:	409a      	lsls	r2, r3
 80116e4:	4b2b      	ldr	r3, [pc, #172]	; (8011794 <xTaskResumeAll+0x124>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	4313      	orrs	r3, r2
 80116ea:	4a2a      	ldr	r2, [pc, #168]	; (8011794 <xTaskResumeAll+0x124>)
 80116ec:	6013      	str	r3, [r2, #0]
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116f2:	4613      	mov	r3, r2
 80116f4:	009b      	lsls	r3, r3, #2
 80116f6:	4413      	add	r3, r2
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	4a27      	ldr	r2, [pc, #156]	; (8011798 <xTaskResumeAll+0x128>)
 80116fc:	441a      	add	r2, r3
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	3304      	adds	r3, #4
 8011702:	4619      	mov	r1, r3
 8011704:	4610      	mov	r0, r2
 8011706:	f7fe ff6e 	bl	80105e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801170e:	4b23      	ldr	r3, [pc, #140]	; (801179c <xTaskResumeAll+0x12c>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011714:	429a      	cmp	r2, r3
 8011716:	d302      	bcc.n	801171e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011718:	4b21      	ldr	r3, [pc, #132]	; (80117a0 <xTaskResumeAll+0x130>)
 801171a:	2201      	movs	r2, #1
 801171c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801171e:	4b1c      	ldr	r3, [pc, #112]	; (8011790 <xTaskResumeAll+0x120>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d1cc      	bne.n	80116c0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d001      	beq.n	8011730 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801172c:	f000 fb68 	bl	8011e00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011730:	4b1c      	ldr	r3, [pc, #112]	; (80117a4 <xTaskResumeAll+0x134>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d010      	beq.n	801175e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801173c:	f000 f858 	bl	80117f0 <xTaskIncrementTick>
 8011740:	4603      	mov	r3, r0
 8011742:	2b00      	cmp	r3, #0
 8011744:	d002      	beq.n	801174c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011746:	4b16      	ldr	r3, [pc, #88]	; (80117a0 <xTaskResumeAll+0x130>)
 8011748:	2201      	movs	r2, #1
 801174a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	3b01      	subs	r3, #1
 8011750:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d1f1      	bne.n	801173c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8011758:	4b12      	ldr	r3, [pc, #72]	; (80117a4 <xTaskResumeAll+0x134>)
 801175a:	2200      	movs	r2, #0
 801175c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801175e:	4b10      	ldr	r3, [pc, #64]	; (80117a0 <xTaskResumeAll+0x130>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d009      	beq.n	801177a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011766:	2301      	movs	r3, #1
 8011768:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801176a:	4b0f      	ldr	r3, [pc, #60]	; (80117a8 <xTaskResumeAll+0x138>)
 801176c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011770:	601a      	str	r2, [r3, #0]
 8011772:	f3bf 8f4f 	dsb	sy
 8011776:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801177a:	f000 fdb3 	bl	80122e4 <vPortExitCritical>

	return xAlreadyYielded;
 801177e:	68bb      	ldr	r3, [r7, #8]
}
 8011780:	4618      	mov	r0, r3
 8011782:	3710      	adds	r7, #16
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}
 8011788:	2000045c 	.word	0x2000045c
 801178c:	20000434 	.word	0x20000434
 8011790:	200003f4 	.word	0x200003f4
 8011794:	2000043c 	.word	0x2000043c
 8011798:	20000338 	.word	0x20000338
 801179c:	20000334 	.word	0x20000334
 80117a0:	20000448 	.word	0x20000448
 80117a4:	20000444 	.word	0x20000444
 80117a8:	e000ed04 	.word	0xe000ed04

080117ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80117ac:	b480      	push	{r7}
 80117ae:	b083      	sub	sp, #12
 80117b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80117b2:	4b05      	ldr	r3, [pc, #20]	; (80117c8 <xTaskGetTickCount+0x1c>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80117b8:	687b      	ldr	r3, [r7, #4]
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	370c      	adds	r7, #12
 80117be:	46bd      	mov	sp, r7
 80117c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c4:	4770      	bx	lr
 80117c6:	bf00      	nop
 80117c8:	20000438 	.word	0x20000438

080117cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117d2:	f000 fe3b 	bl	801244c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80117d6:	2300      	movs	r3, #0
 80117d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80117da:	4b04      	ldr	r3, [pc, #16]	; (80117ec <xTaskGetTickCountFromISR+0x20>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80117e0:	683b      	ldr	r3, [r7, #0]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3708      	adds	r7, #8
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	20000438 	.word	0x20000438

080117f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b086      	sub	sp, #24
 80117f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80117f6:	2300      	movs	r3, #0
 80117f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117fa:	4b4f      	ldr	r3, [pc, #316]	; (8011938 <xTaskIncrementTick+0x148>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	f040 808a 	bne.w	8011918 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011804:	4b4d      	ldr	r3, [pc, #308]	; (801193c <xTaskIncrementTick+0x14c>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	3301      	adds	r3, #1
 801180a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801180c:	4a4b      	ldr	r2, [pc, #300]	; (801193c <xTaskIncrementTick+0x14c>)
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d122      	bne.n	801185e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8011818:	4b49      	ldr	r3, [pc, #292]	; (8011940 <xTaskIncrementTick+0x150>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d00c      	beq.n	801183c <xTaskIncrementTick+0x4c>
	__asm volatile
 8011822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011826:	b672      	cpsid	i
 8011828:	f383 8811 	msr	BASEPRI, r3
 801182c:	f3bf 8f6f 	isb	sy
 8011830:	f3bf 8f4f 	dsb	sy
 8011834:	b662      	cpsie	i
 8011836:	603b      	str	r3, [r7, #0]
}
 8011838:	bf00      	nop
 801183a:	e7fe      	b.n	801183a <xTaskIncrementTick+0x4a>
 801183c:	4b40      	ldr	r3, [pc, #256]	; (8011940 <xTaskIncrementTick+0x150>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	60fb      	str	r3, [r7, #12]
 8011842:	4b40      	ldr	r3, [pc, #256]	; (8011944 <xTaskIncrementTick+0x154>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	4a3e      	ldr	r2, [pc, #248]	; (8011940 <xTaskIncrementTick+0x150>)
 8011848:	6013      	str	r3, [r2, #0]
 801184a:	4a3e      	ldr	r2, [pc, #248]	; (8011944 <xTaskIncrementTick+0x154>)
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	6013      	str	r3, [r2, #0]
 8011850:	4b3d      	ldr	r3, [pc, #244]	; (8011948 <xTaskIncrementTick+0x158>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	3301      	adds	r3, #1
 8011856:	4a3c      	ldr	r2, [pc, #240]	; (8011948 <xTaskIncrementTick+0x158>)
 8011858:	6013      	str	r3, [r2, #0]
 801185a:	f000 fad1 	bl	8011e00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801185e:	4b3b      	ldr	r3, [pc, #236]	; (801194c <xTaskIncrementTick+0x15c>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	693a      	ldr	r2, [r7, #16]
 8011864:	429a      	cmp	r2, r3
 8011866:	d348      	bcc.n	80118fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011868:	4b35      	ldr	r3, [pc, #212]	; (8011940 <xTaskIncrementTick+0x150>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d104      	bne.n	801187c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011872:	4b36      	ldr	r3, [pc, #216]	; (801194c <xTaskIncrementTick+0x15c>)
 8011874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011878:	601a      	str	r2, [r3, #0]
					break;
 801187a:	e03e      	b.n	80118fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801187c:	4b30      	ldr	r3, [pc, #192]	; (8011940 <xTaskIncrementTick+0x150>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	68db      	ldr	r3, [r3, #12]
 8011882:	68db      	ldr	r3, [r3, #12]
 8011884:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801188c:	693a      	ldr	r2, [r7, #16]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	429a      	cmp	r2, r3
 8011892:	d203      	bcs.n	801189c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011894:	4a2d      	ldr	r2, [pc, #180]	; (801194c <xTaskIncrementTick+0x15c>)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801189a:	e02e      	b.n	80118fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	3304      	adds	r3, #4
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fe fefd 	bl	80106a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d004      	beq.n	80118b8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	3318      	adds	r3, #24
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fe fef4 	bl	80106a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118bc:	2201      	movs	r2, #1
 80118be:	409a      	lsls	r2, r3
 80118c0:	4b23      	ldr	r3, [pc, #140]	; (8011950 <xTaskIncrementTick+0x160>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	4313      	orrs	r3, r2
 80118c6:	4a22      	ldr	r2, [pc, #136]	; (8011950 <xTaskIncrementTick+0x160>)
 80118c8:	6013      	str	r3, [r2, #0]
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ce:	4613      	mov	r3, r2
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	4413      	add	r3, r2
 80118d4:	009b      	lsls	r3, r3, #2
 80118d6:	4a1f      	ldr	r2, [pc, #124]	; (8011954 <xTaskIncrementTick+0x164>)
 80118d8:	441a      	add	r2, r3
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	3304      	adds	r3, #4
 80118de:	4619      	mov	r1, r3
 80118e0:	4610      	mov	r0, r2
 80118e2:	f7fe fe80 	bl	80105e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ea:	4b1b      	ldr	r3, [pc, #108]	; (8011958 <xTaskIncrementTick+0x168>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d3b9      	bcc.n	8011868 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80118f4:	2301      	movs	r3, #1
 80118f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118f8:	e7b6      	b.n	8011868 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80118fa:	4b17      	ldr	r3, [pc, #92]	; (8011958 <xTaskIncrementTick+0x168>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011900:	4914      	ldr	r1, [pc, #80]	; (8011954 <xTaskIncrementTick+0x164>)
 8011902:	4613      	mov	r3, r2
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	4413      	add	r3, r2
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	440b      	add	r3, r1
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b01      	cmp	r3, #1
 8011910:	d907      	bls.n	8011922 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8011912:	2301      	movs	r3, #1
 8011914:	617b      	str	r3, [r7, #20]
 8011916:	e004      	b.n	8011922 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011918:	4b10      	ldr	r3, [pc, #64]	; (801195c <xTaskIncrementTick+0x16c>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	3301      	adds	r3, #1
 801191e:	4a0f      	ldr	r2, [pc, #60]	; (801195c <xTaskIncrementTick+0x16c>)
 8011920:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011922:	4b0f      	ldr	r3, [pc, #60]	; (8011960 <xTaskIncrementTick+0x170>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d001      	beq.n	801192e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801192a:	2301      	movs	r3, #1
 801192c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801192e:	697b      	ldr	r3, [r7, #20]
}
 8011930:	4618      	mov	r0, r3
 8011932:	3718      	adds	r7, #24
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	2000045c 	.word	0x2000045c
 801193c:	20000438 	.word	0x20000438
 8011940:	200003ec 	.word	0x200003ec
 8011944:	200003f0 	.word	0x200003f0
 8011948:	2000044c 	.word	0x2000044c
 801194c:	20000454 	.word	0x20000454
 8011950:	2000043c 	.word	0x2000043c
 8011954:	20000338 	.word	0x20000338
 8011958:	20000334 	.word	0x20000334
 801195c:	20000444 	.word	0x20000444
 8011960:	20000448 	.word	0x20000448

08011964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b088      	sub	sp, #32
 8011968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801196a:	4b3a      	ldr	r3, [pc, #232]	; (8011a54 <vTaskSwitchContext+0xf0>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d003      	beq.n	801197a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011972:	4b39      	ldr	r3, [pc, #228]	; (8011a58 <vTaskSwitchContext+0xf4>)
 8011974:	2201      	movs	r2, #1
 8011976:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011978:	e068      	b.n	8011a4c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 801197a:	4b37      	ldr	r3, [pc, #220]	; (8011a58 <vTaskSwitchContext+0xf4>)
 801197c:	2200      	movs	r2, #0
 801197e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011980:	4b36      	ldr	r3, [pc, #216]	; (8011a5c <vTaskSwitchContext+0xf8>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011986:	61fb      	str	r3, [r7, #28]
 8011988:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801198c:	61bb      	str	r3, [r7, #24]
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	69ba      	ldr	r2, [r7, #24]
 8011994:	429a      	cmp	r2, r3
 8011996:	d111      	bne.n	80119bc <vTaskSwitchContext+0x58>
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	3304      	adds	r3, #4
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	69ba      	ldr	r2, [r7, #24]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d10b      	bne.n	80119bc <vTaskSwitchContext+0x58>
 80119a4:	69fb      	ldr	r3, [r7, #28]
 80119a6:	3308      	adds	r3, #8
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	69ba      	ldr	r2, [r7, #24]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d105      	bne.n	80119bc <vTaskSwitchContext+0x58>
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	330c      	adds	r3, #12
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	69ba      	ldr	r2, [r7, #24]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d008      	beq.n	80119ce <vTaskSwitchContext+0x6a>
 80119bc:	4b27      	ldr	r3, [pc, #156]	; (8011a5c <vTaskSwitchContext+0xf8>)
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	4b26      	ldr	r3, [pc, #152]	; (8011a5c <vTaskSwitchContext+0xf8>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	3334      	adds	r3, #52	; 0x34
 80119c6:	4619      	mov	r1, r3
 80119c8:	4610      	mov	r0, r2
 80119ca:	f7ee ffbc 	bl	8000946 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119ce:	4b24      	ldr	r3, [pc, #144]	; (8011a60 <vTaskSwitchContext+0xfc>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	fab3 f383 	clz	r3, r3
 80119da:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80119dc:	7afb      	ldrb	r3, [r7, #11]
 80119de:	f1c3 031f 	rsb	r3, r3, #31
 80119e2:	617b      	str	r3, [r7, #20]
 80119e4:	491f      	ldr	r1, [pc, #124]	; (8011a64 <vTaskSwitchContext+0x100>)
 80119e6:	697a      	ldr	r2, [r7, #20]
 80119e8:	4613      	mov	r3, r2
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	4413      	add	r3, r2
 80119ee:	009b      	lsls	r3, r3, #2
 80119f0:	440b      	add	r3, r1
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d10c      	bne.n	8011a12 <vTaskSwitchContext+0xae>
	__asm volatile
 80119f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119fc:	b672      	cpsid	i
 80119fe:	f383 8811 	msr	BASEPRI, r3
 8011a02:	f3bf 8f6f 	isb	sy
 8011a06:	f3bf 8f4f 	dsb	sy
 8011a0a:	b662      	cpsie	i
 8011a0c:	607b      	str	r3, [r7, #4]
}
 8011a0e:	bf00      	nop
 8011a10:	e7fe      	b.n	8011a10 <vTaskSwitchContext+0xac>
 8011a12:	697a      	ldr	r2, [r7, #20]
 8011a14:	4613      	mov	r3, r2
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	4413      	add	r3, r2
 8011a1a:	009b      	lsls	r3, r3, #2
 8011a1c:	4a11      	ldr	r2, [pc, #68]	; (8011a64 <vTaskSwitchContext+0x100>)
 8011a1e:	4413      	add	r3, r2
 8011a20:	613b      	str	r3, [r7, #16]
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	685a      	ldr	r2, [r3, #4]
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	605a      	str	r2, [r3, #4]
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	685a      	ldr	r2, [r3, #4]
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	3308      	adds	r3, #8
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d104      	bne.n	8011a42 <vTaskSwitchContext+0xde>
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	685a      	ldr	r2, [r3, #4]
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	605a      	str	r2, [r3, #4]
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	68db      	ldr	r3, [r3, #12]
 8011a48:	4a04      	ldr	r2, [pc, #16]	; (8011a5c <vTaskSwitchContext+0xf8>)
 8011a4a:	6013      	str	r3, [r2, #0]
}
 8011a4c:	bf00      	nop
 8011a4e:	3720      	adds	r7, #32
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	2000045c 	.word	0x2000045c
 8011a58:	20000448 	.word	0x20000448
 8011a5c:	20000334 	.word	0x20000334
 8011a60:	2000043c 	.word	0x2000043c
 8011a64:	20000338 	.word	0x20000338

08011a68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d10c      	bne.n	8011a92 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8011a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a7c:	b672      	cpsid	i
 8011a7e:	f383 8811 	msr	BASEPRI, r3
 8011a82:	f3bf 8f6f 	isb	sy
 8011a86:	f3bf 8f4f 	dsb	sy
 8011a8a:	b662      	cpsie	i
 8011a8c:	60fb      	str	r3, [r7, #12]
}
 8011a8e:	bf00      	nop
 8011a90:	e7fe      	b.n	8011a90 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a92:	4b07      	ldr	r3, [pc, #28]	; (8011ab0 <vTaskPlaceOnEventList+0x48>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	3318      	adds	r3, #24
 8011a98:	4619      	mov	r1, r3
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f7fe fdc7 	bl	801062e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011aa0:	2101      	movs	r1, #1
 8011aa2:	6838      	ldr	r0, [r7, #0]
 8011aa4:	f000 fa74 	bl	8011f90 <prvAddCurrentTaskToDelayedList>
}
 8011aa8:	bf00      	nop
 8011aaa:	3710      	adds	r7, #16
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	20000334 	.word	0x20000334

08011ab4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	68db      	ldr	r3, [r3, #12]
 8011ac2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d10c      	bne.n	8011ae4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8011aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ace:	b672      	cpsid	i
 8011ad0:	f383 8811 	msr	BASEPRI, r3
 8011ad4:	f3bf 8f6f 	isb	sy
 8011ad8:	f3bf 8f4f 	dsb	sy
 8011adc:	b662      	cpsie	i
 8011ade:	60fb      	str	r3, [r7, #12]
}
 8011ae0:	bf00      	nop
 8011ae2:	e7fe      	b.n	8011ae2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	3318      	adds	r3, #24
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7fe fdd9 	bl	80106a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011aee:	4b1d      	ldr	r3, [pc, #116]	; (8011b64 <xTaskRemoveFromEventList+0xb0>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d11c      	bne.n	8011b30 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	3304      	adds	r3, #4
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fe fdd0 	bl	80106a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b04:	2201      	movs	r2, #1
 8011b06:	409a      	lsls	r2, r3
 8011b08:	4b17      	ldr	r3, [pc, #92]	; (8011b68 <xTaskRemoveFromEventList+0xb4>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	4313      	orrs	r3, r2
 8011b0e:	4a16      	ldr	r2, [pc, #88]	; (8011b68 <xTaskRemoveFromEventList+0xb4>)
 8011b10:	6013      	str	r3, [r2, #0]
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b16:	4613      	mov	r3, r2
 8011b18:	009b      	lsls	r3, r3, #2
 8011b1a:	4413      	add	r3, r2
 8011b1c:	009b      	lsls	r3, r3, #2
 8011b1e:	4a13      	ldr	r2, [pc, #76]	; (8011b6c <xTaskRemoveFromEventList+0xb8>)
 8011b20:	441a      	add	r2, r3
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	3304      	adds	r3, #4
 8011b26:	4619      	mov	r1, r3
 8011b28:	4610      	mov	r0, r2
 8011b2a:	f7fe fd5c 	bl	80105e6 <vListInsertEnd>
 8011b2e:	e005      	b.n	8011b3c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	3318      	adds	r3, #24
 8011b34:	4619      	mov	r1, r3
 8011b36:	480e      	ldr	r0, [pc, #56]	; (8011b70 <xTaskRemoveFromEventList+0xbc>)
 8011b38:	f7fe fd55 	bl	80105e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b40:	4b0c      	ldr	r3, [pc, #48]	; (8011b74 <xTaskRemoveFromEventList+0xc0>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d905      	bls.n	8011b56 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011b4e:	4b0a      	ldr	r3, [pc, #40]	; (8011b78 <xTaskRemoveFromEventList+0xc4>)
 8011b50:	2201      	movs	r2, #1
 8011b52:	601a      	str	r2, [r3, #0]
 8011b54:	e001      	b.n	8011b5a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011b56:	2300      	movs	r3, #0
 8011b58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011b5a:	697b      	ldr	r3, [r7, #20]
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3718      	adds	r7, #24
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	2000045c 	.word	0x2000045c
 8011b68:	2000043c 	.word	0x2000043c
 8011b6c:	20000338 	.word	0x20000338
 8011b70:	200003f4 	.word	0x200003f4
 8011b74:	20000334 	.word	0x20000334
 8011b78:	20000448 	.word	0x20000448

08011b7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	b083      	sub	sp, #12
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011b84:	4b06      	ldr	r3, [pc, #24]	; (8011ba0 <vTaskInternalSetTimeOutState+0x24>)
 8011b86:	681a      	ldr	r2, [r3, #0]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011b8c:	4b05      	ldr	r3, [pc, #20]	; (8011ba4 <vTaskInternalSetTimeOutState+0x28>)
 8011b8e:	681a      	ldr	r2, [r3, #0]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	605a      	str	r2, [r3, #4]
}
 8011b94:	bf00      	nop
 8011b96:	370c      	adds	r7, #12
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr
 8011ba0:	2000044c 	.word	0x2000044c
 8011ba4:	20000438 	.word	0x20000438

08011ba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b088      	sub	sp, #32
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d10c      	bne.n	8011bd2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8011bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bbc:	b672      	cpsid	i
 8011bbe:	f383 8811 	msr	BASEPRI, r3
 8011bc2:	f3bf 8f6f 	isb	sy
 8011bc6:	f3bf 8f4f 	dsb	sy
 8011bca:	b662      	cpsie	i
 8011bcc:	613b      	str	r3, [r7, #16]
}
 8011bce:	bf00      	nop
 8011bd0:	e7fe      	b.n	8011bd0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d10c      	bne.n	8011bf2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8011bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bdc:	b672      	cpsid	i
 8011bde:	f383 8811 	msr	BASEPRI, r3
 8011be2:	f3bf 8f6f 	isb	sy
 8011be6:	f3bf 8f4f 	dsb	sy
 8011bea:	b662      	cpsie	i
 8011bec:	60fb      	str	r3, [r7, #12]
}
 8011bee:	bf00      	nop
 8011bf0:	e7fe      	b.n	8011bf0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8011bf2:	f000 fb43 	bl	801227c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011bf6:	4b1d      	ldr	r3, [pc, #116]	; (8011c6c <xTaskCheckForTimeOut+0xc4>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	69ba      	ldr	r2, [r7, #24]
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c0e:	d102      	bne.n	8011c16 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011c10:	2300      	movs	r3, #0
 8011c12:	61fb      	str	r3, [r7, #28]
 8011c14:	e023      	b.n	8011c5e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681a      	ldr	r2, [r3, #0]
 8011c1a:	4b15      	ldr	r3, [pc, #84]	; (8011c70 <xTaskCheckForTimeOut+0xc8>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d007      	beq.n	8011c32 <xTaskCheckForTimeOut+0x8a>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	69ba      	ldr	r2, [r7, #24]
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	d302      	bcc.n	8011c32 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	61fb      	str	r3, [r7, #28]
 8011c30:	e015      	b.n	8011c5e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	697a      	ldr	r2, [r7, #20]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d20b      	bcs.n	8011c54 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	681a      	ldr	r2, [r3, #0]
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	1ad2      	subs	r2, r2, r3
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f7ff ff97 	bl	8011b7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	61fb      	str	r3, [r7, #28]
 8011c52:	e004      	b.n	8011c5e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	2200      	movs	r2, #0
 8011c58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011c5e:	f000 fb41 	bl	80122e4 <vPortExitCritical>

	return xReturn;
 8011c62:	69fb      	ldr	r3, [r7, #28]
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3720      	adds	r7, #32
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	20000438 	.word	0x20000438
 8011c70:	2000044c 	.word	0x2000044c

08011c74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011c74:	b480      	push	{r7}
 8011c76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011c78:	4b03      	ldr	r3, [pc, #12]	; (8011c88 <vTaskMissedYield+0x14>)
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	601a      	str	r2, [r3, #0]
}
 8011c7e:	bf00      	nop
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr
 8011c88:	20000448 	.word	0x20000448

08011c8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011c94:	f000 f854 	bl	8011d40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011c98:	4b07      	ldr	r3, [pc, #28]	; (8011cb8 <prvIdleTask+0x2c>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	d907      	bls.n	8011cb0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8011ca0:	4b06      	ldr	r3, [pc, #24]	; (8011cbc <prvIdleTask+0x30>)
 8011ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ca6:	601a      	str	r2, [r3, #0]
 8011ca8:	f3bf 8f4f 	dsb	sy
 8011cac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8011cb0:	f7ee fe42 	bl	8000938 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8011cb4:	e7ee      	b.n	8011c94 <prvIdleTask+0x8>
 8011cb6:	bf00      	nop
 8011cb8:	20000338 	.word	0x20000338
 8011cbc:	e000ed04 	.word	0xe000ed04

08011cc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	607b      	str	r3, [r7, #4]
 8011cca:	e00c      	b.n	8011ce6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011ccc:	687a      	ldr	r2, [r7, #4]
 8011cce:	4613      	mov	r3, r2
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	4413      	add	r3, r2
 8011cd4:	009b      	lsls	r3, r3, #2
 8011cd6:	4a12      	ldr	r2, [pc, #72]	; (8011d20 <prvInitialiseTaskLists+0x60>)
 8011cd8:	4413      	add	r3, r2
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7fe fc56 	bl	801058c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	607b      	str	r3, [r7, #4]
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2b06      	cmp	r3, #6
 8011cea:	d9ef      	bls.n	8011ccc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011cec:	480d      	ldr	r0, [pc, #52]	; (8011d24 <prvInitialiseTaskLists+0x64>)
 8011cee:	f7fe fc4d 	bl	801058c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011cf2:	480d      	ldr	r0, [pc, #52]	; (8011d28 <prvInitialiseTaskLists+0x68>)
 8011cf4:	f7fe fc4a 	bl	801058c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011cf8:	480c      	ldr	r0, [pc, #48]	; (8011d2c <prvInitialiseTaskLists+0x6c>)
 8011cfa:	f7fe fc47 	bl	801058c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011cfe:	480c      	ldr	r0, [pc, #48]	; (8011d30 <prvInitialiseTaskLists+0x70>)
 8011d00:	f7fe fc44 	bl	801058c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011d04:	480b      	ldr	r0, [pc, #44]	; (8011d34 <prvInitialiseTaskLists+0x74>)
 8011d06:	f7fe fc41 	bl	801058c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011d0a:	4b0b      	ldr	r3, [pc, #44]	; (8011d38 <prvInitialiseTaskLists+0x78>)
 8011d0c:	4a05      	ldr	r2, [pc, #20]	; (8011d24 <prvInitialiseTaskLists+0x64>)
 8011d0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011d10:	4b0a      	ldr	r3, [pc, #40]	; (8011d3c <prvInitialiseTaskLists+0x7c>)
 8011d12:	4a05      	ldr	r2, [pc, #20]	; (8011d28 <prvInitialiseTaskLists+0x68>)
 8011d14:	601a      	str	r2, [r3, #0]
}
 8011d16:	bf00      	nop
 8011d18:	3708      	adds	r7, #8
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	20000338 	.word	0x20000338
 8011d24:	200003c4 	.word	0x200003c4
 8011d28:	200003d8 	.word	0x200003d8
 8011d2c:	200003f4 	.word	0x200003f4
 8011d30:	20000408 	.word	0x20000408
 8011d34:	20000420 	.word	0x20000420
 8011d38:	200003ec 	.word	0x200003ec
 8011d3c:	200003f0 	.word	0x200003f0

08011d40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d46:	e019      	b.n	8011d7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011d48:	f000 fa98 	bl	801227c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d4c:	4b10      	ldr	r3, [pc, #64]	; (8011d90 <prvCheckTasksWaitingTermination+0x50>)
 8011d4e:	68db      	ldr	r3, [r3, #12]
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	3304      	adds	r3, #4
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7fe fca1 	bl	80106a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011d5e:	4b0d      	ldr	r3, [pc, #52]	; (8011d94 <prvCheckTasksWaitingTermination+0x54>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	3b01      	subs	r3, #1
 8011d64:	4a0b      	ldr	r2, [pc, #44]	; (8011d94 <prvCheckTasksWaitingTermination+0x54>)
 8011d66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011d68:	4b0b      	ldr	r3, [pc, #44]	; (8011d98 <prvCheckTasksWaitingTermination+0x58>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	4a0a      	ldr	r2, [pc, #40]	; (8011d98 <prvCheckTasksWaitingTermination+0x58>)
 8011d70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011d72:	f000 fab7 	bl	80122e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f000 f810 	bl	8011d9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d7c:	4b06      	ldr	r3, [pc, #24]	; (8011d98 <prvCheckTasksWaitingTermination+0x58>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d1e1      	bne.n	8011d48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011d84:	bf00      	nop
 8011d86:	bf00      	nop
 8011d88:	3708      	adds	r7, #8
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	20000408 	.word	0x20000408
 8011d94:	20000434 	.word	0x20000434
 8011d98:	2000041c 	.word	0x2000041c

08011d9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b084      	sub	sp, #16
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d108      	bne.n	8011dc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011db2:	4618      	mov	r0, r3
 8011db4:	f000 fc5e 	bl	8012674 <vPortFree>
				vPortFree( pxTCB );
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f000 fc5b 	bl	8012674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011dbe:	e01a      	b.n	8011df6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011dc6:	2b01      	cmp	r3, #1
 8011dc8:	d103      	bne.n	8011dd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f000 fc52 	bl	8012674 <vPortFree>
	}
 8011dd0:	e011      	b.n	8011df6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011dd8:	2b02      	cmp	r3, #2
 8011dda:	d00c      	beq.n	8011df6 <prvDeleteTCB+0x5a>
	__asm volatile
 8011ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de0:	b672      	cpsid	i
 8011de2:	f383 8811 	msr	BASEPRI, r3
 8011de6:	f3bf 8f6f 	isb	sy
 8011dea:	f3bf 8f4f 	dsb	sy
 8011dee:	b662      	cpsie	i
 8011df0:	60fb      	str	r3, [r7, #12]
}
 8011df2:	bf00      	nop
 8011df4:	e7fe      	b.n	8011df4 <prvDeleteTCB+0x58>
	}
 8011df6:	bf00      	nop
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
	...

08011e00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011e00:	b480      	push	{r7}
 8011e02:	b083      	sub	sp, #12
 8011e04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e06:	4b0c      	ldr	r3, [pc, #48]	; (8011e38 <prvResetNextTaskUnblockTime+0x38>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d104      	bne.n	8011e1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011e10:	4b0a      	ldr	r3, [pc, #40]	; (8011e3c <prvResetNextTaskUnblockTime+0x3c>)
 8011e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011e18:	e008      	b.n	8011e2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e1a:	4b07      	ldr	r3, [pc, #28]	; (8011e38 <prvResetNextTaskUnblockTime+0x38>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	68db      	ldr	r3, [r3, #12]
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	4a04      	ldr	r2, [pc, #16]	; (8011e3c <prvResetNextTaskUnblockTime+0x3c>)
 8011e2a:	6013      	str	r3, [r2, #0]
}
 8011e2c:	bf00      	nop
 8011e2e:	370c      	adds	r7, #12
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr
 8011e38:	200003ec 	.word	0x200003ec
 8011e3c:	20000454 	.word	0x20000454

08011e40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011e40:	b480      	push	{r7}
 8011e42:	b083      	sub	sp, #12
 8011e44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011e46:	4b0b      	ldr	r3, [pc, #44]	; (8011e74 <xTaskGetSchedulerState+0x34>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d102      	bne.n	8011e54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011e4e:	2301      	movs	r3, #1
 8011e50:	607b      	str	r3, [r7, #4]
 8011e52:	e008      	b.n	8011e66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e54:	4b08      	ldr	r3, [pc, #32]	; (8011e78 <xTaskGetSchedulerState+0x38>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d102      	bne.n	8011e62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011e5c:	2302      	movs	r3, #2
 8011e5e:	607b      	str	r3, [r7, #4]
 8011e60:	e001      	b.n	8011e66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011e62:	2300      	movs	r3, #0
 8011e64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011e66:	687b      	ldr	r3, [r7, #4]
	}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	370c      	adds	r7, #12
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr
 8011e74:	20000440 	.word	0x20000440
 8011e78:	2000045c 	.word	0x2000045c

08011e7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b086      	sub	sp, #24
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d072      	beq.n	8011f78 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011e92:	4b3c      	ldr	r3, [pc, #240]	; (8011f84 <xTaskPriorityDisinherit+0x108>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	693a      	ldr	r2, [r7, #16]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d00c      	beq.n	8011eb6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8011e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea0:	b672      	cpsid	i
 8011ea2:	f383 8811 	msr	BASEPRI, r3
 8011ea6:	f3bf 8f6f 	isb	sy
 8011eaa:	f3bf 8f4f 	dsb	sy
 8011eae:	b662      	cpsie	i
 8011eb0:	60fb      	str	r3, [r7, #12]
}
 8011eb2:	bf00      	nop
 8011eb4:	e7fe      	b.n	8011eb4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d10c      	bne.n	8011ed8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8011ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec2:	b672      	cpsid	i
 8011ec4:	f383 8811 	msr	BASEPRI, r3
 8011ec8:	f3bf 8f6f 	isb	sy
 8011ecc:	f3bf 8f4f 	dsb	sy
 8011ed0:	b662      	cpsie	i
 8011ed2:	60bb      	str	r3, [r7, #8]
}
 8011ed4:	bf00      	nop
 8011ed6:	e7fe      	b.n	8011ed6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011edc:	1e5a      	subs	r2, r3, #1
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d044      	beq.n	8011f78 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d140      	bne.n	8011f78 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	3304      	adds	r3, #4
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7fe fbd0 	bl	80106a0 <uxListRemove>
 8011f00:	4603      	mov	r3, r0
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d115      	bne.n	8011f32 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f0a:	491f      	ldr	r1, [pc, #124]	; (8011f88 <xTaskPriorityDisinherit+0x10c>)
 8011f0c:	4613      	mov	r3, r2
 8011f0e:	009b      	lsls	r3, r3, #2
 8011f10:	4413      	add	r3, r2
 8011f12:	009b      	lsls	r3, r3, #2
 8011f14:	440b      	add	r3, r1
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d10a      	bne.n	8011f32 <xTaskPriorityDisinherit+0xb6>
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f20:	2201      	movs	r2, #1
 8011f22:	fa02 f303 	lsl.w	r3, r2, r3
 8011f26:	43da      	mvns	r2, r3
 8011f28:	4b18      	ldr	r3, [pc, #96]	; (8011f8c <xTaskPriorityDisinherit+0x110>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	4013      	ands	r3, r2
 8011f2e:	4a17      	ldr	r2, [pc, #92]	; (8011f8c <xTaskPriorityDisinherit+0x110>)
 8011f30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f3e:	f1c3 0207 	rsb	r2, r3, #7
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	409a      	lsls	r2, r3
 8011f4e:	4b0f      	ldr	r3, [pc, #60]	; (8011f8c <xTaskPriorityDisinherit+0x110>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	4313      	orrs	r3, r2
 8011f54:	4a0d      	ldr	r2, [pc, #52]	; (8011f8c <xTaskPriorityDisinherit+0x110>)
 8011f56:	6013      	str	r3, [r2, #0]
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	009b      	lsls	r3, r3, #2
 8011f60:	4413      	add	r3, r2
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	4a08      	ldr	r2, [pc, #32]	; (8011f88 <xTaskPriorityDisinherit+0x10c>)
 8011f66:	441a      	add	r2, r3
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	3304      	adds	r3, #4
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	4610      	mov	r0, r2
 8011f70:	f7fe fb39 	bl	80105e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011f74:	2301      	movs	r3, #1
 8011f76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f78:	697b      	ldr	r3, [r7, #20]
	}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3718      	adds	r7, #24
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	20000334 	.word	0x20000334
 8011f88:	20000338 	.word	0x20000338
 8011f8c:	2000043c 	.word	0x2000043c

08011f90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f9a:	4b29      	ldr	r3, [pc, #164]	; (8012040 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011fa0:	4b28      	ldr	r3, [pc, #160]	; (8012044 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	3304      	adds	r3, #4
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7fe fb7a 	bl	80106a0 <uxListRemove>
 8011fac:	4603      	mov	r3, r0
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d10b      	bne.n	8011fca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011fb2:	4b24      	ldr	r3, [pc, #144]	; (8012044 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fb8:	2201      	movs	r2, #1
 8011fba:	fa02 f303 	lsl.w	r3, r2, r3
 8011fbe:	43da      	mvns	r2, r3
 8011fc0:	4b21      	ldr	r3, [pc, #132]	; (8012048 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	4013      	ands	r3, r2
 8011fc6:	4a20      	ldr	r2, [pc, #128]	; (8012048 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011fc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fd0:	d10a      	bne.n	8011fe8 <prvAddCurrentTaskToDelayedList+0x58>
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d007      	beq.n	8011fe8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fd8:	4b1a      	ldr	r3, [pc, #104]	; (8012044 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	3304      	adds	r3, #4
 8011fde:	4619      	mov	r1, r3
 8011fe0:	481a      	ldr	r0, [pc, #104]	; (801204c <prvAddCurrentTaskToDelayedList+0xbc>)
 8011fe2:	f7fe fb00 	bl	80105e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011fe6:	e026      	b.n	8012036 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011fe8:	68fa      	ldr	r2, [r7, #12]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	4413      	add	r3, r2
 8011fee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011ff0:	4b14      	ldr	r3, [pc, #80]	; (8012044 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	68ba      	ldr	r2, [r7, #8]
 8011ff6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011ff8:	68ba      	ldr	r2, [r7, #8]
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d209      	bcs.n	8012014 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012000:	4b13      	ldr	r3, [pc, #76]	; (8012050 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012002:	681a      	ldr	r2, [r3, #0]
 8012004:	4b0f      	ldr	r3, [pc, #60]	; (8012044 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	3304      	adds	r3, #4
 801200a:	4619      	mov	r1, r3
 801200c:	4610      	mov	r0, r2
 801200e:	f7fe fb0e 	bl	801062e <vListInsert>
}
 8012012:	e010      	b.n	8012036 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012014:	4b0f      	ldr	r3, [pc, #60]	; (8012054 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	4b0a      	ldr	r3, [pc, #40]	; (8012044 <prvAddCurrentTaskToDelayedList+0xb4>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	3304      	adds	r3, #4
 801201e:	4619      	mov	r1, r3
 8012020:	4610      	mov	r0, r2
 8012022:	f7fe fb04 	bl	801062e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012026:	4b0c      	ldr	r3, [pc, #48]	; (8012058 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	68ba      	ldr	r2, [r7, #8]
 801202c:	429a      	cmp	r2, r3
 801202e:	d202      	bcs.n	8012036 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012030:	4a09      	ldr	r2, [pc, #36]	; (8012058 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	6013      	str	r3, [r2, #0]
}
 8012036:	bf00      	nop
 8012038:	3710      	adds	r7, #16
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
 801203e:	bf00      	nop
 8012040:	20000438 	.word	0x20000438
 8012044:	20000334 	.word	0x20000334
 8012048:	2000043c 	.word	0x2000043c
 801204c:	20000420 	.word	0x20000420
 8012050:	200003f0 	.word	0x200003f0
 8012054:	200003ec 	.word	0x200003ec
 8012058:	20000454 	.word	0x20000454

0801205c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801205c:	b480      	push	{r7}
 801205e:	b085      	sub	sp, #20
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	60b9      	str	r1, [r7, #8]
 8012066:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	3b04      	subs	r3, #4
 801206c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	3b04      	subs	r3, #4
 801207a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	f023 0201 	bic.w	r2, r3, #1
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	3b04      	subs	r3, #4
 801208a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801208c:	4a0c      	ldr	r2, [pc, #48]	; (80120c0 <pxPortInitialiseStack+0x64>)
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	3b14      	subs	r3, #20
 8012096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012098:	687a      	ldr	r2, [r7, #4]
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	3b04      	subs	r3, #4
 80120a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f06f 0202 	mvn.w	r2, #2
 80120aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	3b20      	subs	r3, #32
 80120b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80120b2:	68fb      	ldr	r3, [r7, #12]
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3714      	adds	r7, #20
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr
 80120c0:	080120c5 	.word	0x080120c5

080120c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80120c4:	b480      	push	{r7}
 80120c6:	b085      	sub	sp, #20
 80120c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80120ca:	2300      	movs	r3, #0
 80120cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80120ce:	4b14      	ldr	r3, [pc, #80]	; (8012120 <prvTaskExitError+0x5c>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120d6:	d00c      	beq.n	80120f2 <prvTaskExitError+0x2e>
	__asm volatile
 80120d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120dc:	b672      	cpsid	i
 80120de:	f383 8811 	msr	BASEPRI, r3
 80120e2:	f3bf 8f6f 	isb	sy
 80120e6:	f3bf 8f4f 	dsb	sy
 80120ea:	b662      	cpsie	i
 80120ec:	60fb      	str	r3, [r7, #12]
}
 80120ee:	bf00      	nop
 80120f0:	e7fe      	b.n	80120f0 <prvTaskExitError+0x2c>
	__asm volatile
 80120f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f6:	b672      	cpsid	i
 80120f8:	f383 8811 	msr	BASEPRI, r3
 80120fc:	f3bf 8f6f 	isb	sy
 8012100:	f3bf 8f4f 	dsb	sy
 8012104:	b662      	cpsie	i
 8012106:	60bb      	str	r3, [r7, #8]
}
 8012108:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801210a:	bf00      	nop
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d0fc      	beq.n	801210c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012112:	bf00      	nop
 8012114:	bf00      	nop
 8012116:	3714      	adds	r7, #20
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr
 8012120:	20000090 	.word	0x20000090
	...

08012130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012130:	4b07      	ldr	r3, [pc, #28]	; (8012150 <pxCurrentTCBConst2>)
 8012132:	6819      	ldr	r1, [r3, #0]
 8012134:	6808      	ldr	r0, [r1, #0]
 8012136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801213a:	f380 8809 	msr	PSP, r0
 801213e:	f3bf 8f6f 	isb	sy
 8012142:	f04f 0000 	mov.w	r0, #0
 8012146:	f380 8811 	msr	BASEPRI, r0
 801214a:	4770      	bx	lr
 801214c:	f3af 8000 	nop.w

08012150 <pxCurrentTCBConst2>:
 8012150:	20000334 	.word	0x20000334
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012154:	bf00      	nop
 8012156:	bf00      	nop

08012158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012158:	4808      	ldr	r0, [pc, #32]	; (801217c <prvPortStartFirstTask+0x24>)
 801215a:	6800      	ldr	r0, [r0, #0]
 801215c:	6800      	ldr	r0, [r0, #0]
 801215e:	f380 8808 	msr	MSP, r0
 8012162:	f04f 0000 	mov.w	r0, #0
 8012166:	f380 8814 	msr	CONTROL, r0
 801216a:	b662      	cpsie	i
 801216c:	b661      	cpsie	f
 801216e:	f3bf 8f4f 	dsb	sy
 8012172:	f3bf 8f6f 	isb	sy
 8012176:	df00      	svc	0
 8012178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801217a:	bf00      	nop
 801217c:	e000ed08 	.word	0xe000ed08

08012180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012186:	4b37      	ldr	r3, [pc, #220]	; (8012264 <xPortStartScheduler+0xe4>)
 8012188:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	b2db      	uxtb	r3, r3
 8012190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	22ff      	movs	r2, #255	; 0xff
 8012196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	b2db      	uxtb	r3, r3
 801219e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80121a0:	78fb      	ldrb	r3, [r7, #3]
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80121a8:	b2da      	uxtb	r2, r3
 80121aa:	4b2f      	ldr	r3, [pc, #188]	; (8012268 <xPortStartScheduler+0xe8>)
 80121ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80121ae:	4b2f      	ldr	r3, [pc, #188]	; (801226c <xPortStartScheduler+0xec>)
 80121b0:	2207      	movs	r2, #7
 80121b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80121b4:	e009      	b.n	80121ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80121b6:	4b2d      	ldr	r3, [pc, #180]	; (801226c <xPortStartScheduler+0xec>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	3b01      	subs	r3, #1
 80121bc:	4a2b      	ldr	r2, [pc, #172]	; (801226c <xPortStartScheduler+0xec>)
 80121be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80121c0:	78fb      	ldrb	r3, [r7, #3]
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	005b      	lsls	r3, r3, #1
 80121c6:	b2db      	uxtb	r3, r3
 80121c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80121ca:	78fb      	ldrb	r3, [r7, #3]
 80121cc:	b2db      	uxtb	r3, r3
 80121ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80121d2:	2b80      	cmp	r3, #128	; 0x80
 80121d4:	d0ef      	beq.n	80121b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80121d6:	4b25      	ldr	r3, [pc, #148]	; (801226c <xPortStartScheduler+0xec>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	f1c3 0307 	rsb	r3, r3, #7
 80121de:	2b04      	cmp	r3, #4
 80121e0:	d00c      	beq.n	80121fc <xPortStartScheduler+0x7c>
	__asm volatile
 80121e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e6:	b672      	cpsid	i
 80121e8:	f383 8811 	msr	BASEPRI, r3
 80121ec:	f3bf 8f6f 	isb	sy
 80121f0:	f3bf 8f4f 	dsb	sy
 80121f4:	b662      	cpsie	i
 80121f6:	60bb      	str	r3, [r7, #8]
}
 80121f8:	bf00      	nop
 80121fa:	e7fe      	b.n	80121fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80121fc:	4b1b      	ldr	r3, [pc, #108]	; (801226c <xPortStartScheduler+0xec>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	021b      	lsls	r3, r3, #8
 8012202:	4a1a      	ldr	r2, [pc, #104]	; (801226c <xPortStartScheduler+0xec>)
 8012204:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012206:	4b19      	ldr	r3, [pc, #100]	; (801226c <xPortStartScheduler+0xec>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801220e:	4a17      	ldr	r2, [pc, #92]	; (801226c <xPortStartScheduler+0xec>)
 8012210:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	b2da      	uxtb	r2, r3
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801221a:	4b15      	ldr	r3, [pc, #84]	; (8012270 <xPortStartScheduler+0xf0>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	4a14      	ldr	r2, [pc, #80]	; (8012270 <xPortStartScheduler+0xf0>)
 8012220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012224:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012226:	4b12      	ldr	r3, [pc, #72]	; (8012270 <xPortStartScheduler+0xf0>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	4a11      	ldr	r2, [pc, #68]	; (8012270 <xPortStartScheduler+0xf0>)
 801222c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012230:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012232:	f000 f8dd 	bl	80123f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012236:	4b0f      	ldr	r3, [pc, #60]	; (8012274 <xPortStartScheduler+0xf4>)
 8012238:	2200      	movs	r2, #0
 801223a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801223c:	f000 f8fc 	bl	8012438 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012240:	4b0d      	ldr	r3, [pc, #52]	; (8012278 <xPortStartScheduler+0xf8>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	4a0c      	ldr	r2, [pc, #48]	; (8012278 <xPortStartScheduler+0xf8>)
 8012246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801224a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801224c:	f7ff ff84 	bl	8012158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012250:	f7ff fb88 	bl	8011964 <vTaskSwitchContext>
	prvTaskExitError();
 8012254:	f7ff ff36 	bl	80120c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012258:	2300      	movs	r3, #0
}
 801225a:	4618      	mov	r0, r3
 801225c:	3710      	adds	r7, #16
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	e000e400 	.word	0xe000e400
 8012268:	20000460 	.word	0x20000460
 801226c:	20000464 	.word	0x20000464
 8012270:	e000ed20 	.word	0xe000ed20
 8012274:	20000090 	.word	0x20000090
 8012278:	e000ef34 	.word	0xe000ef34

0801227c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801227c:	b480      	push	{r7}
 801227e:	b083      	sub	sp, #12
 8012280:	af00      	add	r7, sp, #0
	__asm volatile
 8012282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012286:	b672      	cpsid	i
 8012288:	f383 8811 	msr	BASEPRI, r3
 801228c:	f3bf 8f6f 	isb	sy
 8012290:	f3bf 8f4f 	dsb	sy
 8012294:	b662      	cpsie	i
 8012296:	607b      	str	r3, [r7, #4]
}
 8012298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801229a:	4b10      	ldr	r3, [pc, #64]	; (80122dc <vPortEnterCritical+0x60>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	3301      	adds	r3, #1
 80122a0:	4a0e      	ldr	r2, [pc, #56]	; (80122dc <vPortEnterCritical+0x60>)
 80122a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80122a4:	4b0d      	ldr	r3, [pc, #52]	; (80122dc <vPortEnterCritical+0x60>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	2b01      	cmp	r3, #1
 80122aa:	d111      	bne.n	80122d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80122ac:	4b0c      	ldr	r3, [pc, #48]	; (80122e0 <vPortEnterCritical+0x64>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	b2db      	uxtb	r3, r3
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d00c      	beq.n	80122d0 <vPortEnterCritical+0x54>
	__asm volatile
 80122b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ba:	b672      	cpsid	i
 80122bc:	f383 8811 	msr	BASEPRI, r3
 80122c0:	f3bf 8f6f 	isb	sy
 80122c4:	f3bf 8f4f 	dsb	sy
 80122c8:	b662      	cpsie	i
 80122ca:	603b      	str	r3, [r7, #0]
}
 80122cc:	bf00      	nop
 80122ce:	e7fe      	b.n	80122ce <vPortEnterCritical+0x52>
	}
}
 80122d0:	bf00      	nop
 80122d2:	370c      	adds	r7, #12
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr
 80122dc:	20000090 	.word	0x20000090
 80122e0:	e000ed04 	.word	0xe000ed04

080122e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80122e4:	b480      	push	{r7}
 80122e6:	b083      	sub	sp, #12
 80122e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80122ea:	4b13      	ldr	r3, [pc, #76]	; (8012338 <vPortExitCritical+0x54>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d10c      	bne.n	801230c <vPortExitCritical+0x28>
	__asm volatile
 80122f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f6:	b672      	cpsid	i
 80122f8:	f383 8811 	msr	BASEPRI, r3
 80122fc:	f3bf 8f6f 	isb	sy
 8012300:	f3bf 8f4f 	dsb	sy
 8012304:	b662      	cpsie	i
 8012306:	607b      	str	r3, [r7, #4]
}
 8012308:	bf00      	nop
 801230a:	e7fe      	b.n	801230a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801230c:	4b0a      	ldr	r3, [pc, #40]	; (8012338 <vPortExitCritical+0x54>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	3b01      	subs	r3, #1
 8012312:	4a09      	ldr	r2, [pc, #36]	; (8012338 <vPortExitCritical+0x54>)
 8012314:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012316:	4b08      	ldr	r3, [pc, #32]	; (8012338 <vPortExitCritical+0x54>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d105      	bne.n	801232a <vPortExitCritical+0x46>
 801231e:	2300      	movs	r3, #0
 8012320:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	f383 8811 	msr	BASEPRI, r3
}
 8012328:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801232a:	bf00      	nop
 801232c:	370c      	adds	r7, #12
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr
 8012336:	bf00      	nop
 8012338:	20000090 	.word	0x20000090
 801233c:	00000000 	.word	0x00000000

08012340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012340:	f3ef 8009 	mrs	r0, PSP
 8012344:	f3bf 8f6f 	isb	sy
 8012348:	4b15      	ldr	r3, [pc, #84]	; (80123a0 <pxCurrentTCBConst>)
 801234a:	681a      	ldr	r2, [r3, #0]
 801234c:	f01e 0f10 	tst.w	lr, #16
 8012350:	bf08      	it	eq
 8012352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801235a:	6010      	str	r0, [r2, #0]
 801235c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012364:	b672      	cpsid	i
 8012366:	f380 8811 	msr	BASEPRI, r0
 801236a:	f3bf 8f4f 	dsb	sy
 801236e:	f3bf 8f6f 	isb	sy
 8012372:	b662      	cpsie	i
 8012374:	f7ff faf6 	bl	8011964 <vTaskSwitchContext>
 8012378:	f04f 0000 	mov.w	r0, #0
 801237c:	f380 8811 	msr	BASEPRI, r0
 8012380:	bc09      	pop	{r0, r3}
 8012382:	6819      	ldr	r1, [r3, #0]
 8012384:	6808      	ldr	r0, [r1, #0]
 8012386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238a:	f01e 0f10 	tst.w	lr, #16
 801238e:	bf08      	it	eq
 8012390:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012394:	f380 8809 	msr	PSP, r0
 8012398:	f3bf 8f6f 	isb	sy
 801239c:	4770      	bx	lr
 801239e:	bf00      	nop

080123a0 <pxCurrentTCBConst>:
 80123a0:	20000334 	.word	0x20000334
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80123a4:	bf00      	nop
 80123a6:	bf00      	nop

080123a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b082      	sub	sp, #8
 80123ac:	af00      	add	r7, sp, #0
	__asm volatile
 80123ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b2:	b672      	cpsid	i
 80123b4:	f383 8811 	msr	BASEPRI, r3
 80123b8:	f3bf 8f6f 	isb	sy
 80123bc:	f3bf 8f4f 	dsb	sy
 80123c0:	b662      	cpsie	i
 80123c2:	607b      	str	r3, [r7, #4]
}
 80123c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80123c6:	f7ff fa13 	bl	80117f0 <xTaskIncrementTick>
 80123ca:	4603      	mov	r3, r0
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d003      	beq.n	80123d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80123d0:	4b06      	ldr	r3, [pc, #24]	; (80123ec <SysTick_Handler+0x44>)
 80123d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123d6:	601a      	str	r2, [r3, #0]
 80123d8:	2300      	movs	r3, #0
 80123da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	f383 8811 	msr	BASEPRI, r3
}
 80123e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80123e4:	bf00      	nop
 80123e6:	3708      	adds	r7, #8
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}
 80123ec:	e000ed04 	.word	0xe000ed04

080123f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80123f0:	b480      	push	{r7}
 80123f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80123f4:	4b0b      	ldr	r3, [pc, #44]	; (8012424 <vPortSetupTimerInterrupt+0x34>)
 80123f6:	2200      	movs	r2, #0
 80123f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80123fa:	4b0b      	ldr	r3, [pc, #44]	; (8012428 <vPortSetupTimerInterrupt+0x38>)
 80123fc:	2200      	movs	r2, #0
 80123fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012400:	4b0a      	ldr	r3, [pc, #40]	; (801242c <vPortSetupTimerInterrupt+0x3c>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	4a0a      	ldr	r2, [pc, #40]	; (8012430 <vPortSetupTimerInterrupt+0x40>)
 8012406:	fba2 2303 	umull	r2, r3, r2, r3
 801240a:	099b      	lsrs	r3, r3, #6
 801240c:	4a09      	ldr	r2, [pc, #36]	; (8012434 <vPortSetupTimerInterrupt+0x44>)
 801240e:	3b01      	subs	r3, #1
 8012410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012412:	4b04      	ldr	r3, [pc, #16]	; (8012424 <vPortSetupTimerInterrupt+0x34>)
 8012414:	2207      	movs	r2, #7
 8012416:	601a      	str	r2, [r3, #0]
}
 8012418:	bf00      	nop
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr
 8012422:	bf00      	nop
 8012424:	e000e010 	.word	0xe000e010
 8012428:	e000e018 	.word	0xe000e018
 801242c:	20000064 	.word	0x20000064
 8012430:	10624dd3 	.word	0x10624dd3
 8012434:	e000e014 	.word	0xe000e014

08012438 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012438:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012448 <vPortEnableVFP+0x10>
 801243c:	6801      	ldr	r1, [r0, #0]
 801243e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012442:	6001      	str	r1, [r0, #0]
 8012444:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012446:	bf00      	nop
 8012448:	e000ed88 	.word	0xe000ed88

0801244c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801244c:	b480      	push	{r7}
 801244e:	b085      	sub	sp, #20
 8012450:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012452:	f3ef 8305 	mrs	r3, IPSR
 8012456:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	2b0f      	cmp	r3, #15
 801245c:	d916      	bls.n	801248c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801245e:	4a19      	ldr	r2, [pc, #100]	; (80124c4 <vPortValidateInterruptPriority+0x78>)
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	4413      	add	r3, r2
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012468:	4b17      	ldr	r3, [pc, #92]	; (80124c8 <vPortValidateInterruptPriority+0x7c>)
 801246a:	781b      	ldrb	r3, [r3, #0]
 801246c:	7afa      	ldrb	r2, [r7, #11]
 801246e:	429a      	cmp	r2, r3
 8012470:	d20c      	bcs.n	801248c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012476:	b672      	cpsid	i
 8012478:	f383 8811 	msr	BASEPRI, r3
 801247c:	f3bf 8f6f 	isb	sy
 8012480:	f3bf 8f4f 	dsb	sy
 8012484:	b662      	cpsie	i
 8012486:	607b      	str	r3, [r7, #4]
}
 8012488:	bf00      	nop
 801248a:	e7fe      	b.n	801248a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801248c:	4b0f      	ldr	r3, [pc, #60]	; (80124cc <vPortValidateInterruptPriority+0x80>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012494:	4b0e      	ldr	r3, [pc, #56]	; (80124d0 <vPortValidateInterruptPriority+0x84>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	429a      	cmp	r2, r3
 801249a:	d90c      	bls.n	80124b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a0:	b672      	cpsid	i
 80124a2:	f383 8811 	msr	BASEPRI, r3
 80124a6:	f3bf 8f6f 	isb	sy
 80124aa:	f3bf 8f4f 	dsb	sy
 80124ae:	b662      	cpsie	i
 80124b0:	603b      	str	r3, [r7, #0]
}
 80124b2:	bf00      	nop
 80124b4:	e7fe      	b.n	80124b4 <vPortValidateInterruptPriority+0x68>
	}
 80124b6:	bf00      	nop
 80124b8:	3714      	adds	r7, #20
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr
 80124c2:	bf00      	nop
 80124c4:	e000e3f0 	.word	0xe000e3f0
 80124c8:	20000460 	.word	0x20000460
 80124cc:	e000ed0c 	.word	0xe000ed0c
 80124d0:	20000464 	.word	0x20000464

080124d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b08a      	sub	sp, #40	; 0x28
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80124dc:	2300      	movs	r3, #0
 80124de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80124e0:	f7ff f8b8 	bl	8011654 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80124e4:	4b5e      	ldr	r3, [pc, #376]	; (8012660 <pvPortMalloc+0x18c>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d101      	bne.n	80124f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80124ec:	f000 f920 	bl	8012730 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80124f0:	4b5c      	ldr	r3, [pc, #368]	; (8012664 <pvPortMalloc+0x190>)
 80124f2:	681a      	ldr	r2, [r3, #0]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	4013      	ands	r3, r2
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	f040 8092 	bne.w	8012622 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d01f      	beq.n	8012544 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012504:	2208      	movs	r2, #8
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	4413      	add	r3, r2
 801250a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f003 0307 	and.w	r3, r3, #7
 8012512:	2b00      	cmp	r3, #0
 8012514:	d016      	beq.n	8012544 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f023 0307 	bic.w	r3, r3, #7
 801251c:	3308      	adds	r3, #8
 801251e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f003 0307 	and.w	r3, r3, #7
 8012526:	2b00      	cmp	r3, #0
 8012528:	d00c      	beq.n	8012544 <pvPortMalloc+0x70>
	__asm volatile
 801252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252e:	b672      	cpsid	i
 8012530:	f383 8811 	msr	BASEPRI, r3
 8012534:	f3bf 8f6f 	isb	sy
 8012538:	f3bf 8f4f 	dsb	sy
 801253c:	b662      	cpsie	i
 801253e:	617b      	str	r3, [r7, #20]
}
 8012540:	bf00      	nop
 8012542:	e7fe      	b.n	8012542 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d06b      	beq.n	8012622 <pvPortMalloc+0x14e>
 801254a:	4b47      	ldr	r3, [pc, #284]	; (8012668 <pvPortMalloc+0x194>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	687a      	ldr	r2, [r7, #4]
 8012550:	429a      	cmp	r2, r3
 8012552:	d866      	bhi.n	8012622 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012554:	4b45      	ldr	r3, [pc, #276]	; (801266c <pvPortMalloc+0x198>)
 8012556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012558:	4b44      	ldr	r3, [pc, #272]	; (801266c <pvPortMalloc+0x198>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801255e:	e004      	b.n	801256a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	687a      	ldr	r2, [r7, #4]
 8012570:	429a      	cmp	r2, r3
 8012572:	d903      	bls.n	801257c <pvPortMalloc+0xa8>
 8012574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d1f1      	bne.n	8012560 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801257c:	4b38      	ldr	r3, [pc, #224]	; (8012660 <pvPortMalloc+0x18c>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012582:	429a      	cmp	r2, r3
 8012584:	d04d      	beq.n	8012622 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012586:	6a3b      	ldr	r3, [r7, #32]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	2208      	movs	r2, #8
 801258c:	4413      	add	r3, r2
 801258e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012592:	681a      	ldr	r2, [r3, #0]
 8012594:	6a3b      	ldr	r3, [r7, #32]
 8012596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259a:	685a      	ldr	r2, [r3, #4]
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	1ad2      	subs	r2, r2, r3
 80125a0:	2308      	movs	r3, #8
 80125a2:	005b      	lsls	r3, r3, #1
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d921      	bls.n	80125ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80125a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	4413      	add	r3, r2
 80125ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	f003 0307 	and.w	r3, r3, #7
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d00c      	beq.n	80125d4 <pvPortMalloc+0x100>
	__asm volatile
 80125ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125be:	b672      	cpsid	i
 80125c0:	f383 8811 	msr	BASEPRI, r3
 80125c4:	f3bf 8f6f 	isb	sy
 80125c8:	f3bf 8f4f 	dsb	sy
 80125cc:	b662      	cpsie	i
 80125ce:	613b      	str	r3, [r7, #16]
}
 80125d0:	bf00      	nop
 80125d2:	e7fe      	b.n	80125d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80125d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d6:	685a      	ldr	r2, [r3, #4]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	1ad2      	subs	r2, r2, r3
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80125e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80125e6:	69b8      	ldr	r0, [r7, #24]
 80125e8:	f000 f904 	bl	80127f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80125ec:	4b1e      	ldr	r3, [pc, #120]	; (8012668 <pvPortMalloc+0x194>)
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f2:	685b      	ldr	r3, [r3, #4]
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	4a1c      	ldr	r2, [pc, #112]	; (8012668 <pvPortMalloc+0x194>)
 80125f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80125fa:	4b1b      	ldr	r3, [pc, #108]	; (8012668 <pvPortMalloc+0x194>)
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	4b1c      	ldr	r3, [pc, #112]	; (8012670 <pvPortMalloc+0x19c>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	429a      	cmp	r2, r3
 8012604:	d203      	bcs.n	801260e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012606:	4b18      	ldr	r3, [pc, #96]	; (8012668 <pvPortMalloc+0x194>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4a19      	ldr	r2, [pc, #100]	; (8012670 <pvPortMalloc+0x19c>)
 801260c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012610:	685a      	ldr	r2, [r3, #4]
 8012612:	4b14      	ldr	r3, [pc, #80]	; (8012664 <pvPortMalloc+0x190>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	431a      	orrs	r2, r3
 8012618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801261a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801261e:	2200      	movs	r2, #0
 8012620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012622:	f7ff f825 	bl	8011670 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012626:	69fb      	ldr	r3, [r7, #28]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d101      	bne.n	8012630 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801262c:	f7ee f996 	bl	800095c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012630:	69fb      	ldr	r3, [r7, #28]
 8012632:	f003 0307 	and.w	r3, r3, #7
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00c      	beq.n	8012654 <pvPortMalloc+0x180>
	__asm volatile
 801263a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801263e:	b672      	cpsid	i
 8012640:	f383 8811 	msr	BASEPRI, r3
 8012644:	f3bf 8f6f 	isb	sy
 8012648:	f3bf 8f4f 	dsb	sy
 801264c:	b662      	cpsie	i
 801264e:	60fb      	str	r3, [r7, #12]
}
 8012650:	bf00      	nop
 8012652:	e7fe      	b.n	8012652 <pvPortMalloc+0x17e>
	return pvReturn;
 8012654:	69fb      	ldr	r3, [r7, #28]
}
 8012656:	4618      	mov	r0, r3
 8012658:	3728      	adds	r7, #40	; 0x28
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	20008470 	.word	0x20008470
 8012664:	2000847c 	.word	0x2000847c
 8012668:	20008474 	.word	0x20008474
 801266c:	20008468 	.word	0x20008468
 8012670:	20008478 	.word	0x20008478

08012674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b086      	sub	sp, #24
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d04c      	beq.n	8012720 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012686:	2308      	movs	r3, #8
 8012688:	425b      	negs	r3, r3
 801268a:	697a      	ldr	r2, [r7, #20]
 801268c:	4413      	add	r3, r2
 801268e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	685a      	ldr	r2, [r3, #4]
 8012698:	4b23      	ldr	r3, [pc, #140]	; (8012728 <vPortFree+0xb4>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	4013      	ands	r3, r2
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d10c      	bne.n	80126bc <vPortFree+0x48>
	__asm volatile
 80126a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a6:	b672      	cpsid	i
 80126a8:	f383 8811 	msr	BASEPRI, r3
 80126ac:	f3bf 8f6f 	isb	sy
 80126b0:	f3bf 8f4f 	dsb	sy
 80126b4:	b662      	cpsie	i
 80126b6:	60fb      	str	r3, [r7, #12]
}
 80126b8:	bf00      	nop
 80126ba:	e7fe      	b.n	80126ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d00c      	beq.n	80126de <vPortFree+0x6a>
	__asm volatile
 80126c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c8:	b672      	cpsid	i
 80126ca:	f383 8811 	msr	BASEPRI, r3
 80126ce:	f3bf 8f6f 	isb	sy
 80126d2:	f3bf 8f4f 	dsb	sy
 80126d6:	b662      	cpsie	i
 80126d8:	60bb      	str	r3, [r7, #8]
}
 80126da:	bf00      	nop
 80126dc:	e7fe      	b.n	80126dc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80126de:	693b      	ldr	r3, [r7, #16]
 80126e0:	685a      	ldr	r2, [r3, #4]
 80126e2:	4b11      	ldr	r3, [pc, #68]	; (8012728 <vPortFree+0xb4>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	4013      	ands	r3, r2
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d019      	beq.n	8012720 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80126ec:	693b      	ldr	r3, [r7, #16]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d115      	bne.n	8012720 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	685a      	ldr	r2, [r3, #4]
 80126f8:	4b0b      	ldr	r3, [pc, #44]	; (8012728 <vPortFree+0xb4>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	43db      	mvns	r3, r3
 80126fe:	401a      	ands	r2, r3
 8012700:	693b      	ldr	r3, [r7, #16]
 8012702:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012704:	f7fe ffa6 	bl	8011654 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	685a      	ldr	r2, [r3, #4]
 801270c:	4b07      	ldr	r3, [pc, #28]	; (801272c <vPortFree+0xb8>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4413      	add	r3, r2
 8012712:	4a06      	ldr	r2, [pc, #24]	; (801272c <vPortFree+0xb8>)
 8012714:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012716:	6938      	ldr	r0, [r7, #16]
 8012718:	f000 f86c 	bl	80127f4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801271c:	f7fe ffa8 	bl	8011670 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012720:	bf00      	nop
 8012722:	3718      	adds	r7, #24
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	2000847c 	.word	0x2000847c
 801272c:	20008474 	.word	0x20008474

08012730 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012730:	b480      	push	{r7}
 8012732:	b085      	sub	sp, #20
 8012734:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801273a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801273c:	4b27      	ldr	r3, [pc, #156]	; (80127dc <prvHeapInit+0xac>)
 801273e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	f003 0307 	and.w	r3, r3, #7
 8012746:	2b00      	cmp	r3, #0
 8012748:	d00c      	beq.n	8012764 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	3307      	adds	r3, #7
 801274e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f023 0307 	bic.w	r3, r3, #7
 8012756:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012758:	68ba      	ldr	r2, [r7, #8]
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	1ad3      	subs	r3, r2, r3
 801275e:	4a1f      	ldr	r2, [pc, #124]	; (80127dc <prvHeapInit+0xac>)
 8012760:	4413      	add	r3, r2
 8012762:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012768:	4a1d      	ldr	r2, [pc, #116]	; (80127e0 <prvHeapInit+0xb0>)
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801276e:	4b1c      	ldr	r3, [pc, #112]	; (80127e0 <prvHeapInit+0xb0>)
 8012770:	2200      	movs	r2, #0
 8012772:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	68ba      	ldr	r2, [r7, #8]
 8012778:	4413      	add	r3, r2
 801277a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801277c:	2208      	movs	r2, #8
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	1a9b      	subs	r3, r3, r2
 8012782:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	f023 0307 	bic.w	r3, r3, #7
 801278a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	4a15      	ldr	r2, [pc, #84]	; (80127e4 <prvHeapInit+0xb4>)
 8012790:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012792:	4b14      	ldr	r3, [pc, #80]	; (80127e4 <prvHeapInit+0xb4>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	2200      	movs	r2, #0
 8012798:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801279a:	4b12      	ldr	r3, [pc, #72]	; (80127e4 <prvHeapInit+0xb4>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2200      	movs	r2, #0
 80127a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	68fa      	ldr	r2, [r7, #12]
 80127aa:	1ad2      	subs	r2, r2, r3
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80127b0:	4b0c      	ldr	r3, [pc, #48]	; (80127e4 <prvHeapInit+0xb4>)
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	4a0a      	ldr	r2, [pc, #40]	; (80127e8 <prvHeapInit+0xb8>)
 80127be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	4a09      	ldr	r2, [pc, #36]	; (80127ec <prvHeapInit+0xbc>)
 80127c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80127c8:	4b09      	ldr	r3, [pc, #36]	; (80127f0 <prvHeapInit+0xc0>)
 80127ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80127ce:	601a      	str	r2, [r3, #0]
}
 80127d0:	bf00      	nop
 80127d2:	3714      	adds	r7, #20
 80127d4:	46bd      	mov	sp, r7
 80127d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127da:	4770      	bx	lr
 80127dc:	20000468 	.word	0x20000468
 80127e0:	20008468 	.word	0x20008468
 80127e4:	20008470 	.word	0x20008470
 80127e8:	20008478 	.word	0x20008478
 80127ec:	20008474 	.word	0x20008474
 80127f0:	2000847c 	.word	0x2000847c

080127f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80127f4:	b480      	push	{r7}
 80127f6:	b085      	sub	sp, #20
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80127fc:	4b28      	ldr	r3, [pc, #160]	; (80128a0 <prvInsertBlockIntoFreeList+0xac>)
 80127fe:	60fb      	str	r3, [r7, #12]
 8012800:	e002      	b.n	8012808 <prvInsertBlockIntoFreeList+0x14>
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	60fb      	str	r3, [r7, #12]
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	429a      	cmp	r2, r3
 8012810:	d8f7      	bhi.n	8012802 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	68ba      	ldr	r2, [r7, #8]
 801281c:	4413      	add	r3, r2
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	429a      	cmp	r2, r3
 8012822:	d108      	bne.n	8012836 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	685a      	ldr	r2, [r3, #4]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	441a      	add	r2, r3
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	68ba      	ldr	r2, [r7, #8]
 8012840:	441a      	add	r2, r3
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	429a      	cmp	r2, r3
 8012848:	d118      	bne.n	801287c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	4b15      	ldr	r3, [pc, #84]	; (80128a4 <prvInsertBlockIntoFreeList+0xb0>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	429a      	cmp	r2, r3
 8012854:	d00d      	beq.n	8012872 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	685a      	ldr	r2, [r3, #4]
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	441a      	add	r2, r3
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	601a      	str	r2, [r3, #0]
 8012870:	e008      	b.n	8012884 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012872:	4b0c      	ldr	r3, [pc, #48]	; (80128a4 <prvInsertBlockIntoFreeList+0xb0>)
 8012874:	681a      	ldr	r2, [r3, #0]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	601a      	str	r2, [r3, #0]
 801287a:	e003      	b.n	8012884 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012884:	68fa      	ldr	r2, [r7, #12]
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	429a      	cmp	r2, r3
 801288a:	d002      	beq.n	8012892 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012892:	bf00      	nop
 8012894:	3714      	adds	r7, #20
 8012896:	46bd      	mov	sp, r7
 8012898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289c:	4770      	bx	lr
 801289e:	bf00      	nop
 80128a0:	20008468 	.word	0x20008468
 80128a4:	20008470 	.word	0x20008470

080128a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80128ac:	2201      	movs	r2, #1
 80128ae:	490e      	ldr	r1, [pc, #56]	; (80128e8 <MX_USB_HOST_Init+0x40>)
 80128b0:	480e      	ldr	r0, [pc, #56]	; (80128ec <MX_USB_HOST_Init+0x44>)
 80128b2:	f7fb fefb 	bl	800e6ac <USBH_Init>
 80128b6:	4603      	mov	r3, r0
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d001      	beq.n	80128c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80128bc:	f7ef fac4 	bl	8001e48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80128c0:	490b      	ldr	r1, [pc, #44]	; (80128f0 <MX_USB_HOST_Init+0x48>)
 80128c2:	480a      	ldr	r0, [pc, #40]	; (80128ec <MX_USB_HOST_Init+0x44>)
 80128c4:	f7fb ffa8 	bl	800e818 <USBH_RegisterClass>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d001      	beq.n	80128d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80128ce:	f7ef fabb 	bl	8001e48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80128d2:	4806      	ldr	r0, [pc, #24]	; (80128ec <MX_USB_HOST_Init+0x44>)
 80128d4:	f7fc f82c 	bl	800e930 <USBH_Start>
 80128d8:	4603      	mov	r3, r0
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d001      	beq.n	80128e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80128de:	f7ef fab3 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80128e2:	bf00      	nop
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	080128f5 	.word	0x080128f5
 80128ec:	20009174 	.word	0x20009174
 80128f0:	20000070 	.word	0x20000070

080128f4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	460b      	mov	r3, r1
 80128fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012900:	78fb      	ldrb	r3, [r7, #3]
 8012902:	3b01      	subs	r3, #1
 8012904:	2b04      	cmp	r3, #4
 8012906:	d819      	bhi.n	801293c <USBH_UserProcess+0x48>
 8012908:	a201      	add	r2, pc, #4	; (adr r2, 8012910 <USBH_UserProcess+0x1c>)
 801290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801290e:	bf00      	nop
 8012910:	0801293d 	.word	0x0801293d
 8012914:	0801292d 	.word	0x0801292d
 8012918:	0801293d 	.word	0x0801293d
 801291c:	08012935 	.word	0x08012935
 8012920:	08012925 	.word	0x08012925
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012924:	4b09      	ldr	r3, [pc, #36]	; (801294c <USBH_UserProcess+0x58>)
 8012926:	2203      	movs	r2, #3
 8012928:	701a      	strb	r2, [r3, #0]
  break;
 801292a:	e008      	b.n	801293e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801292c:	4b07      	ldr	r3, [pc, #28]	; (801294c <USBH_UserProcess+0x58>)
 801292e:	2202      	movs	r2, #2
 8012930:	701a      	strb	r2, [r3, #0]
  break;
 8012932:	e004      	b.n	801293e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012934:	4b05      	ldr	r3, [pc, #20]	; (801294c <USBH_UserProcess+0x58>)
 8012936:	2201      	movs	r2, #1
 8012938:	701a      	strb	r2, [r3, #0]
  break;
 801293a:	e000      	b.n	801293e <USBH_UserProcess+0x4a>

  default:
  break;
 801293c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801293e:	bf00      	nop
 8012940:	370c      	adds	r7, #12
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	4770      	bx	lr
 801294a:	bf00      	nop
 801294c:	20008480 	.word	0x20008480

08012950 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b08a      	sub	sp, #40	; 0x28
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012958:	f107 0314 	add.w	r3, r7, #20
 801295c:	2200      	movs	r2, #0
 801295e:	601a      	str	r2, [r3, #0]
 8012960:	605a      	str	r2, [r3, #4]
 8012962:	609a      	str	r2, [r3, #8]
 8012964:	60da      	str	r2, [r3, #12]
 8012966:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012970:	d13c      	bne.n	80129ec <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012972:	4b20      	ldr	r3, [pc, #128]	; (80129f4 <HAL_HCD_MspInit+0xa4>)
 8012974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012976:	4a1f      	ldr	r2, [pc, #124]	; (80129f4 <HAL_HCD_MspInit+0xa4>)
 8012978:	f043 0301 	orr.w	r3, r3, #1
 801297c:	6313      	str	r3, [r2, #48]	; 0x30
 801297e:	4b1d      	ldr	r3, [pc, #116]	; (80129f4 <HAL_HCD_MspInit+0xa4>)
 8012980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012982:	f003 0301 	and.w	r3, r3, #1
 8012986:	613b      	str	r3, [r7, #16]
 8012988:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801298a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801298e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012990:	2302      	movs	r3, #2
 8012992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012994:	2300      	movs	r3, #0
 8012996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012998:	2303      	movs	r3, #3
 801299a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801299c:	230a      	movs	r3, #10
 801299e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80129a0:	f107 0314 	add.w	r3, r7, #20
 80129a4:	4619      	mov	r1, r3
 80129a6:	4814      	ldr	r0, [pc, #80]	; (80129f8 <HAL_HCD_MspInit+0xa8>)
 80129a8:	f7f2 f812 	bl	80049d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80129ac:	4b11      	ldr	r3, [pc, #68]	; (80129f4 <HAL_HCD_MspInit+0xa4>)
 80129ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129b0:	4a10      	ldr	r2, [pc, #64]	; (80129f4 <HAL_HCD_MspInit+0xa4>)
 80129b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129b6:	6353      	str	r3, [r2, #52]	; 0x34
 80129b8:	4b0e      	ldr	r3, [pc, #56]	; (80129f4 <HAL_HCD_MspInit+0xa4>)
 80129ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129c0:	60fb      	str	r3, [r7, #12]
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	4b0b      	ldr	r3, [pc, #44]	; (80129f4 <HAL_HCD_MspInit+0xa4>)
 80129c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129c8:	4a0a      	ldr	r2, [pc, #40]	; (80129f4 <HAL_HCD_MspInit+0xa4>)
 80129ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80129ce:	6453      	str	r3, [r2, #68]	; 0x44
 80129d0:	4b08      	ldr	r3, [pc, #32]	; (80129f4 <HAL_HCD_MspInit+0xa4>)
 80129d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80129d8:	60bb      	str	r3, [r7, #8]
 80129da:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80129dc:	2200      	movs	r2, #0
 80129de:	2105      	movs	r1, #5
 80129e0:	2043      	movs	r0, #67	; 0x43
 80129e2:	f7f0 ff77 	bl	80038d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80129e6:	2043      	movs	r0, #67	; 0x43
 80129e8:	f7f0 ff90 	bl	800390c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80129ec:	bf00      	nop
 80129ee:	3728      	adds	r7, #40	; 0x28
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	40023800 	.word	0x40023800
 80129f8:	40020000 	.word	0x40020000

080129fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7fc fc3d 	bl	800f28a <USBH_LL_IncTimer>
}
 8012a10:	bf00      	nop
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fc fc81 	bl	800f32e <USBH_LL_Connect>
}
 8012a2c:	bf00      	nop
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7fc fc96 	bl	800f374 <USBH_LL_Disconnect>
}
 8012a48:	bf00      	nop
 8012a4a:	3708      	adds	r7, #8
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}

08012a50 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b082      	sub	sp, #8
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	460b      	mov	r3, r1
 8012a5a:	70fb      	strb	r3, [r7, #3]
 8012a5c:	4613      	mov	r3, r2
 8012a5e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7fc fccb 	bl	800f402 <USBH_LL_NotifyURBChange>
#endif
}
 8012a6c:	bf00      	nop
 8012a6e:	3708      	adds	r7, #8
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7fc fc2b 	bl	800f2de <USBH_LL_PortEnabled>
}
 8012a88:	bf00      	nop
 8012a8a:	3708      	adds	r7, #8
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7fc fc37 	bl	800f312 <USBH_LL_PortDisabled>
}
 8012aa4:	bf00      	nop
 8012aa6:	3708      	adds	r7, #8
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}

08012aac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b082      	sub	sp, #8
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012aba:	2b01      	cmp	r3, #1
 8012abc:	d12a      	bne.n	8012b14 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8012abe:	4a18      	ldr	r2, [pc, #96]	; (8012b20 <USBH_LL_Init+0x74>)
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	4a15      	ldr	r2, [pc, #84]	; (8012b20 <USBH_LL_Init+0x74>)
 8012aca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012ace:	4b14      	ldr	r3, [pc, #80]	; (8012b20 <USBH_LL_Init+0x74>)
 8012ad0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012ad4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012ad6:	4b12      	ldr	r3, [pc, #72]	; (8012b20 <USBH_LL_Init+0x74>)
 8012ad8:	2208      	movs	r2, #8
 8012ada:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012adc:	4b10      	ldr	r3, [pc, #64]	; (8012b20 <USBH_LL_Init+0x74>)
 8012ade:	2201      	movs	r2, #1
 8012ae0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012ae2:	4b0f      	ldr	r3, [pc, #60]	; (8012b20 <USBH_LL_Init+0x74>)
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012ae8:	4b0d      	ldr	r3, [pc, #52]	; (8012b20 <USBH_LL_Init+0x74>)
 8012aea:	2202      	movs	r2, #2
 8012aec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012aee:	4b0c      	ldr	r3, [pc, #48]	; (8012b20 <USBH_LL_Init+0x74>)
 8012af0:	2200      	movs	r2, #0
 8012af2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012af4:	480a      	ldr	r0, [pc, #40]	; (8012b20 <USBH_LL_Init+0x74>)
 8012af6:	f7f2 f948 	bl	8004d8a <HAL_HCD_Init>
 8012afa:	4603      	mov	r3, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d001      	beq.n	8012b04 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012b00:	f7ef f9a2 	bl	8001e48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012b04:	4806      	ldr	r0, [pc, #24]	; (8012b20 <USBH_LL_Init+0x74>)
 8012b06:	f7f2 fd2c 	bl	8005562 <HAL_HCD_GetCurrentFrame>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f7fc fbac 	bl	800f26c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012b14:	2300      	movs	r3, #0
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3708      	adds	r7, #8
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}
 8012b1e:	bf00      	nop
 8012b20:	20009558 	.word	0x20009558

08012b24 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b084      	sub	sp, #16
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012b30:	2300      	movs	r3, #0
 8012b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7f2 fc9b 	bl	8005476 <HAL_HCD_Start>
 8012b40:	4603      	mov	r3, r0
 8012b42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012b44:	7bfb      	ldrb	r3, [r7, #15]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f000 f95c 	bl	8012e04 <USBH_Get_USB_Status>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3710      	adds	r7, #16
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}

08012b5a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012b5a:	b580      	push	{r7, lr}
 8012b5c:	b084      	sub	sp, #16
 8012b5e:	af00      	add	r7, sp, #0
 8012b60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b62:	2300      	movs	r3, #0
 8012b64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012b66:	2300      	movs	r3, #0
 8012b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7f2 fca3 	bl	80054bc <HAL_HCD_Stop>
 8012b76:	4603      	mov	r3, r0
 8012b78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012b7a:	7bfb      	ldrb	r3, [r7, #15]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f000 f941 	bl	8012e04 <USBH_Get_USB_Status>
 8012b82:	4603      	mov	r3, r0
 8012b84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3710      	adds	r7, #16
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}

08012b90 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012b98:	2301      	movs	r3, #1
 8012b9a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7f2 fceb 	bl	800557e <HAL_HCD_GetCurrentSpeed>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2b02      	cmp	r3, #2
 8012bac:	d00c      	beq.n	8012bc8 <USBH_LL_GetSpeed+0x38>
 8012bae:	2b02      	cmp	r3, #2
 8012bb0:	d80d      	bhi.n	8012bce <USBH_LL_GetSpeed+0x3e>
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d002      	beq.n	8012bbc <USBH_LL_GetSpeed+0x2c>
 8012bb6:	2b01      	cmp	r3, #1
 8012bb8:	d003      	beq.n	8012bc2 <USBH_LL_GetSpeed+0x32>
 8012bba:	e008      	b.n	8012bce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8012bc0:	e008      	b.n	8012bd4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8012bc6:	e005      	b.n	8012bd4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012bc8:	2302      	movs	r3, #2
 8012bca:	73fb      	strb	r3, [r7, #15]
    break;
 8012bcc:	e002      	b.n	8012bd4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012bce:	2301      	movs	r3, #1
 8012bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8012bd2:	bf00      	nop
  }
  return  speed;
 8012bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b084      	sub	sp, #16
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012be6:	2300      	movs	r3, #0
 8012be8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012bea:	2300      	movs	r3, #0
 8012bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7f2 fc7e 	bl	80054f6 <HAL_HCD_ResetPort>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012bfe:	7bfb      	ldrb	r3, [r7, #15]
 8012c00:	4618      	mov	r0, r3
 8012c02:	f000 f8ff 	bl	8012e04 <USBH_Get_USB_Status>
 8012c06:	4603      	mov	r3, r0
 8012c08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3710      	adds	r7, #16
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
 8012c1c:	460b      	mov	r3, r1
 8012c1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012c26:	78fa      	ldrb	r2, [r7, #3]
 8012c28:	4611      	mov	r1, r2
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7f2 fc85 	bl	800553a <HAL_HCD_HC_GetXferCount>
 8012c30:	4603      	mov	r3, r0
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3708      	adds	r7, #8
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012c3a:	b590      	push	{r4, r7, lr}
 8012c3c:	b089      	sub	sp, #36	; 0x24
 8012c3e:	af04      	add	r7, sp, #16
 8012c40:	6078      	str	r0, [r7, #4]
 8012c42:	4608      	mov	r0, r1
 8012c44:	4611      	mov	r1, r2
 8012c46:	461a      	mov	r2, r3
 8012c48:	4603      	mov	r3, r0
 8012c4a:	70fb      	strb	r3, [r7, #3]
 8012c4c:	460b      	mov	r3, r1
 8012c4e:	70bb      	strb	r3, [r7, #2]
 8012c50:	4613      	mov	r3, r2
 8012c52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c54:	2300      	movs	r3, #0
 8012c56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012c62:	787c      	ldrb	r4, [r7, #1]
 8012c64:	78ba      	ldrb	r2, [r7, #2]
 8012c66:	78f9      	ldrb	r1, [r7, #3]
 8012c68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012c6a:	9302      	str	r3, [sp, #8]
 8012c6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012c70:	9301      	str	r3, [sp, #4]
 8012c72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012c76:	9300      	str	r3, [sp, #0]
 8012c78:	4623      	mov	r3, r4
 8012c7a:	f7f2 f8e8 	bl	8004e4e <HAL_HCD_HC_Init>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012c82:	7bfb      	ldrb	r3, [r7, #15]
 8012c84:	4618      	mov	r0, r3
 8012c86:	f000 f8bd 	bl	8012e04 <USBH_Get_USB_Status>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3714      	adds	r7, #20
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd90      	pop	{r4, r7, pc}

08012c98 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b084      	sub	sp, #16
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012cb2:	78fa      	ldrb	r2, [r7, #3]
 8012cb4:	4611      	mov	r1, r2
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7f2 f958 	bl	8004f6c <HAL_HCD_HC_Halt>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012cc0:	7bfb      	ldrb	r3, [r7, #15]
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f000 f89e 	bl	8012e04 <USBH_Get_USB_Status>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3710      	adds	r7, #16
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}

08012cd6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012cd6:	b590      	push	{r4, r7, lr}
 8012cd8:	b089      	sub	sp, #36	; 0x24
 8012cda:	af04      	add	r7, sp, #16
 8012cdc:	6078      	str	r0, [r7, #4]
 8012cde:	4608      	mov	r0, r1
 8012ce0:	4611      	mov	r1, r2
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	70fb      	strb	r3, [r7, #3]
 8012ce8:	460b      	mov	r3, r1
 8012cea:	70bb      	strb	r3, [r7, #2]
 8012cec:	4613      	mov	r3, r2
 8012cee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012cfe:	787c      	ldrb	r4, [r7, #1]
 8012d00:	78ba      	ldrb	r2, [r7, #2]
 8012d02:	78f9      	ldrb	r1, [r7, #3]
 8012d04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012d08:	9303      	str	r3, [sp, #12]
 8012d0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012d0c:	9302      	str	r3, [sp, #8]
 8012d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d10:	9301      	str	r3, [sp, #4]
 8012d12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d16:	9300      	str	r3, [sp, #0]
 8012d18:	4623      	mov	r3, r4
 8012d1a:	f7f2 f94b 	bl	8004fb4 <HAL_HCD_HC_SubmitRequest>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012d22:	7bfb      	ldrb	r3, [r7, #15]
 8012d24:	4618      	mov	r0, r3
 8012d26:	f000 f86d 	bl	8012e04 <USBH_Get_USB_Status>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d30:	4618      	mov	r0, r3
 8012d32:	3714      	adds	r7, #20
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd90      	pop	{r4, r7, pc}

08012d38 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	460b      	mov	r3, r1
 8012d42:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012d4a:	78fa      	ldrb	r2, [r7, #3]
 8012d4c:	4611      	mov	r1, r2
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f7f2 fbdf 	bl	8005512 <HAL_HCD_HC_GetURBState>
 8012d54:	4603      	mov	r3, r0
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3708      	adds	r7, #8
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}

08012d5e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012d5e:	b580      	push	{r7, lr}
 8012d60:	b082      	sub	sp, #8
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	6078      	str	r0, [r7, #4]
 8012d66:	460b      	mov	r3, r1
 8012d68:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	d103      	bne.n	8012d7c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8012d74:	78fb      	ldrb	r3, [r7, #3]
 8012d76:	4618      	mov	r0, r3
 8012d78:	f000 f870 	bl	8012e5c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012d7c:	20c8      	movs	r0, #200	; 0xc8
 8012d7e:	f7f0 fa39 	bl	80031f4 <HAL_Delay>
  return USBH_OK;
 8012d82:	2300      	movs	r3, #0
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3708      	adds	r7, #8
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b085      	sub	sp, #20
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	460b      	mov	r3, r1
 8012d96:	70fb      	strb	r3, [r7, #3]
 8012d98:	4613      	mov	r3, r2
 8012d9a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012da2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012da4:	78fb      	ldrb	r3, [r7, #3]
 8012da6:	68fa      	ldr	r2, [r7, #12]
 8012da8:	212c      	movs	r1, #44	; 0x2c
 8012daa:	fb01 f303 	mul.w	r3, r1, r3
 8012dae:	4413      	add	r3, r2
 8012db0:	333b      	adds	r3, #59	; 0x3b
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d009      	beq.n	8012dcc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012db8:	78fb      	ldrb	r3, [r7, #3]
 8012dba:	68fa      	ldr	r2, [r7, #12]
 8012dbc:	212c      	movs	r1, #44	; 0x2c
 8012dbe:	fb01 f303 	mul.w	r3, r1, r3
 8012dc2:	4413      	add	r3, r2
 8012dc4:	3354      	adds	r3, #84	; 0x54
 8012dc6:	78ba      	ldrb	r2, [r7, #2]
 8012dc8:	701a      	strb	r2, [r3, #0]
 8012dca:	e008      	b.n	8012dde <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012dcc:	78fb      	ldrb	r3, [r7, #3]
 8012dce:	68fa      	ldr	r2, [r7, #12]
 8012dd0:	212c      	movs	r1, #44	; 0x2c
 8012dd2:	fb01 f303 	mul.w	r3, r1, r3
 8012dd6:	4413      	add	r3, r2
 8012dd8:	3355      	adds	r3, #85	; 0x55
 8012dda:	78ba      	ldrb	r2, [r7, #2]
 8012ddc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012dde:	2300      	movs	r3, #0
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3714      	adds	r7, #20
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr

08012dec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b082      	sub	sp, #8
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f7f0 f9fd 	bl	80031f4 <HAL_Delay>
}
 8012dfa:	bf00      	nop
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
	...

08012e04 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012e04:	b480      	push	{r7}
 8012e06:	b085      	sub	sp, #20
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012e12:	79fb      	ldrb	r3, [r7, #7]
 8012e14:	2b03      	cmp	r3, #3
 8012e16:	d817      	bhi.n	8012e48 <USBH_Get_USB_Status+0x44>
 8012e18:	a201      	add	r2, pc, #4	; (adr r2, 8012e20 <USBH_Get_USB_Status+0x1c>)
 8012e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e1e:	bf00      	nop
 8012e20:	08012e31 	.word	0x08012e31
 8012e24:	08012e37 	.word	0x08012e37
 8012e28:	08012e3d 	.word	0x08012e3d
 8012e2c:	08012e43 	.word	0x08012e43
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012e30:	2300      	movs	r3, #0
 8012e32:	73fb      	strb	r3, [r7, #15]
    break;
 8012e34:	e00b      	b.n	8012e4e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012e36:	2302      	movs	r3, #2
 8012e38:	73fb      	strb	r3, [r7, #15]
    break;
 8012e3a:	e008      	b.n	8012e4e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8012e40:	e005      	b.n	8012e4e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012e42:	2302      	movs	r3, #2
 8012e44:	73fb      	strb	r3, [r7, #15]
    break;
 8012e46:	e002      	b.n	8012e4e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012e48:	2302      	movs	r3, #2
 8012e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8012e4c:	bf00      	nop
  }
  return usb_status;
 8012e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	3714      	adds	r7, #20
 8012e54:	46bd      	mov	sp, r7
 8012e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5a:	4770      	bx	lr

08012e5c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b084      	sub	sp, #16
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	4603      	mov	r3, r0
 8012e64:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012e66:	79fb      	ldrb	r3, [r7, #7]
 8012e68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012e6a:	79fb      	ldrb	r3, [r7, #7]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d102      	bne.n	8012e76 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8012e70:	2300      	movs	r3, #0
 8012e72:	73fb      	strb	r3, [r7, #15]
 8012e74:	e001      	b.n	8012e7a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8012e76:	2301      	movs	r3, #1
 8012e78:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8012e7a:	7bfb      	ldrb	r3, [r7, #15]
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	2120      	movs	r1, #32
 8012e80:	4803      	ldr	r0, [pc, #12]	; (8012e90 <MX_DriverVbusFS+0x34>)
 8012e82:	f7f1 ff69 	bl	8004d58 <HAL_GPIO_WritePin>
}
 8012e86:	bf00      	nop
 8012e88:	3710      	adds	r7, #16
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	40020c00 	.word	0x40020c00

08012e94 <_init>:
 8012e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e96:	bf00      	nop
 8012e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e9a:	bc08      	pop	{r3}
 8012e9c:	469e      	mov	lr, r3
 8012e9e:	4770      	bx	lr

08012ea0 <_fini>:
 8012ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ea2:	bf00      	nop
 8012ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ea6:	bc08      	pop	{r3}
 8012ea8:	469e      	mov	lr, r3
 8012eaa:	4770      	bx	lr

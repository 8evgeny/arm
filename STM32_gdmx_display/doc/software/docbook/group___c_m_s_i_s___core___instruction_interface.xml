<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group___c_m_s_i_s___core___instruction_interface" xml:lang="en-US">
<title>CMSIS Core Instruction Interface</title>
<indexterm><primary>CMSIS Core Instruction Interface</primary></indexterm>
<simplesect>
    <title>Modules    </title>
        <itemizedlist>
            <listitem><para><link linkend="_group___c_m_s_i_s___s_i_m_d__intrinsics">CMSIS SIMD Intrinsics</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gabd585ddc865fb9b7f2493af1eee1a572">__NOP</link>   __nop</para>

<para>No Operation. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gad23bf2b78a9a4524157c9de0d30b7448">__WFI</link>   __wfi</para>

<para>Wait For Interrupt. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaac6cc7dd4325d9cb40d3290fa5244b3d">__WFE</link>   __wfe</para>

<para>Wait For Event. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaab4f296d0022b4b10dc0976eb22052f9">__SEV</link>   __sev</para>

<para>Send Event. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaad233022e850a009fc6f7602be1182f6">__ISB</link>()</para>

<para>Instruction Synchronization Barrier. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga067d257a2b34565410acefb5afef2203">__DSB</link>()</para>

<para>Data Synchronization Barrier. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga671101179b5943990785f36f8c1e2269">__DMB</link>()</para>

<para>Data Memory Barrier. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga14f54807872c0f5e05604c4924abfdae">__REV</link>   __rev</para>

<para>Reverse byte order (32 bit) </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga95b9bd281ddeda378b85afdb8f2ced86">__ROR</link>   __ror</para>

<para>Rotate Right in unsigned value (32 bit) </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga15ea6bd3c507d3e81c3b3a1258e46397">__BKPT</link>(value)   __breakpoint(value)</para>

<para>Breakpoint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga5d5bb1527e042be4a9fa5a33f65cc248">__CLZ</link>   __clz</para>

<para>Count leading zeros. </para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276"/>#define <emphasis role="strong">__CMSIS_GCC_OUT_REG</emphasis>(r)   &quot;=r&quot; (r)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97"/>#define <emphasis role="strong">__CMSIS_GCC_USE_REG</emphasis>(r)   &quot;r&quot; (r)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gabd585ddc865fb9b7f2493af1eee1a572">__NOP</link>   __builtin_arm_nop</para>

<para>No Operation. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gad23bf2b78a9a4524157c9de0d30b7448">__WFI</link>   __builtin_arm_wfi</para>

<para>Wait For Interrupt. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaac6cc7dd4325d9cb40d3290fa5244b3d">__WFE</link>   __builtin_arm_wfe</para>

<para>Wait For Event. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaab4f296d0022b4b10dc0976eb22052f9">__SEV</link>   __builtin_arm_sev</para>

<para>Send Event. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaad233022e850a009fc6f7602be1182f6">__ISB</link>()   __builtin_arm_isb(0xF);</para>

<para>Instruction Synchronization Barrier. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga067d257a2b34565410acefb5afef2203">__DSB</link>()   __builtin_arm_dsb(0xF);</para>

<para>Data Synchronization Barrier. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga671101179b5943990785f36f8c1e2269">__DMB</link>()   __builtin_arm_dmb(0xF);</para>

<para>Data Memory Barrier. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaca25a02e09983da5558f5242f2f635bc">__REV</link>(value)   __builtin_bswap32(value)</para>

<para>Reverse byte order (32 bit) </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gad35497777af37e7809271b5e6f9510ba">__REV16</link>(value)   <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gab16acb6456176f1e87a4f2724c2b6028">__ROR</link>(<link linkend="_group___c_m_s_i_s___core___instruction_interface_1gadb92679719950635fba8b1b954072695">__REV</link>(value), 16)</para>

<para>Reverse byte order (16 bit) </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gae580812686119c9c5cf3c11a7519a404">__REVSH</link>(value)   (int16_t)__builtin_bswap16(value)</para>

<para>Reverse byte order (16 bit) </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga15ea6bd3c507d3e81c3b3a1258e46397">__BKPT</link>(value)   __ASM volatile (&quot;bkpt &quot;#value)</para>

<para>Breakpoint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gab83768933a612816fad669db5488366f">__RBIT</link>   __builtin_arm_rbit</para>

<para>Reverse bit order of value. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga5d5bb1527e042be4a9fa5a33f65cc248">__CLZ</link>   (uint8_t)__builtin_clz</para>

<para>Count leading zeros. </para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276"/>#define <emphasis role="strong">__CMSIS_GCC_OUT_REG</emphasis>(r)   &quot;=r&quot; (r)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga03179f79efee45c226dddfb8d824ad83"/>#define <emphasis role="strong">__CMSIS_GCC_RW_REG</emphasis>(r)   &quot;+r&quot; (r)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97"/>#define <emphasis role="strong">__CMSIS_GCC_USE_REG</emphasis>(r)   &quot;r&quot; (r)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga0b13f3617dd4af2cd2eb3a311073f717">__NOP</link>()   __ASM volatile (&quot;nop&quot;)</para>

<para>No Operation. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gab28e2b328c4cf23c917ab18a23194f8e">__WFI</link>()   __ASM volatile (&quot;wfi&quot;)</para>

<para>Wait For Interrupt. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaf0330712223f4cfb6091e4ab84775f73">__WFE</link>()   __ASM volatile (&quot;wfe&quot;)</para>

<para>Wait For Event. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gafa58e60fcd2176ad58f96947466ea1fa">__SEV</link>()   __ASM volatile (&quot;sev&quot;)</para>

<para>Send Event. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga15ea6bd3c507d3e81c3b3a1258e46397">__BKPT</link>(value)   __ASM volatile (&quot;bkpt &quot;#value)</para>

<para>Breakpoint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga5d5bb1527e042be4a9fa5a33f65cc248">__CLZ</link>   (uint8_t)__builtin_clz</para>

<para>Count leading zeros. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96">__attribute__</link> ((section(&quot;.rev16_text&quot;))) __STATIC_INLINE __ASM uint32_t <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaa12aedd096506c9639c1581acd5c6a78">__REV16</link>(uint32_t value)</para>

<para>Reverse byte order (16 bit) </para>
</listitem>
            <listitem><para><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gabe2b619a40cc0a7ffa8f765249ccf682">__attribute__</link> ((section(&quot;.revsh_text&quot;))) __STATIC_INLINE __ASM int16_t <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gacb695341318226a5f69ed508166622ac">__REVSH</link>(int16_t value)</para>

<para>Reverse byte order (16 bit) </para>
</listitem>
            <listitem><para><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gab926fe7178a379c3a7c0410b06fcb661">__attribute__</link> ((always_inline)) __STATIC_INLINE uint32_t <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaf944a7b7d8fd70164cca27669316bcf7">__RBIT</link>(uint32_t value)</para>

<para>Reverse bit order of value. </para>
</listitem>
            <listitem><para>__STATIC_FORCEINLINE uint32_t <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gab16acb6456176f1e87a4f2724c2b6028">__ROR</link> (uint32_t op1, uint32_t op2)</para>

<para>Rotate Right in unsigned value (32 bit) </para>
</listitem>
            <listitem><para>__STATIC_FORCEINLINE int32_t <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga372c0535573dde3e37f0f08c774a3487">__SSAT</link> (int32_t val, uint32_t sat)</para>

<para>Signed Saturate. </para>
</listitem>
            <listitem><para>__STATIC_FORCEINLINE uint32_t <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga6562dbd8182d1571e22dbca7ebdfa9bc">__USAT</link> (int32_t val, uint32_t sat)</para>

<para>Unsigned Saturate. </para>
</listitem>
            <listitem><para>__STATIC_FORCEINLINE void <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gae26c2b3961e702aeabc24d4984ebd369">__ISB</link> (void)</para>

<para>Instruction Synchronization Barrier. </para>
</listitem>
            <listitem><para>__STATIC_FORCEINLINE void <link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga7fe277f5385d23b9c44b2cbda1577ce9">__DSB</link> (void)</para>

<para>Data Synchronization Barrier. </para>
</listitem>
            <listitem><para>__STATIC_FORCEINLINE void <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gab1ea24daaaaee9c828f90cbca330cb5e">__DMB</link> (void)</para>

<para>Data Memory Barrier. </para>
</listitem>
            <listitem><para>__STATIC_FORCEINLINE uint32_t <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gadb92679719950635fba8b1b954072695">__REV</link> (uint32_t value)</para>

<para>Reverse byte order (32 bit) </para>
</listitem>
            <listitem><para>__STATIC_FORCEINLINE uint32_t <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaa12aedd096506c9639c1581acd5c6a78">__REV16</link> (uint32_t value)</para>

<para>Reverse byte order (16 bit) </para>
</listitem>
            <listitem><para>__STATIC_FORCEINLINE int16_t <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gacb695341318226a5f69ed508166622ac">__REVSH</link> (int16_t value)</para>

<para>Reverse byte order (16 bit) </para>
</listitem>
            <listitem><para>__STATIC_FORCEINLINE uint32_t <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaf944a7b7d8fd70164cca27669316bcf7">__RBIT</link> (uint32_t value)</para>

<para>Reverse bit order of value. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>uint32_t <emphasis role="strong">sat</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Access to dedicated instructions </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga15ea6bd3c507d3e81c3b3a1258e46397"/>    <section>
    <title>__BKPT<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__BKPT</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__BKPT</secondary></indexterm>
<para><computeroutput>#define __BKPT( value)   __breakpoint(value)</computeroutput></para><para>

<para>Breakpoint. </para>
</para>

<para>Causes the processor to enter Debug state. Debug tools can use this to investigate system state when the instruction at a particular address is reached. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>is ignored by the processor. If required, a debugger can use it to store additional information about the breakpoint. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga15ea6bd3c507d3e81c3b3a1258e46397"/>    <section>
    <title>__BKPT<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__BKPT</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__BKPT</secondary></indexterm>
<para><computeroutput>#define __BKPT( value)   __ASM volatile (&quot;bkpt &quot;#value)</computeroutput></para><para>

<para>Breakpoint. </para>
</para>

<para>Causes the processor to enter Debug state. Debug tools can use this to investigate system state when the instruction at a particular address is reached. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>is ignored by the processor. If required, a debugger can use it to store additional information about the breakpoint. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga15ea6bd3c507d3e81c3b3a1258e46397"/>    <section>
    <title>__BKPT<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__BKPT</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__BKPT</secondary></indexterm>
<para><computeroutput>#define __BKPT( value)   __ASM volatile (&quot;bkpt &quot;#value)</computeroutput></para><para>

<para>Breakpoint. </para>
</para>

<para>Causes the processor to enter Debug state. Debug tools can use this to investigate system state when the instruction at a particular address is reached. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>is ignored by the processor. If required, a debugger can use it to store additional information about the breakpoint. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga5d5bb1527e042be4a9fa5a33f65cc248"/>    <section>
    <title>__CLZ<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__CLZ</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__CLZ</secondary></indexterm>
<para><computeroutput>#define __CLZ   __clz</computeroutput></para><para>

<para>Count leading zeros. </para>
</para>

<para>Counts the number of leading zeros of a data value. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to count the leading zeros </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>number of leading zeros in value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga5d5bb1527e042be4a9fa5a33f65cc248"/>    <section>
    <title>__CLZ<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__CLZ</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__CLZ</secondary></indexterm>
<para><computeroutput>#define __CLZ   (uint8_t)__builtin_clz</computeroutput></para><para>

<para>Count leading zeros. </para>
</para>

<para>Counts the number of leading zeros of a data value. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to count the leading zeros </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>number of leading zeros in value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga5d5bb1527e042be4a9fa5a33f65cc248"/>    <section>
    <title>__CLZ<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__CLZ</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__CLZ</secondary></indexterm>
<para><computeroutput>#define __CLZ   (uint8_t)__builtin_clz</computeroutput></para><para>

<para>Count leading zeros. </para>
</para>

<para>Counts the number of leading zeros of a data value. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to count the leading zeros </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>number of leading zeros in value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga671101179b5943990785f36f8c1e2269"/>    <section>
    <title>__DMB<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__DMB</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__DMB</secondary></indexterm>
<para><computeroutput>#define __DMB( void)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__schedule_barrier();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dmb(0xF);\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__schedule_barrier();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0U)
</programlisting><para>

<para>Data Memory Barrier. </para>
</para>

<para>Ensures the apparent order of the explicit memory operations before and after the instruction, without ensuring their completion. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga671101179b5943990785f36f8c1e2269"/>    <section>
    <title>__DMB<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__DMB</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__DMB</secondary></indexterm>
<para><computeroutput>#define __DMB( void)   __builtin_arm_dmb(0xF);</computeroutput></para><para>

<para>Data Memory Barrier. </para>
</para>

<para>Ensures the apparent order of the explicit memory operations before and after the instruction, without ensuring their completion. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga067d257a2b34565410acefb5afef2203"/>    <section>
    <title>__DSB<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__DSB</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__DSB</secondary></indexterm>
<para><computeroutput>#define __DSB( void)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__schedule_barrier();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dsb(0xF);\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__schedule_barrier();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0U)
</programlisting><para>

<para>Data Synchronization Barrier. </para>
</para>

<para>Acts as a special kind of Data Memory Barrier. It completes when all explicit memory accesses before this instruction complete. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga067d257a2b34565410acefb5afef2203"/>    <section>
    <title>__DSB<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__DSB</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__DSB</secondary></indexterm>
<para><computeroutput>#define __DSB( void)   __builtin_arm_dsb(0xF);</computeroutput></para><para>

<para>Data Synchronization Barrier. </para>
</para>

<para>Acts as a special kind of Data Memory Barrier. It completes when all explicit memory accesses before this instruction complete. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gaad233022e850a009fc6f7602be1182f6"/>    <section>
    <title>__ISB<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__ISB</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__ISB</secondary></indexterm>
<para><computeroutput>#define __ISB( void)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__schedule_barrier();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__isb(0xF);\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__schedule_barrier();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0U)
</programlisting><para>

<para>Instruction Synchronization Barrier. </para>
</para>

<para>Instruction Synchronization Barrier flushes the pipeline in the processor, so that all instructions following the ISB are fetched from cache or memory, after the instruction has been completed. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gaad233022e850a009fc6f7602be1182f6"/>    <section>
    <title>__ISB<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__ISB</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__ISB</secondary></indexterm>
<para><computeroutput>#define __ISB( void)   __builtin_arm_isb(0xF);</computeroutput></para><para>

<para>Instruction Synchronization Barrier. </para>
</para>

<para>Instruction Synchronization Barrier flushes the pipeline in the processor, so that all instructions following the ISB are fetched from cache or memory, after the instruction has been completed. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gabd585ddc865fb9b7f2493af1eee1a572"/>    <section>
    <title>__NOP<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__NOP</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__NOP</secondary></indexterm>
<para><computeroutput>#define __NOP   __nop</computeroutput></para><para>

<para>No Operation. </para>
</para>

<para>No Operation does nothing. This instruction can be used for code alignment purposes. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gabd585ddc865fb9b7f2493af1eee1a572"/>    <section>
    <title>__NOP<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__NOP</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__NOP</secondary></indexterm>
<para><computeroutput>#define __NOP   __builtin_arm_nop</computeroutput></para><para>

<para>No Operation. </para>
</para>

<para>No Operation does nothing. This instruction can be used for code alignment purposes. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga0b13f3617dd4af2cd2eb3a311073f717"/>    <section>
    <title>__NOP<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__NOP</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__NOP</secondary></indexterm>
<para><computeroutput>#define __NOP( )   __ASM volatile (&quot;nop&quot;)</computeroutput></para><para>

<para>No Operation. </para>
</para>

<para>No Operation does nothing. This instruction can be used for code alignment purposes. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gab83768933a612816fad669db5488366f"/>    <section>
    <title>__RBIT</title>
<indexterm><primary>__RBIT</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__RBIT</secondary></indexterm>
<para><computeroutput>#define __RBIT   __builtin_arm_rbit</computeroutput></para><para>

<para>Reverse bit order of value. </para>
</para>

<para>Reverses the bit order of the given value. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga14f54807872c0f5e05604c4924abfdae"/>    <section>
    <title>__REV<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__REV</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__REV</secondary></indexterm>
<para><computeroutput>#define __REV   __rev</computeroutput></para><para>

<para>Reverse byte order (32 bit) </para>
</para>

<para>Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x78563412. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gaca25a02e09983da5558f5242f2f635bc"/>    <section>
    <title>__REV<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__REV</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__REV</secondary></indexterm>
<para><computeroutput>#define __REV( value)   __builtin_bswap32(value)</computeroutput></para><para>

<para>Reverse byte order (32 bit) </para>
</para>

<para>Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x78563412. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gad35497777af37e7809271b5e6f9510ba"/>    <section>
    <title>__REV16</title>
<indexterm><primary>__REV16</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__REV16</secondary></indexterm>
<para><computeroutput>#define __REV16( value)   <link linkend="_group___c_m_s_i_s___core___instruction_interface_1gab16acb6456176f1e87a4f2724c2b6028">__ROR</link>(<link linkend="_group___c_m_s_i_s___core___instruction_interface_1gadb92679719950635fba8b1b954072695">__REV</link>(value), 16)</computeroutput></para><para>

<para>Reverse byte order (16 bit) </para>
</para>

<para>Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 0x34127856. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gae580812686119c9c5cf3c11a7519a404"/>    <section>
    <title>__REVSH</title>
<indexterm><primary>__REVSH</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__REVSH</secondary></indexterm>
<para><computeroutput>#define __REVSH( value)   (int16_t)__builtin_bswap16(value)</computeroutput></para><para>

<para>Reverse byte order (16 bit) </para>
</para>

<para>Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For example, 0x0080 becomes 0x8000. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga95b9bd281ddeda378b85afdb8f2ced86"/>    <section>
    <title>__ROR</title>
<indexterm><primary>__ROR</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__ROR</secondary></indexterm>
<para><computeroutput>#define __ROR   __ror</computeroutput></para><para>

<para>Rotate Right in unsigned value (32 bit) </para>
</para>

<para>Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>op1</entry>
                                <entry>
<para>Value to rotate </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>op2</entry>
                                <entry>
<para>Number of Bits to rotate </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Rotated value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gaab4f296d0022b4b10dc0976eb22052f9"/>    <section>
    <title>__SEV<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__SEV</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__SEV</secondary></indexterm>
<para><computeroutput>#define __SEV   __sev</computeroutput></para><para>

<para>Send Event. </para>
</para>

<para>Send Event is a hint instruction. It causes an event to be signaled to the CPU. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gaab4f296d0022b4b10dc0976eb22052f9"/>    <section>
    <title>__SEV<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__SEV</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__SEV</secondary></indexterm>
<para><computeroutput>#define __SEV   __builtin_arm_sev</computeroutput></para><para>

<para>Send Event. </para>
</para>

<para>Send Event is a hint instruction. It causes an event to be signaled to the CPU. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gafa58e60fcd2176ad58f96947466ea1fa"/>    <section>
    <title>__SEV<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__SEV</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__SEV</secondary></indexterm>
<para><computeroutput>#define __SEV( )   __ASM volatile (&quot;sev&quot;)</computeroutput></para><para>

<para>Send Event. </para>
</para>

<para>Send Event is a hint instruction. It causes an event to be signaled to the CPU. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gaac6cc7dd4325d9cb40d3290fa5244b3d"/>    <section>
    <title>__WFE<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__WFE</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__WFE</secondary></indexterm>
<para><computeroutput>#define __WFE   __wfe</computeroutput></para><para>

<para>Wait For Event. </para>
</para>

<para>Wait For Event is a hint instruction that permits the processor to enter a low-power state until one of a number of events occurs. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gaac6cc7dd4325d9cb40d3290fa5244b3d"/>    <section>
    <title>__WFE<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__WFE</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__WFE</secondary></indexterm>
<para><computeroutput>#define __WFE   __builtin_arm_wfe</computeroutput></para><para>

<para>Wait For Event. </para>
</para>

<para>Wait For Event is a hint instruction that permits the processor to enter a low-power state until one of a number of events occurs. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gaf0330712223f4cfb6091e4ab84775f73"/>    <section>
    <title>__WFE<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__WFE</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__WFE</secondary></indexterm>
<para><computeroutput>#define __WFE( )   __ASM volatile (&quot;wfe&quot;)</computeroutput></para><para>

<para>Wait For Event. </para>
</para>

<para>Wait For Event is a hint instruction that permits the processor to enter a low-power state until one of a number of events occurs. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gad23bf2b78a9a4524157c9de0d30b7448"/>    <section>
    <title>__WFI<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__WFI</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__WFI</secondary></indexterm>
<para><computeroutput>#define __WFI   __wfi</computeroutput></para><para>

<para>Wait For Interrupt. </para>
</para>

<para>Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gad23bf2b78a9a4524157c9de0d30b7448"/>    <section>
    <title>__WFI<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__WFI</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__WFI</secondary></indexterm>
<para><computeroutput>#define __WFI   __builtin_arm_wfi</computeroutput></para><para>

<para>Wait For Interrupt. </para>
</para>

<para>Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gab28e2b328c4cf23c917ab18a23194f8e"/>    <section>
    <title>__WFI<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__WFI</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__WFI</secondary></indexterm>
<para><computeroutput>#define __WFI( )   __ASM volatile (&quot;wfi&quot;)</computeroutput></para><para>

<para>Wait For Interrupt. </para>
</para>

<para>Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs. </para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gab926fe7178a379c3a7c0410b06fcb661"/>    <section>
    <title>__attribute__()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__attribute__</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__attribute__</secondary></indexterm>
<para><computeroutput>__attribute__ ((always_inline) )</computeroutput></para><para>

<para>Reverse bit order of value. </para>
</para>

<para>Unsigned Saturate.</para>

<para>Signed Saturate.</para>

<para>Reverses the bit order of the given value. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value</para>
</formalpara>
Saturates a signed value. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to be saturated </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sat</entry>
                                <entry>
<para>Bit position to saturate to (1..32) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Saturated value</para>
</formalpara>
Saturates an unsigned value. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to be saturated </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sat</entry>
                                <entry>
<para>Bit position to saturate to (0..31) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Saturated value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96"/>    <section>
    <title>__attribute__()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__attribute__</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__attribute__</secondary></indexterm>
<para><computeroutput>__attribute__ ((section(&quot;.rev16_text&quot;)) )</computeroutput></para><para>

<para>Reverse byte order (16 bit) </para>
</para>

<para>Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 0x34127856. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gabe2b619a40cc0a7ffa8f765249ccf682"/>    <section>
    <title>__attribute__()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__attribute__</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__attribute__</secondary></indexterm>
<para><computeroutput>__attribute__ ((section(&quot;.revsh_text&quot;)) )</computeroutput></para><para>

<para>Reverse byte order (16 bit) </para>
</para>

<para>Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For example, 0x0080 becomes 0x8000. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gab1ea24daaaaee9c828f90cbca330cb5e"/>    <section>
    <title>__DMB()</title>
<indexterm><primary>__DMB</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__DMB</secondary></indexterm>
<para><computeroutput>__STATIC_FORCEINLINE void __DMB (void )</computeroutput></para><para>

<para>Data Memory Barrier. </para>
</para>

<para>Ensures the apparent order of the explicit memory operations before and after the instruction, without ensuring their completion. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga7fe277f5385d23b9c44b2cbda1577ce9"/>    <section>
    <title>__DSB()</title>
<indexterm><primary>__DSB</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__DSB</secondary></indexterm>
<para><computeroutput>__STATIC_FORCEINLINE void __DSB (void )</computeroutput></para><para>

<para>Data Synchronization Barrier. </para>
</para>

<para>Acts as a special kind of Data Memory Barrier. It completes when all explicit memory accesses before this instruction complete. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gae26c2b3961e702aeabc24d4984ebd369"/>    <section>
    <title>__ISB()</title>
<indexterm><primary>__ISB</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__ISB</secondary></indexterm>
<para><computeroutput>__STATIC_FORCEINLINE void __ISB (void )</computeroutput></para><para>

<para>Instruction Synchronization Barrier. </para>
</para>

<para>Instruction Synchronization Barrier flushes the pipeline in the processor, so that all instructions following the ISB are fetched from cache or memory, after the instruction has been completed. </para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gaf944a7b7d8fd70164cca27669316bcf7"/>    <section>
    <title>__RBIT()</title>
<indexterm><primary>__RBIT</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__RBIT</secondary></indexterm>
<para><computeroutput>__STATIC_FORCEINLINE uint32_t __RBIT (uint32_t value)</computeroutput></para><para>

<para>Reverse bit order of value. </para>
</para>

<para>Reverses the bit order of the given value. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gadb92679719950635fba8b1b954072695"/>    <section>
    <title>__REV()</title>
<indexterm><primary>__REV</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__REV</secondary></indexterm>
<para><computeroutput>__STATIC_FORCEINLINE uint32_t __REV (uint32_t value)</computeroutput></para><para>

<para>Reverse byte order (32 bit) </para>
</para>

<para>Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x78563412. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gaa12aedd096506c9639c1581acd5c6a78"/>    <section>
    <title>__REV16()</title>
<indexterm><primary>__REV16</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__REV16</secondary></indexterm>
<para><computeroutput>__STATIC_FORCEINLINE uint32_t __REV16 (uint32_t value)</computeroutput></para><para>

<para>Reverse byte order (16 bit) </para>
</para>

<para>Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 0x34127856. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gacb695341318226a5f69ed508166622ac"/>    <section>
    <title>__REVSH()</title>
<indexterm><primary>__REVSH</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__REVSH</secondary></indexterm>
<para><computeroutput>__STATIC_FORCEINLINE int16_t __REVSH (int16_t value)</computeroutput></para><para>

<para>Reverse byte order (16 bit) </para>
</para>

<para>Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For example, 0x0080 becomes 0x8000. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to reverse </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Reversed value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gab16acb6456176f1e87a4f2724c2b6028"/>    <section>
    <title>__ROR()</title>
<indexterm><primary>__ROR</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__ROR</secondary></indexterm>
<para><computeroutput>__STATIC_FORCEINLINE uint32_t __ROR (uint32_t op1, uint32_t op2)</computeroutput></para><para>

<para>Rotate Right in unsigned value (32 bit) </para>
</para>

<para>Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>op1</entry>
                                <entry>
<para>Value to rotate </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>op2</entry>
                                <entry>
<para>Number of Bits to rotate </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Rotated value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga372c0535573dde3e37f0f08c774a3487"/>    <section>
    <title>__SSAT()</title>
<indexterm><primary>__SSAT</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__SSAT</secondary></indexterm>
<para><computeroutput>__STATIC_FORCEINLINE int32_t __SSAT (int32_t val, uint32_t sat)</computeroutput></para><para>

<para>Signed Saturate. </para>
</para>

<para>Saturates a signed value. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to be saturated </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sat</entry>
                                <entry>
<para>Bit position to saturate to (1..32) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Saturated value </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1ga6562dbd8182d1571e22dbca7ebdfa9bc"/>    <section>
    <title>__USAT()</title>
<indexterm><primary>__USAT</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>__USAT</secondary></indexterm>
<para><computeroutput>__STATIC_FORCEINLINE uint32_t __USAT (int32_t val, uint32_t sat)</computeroutput></para><para>

<para>Unsigned Saturate. </para>
</para>

<para>Saturates an unsigned value. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>Value to be saturated </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sat</entry>
                                <entry>
<para>Bit position to saturate to (0..31) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Saturated value </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_group___c_m_s_i_s___core___instruction_interface_1gaafcad33f86db3a8e1f55925989f9d2dc"/>    <section>
    <title>sat</title>
<indexterm><primary>sat</primary><secondary>CMSIS Core Instruction Interface</secondary></indexterm>
<indexterm><primary>CMSIS Core Instruction Interface</primary><secondary>sat</secondary></indexterm>
<para><computeroutput>uint32_t sat</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting>{
&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((sat&#32;&gt;=&#32;1U)&#32;&amp;&amp;&#32;(sat&#32;&lt;=&#32;32U))
&#32;&#32;{
&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int32_t&#32;max&#32;=&#32;(int32_t)((1U&#32;&lt;&lt;&#32;(sat&#32;-&#32;1U))&#32;-&#32;1U);
&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int32_t&#32;min&#32;=&#32;-1&#32;-&#32;max&#32;;
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&gt;&#32;max)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;max;
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&lt;&#32;min)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;min;
&#32;&#32;&#32;&#32;}
&#32;&#32;}
&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val
</programlisting></section>
</section>
</section>

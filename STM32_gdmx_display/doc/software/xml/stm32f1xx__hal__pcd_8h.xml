<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="stm32f1xx__hal__pcd_8h" kind="file" language="C++">
    <compoundname>stm32f1xx_hal_pcd.h</compoundname>
    <includes refid="stm32f1xx__ll__usb_8h" local="yes">stm32f1xx_ll_usb.h</includes>
    <includedby refid="stm32f1xx__hal__conf_8h" local="yes">Inc/stm32f1xx_hal_conf.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_pcd.h</label>
        <link refid="stm32f1xx__hal__pcd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stm32f1xx_ll_usb.h</label>
        <link refid="stm32f1xx__ll__usb_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stm32f1xx.h</label>
        <link refid="stm32f1xx_8h"/>
      </node>
      <node id="3">
        <label>stm32f1xx_hal_def.h</label>
        <link refid="stm32f1xx__hal__def_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="26">
        <label>Inc/usbd_cdc_if.h</label>
        <link refid="usbd__cdc__if_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>Inc/usb_device.h</label>
        <link refid="usb__device_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>Src/buzzer.c</label>
        <link refid="buzzer_8c"/>
      </node>
      <node id="28">
        <label>Src/usb_device.c</label>
        <link refid="usb__device_8c"/>
      </node>
      <node id="1">
        <label>Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_pcd.h</label>
        <link refid="stm32f1xx__hal__pcd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c</label>
        <link refid="usbd__cdc_8c"/>
      </node>
      <node id="35">
        <label>Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h</label>
        <link refid="usbd__def_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c</label>
        <link refid="stm32f1xx__hal__cortex_8c"/>
      </node>
      <node id="6">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c</label>
        <link refid="stm32f1xx__hal__dma_8c"/>
      </node>
      <node id="25">
        <label>Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h</label>
        <link refid="usbd__cdc_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>Inc/buzzer.h</label>
        <link refid="buzzer_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h</label>
        <link refid="stm32f1xx__hal_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Src/hd44780.c</label>
        <link refid="hd44780_8c"/>
      </node>
      <node id="17">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim.c</label>
        <link refid="stm32f1xx__hal__tim_8c"/>
      </node>
      <node id="46">
        <label>Src/stm32f1xx_hal_timebase_tim.c</label>
        <link refid="stm32f1xx__hal__timebase__tim_8c"/>
      </node>
      <node id="21">
        <label>Inc/main.h</label>
        <link refid="main_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c</label>
        <link refid="stm32f1xx__hal_8c"/>
      </node>
      <node id="9">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c</label>
        <link refid="stm32f1xx__hal__flash__ex_8c"/>
      </node>
      <node id="32">
        <label>Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c</label>
        <link refid="usbd__ioreq_8c"/>
      </node>
      <node id="10">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio.c</label>
        <link refid="stm32f1xx__hal__gpio_8c"/>
      </node>
      <node id="31">
        <label>Src/usbd_conf.c</label>
        <link refid="usbd__conf_8c"/>
      </node>
      <node id="37">
        <label>Inc/usbd_desc.h</label>
        <link refid="usbd__desc_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_usb.c</label>
        <link refid="stm32f1xx__ll__usb_8c"/>
      </node>
      <node id="27">
        <label>Src/main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="29">
        <label>Src/usbd_cdc_if.c</label>
        <link refid="usbd__cdc__if_8c"/>
      </node>
      <node id="23">
        <label>Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_core.h</label>
        <link refid="usbd__core_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pcd_ex.c</label>
        <link refid="stm32f1xx__hal__pcd__ex_8c"/>
      </node>
      <node id="44">
        <label>Inc/led.h</label>
        <link refid="led_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c</label>
        <link refid="stm32f1xx__hal__pwr_8c"/>
      </node>
      <node id="15">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c</label>
        <link refid="stm32f1xx__hal__rcc_8c"/>
      </node>
      <node id="8">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c</label>
        <link refid="stm32f1xx__hal__flash_8c"/>
      </node>
      <node id="39">
        <label>Src/stm32f1xx_it.c</label>
        <link refid="stm32f1xx__it_8c"/>
      </node>
      <node id="34">
        <label>Src/usbd_desc.c</label>
        <link refid="usbd__desc_8c"/>
      </node>
      <node id="18">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim_ex.c</label>
        <link refid="stm32f1xx__hal__tim__ex_8c"/>
      </node>
      <node id="11">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio_ex.c</label>
        <link refid="stm32f1xx__hal__gpio__ex_8c"/>
      </node>
      <node id="42">
        <label>Inc/hd44780.h</label>
        <link refid="hd44780_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Inc/stm32f1xx_hal_conf.h</label>
        <link refid="stm32f1xx__hal__conf_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Src/led.c</label>
        <link refid="led_8c"/>
      </node>
      <node id="22">
        <label>Inc/usbd_conf.h</label>
        <link refid="usbd__conf_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_core.c</label>
        <link refid="usbd__core_8c"/>
      </node>
      <node id="38">
        <label>Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ctlreq.h</label>
        <link refid="usbd__ctlreq_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc_ex.c</label>
        <link refid="stm32f1xx__hal__rcc__ex_8c"/>
      </node>
      <node id="7">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti.c</label>
        <link refid="stm32f1xx__hal__exti_8c"/>
      </node>
      <node id="41">
        <label>Inc/display.h</label>
        <link refid="display_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ioreq.h</label>
        <link refid="usbd__ioreq_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pcd.c</label>
        <link refid="stm32f1xx__hal__pcd_8c"/>
      </node>
    </invincdepgraph>
    <briefdescription>
<para>Header file of PCD HAL module. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>MCD Application Team</para>
</simplesect>
<simplesect kind="attention"><para></para>
</simplesect>
<heading level="2"><center><copy/> Copyright (c) 2016 STMicroelectronics. All rights reserved.</center></heading>
</para>
<para>This software component is licensed by ST under BSD 3-Clause license, the &quot;License&quot;; You may not use this file except in compliance with the License. You may obtain a copy of the License at: opensource.org/licenses/BSD-3-Clause </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>to<sp/>prevent<sp/>recursive<sp/>inclusion<sp/>-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STM32F1xx_HAL_PCD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STM32F1xx_HAL_PCD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Includes<sp/>------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f1xx__ll__usb_8h" kindref="compound">stm32f1xx_ll_usb.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB)<sp/>||<sp/>defined<sp/>(USB_OTG_FS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Exported<sp/>types<sp/>------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>HAL_PCD_STATE_RESET<sp/><sp/><sp/>=<sp/>0x00,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>HAL_PCD_STATE_READY<sp/><sp/><sp/>=<sp/>0x01,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>HAL_PCD_STATE_ERROR<sp/><sp/><sp/>=<sp/>0x02,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>HAL_PCD_STATE_BUSY<sp/><sp/><sp/><sp/>=<sp/>0x03,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>HAL_PCD_STATE_TIMEOUT<sp/>=<sp/>0x04</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}<sp/>PCD_StateTypeDef;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Device<sp/>LPM<sp/>suspend<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>LPM_L0<sp/>=<sp/>0x00,<sp/></highlight><highlight class="comment">/*<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>LPM_L1<sp/>=<sp/>0x01,<sp/></highlight><highlight class="comment">/*<sp/>LPM<sp/>L1<sp/>sleep<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>LPM_L2<sp/>=<sp/>0x02,<sp/></highlight><highlight class="comment">/*<sp/>suspend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>LPM_L3<sp/>=<sp/>0x03,<sp/></highlight><highlight class="comment">/*<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">}<sp/>PCD_LPM_StateTypeDef;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>PCD_LPM_L0_ACTIVE<sp/>=<sp/>0x00,<sp/></highlight><highlight class="comment">/*<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>PCD_LPM_L1_ACTIVE<sp/>=<sp/>0x01,<sp/></highlight><highlight class="comment">/*<sp/>LPM<sp/>L1<sp/>sleep<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}<sp/>PCD_LPM_MsgTypeDef;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>PCD_BCD_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xFF,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>PCD_BCD_CONTACT_DETECTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xFE,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>PCD_BCD_STD_DOWNSTREAM_PORT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xFD,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>PCD_BCD_CHARGING_DOWNSTREAM_PORT<sp/><sp/>=<sp/>0xFC,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>PCD_BCD_DEDICATED_CHARGING_PORT<sp/><sp/><sp/>=<sp/>0xFB,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>PCD_BCD_DISCOVERY_COMPLETED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}<sp/>PCD_BCD_MsgTypeDef;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB_OTG_FS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>USB_OTG_GlobalTypeDef<sp/><sp/>PCD_TypeDef;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>USB_OTG_CfgTypeDef<sp/><sp/><sp/><sp/><sp/>PCD_InitTypeDef;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>USB_OTG_EPTypeDef<sp/><sp/><sp/><sp/><sp/><sp/>PCD_EPTypeDef;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB_OTG_FS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_u_s_b___type_def" kindref="compound">USB_TypeDef</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCD_TypeDef;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>USB_CfgTypeDef<sp/><sp/><sp/><sp/><sp/>PCD_InitTypeDef;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>USB_EPTypeDef<sp/><sp/><sp/><sp/><sp/><sp/>PCD_EPTypeDef;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef</highlight></codeline>
<codeline lineno="103"><highlight class="normal">#else</highlight></codeline>
<codeline lineno="104"><highlight class="normal">typedef<sp/>struct</highlight></codeline>
<codeline lineno="105"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>PCD_TypeDef<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Instance;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>PCD_InitTypeDef<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Init;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="core__armv8mbl_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USB_Address;<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB_OTG_FS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>PCD_EPTypeDef<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IN_ep[16];<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>PCD_EPTypeDef<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OUT_ep[16];<sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB_OTG_FS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>PCD_EPTypeDef<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IN_ep[8];<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>PCD_EPTypeDef<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OUT_ep[8];<sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="stm32f1xx__hal__def_8h_1ab367482e943333a1299294eadaad284b" kindref="member">HAL_LockTypeDef</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lock;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="core__armv8mbl_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>PCD_StateTypeDef<sp/><sp/><sp/>State;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="core__armv8mbl_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorCode;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Setup[12];<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>PCD_LPM_StateTypeDef<sp/><sp/><sp/><sp/>LPM_State;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BESL;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pData;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>SOFCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>SetupStageCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>ResetCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>SuspendCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>ResumeCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>ConnectCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>DisconnectCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>DataOutStageCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>DataInStageCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>ISOOUTIncompleteCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);<sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>ISOINIncompleteCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>MspInitCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/>MspDeInitCallback)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PCD_HandleTypeDef<sp/>*hpcd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">}<sp/>PCD_HandleTypeDef;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Include<sp/>PCD<sp/>HAL<sp/>Extended<sp/>module<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f1xx__hal__pcd__ex_8h" kindref="compound">stm32f1xx_hal_pcd_ex.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Exported<sp/>constants<sp/>--------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SPEED_FULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USBD_FS_SPEED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_PHY_ULPI<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_PHY_EMBEDDED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_PHY_UTMI<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>HAL_PCD_ERROR_INVALID_CALLBACK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x00000010U)<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Exported<sp/>macros<sp/>-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB_OTG_FS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_ENABLE(__HANDLE__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)USB_EnableGlobalInt<sp/>((__HANDLE__)-&gt;Instance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_DISABLE(__HANDLE__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)USB_DisableGlobalInt<sp/>((__HANDLE__)-&gt;Instance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_GET_FLAG(__HANDLE__,<sp/>__INTERRUPT__)<sp/><sp/><sp/><sp/><sp/><sp/>((USB_ReadInterrupts((__HANDLE__)-&gt;Instance)<sp/>&amp;<sp/>(__INTERRUPT__))<sp/>==<sp/>(__INTERRUPT__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_CLEAR_FLAG(__HANDLE__,<sp/>__INTERRUPT__)<sp/><sp/><sp/><sp/>(((__HANDLE__)-&gt;Instance-&gt;GINTSTS)<sp/>&amp;=<sp/><sp/>(__INTERRUPT__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_IS_INVALID_INTERRUPT(__HANDLE__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(USB_ReadInterrupts((__HANDLE__)-&gt;Instance)<sp/>==<sp/>0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_UNGATE_PHYCLOCK(__HANDLE__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(__IO<sp/>uint32_t<sp/>*)((uint32_t)((__HANDLE__)-&gt;Instance)<sp/>+<sp/>USB_OTG_PCGCCTL_BASE)<sp/>&amp;=<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~(USB_OTG_PCGCCTL_STOPCLK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_GATE_PHYCLOCK(__HANDLE__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(__IO<sp/>uint32_t<sp/>*)((uint32_t)((__HANDLE__)-&gt;Instance)<sp/>+<sp/>USB_OTG_PCGCCTL_BASE)<sp/>|=<sp/>USB_OTG_PCGCCTL_STOPCLK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_IS_PHY_SUSPENDED(__HANDLE__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*(__IO<sp/>uint32_t<sp/>*)((uint32_t)((__HANDLE__)-&gt;Instance)<sp/>+<sp/>USB_OTG_PCGCCTL_BASE))<sp/>&amp;<sp/>0x10U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT()<sp/><sp/><sp/><sp/>EXTI-&gt;IMR<sp/>|=<sp/>USB_OTG_FS_WAKEUP_EXTI_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT()<sp/><sp/><sp/>EXTI-&gt;IMR<sp/>&amp;=<sp/>~(USB_OTG_FS_WAKEUP_EXTI_LINE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG()<sp/><sp/><sp/><sp/><sp/>EXTI-&gt;PR<sp/>&amp;<sp/>(USB_OTG_FS_WAKEUP_EXTI_LINE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG()<sp/><sp/><sp/>EXTI-&gt;PR<sp/>=<sp/>USB_OTG_FS_WAKEUP_EXTI_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE()<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTI-&gt;FTSR<sp/>&amp;=<sp/>~(USB_OTG_FS_WAKEUP_EXTI_LINE);<sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTI-&gt;RTSR<sp/>|=<sp/>USB_OTG_FS_WAKEUP_EXTI_LINE;<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB_OTG_FS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_ENABLE(__HANDLE__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)USB_EnableGlobalInt<sp/>((__HANDLE__)-&gt;Instance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_DISABLE(__HANDLE__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)USB_DisableGlobalInt<sp/>((__HANDLE__)-&gt;Instance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_GET_FLAG(__HANDLE__,<sp/>__INTERRUPT__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((USB_ReadInterrupts((__HANDLE__)-&gt;Instance)<sp/>&amp;<sp/>(__INTERRUPT__))<sp/>==<sp/>(__INTERRUPT__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_PCD_CLEAR_FLAG(__HANDLE__,<sp/>__INTERRUPT__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((__HANDLE__)-&gt;Instance-&gt;ISTR)<sp/>&amp;=<sp/>~(__INTERRUPT__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_USB_WAKEUP_EXTI_ENABLE_IT()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTI-&gt;IMR<sp/>|=<sp/>USB_WAKEUP_EXTI_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_USB_WAKEUP_EXTI_DISABLE_IT()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTI-&gt;IMR<sp/>&amp;=<sp/>~(USB_WAKEUP_EXTI_LINE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_USB_WAKEUP_EXTI_GET_FLAG()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTI-&gt;PR<sp/>&amp;<sp/>(USB_WAKEUP_EXTI_LINE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTI-&gt;PR<sp/>=<sp/>USB_WAKEUP_EXTI_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTI-&gt;FTSR<sp/>&amp;=<sp/>~(USB_WAKEUP_EXTI_LINE);<sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXTI-&gt;RTSR<sp/>|=<sp/>USB_WAKEUP_EXTI_LINE;<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Exported<sp/>functions<sp/>--------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initialization/de-initialization<sp/>functions<sp/><sp/>********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_Init(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_DeInit(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HAL_PCD_MspInit(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HAL_PCD_MspDeInit(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(USE_HAL_PCD_REGISTER_CALLBACKS<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>HAL_PCD_SOF_CB_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x01,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>HAL_PCD_SETUPSTAGE_CB_ID<sp/><sp/><sp/>=<sp/>0x02,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>HAL_PCD_RESET_CB_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x03,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>HAL_PCD_SUSPEND_CB_ID<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x04,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>HAL_PCD_RESUME_CB_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x05,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>HAL_PCD_CONNECT_CB_ID<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x06,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>HAL_PCD_DISCONNECT_CB_ID<sp/><sp/>=<sp/>0x07,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>HAL_PCD_MSPINIT_CB_ID<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x08,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>HAL_PCD_MSPDEINIT_CB_ID<sp/><sp/><sp/><sp/>=<sp/>0x09<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal">}<sp/>HAL_PCD_CallbackIDTypeDef;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*pPCD_CallbackTypeDef)(PCD_HandleTypeDef<sp/>*hpcd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*pPCD_DataOutStageCallbackTypeDef)(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*pPCD_DataInStageCallbackTypeDef)(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*pPCD_IsoOutIncpltCallbackTypeDef)(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*pPCD_IsoInIncpltCallbackTypeDef)(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_RegisterCallback(PCD_HandleTypeDef<sp/>*hpcd,<sp/>HAL_PCD_CallbackIDTypeDef<sp/>CallbackID,<sp/>pPCD_CallbackTypeDef<sp/>pCallback);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_UnRegisterCallback(PCD_HandleTypeDef<sp/>*hpcd,<sp/>HAL_PCD_CallbackIDTypeDef<sp/>CallbackID);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_RegisterDataOutStageCallback(PCD_HandleTypeDef<sp/>*hpcd,<sp/>pPCD_DataOutStageCallbackTypeDef<sp/>pCallback);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_UnRegisterDataOutStageCallback(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_RegisterDataInStageCallback(PCD_HandleTypeDef<sp/>*hpcd,<sp/>pPCD_DataInStageCallbackTypeDef<sp/>pCallback);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_UnRegisterDataInStageCallback(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_RegisterIsoOutIncpltCallback(PCD_HandleTypeDef<sp/>*hpcd,<sp/>pPCD_IsoOutIncpltCallbackTypeDef<sp/>pCallback);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_UnRegisterIsoOutIncpltCallback(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_RegisterIsoInIncpltCallback(PCD_HandleTypeDef<sp/>*hpcd,<sp/>pPCD_IsoInIncpltCallbackTypeDef<sp/>pCallback);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_UnRegisterIsoInIncpltCallback(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_HAL_PCD_REGISTER_CALLBACKS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>I/O<sp/>operation<sp/>functions<sp/><sp/>***************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Non-Blocking<sp/>mode:<sp/>Interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_Start(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_Stop(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HAL_PCD_IRQHandler(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a85c99eeb4aa17d8ff5298efff92ac28e" kindref="member">HAL_PCD_SOFCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a9d72aa4d3d984b164047b081d4566f6d" kindref="member">HAL_PCD_SetupStageCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1af4fbef977092aa525c6b1668ffbec77b" kindref="member">HAL_PCD_ResetCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a0e14acd4564979743bc0a89aa5f15428" kindref="member">HAL_PCD_SuspendCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a0386a36b921cd51dd6e50103c3cd33b1" kindref="member">HAL_PCD_ResumeCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a0c449541523759cf62be9c9d47540c5d" kindref="member">HAL_PCD_ConnectCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a25f930b5fe696224f8e71dacf5f324b4" kindref="member">HAL_PCD_DisconnectCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a2f1ac834d9677dcae7d8973828f81149" kindref="member">HAL_PCD_DataOutStageCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a1679f5c50539a3dfca1391557e7a757b" kindref="member">HAL_PCD_DataInStageCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a4274f129d782f0a3c9a10b5bbe022cd4" kindref="member">HAL_PCD_ISOOUTIncompleteCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usbd__conf_8c_1a8f4041d553ef2fb326c6e483797f99a8" kindref="member">HAL_PCD_ISOINIncompleteCallback</ref>(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>epnum);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Peripheral<sp/>Control<sp/>functions<sp/><sp/>**********************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_DevConnect(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_DevDisconnect(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_SetAddress(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>address);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_EP_Open(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>ep_addr,<sp/>uint16_t<sp/>ep_mps,<sp/>uint8_t<sp/>ep_type);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_EP_Close(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>ep_addr);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_EP_Receive(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>ep_addr,<sp/>uint8_t<sp/>*pBuf,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_EP_Transmit(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>ep_addr,<sp/>uint8_t<sp/>*pBuf,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="356"><highlight class="normal">uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>ep_addr);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_EP_SetStall(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>ep_addr);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_EP_ClrStall(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>ep_addr);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_EP_Flush(PCD_HandleTypeDef<sp/>*hpcd,<sp/>uint8_t<sp/>ep_addr);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><ref refid="stm32f1xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f" kindref="member">HAL_StatusTypeDef</ref><sp/>HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Peripheral<sp/>State<sp/>functions<sp/><sp/>************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">PCD_StateTypeDef<sp/>HAL_PCD_GetState(PCD_HandleTypeDef<sp/>*hpcd);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>constants<sp/>---------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB_OTG_FS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_OTG_FS_WAKEUP_EXTI_RISING_EDGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x08U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_OTG_FS_WAKEUP_EXTI_FALLING_EDGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0CU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_OTG_FS_WAKEUP_EXTI_RISING_FALLING_EDGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x10U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_OTG_FS_WAKEUP_EXTI_LINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>18)<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB_OTG_FS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>USB_WAKEUP_EXTI_LINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>18)<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_EP0MPS_64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEP0CTL_MPS_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_EP0MPS_32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEP0CTL_MPS_32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_EP0MPS_16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEP0CTL_MPS_16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_EP0MPS_08<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEP0CTL_MPS_8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_ENDP0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_ENDP1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_ENDP2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_ENDP3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_ENDP4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_ENDP5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_ENDP6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_ENDP7<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SNG_BUF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_DBL_BUF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB_OTG_FS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USB_OTG_DOEPINT_OTEPSPR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_OTG_DOEPINT_OTEPSPR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1UL<sp/>&lt;&lt;<sp/>5)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USB_OTG_DOEPMSK_OTEPSPRM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_OTG_DOEPMSK_OTEPSPRM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1UL<sp/>&lt;&lt;<sp/>5)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USB_OTG_DOEPINT_NAK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_OTG_DOEPINT_NAK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1UL<sp/>&lt;&lt;<sp/>13)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USB_OTG_DOEPMSK_NAKM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_OTG_DOEPMSK_NAKM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1UL<sp/>&lt;&lt;<sp/>13)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USB_OTG_DOEPINT_STPKTRX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_OTG_DOEPINT_STPKTRX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1UL<sp/>&lt;&lt;<sp/>15)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USB_OTG_DOEPMSK_NYETM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_OTG_DOEPMSK_NYETM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1UL<sp/>&lt;&lt;<sp/>14)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB_OTG_FS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>macros<sp/>------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(USB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">/********************<sp/><sp/>Bit<sp/>definition<sp/>for<sp/>USB_COUNTn_RX<sp/>register<sp/><sp/>*************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_CNTRX_NBLK_MSK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1FU<sp/>&lt;&lt;<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_CNTRX_BLSIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SetENDPOINT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_ENDPOINT(USBx,<sp/>bEpNum,<sp/>wRegValue)<sp/><sp/>(*(__IO<sp/>uint16_t<sp/>*)(&amp;(USBx)-&gt;EP0R<sp/>+<sp/>((bEpNum)<sp/>*<sp/>2U))<sp/>=<sp/>(uint16_t)(wRegValue))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GetENDPOINT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_ENDPOINT(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(__IO<sp/>uint16_t<sp/>*)(&amp;(USBx)-&gt;EP0R<sp/>+<sp/>((bEpNum)<sp/>*<sp/>2U)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ENDPOINT<sp/>transfer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_EP0StartXfer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USB_EPStartXfer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EPTYPE(USBx,<sp/>bEpNum,<sp/>wType)<sp/>(PCD_SET_ENDPOINT((USBx),<sp/>(bEpNum),<sp/>\</highlight></codeline>
<codeline lineno="493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EP_T_MASK)<sp/>|<sp/>(wType)<sp/>|<sp/>USB_EP_CTR_TX<sp/>|<sp/>USB_EP_CTR_RX)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EPTYPE(USBx,<sp/>bEpNum)<sp/>(PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EP_T_FIELD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_FreeUserBuffer(USBx,<sp/>bEpNum,<sp/>bDir)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor"><sp/><sp/>if<sp/>((bDir)<sp/>==<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>OUT<sp/>double<sp/>buffered<sp/>endpoint<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_TX_DTOG((USBx),<sp/>(bEpNum));<sp/>\</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>((bDir)<sp/>==<sp/>1U)<sp/>\</highlight></codeline>
<codeline lineno="517"><highlight class="preprocessor"><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>IN<sp/>double<sp/>buffered<sp/>endpoint<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_RX_DTOG((USBx),<sp/>(bEpNum));<sp/>\</highlight></codeline>
<codeline lineno="520"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_TX_STATUS(USBx,<sp/>bEpNum,<sp/>wState)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EPTX_DTOGMASK;<sp/>\</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>toggle<sp/>first<sp/>bit<sp/>?<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>((USB_EPTX_DTOG1<sp/>&amp;<sp/>(wState))!=<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="536"><highlight class="preprocessor"><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_wRegVal<sp/>^=<sp/>USB_EPTX_DTOG1;<sp/>\</highlight></codeline>
<codeline lineno="538"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>toggle<sp/>second<sp/>bit<sp/>?<sp/><sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="540"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>((USB_EPTX_DTOG2<sp/>&amp;<sp/>(wState))!=<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="541"><highlight class="preprocessor"><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_wRegVal<sp/>^=<sp/>USB_EPTX_DTOG2;<sp/>\</highlight></codeline>
<codeline lineno="543"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor"><sp/><sp/><sp/>PCD_SET_ENDPOINT((USBx),<sp/>(bEpNum),<sp/>(_wRegVal<sp/>|<sp/>USB_EP_CTR_RX<sp/>|<sp/>USB_EP_CTR_TX));<sp/>\</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_TX_STATUS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_RX_STATUS(USBx,<sp/>bEpNum,wState)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="557"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EPRX_DTOGMASK;<sp/>\</highlight></codeline>
<codeline lineno="558"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>toggle<sp/>first<sp/>bit<sp/>?<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((USB_EPRX_DTOG1<sp/>&amp;<sp/>(wState))!=<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wRegVal<sp/>^=<sp/>USB_EPRX_DTOG1;<sp/>\</highlight></codeline>
<codeline lineno="562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>toggle<sp/>second<sp/>bit<sp/>?<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((USB_EPRX_DTOG2<sp/>&amp;<sp/>(wState))!=<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="565"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="566"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wRegVal<sp/>^=<sp/>USB_EPRX_DTOG2;<sp/>\</highlight></codeline>
<codeline lineno="567"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="568"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_ENDPOINT((USBx),<sp/>(bEpNum),<sp/>(_wRegVal<sp/>|<sp/>USB_EP_CTR_RX<sp/>|<sp/>USB_EP_CTR_TX));<sp/>\</highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_RX_STATUS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_TXRX_STATUS(USBx,<sp/>bEpNum,<sp/>wStaterx,<sp/>wStatetx)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="580"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="581"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="582"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>(USB_EPRX_DTOGMASK<sp/>|<sp/>USB_EPTX_STAT);<sp/>\</highlight></codeline>
<codeline lineno="583"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>toggle<sp/>first<sp/>bit<sp/>?<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="584"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((USB_EPRX_DTOG1<sp/>&amp;<sp/>(wStaterx))!=<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="585"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_wRegVal<sp/>^=<sp/>USB_EPRX_DTOG1;<sp/>\</highlight></codeline>
<codeline lineno="587"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="588"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>toggle<sp/>second<sp/>bit<sp/>?<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="589"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((USB_EPRX_DTOG2<sp/>&amp;<sp/>(wStaterx))!=<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="590"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="591"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_wRegVal<sp/>^=<sp/>USB_EPRX_DTOG2;<sp/>\</highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="593"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>toggle<sp/>first<sp/>bit<sp/>?<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="594"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((USB_EPTX_DTOG1<sp/>&amp;<sp/>(wStatetx))!=<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="595"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_wRegVal<sp/>^=<sp/>USB_EPTX_DTOG1;<sp/>\</highlight></codeline>
<codeline lineno="597"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="598"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>toggle<sp/>second<sp/>bit<sp/>?<sp/><sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="599"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((USB_EPTX_DTOG2<sp/>&amp;<sp/>(wStatetx))!=<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="600"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="601"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_wRegVal<sp/>^=<sp/>USB_EPTX_DTOG2;<sp/>\</highlight></codeline>
<codeline lineno="602"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="603"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="604"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_ENDPOINT((USBx),<sp/>(bEpNum),<sp/>(_wRegVal<sp/>|<sp/>USB_EP_CTR_RX<sp/>|<sp/>USB_EP_CTR_TX));<sp/>\</highlight></codeline>
<codeline lineno="605"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_TXRX_STATUS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_TX_STATUS(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/>((uint16_t)PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EPTX_STAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_RX_STATUS(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/>((uint16_t)PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EPRX_STAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_TX_VALID(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/><sp/>(PCD_SET_EP_TX_STATUS((USBx),<sp/>(bEpNum),<sp/>USB_EP_TX_VALID))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_RX_VALID(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/><sp/>(PCD_SET_EP_RX_STATUS((USBx),<sp/>(bEpNum),<sp/>USB_EP_RX_VALID))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_TX_STALL_STATUS(USBx,<sp/>bEpNum)<sp/>(PCD_GET_EP_TX_STATUS((USBx),<sp/>(bEpNum))<sp/>\</highlight></codeline>
<codeline lineno="633"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>USB_EP_TX_STALL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_RX_STALL_STATUS(USBx,<sp/>bEpNum)<sp/>(PCD_GET_EP_RX_STATUS((USBx),<sp/>(bEpNum))<sp/>\</highlight></codeline>
<codeline lineno="635"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>USB_EP_RX_STALL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_KIND(USBx,<sp/>bEpNum)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="644"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EPREG_MASK;<sp/>\</highlight></codeline>
<codeline lineno="647"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_ENDPOINT((USBx),<sp/>(bEpNum),<sp/>(_wRegVal<sp/>|<sp/>USB_EP_CTR_RX<sp/>|<sp/>USB_EP_CTR_TX<sp/>|<sp/>USB_EP_KIND));<sp/>\</highlight></codeline>
<codeline lineno="649"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_KIND<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_CLEAR_EP_KIND(USBx,<sp/>bEpNum)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="652"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="653"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="654"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EPKIND_MASK;<sp/>\</highlight></codeline>
<codeline lineno="655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="656"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_ENDPOINT((USBx),<sp/>(bEpNum),<sp/>(_wRegVal<sp/>|<sp/>USB_EP_CTR_RX<sp/>|<sp/>USB_EP_CTR_TX));<sp/>\</highlight></codeline>
<codeline lineno="657"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_CLEAR_EP_KIND<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_OUT_STATUS(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCD_SET_EP_KIND((USBx),<sp/>(bEpNum))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_CLEAR_OUT_STATUS(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/>PCD_CLEAR_EP_KIND((USBx),<sp/>(bEpNum))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_DBUF(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCD_SET_EP_KIND((USBx),<sp/>(bEpNum))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_CLEAR_EP_DBUF(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCD_CLEAR_EP_KIND((USBx),<sp/>(bEpNum))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_CLEAR_RX_EP_CTR(USBx,<sp/>bEpNum)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="684"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="685"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="686"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>(0x7FFFU<sp/>&amp;<sp/>USB_EPREG_MASK);<sp/>\</highlight></codeline>
<codeline lineno="687"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="688"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_ENDPOINT((USBx),<sp/>(bEpNum),<sp/>(_wRegVal<sp/>|<sp/>USB_EP_CTR_TX));<sp/>\</highlight></codeline>
<codeline lineno="689"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_CLEAR_RX_EP_CTR<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_CLEAR_TX_EP_CTR(USBx,<sp/>bEpNum)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="693"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="694"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>(0xFF7FU<sp/>&amp;<sp/>USB_EPREG_MASK);<sp/>\</highlight></codeline>
<codeline lineno="695"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="696"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_ENDPOINT((USBx),<sp/>(bEpNum),<sp/>(_wRegVal<sp/>|<sp/>USB_EP_CTR_RX));<sp/>\</highlight></codeline>
<codeline lineno="697"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_CLEAR_TX_EP_CTR<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_RX_DTOG(USBx,<sp/>bEpNum)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="706"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wEPVal;<sp/>\</highlight></codeline>
<codeline lineno="707"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="708"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wEPVal<sp/>=<sp/>PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EPREG_MASK;<sp/>\</highlight></codeline>
<codeline lineno="709"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="710"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_ENDPOINT((USBx),<sp/>(bEpNum),<sp/>(_wEPVal<sp/>|<sp/>USB_EP_CTR_RX<sp/>|<sp/>USB_EP_CTR_TX<sp/>|<sp/>USB_EP_DTOG_RX));<sp/>\</highlight></codeline>
<codeline lineno="711"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_RX_DTOG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_TX_DTOG(USBx,<sp/>bEpNum)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="714"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wEPVal;<sp/>\</highlight></codeline>
<codeline lineno="715"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="716"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wEPVal<sp/>=<sp/>PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EPREG_MASK;<sp/>\</highlight></codeline>
<codeline lineno="717"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="718"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_ENDPOINT((USBx),<sp/>(bEpNum),<sp/>(_wEPVal<sp/>|<sp/>USB_EP_CTR_RX<sp/>|<sp/>USB_EP_CTR_TX<sp/>|<sp/>USB_EP_DTOG_TX));<sp/>\</highlight></codeline>
<codeline lineno="719"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_TX_DTOG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_CLEAR_RX_DTOG(USBx,<sp/>bEpNum)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="727"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="728"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="729"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum));<sp/>\</highlight></codeline>
<codeline lineno="730"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="731"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((_wRegVal<sp/>&amp;<sp/>USB_EP_DTOG_RX)<sp/>!=<sp/>0U)\</highlight></codeline>
<codeline lineno="732"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="733"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PCD_RX_DTOG((USBx),<sp/>(bEpNum));<sp/>\</highlight></codeline>
<codeline lineno="734"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="735"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_CLEAR_RX_DTOG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_CLEAR_TX_DTOG(USBx,<sp/>bEpNum)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="738"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="739"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum));<sp/>\</highlight></codeline>
<codeline lineno="741"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="742"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((_wRegVal<sp/>&amp;<sp/>USB_EP_DTOG_TX)<sp/>!=<sp/>0U)\</highlight></codeline>
<codeline lineno="743"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="744"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PCD_TX_DTOG((USBx),<sp/>(bEpNum));<sp/>\</highlight></codeline>
<codeline lineno="745"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="746"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_CLEAR_TX_DTOG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_ADDRESS(USBx,<sp/>bEpNum,<sp/>bAddr)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint16_t<sp/>_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>(PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EPREG_MASK)<sp/>|<sp/>(bAddr);<sp/>\</highlight></codeline>
<codeline lineno="759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_ENDPOINT((USBx),<sp/>(bEpNum),<sp/>(_wRegVal<sp/>|<sp/>USB_EP_CTR_RX<sp/>|<sp/>USB_EP_CTR_TX));<sp/>\</highlight></codeline>
<codeline lineno="761"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_ADDRESS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_ADDRESS(USBx,<sp/>bEpNum)<sp/>((uint8_t)(PCD_GET_ENDPOINT((USBx),<sp/>(bEpNum))<sp/>&amp;<sp/>USB_EPADDR_FIELD))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_EP_TX_CNT(USBx,<sp/>bEpNum)<sp/>((uint16_t<sp/>*)((((uint32_t)(USBx)-&gt;BTABLE<sp/>+<sp/>((uint32_t)(bEpNum)<sp/>*<sp/>8U)<sp/>+<sp/>2U)<sp/>*<sp/>PMA_ACCESS)<sp/>+<sp/>((uint32_t)(USBx)<sp/>+<sp/>0x400U)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_EP_RX_CNT(USBx,<sp/>bEpNum)<sp/>((uint16_t<sp/>*)((((uint32_t)(USBx)-&gt;BTABLE<sp/>+<sp/>((uint32_t)(bEpNum)<sp/>*<sp/>8U)<sp/>+<sp/>6U)<sp/>*<sp/>PMA_ACCESS)<sp/>+<sp/>((uint32_t)(USBx)<sp/>+<sp/>0x400U)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_TX_ADDRESS(USBx,<sp/>bEpNum,<sp/>wAddr)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="782"><highlight class="preprocessor"><sp/><sp/>register<sp/>__IO<sp/>uint16_t<sp/>*_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"><sp/><sp/>register<sp/>uint32_t<sp/>_wRegBase<sp/>=<sp/>(uint32_t)USBx;<sp/>\</highlight></codeline>
<codeline lineno="784"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="785"><highlight class="preprocessor"><sp/><sp/>_wRegBase<sp/>+=<sp/>(uint32_t)(USBx)-&gt;BTABLE;<sp/>\</highlight></codeline>
<codeline lineno="786"><highlight class="preprocessor"><sp/><sp/>_wRegVal<sp/>=<sp/>(__IO<sp/>uint16_t<sp/>*)(_wRegBase<sp/>+<sp/>0x400U<sp/>+<sp/>(((uint32_t)(bEpNum)<sp/>*<sp/>8U)<sp/>*<sp/>PMA_ACCESS));<sp/>\</highlight></codeline>
<codeline lineno="787"><highlight class="preprocessor"><sp/><sp/>*_wRegVal<sp/>=<sp/>((wAddr)<sp/>&gt;&gt;<sp/>1)<sp/>&lt;&lt;<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="788"><highlight class="preprocessor">}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_TX_ADDRESS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_RX_ADDRESS(USBx,<sp/>bEpNum,<sp/>wAddr)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="791"><highlight class="preprocessor"><sp/><sp/>register<sp/>__IO<sp/>uint16_t<sp/>*_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="792"><highlight class="preprocessor"><sp/><sp/>register<sp/>uint32_t<sp/>_wRegBase<sp/>=<sp/>(uint32_t)USBx;<sp/>\</highlight></codeline>
<codeline lineno="793"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="794"><highlight class="preprocessor"><sp/><sp/>_wRegBase<sp/>+=<sp/>(uint32_t)(USBx)-&gt;BTABLE;<sp/>\</highlight></codeline>
<codeline lineno="795"><highlight class="preprocessor"><sp/><sp/>_wRegVal<sp/>=<sp/>(__IO<sp/>uint16_t<sp/>*)(_wRegBase<sp/>+<sp/>0x400U<sp/>+<sp/>((((uint32_t)(bEpNum)<sp/>*<sp/>8U)<sp/>+<sp/>4U)<sp/>*<sp/>PMA_ACCESS));<sp/>\</highlight></codeline>
<codeline lineno="796"><highlight class="preprocessor"><sp/><sp/>*_wRegVal<sp/>=<sp/>((wAddr)<sp/>&gt;&gt;<sp/>1)<sp/>&lt;&lt;<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor">}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_RX_ADDRESS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_TX_ADDRESS(USBx,<sp/>bEpNum)<sp/>((uint16_t)*PCD_EP_TX_ADDRESS((USBx),<sp/>(bEpNum)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_RX_ADDRESS(USBx,<sp/>bEpNum)<sp/>((uint16_t)*PCD_EP_RX_ADDRESS((USBx),<sp/>(bEpNum)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_CALC_BLK32(pdwReg,<sp/>wCount,<sp/>wNBlocks)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(wNBlocks)<sp/>=<sp/>(wCount)<sp/>&gt;&gt;<sp/>5;<sp/>\</highlight></codeline>
<codeline lineno="817"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(((wCount)<sp/>&amp;<sp/>0x1fU)<sp/>==<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="819"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(wNBlocks)--;<sp/>\</highlight></codeline>
<codeline lineno="820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*(pdwReg)<sp/>=<sp/>(uint16_t)(((wNBlocks)<sp/>&lt;&lt;<sp/>10)<sp/>|<sp/>USB_CNTRX_BLSIZE);<sp/>\</highlight></codeline>
<codeline lineno="822"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_CALC_BLK32<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_CALC_BLK2(pdwReg,<sp/>wCount,<sp/>wNBlocks)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="825"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(wNBlocks)<sp/>=<sp/>(wCount)<sp/>&gt;&gt;<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="826"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(((wCount)<sp/>&amp;<sp/>0x1U)<sp/>!=<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="827"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="828"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(wNBlocks)++;<sp/>\</highlight></codeline>
<codeline lineno="829"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="830"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*(pdwReg)<sp/>=<sp/>(uint16_t)((wNBlocks)<sp/>&lt;&lt;<sp/>10);<sp/>\</highlight></codeline>
<codeline lineno="831"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_CALC_BLK2<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_CNT_RX_REG(pdwReg,<sp/>wCount)<sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="834"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint32_t<sp/>wNBlocks;<sp/>\</highlight></codeline>
<codeline lineno="835"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((wCount)<sp/>==<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="836"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="837"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*(pdwReg)<sp/>&amp;=<sp/>(uint16_t)~USB_CNTRX_NBLK_MSK;<sp/>\</highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*(pdwReg)<sp/>|=<sp/>USB_CNTRX_BLSIZE;<sp/>\</highlight></codeline>
<codeline lineno="839"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="840"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>if((wCount)<sp/>&lt;=<sp/>62U)<sp/>\</highlight></codeline>
<codeline lineno="841"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="842"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PCD_CALC_BLK2((pdwReg),<sp/>(wCount),<sp/>wNBlocks);<sp/>\</highlight></codeline>
<codeline lineno="843"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="844"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="845"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="846"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PCD_CALC_BLK32((pdwReg),<sp/>(wCount),<sp/>wNBlocks);<sp/>\</highlight></codeline>
<codeline lineno="847"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="848"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_CNT_RX_REG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_RX_DBUF0_CNT(USBx,<sp/>bEpNum,<sp/>wCount)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="851"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>register<sp/>uint32_t<sp/>_wRegBase<sp/>=<sp/>(uint32_t)(USBx);<sp/>\</highlight></codeline>
<codeline lineno="852"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>register<sp/>__IO<sp/>uint16_t<sp/>*pdwReg;<sp/>\</highlight></codeline>
<codeline lineno="853"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="854"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegBase<sp/>+=<sp/>(uint32_t)(USBx)-&gt;BTABLE;<sp/>\</highlight></codeline>
<codeline lineno="855"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>pdwReg<sp/>=<sp/>(__IO<sp/>uint16_t<sp/>*)(_wRegBase<sp/>+<sp/>0x400U<sp/>+<sp/>((((uint32_t)(bEpNum)<sp/>*<sp/>8U)<sp/>+<sp/>2U)<sp/>*<sp/>PMA_ACCESS));<sp/>\</highlight></codeline>
<codeline lineno="856"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_EP_CNT_RX_REG(pdwReg,<sp/>(wCount));<sp/>\</highlight></codeline>
<codeline lineno="857"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_TX_CNT(USBx,<sp/>bEpNum,<sp/>wCount)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="867"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint32_t<sp/>_wRegBase<sp/>=<sp/>(uint32_t)(USBx);<sp/>\</highlight></codeline>
<codeline lineno="868"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>__IO<sp/>uint16_t<sp/>*_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="869"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="870"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegBase<sp/>+=<sp/>(uint32_t)(USBx)-&gt;BTABLE;<sp/>\</highlight></codeline>
<codeline lineno="871"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>(__IO<sp/>uint16_t<sp/>*)(_wRegBase<sp/>+<sp/>0x400U<sp/>+<sp/>((((uint32_t)(bEpNum)<sp/>*<sp/>8U)<sp/>+<sp/>2U)<sp/>*<sp/>PMA_ACCESS));<sp/>\</highlight></codeline>
<codeline lineno="872"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*_wRegVal<sp/>=<sp/>(uint16_t)(wCount);<sp/>\</highlight></codeline>
<codeline lineno="873"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_RX_CNT(USBx,<sp/>bEpNum,<sp/>wCount)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="876"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint32_t<sp/>_wRegBase<sp/>=<sp/>(uint32_t)(USBx);<sp/>\</highlight></codeline>
<codeline lineno="877"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>__IO<sp/>uint16_t<sp/>*_wRegVal;<sp/>\</highlight></codeline>
<codeline lineno="878"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="879"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegBase<sp/>+=<sp/>(uint32_t)(USBx)-&gt;BTABLE;<sp/>\</highlight></codeline>
<codeline lineno="880"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_wRegVal<sp/>=<sp/>(__IO<sp/>uint16_t<sp/>*)(_wRegBase<sp/>+<sp/>0x400U<sp/>+<sp/>((((uint32_t)(bEpNum)<sp/>*<sp/>8U)<sp/>+<sp/>6U)<sp/>*<sp/>PMA_ACCESS));<sp/>\</highlight></codeline>
<codeline lineno="881"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_EP_CNT_RX_REG(_wRegVal,<sp/>(wCount));<sp/>\</highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_TX_CNT(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(*PCD_EP_TX_CNT((USBx),<sp/>(bEpNum)))<sp/>&amp;<sp/>0x3ffU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_RX_CNT(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(*PCD_EP_RX_CNT((USBx),<sp/>(bEpNum)))<sp/>&amp;<sp/>0x3ffU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_DBUF0_ADDR(USBx,<sp/>bEpNum,<sp/>wBuf0Addr)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="901"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_EP_TX_ADDRESS((USBx),<sp/>(bEpNum),<sp/>(wBuf0Addr));<sp/>\</highlight></codeline>
<codeline lineno="902"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_DBUF0_ADDR<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_DBUF1_ADDR(USBx,<sp/>bEpNum,<sp/>wBuf1Addr)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="904"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_EP_RX_ADDRESS((USBx),<sp/>(bEpNum),<sp/>(wBuf1Addr));<sp/>\</highlight></codeline>
<codeline lineno="905"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_DBUF1_ADDR<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_DBUF_ADDR(USBx,<sp/>bEpNum,<sp/>wBuf0Addr,<sp/>wBuf1Addr)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="916"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_EP_DBUF0_ADDR((USBx),<sp/>(bEpNum),<sp/>(wBuf0Addr));<sp/>\</highlight></codeline>
<codeline lineno="917"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_EP_DBUF1_ADDR((USBx),<sp/>(bEpNum),<sp/>(wBuf1Addr));<sp/>\</highlight></codeline>
<codeline lineno="918"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_DBUF_ADDR<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_DBUF0_ADDR(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/>(PCD_GET_EP_TX_ADDRESS((USBx),<sp/>(bEpNum)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_DBUF1_ADDR(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/>(PCD_GET_EP_RX_ADDRESS((USBx),<sp/>(bEpNum)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_DBUF0_CNT(USBx,<sp/>bEpNum,<sp/>bDir,<sp/>wCount)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="939"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((bDir)<sp/>==<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="940"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>OUT<sp/>endpoint<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="941"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="942"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PCD_SET_EP_RX_DBUF0_CNT((USBx),<sp/>(bEpNum),<sp/>(wCount));<sp/>\</highlight></codeline>
<codeline lineno="943"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="944"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="945"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="946"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((bDir)<sp/>==<sp/>1U)<sp/>\</highlight></codeline>
<codeline lineno="947"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="948"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>IN<sp/>endpoint<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="949"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCD_SET_EP_TX_CNT((USBx),<sp/>(bEpNum),<sp/>(wCount));<sp/>\</highlight></codeline>
<codeline lineno="950"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="951"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="952"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>SetEPDblBuf0Count*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_DBUF1_CNT(USBx,<sp/>bEpNum,<sp/>bDir,<sp/>wCount)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="955"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>register<sp/>uint32_t<sp/>_wBase<sp/>=<sp/>(uint32_t)(USBx);<sp/>\</highlight></codeline>
<codeline lineno="956"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__IO<sp/>uint16_t<sp/>*_wEPRegVal;<sp/>\</highlight></codeline>
<codeline lineno="957"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="958"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((bDir)<sp/>==<sp/>0U)<sp/>\</highlight></codeline>
<codeline lineno="959"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="960"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>OUT<sp/>endpoint<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="961"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PCD_SET_EP_RX_CNT((USBx),<sp/>(bEpNum),<sp/>(wCount));<sp/>\</highlight></codeline>
<codeline lineno="962"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="963"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="964"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="965"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((bDir)<sp/>==<sp/>1U)<sp/>\</highlight></codeline>
<codeline lineno="966"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="967"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>IN<sp/>endpoint<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="968"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wBase<sp/>+=<sp/>(uint32_t)(USBx)-&gt;BTABLE;<sp/>\</highlight></codeline>
<codeline lineno="969"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wEPRegVal<sp/>=<sp/>(__IO<sp/>uint16_t<sp/>*)(_wBase<sp/>+<sp/>0x400U<sp/>+<sp/>((((uint32_t)(bEpNum)<sp/>*<sp/>8U)<sp/>+<sp/>6U)<sp/>*<sp/>PMA_ACCESS));<sp/>\</highlight></codeline>
<codeline lineno="970"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*_wEPRegVal<sp/>=<sp/>(uint16_t)(wCount);<sp/>\</highlight></codeline>
<codeline lineno="971"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="972"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="973"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>SetEPDblBuf1Count<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_SET_EP_DBUF_CNT(USBx,<sp/>bEpNum,<sp/>bDir,<sp/>wCount)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="976"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_EP_DBUF0_CNT((USBx),<sp/>(bEpNum),<sp/>(bDir),<sp/>(wCount));<sp/>\</highlight></codeline>
<codeline lineno="977"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PCD_SET_EP_DBUF1_CNT((USBx),<sp/>(bEpNum),<sp/>(bDir),<sp/>(wCount));<sp/>\</highlight></codeline>
<codeline lineno="978"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="comment">/*<sp/>PCD_SET_EP_DBUF_CNT<sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_DBUF0_CNT(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/>(PCD_GET_EP_TX_CNT((USBx),<sp/>(bEpNum)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCD_GET_EP_DBUF1_CNT(USBx,<sp/>bEpNum)<sp/><sp/><sp/><sp/><sp/>(PCD_GET_EP_RX_CNT((USBx),<sp/>(bEpNum)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(USB)<sp/>||<sp/>defined<sp/>(USB_OTG_FS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STM32F1xx_HAL_PCD_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">/************************<sp/>(C)<sp/>COPYRIGHT<sp/>STMicroelectronics<sp/>*****END<sp/>OF<sp/>FILE****/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_pcd.h"/>
  </compounddef>
</doxygen>

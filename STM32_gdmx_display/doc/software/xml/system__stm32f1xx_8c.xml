<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="system__stm32f1xx_8c" kind="file" language="C++">
    <compoundname>system_stm32f1xx.c</compoundname>
    <includes refid="stm32f1xx_8h" local="yes">stm32f1xx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>Src/system_stm32f1xx.c</label>
        <link refid="system__stm32f1xx_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stm32f1xx.h</label>
        <link refid="stm32f1xx_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___s_t_m32_f1xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" prot="public" static="no">
        <name>HSE_VALUE</name>
        <initializer>8000000U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default value of the External oscillator in Hz. This value can be provided and adapted by the user application. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f1xx.c" line="79" column="11" bodyfile="Src/system_stm32f1xx.c" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_m32_f1xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" prot="public" static="no">
        <name>HSI_VALUE</name>
        <initializer>8000000U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default value of the Internal oscillator in Hz. This value can be provided and adapted by the user application. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f1xx.c" line="84" column="11" bodyfile="Src/system_stm32f1xx.c" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_m32_f1xx___system___private___defines_1ga40e1495541cbb4acbe3f1819bd87a9fe" prot="public" static="no">
        <name>VECT_TAB_OFFSET</name>
        <initializer>0x00000000U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>&lt; Uncomment the following line if you need to use external SRAM <linebreak/>
</para>
<para>&lt; Uncomment the following line if you need to relocate your vector Table in Internal SRAM. Vector Table base offset field. This value must be a multiple of 0x200. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f1xx.c" line="96" column="9" bodyfile="Src/system_stm32f1xx.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t SystemCoreClock</definition>
        <argsstring></argsstring>
        <name>SystemCoreClock</name>
        <initializer>= 16000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>System Clock Frequency (Core Clock) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f1xx.c" line="123" column="10" bodyfile="Src/system_stm32f1xx.c" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___s_t_m32_f1xx___system___private___variables_1ga53cb26d01524d9560f98101a2c597c40" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t AHBPrescTable[16U]</definition>
        <argsstring>[16U]</argsstring>
        <name>AHBPrescTable</name>
        <initializer>= {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AHB prescalers table values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f1xx.c" line="124" column="15" bodyfile="Src/system_stm32f1xx.c" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___s_t_m32_f1xx___system___private___variables_1gaa93c123312c9273c0928a79f1203f759" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t APBPrescTable[8U]</definition>
        <argsstring>[8U]</argsstring>
        <name>APBPrescTable</name>
        <initializer>=  {0, 0, 0, 0, 1, 2, 3, 4}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APB prescalers table values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f1xx.c" line="125" column="15" bodyfile="Src/system_stm32f1xx.c" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___s_t_m32_f1xx___system___private___functions_1ga93f514700ccf00d08dbdcff7f1224eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SystemInit</definition>
        <argsstring>(void)</argsstring>
        <name>SystemInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Setup the microcontroller system Initialize the Embedded Flash Interface, the PLL and update the SystemCoreClock variable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function should be used only after reset. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f1xx.c" line="157" column="6" bodyfile="Src/system_stm32f1xx.c" bodystart="157" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_m32_f1xx___system___private___functions_1gae0c36a9591fe6e9c45ecb21a794f0f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SystemCoreClockUpdate</definition>
        <argsstring>(void)</argsstring>
        <name>SystemCoreClockUpdate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update SystemCoreClock variable according to Clock Register Values. The SystemCoreClock variable contains the core clock (HCLK), it can be used by the user application to setup the SysTick timer or configure other parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Each time the core clock (HCLK) changes, this function must be called to update SystemCoreClock variable value. Otherwise, any configuration based on this variable will be incorrect. <linebreak/>
</para>
</simplesect>
<simplesect kind="note"><para>- The system frequency computed by this function is not the real frequency in the chip. It is calculated based on the predefined constant and the selected clock source:</para>
</simplesect>
<itemizedlist>
<listitem><para>If SYSCLK source is HSI, SystemCoreClock will contain the <ref refid="group___s_t_m32_f1xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE(*)</ref></para>
</listitem><listitem><para>If SYSCLK source is HSE, SystemCoreClock will contain the <ref refid="group___s_t_m32_f1xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE(**)</ref></para>
</listitem><listitem><para>If SYSCLK source is PLL, SystemCoreClock will contain the <ref refid="group___s_t_m32_f1xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE(**)</ref> or <ref refid="group___s_t_m32_f1xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE(*)</ref> multiplied by the PLL factors.</para>
</listitem></itemizedlist>
</para>
<para>(*) HSI_VALUE is a constant defined in <ref refid="stm32f1xx_8h" kindref="compound">stm32f1xx.h</ref> file (default value 8 MHz) but the real value may vary depending on the variations in voltage and temperature. <linebreak/>
</para>
<para>(**) HSE_VALUE is a constant defined in <ref refid="stm32f1xx_8h" kindref="compound">stm32f1xx.h</ref> file (default value 8 MHz or 25 MHz, depending on the product used), user has to ensure that HSE_VALUE is same as the real frequency of the crystal used. Otherwise, this function may have wrong result.</para>
<para><itemizedlist>
<listitem><para>The result of this function could be not correct when using fractional value for HSE crystal. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/system_stm32f1xx.c" line="247" column="6" bodyfile="Src/system_stm32f1xx.c" bodystart="247" bodyend="353"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CMSIS Cortex-M3 Device Peripheral Access Layer System Source File. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>MCD Application Team</para>
</simplesect>
<orderedlist>
<listitem><para>This file provides two functions and one global variable to be called from user application:<itemizedlist>
<listitem><para><ref refid="group___s_t_m32_f1xx___system___private___functions_1ga93f514700ccf00d08dbdcff7f1224eb2" kindref="member">SystemInit()</ref>: Setups the system clock (System clock source, PLL Multiplier factors, AHB/APBx prescalers and Flash settings). This function is called at startup just after reset and before branch to main program. This call is made inside the &quot;startup_stm32f1xx_xx.s&quot; file.</para>
</listitem><listitem><para>SystemCoreClock variable: Contains the core clock (HCLK), it can be used by the user application to setup the SysTick timer or configure other parameters.</para>
</listitem><listitem><para><ref refid="group___s_t_m32_f1xx___system___private___functions_1gae0c36a9591fe6e9c45ecb21a794f0f0f" kindref="member">SystemCoreClockUpdate()</ref>: Updates the variable SystemCoreClock and must be called whenever the core clock is changed during program execution.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>After each device reset the HSI (8 MHz) is used as system clock source. Then <ref refid="group___s_t_m32_f1xx___system___private___functions_1ga93f514700ccf00d08dbdcff7f1224eb2" kindref="member">SystemInit()</ref> function is called, in &quot;startup_stm32f1xx_xx.s&quot; file, to configure the system clock before to branch to main program.</para>
</listitem><listitem><para>The default value of HSE crystal is set to 8 MHz (or 25 MHz, depending on the product used), refer to &quot;HSE_VALUE&quot;. When HSE is used as system clock source, directly or through PLL, and you are using different crystal you have to adapt the HSE value to your own configuration.</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="attention"><para></para>
</simplesect>
<heading level="2"><center><copy/> Copyright (c) 2019 Donskih Dmitriy. All rights reserved.</center></heading>
</para>
<para>This software component is licensed by Donskih Dmitriy under BSD 3-Clause license, the &quot;License&quot;; You may not use this file except in compliance with the License. You may obtain a copy of the License at: opensource.org/licenses/BSD-3-Clause </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f1xx_8h" kindref="compound">stm32f1xx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/><sp/>(HSE_VALUE)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>HSE_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8000000U<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HSE_VALUE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/><sp/>(HSI_VALUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>HSI_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8000000U<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HSI_VALUE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STM32F100xE)<sp/>||<sp/>defined(STM32F101xE)<sp/>||<sp/>defined(STM32F101xG)<sp/>||<sp/>defined(STM32F103xE)<sp/>||<sp/>defined(STM32F103xG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>DATA_IN_ExtSRAM<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STM32F100xE<sp/>||<sp/>STM32F101xE<sp/>||<sp/>STM32F101xG<sp/>||<sp/>STM32F103xE<sp/>||<sp/>STM32F103xG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>VECT_TAB_SRAM<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECT_TAB_OFFSET<sp/><sp/>0x00000000U<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>variable<sp/>is<sp/>updated<sp/>in<sp/>three<sp/>ways:</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>by<sp/>calling<sp/>CMSIS<sp/>function<sp/>SystemCoreClockUpdate()</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>2)<sp/>by<sp/>calling<sp/>HAL<sp/>API<sp/>function<sp/>HAL_RCC_GetHCLKFreq()</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>3)<sp/>each<sp/>time<sp/>HAL_RCC_ClockConfig()<sp/>is<sp/>called<sp/>to<sp/>configure<sp/>the<sp/>system<sp/>clock<sp/>frequency<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note:<sp/>If<sp/>you<sp/>use<sp/>this<sp/>function<sp/>to<sp/>configure<sp/>the<sp/>system<sp/>clock;<sp/>then<sp/>there</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>no<sp/>need<sp/>to<sp/>call<sp/>the<sp/>2<sp/>first<sp/>functions<sp/>listed<sp/>above,<sp/>since<sp/>SystemCoreClock</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>is<sp/>updated<sp/>automatically.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">uint32_t<sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>=<sp/>16000000;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1ga53cb26d01524d9560f98101a2c597c40" kindref="member">AHBPrescTable</ref>[16U]<sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>6,<sp/>7,<sp/>8,<sp/>9};</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa93c123312c9273c0928a79f1203f759" kindref="member">APBPrescTable</ref>[8U]<sp/>=<sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STM32F100xE)<sp/>||<sp/>defined(STM32F101xE)<sp/>||<sp/>defined(STM32F101xG)<sp/>||<sp/>defined(STM32F103xE)<sp/>||<sp/>defined(STM32F103xG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DATA_IN_ExtSRAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SystemInit_ExtMemCtl(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DATA_IN_ExtSRAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STM32F100xE<sp/>||<sp/>STM32F101xE<sp/>||<sp/>STM32F101xG<sp/>||<sp/>STM32F103xE<sp/>||<sp/>STM32F103xG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_t_m32_f1xx___system___private___functions_1ga93f514700ccf00d08dbdcff7f1224eb2" kindref="member">SystemInit</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>RCC<sp/>clock<sp/>configuration<sp/>to<sp/>the<sp/>default<sp/>reset<sp/>state(for<sp/>debug<sp/>purpose)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>HSION<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>RCC-&gt;CR<sp/>|=<sp/>0x00000001U;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>SW,<sp/>HPRE,<sp/>PPRE1,<sp/>PPRE2,<sp/>ADCPRE<sp/>and<sp/>MCO<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(STM32F105xC)<sp/>&amp;&amp;<sp/>!defined(STM32F107xC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>RCC-&gt;CFGR<sp/>&amp;=<sp/>0xF8FF0000U;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>RCC-&gt;CFGR<sp/>&amp;=<sp/>0xF0FF0000U;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STM32F105xC<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>HSEON,<sp/>CSSON<sp/>and<sp/>PLLON<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>RCC-&gt;CR<sp/>&amp;=<sp/>0xFEF6FFFFU;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>HSEBYP<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>RCC-&gt;CR<sp/>&amp;=<sp/>0xFFFBFFFFU;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>PLLSRC,<sp/>PLLXTPRE,<sp/>PLLMUL<sp/>and<sp/>USBPRE/OTGFSPRE<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>RCC-&gt;CFGR<sp/>&amp;=<sp/>0xFF80FFFFU;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STM32F105xC)<sp/>||<sp/>defined(STM32F107xC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>PLL2ON<sp/>and<sp/>PLL3ON<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>RCC-&gt;CR<sp/>&amp;=<sp/>0xEBFFFFFFU;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>all<sp/>interrupts<sp/>and<sp/>clear<sp/>pending<sp/>bits<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>RCC-&gt;CIR<sp/>=<sp/>0x00FF0000U;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>CFGR2<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>RCC-&gt;CFGR2<sp/>=<sp/>0x00000000U;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(STM32F100xB)<sp/>||<sp/>defined(STM32F100xE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>all<sp/>interrupts<sp/>and<sp/>clear<sp/>pending<sp/>bits<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>RCC-&gt;CIR<sp/>=<sp/>0x009F0000U;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>CFGR2<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>RCC-&gt;CFGR2<sp/>=<sp/>0x00000000U;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>all<sp/>interrupts<sp/>and<sp/>clear<sp/>pending<sp/>bits<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>RCC-&gt;CIR<sp/>=<sp/>0x009F0000U;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STM32F105xC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STM32F100xE)<sp/>||<sp/>defined(STM32F101xE)<sp/>||<sp/>defined(STM32F101xG)<sp/>||<sp/>defined(STM32F103xE)<sp/>||<sp/>defined(STM32F103xG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>DATA_IN_ExtSRAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>SystemInit_ExtMemCtl();<sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>DATA_IN_ExtSRAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECT_TAB_SRAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><ref refid="group___c_m_s_i_s__core__base_1gaaaf6477c2bde2f00f99e3c2fd1060b01" kindref="member">SCB</ref>-&gt;VTOR<sp/>=<sp/><ref refid="group___peripheral__memory__map_1ga05e8f3d2e5868754a7cd88614955aecc" kindref="member">SRAM_BASE</ref><sp/>|<sp/><ref refid="group___s_t_m32_f1xx___system___private___defines_1ga40e1495541cbb4acbe3f1819bd87a9fe" kindref="member">VECT_TAB_OFFSET</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Vector<sp/>Table<sp/>Relocation<sp/>in<sp/>Internal<sp/>SRAM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><ref refid="group___c_m_s_i_s__core__base_1gaaaf6477c2bde2f00f99e3c2fd1060b01" kindref="member">SCB</ref>-&gt;VTOR<sp/>=<sp/><ref refid="group___peripheral__memory__map_1ga23a9099a5f8fc9c6e253c0eecb2be8db" kindref="member">FLASH_BASE</ref><sp/>|<sp/><ref refid="group___s_t_m32_f1xx___system___private___defines_1ga40e1495541cbb4acbe3f1819bd87a9fe" kindref="member">VECT_TAB_OFFSET</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Vector<sp/>Table<sp/>Relocation<sp/>in<sp/>Internal<sp/>FLASH.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_t_m32_f1xx___system___private___functions_1gae0c36a9591fe6e9c45ecb21a794f0f0f" kindref="member">SystemCoreClockUpdate</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmp<sp/>=<sp/>0U,<sp/>pllmull<sp/>=<sp/>0U,<sp/>pllsource<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STM32F105xC)<sp/>||<sp/>defined(STM32F107xC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>uint32_t<sp/>prediv1source<sp/>=<sp/>0U,<sp/>prediv1factor<sp/>=<sp/>0U,<sp/>prediv2factor<sp/>=<sp/>0U,<sp/>pll2mull<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STM32F105xC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STM32F100xB)<sp/>||<sp/>defined(STM32F100xE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>uint32_t<sp/>prediv1factor<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STM32F100xB<sp/>or<sp/>STM32F100xE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>SYSCLK<sp/>source<sp/>-------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>RCC-&gt;CFGR<sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1ga15bf2269500dc97e137315f44aa015c9" kindref="member">RCC_CFGR_SWS</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tmp)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x00U:<sp/><sp/></highlight><highlight class="comment">/*<sp/>HSI<sp/>used<sp/>as<sp/>system<sp/>clock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>=<sp/><ref refid="group___s_t_m32_f1xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x04U:<sp/><sp/></highlight><highlight class="comment">/*<sp/>HSE<sp/>used<sp/>as<sp/>system<sp/>clock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>=<sp/><ref refid="group___s_t_m32_f1xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x08U:<sp/><sp/></highlight><highlight class="comment">/*<sp/>PLL<sp/>used<sp/>as<sp/>system<sp/>clock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>PLL<sp/>clock<sp/>source<sp/>and<sp/>multiplication<sp/>factor<sp/>----------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pllmull<sp/>=<sp/>RCC-&gt;CFGR<sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1ga9735c088436b547fff3baae2bbaa0426" kindref="member">RCC_CFGR_PLLMULL</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pllsource<sp/>=<sp/>RCC-&gt;CFGR<sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1gaba4a5dbbd286f07a97f5aa6e6f3f6a57" kindref="member">RCC_CFGR_PLLSRC</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(STM32F105xC)<sp/>&amp;&amp;<sp/>!defined(STM32F107xC)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pllmull<sp/>=<sp/>(<sp/>pllmull<sp/>&gt;&gt;<sp/>18U)<sp/>+<sp/>2U;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pllsource<sp/>==<sp/>0x00U)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HSI<sp/>oscillator<sp/>clock<sp/>divided<sp/>by<sp/>2<sp/>selected<sp/>as<sp/>PLL<sp/>clock<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>=<sp/>(<ref refid="group___s_t_m32_f1xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE</ref><sp/>&gt;&gt;<sp/>1U)<sp/>*<sp/>pllmull;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#if<sp/>defined(STM32F100xB)<sp/>||<sp/>defined(STM32F100xE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prediv1factor<sp/>=<sp/>(RCC-&gt;CFGR2<sp/>&amp;<sp/>RCC_CFGR2_PREDIV1)<sp/>+<sp/>1U;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HSE<sp/>oscillator<sp/>clock<sp/>selected<sp/>as<sp/>PREDIV1<sp/>clock<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>=<sp/>(<ref refid="group___s_t_m32_f1xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE</ref><sp/>/<sp/>prediv1factor)<sp/>*<sp/>pllmull;<sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HSE<sp/>selected<sp/>as<sp/>PLL<sp/>clock<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((RCC-&gt;CFGR<sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1ga39cb6bd06fb93eed1e2fe9da0297810a" kindref="member">RCC_CFGR_PLLXTPRE</ref>)<sp/>!=<sp/>(uint32_t)RESET)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="comment">/*<sp/>HSE<sp/>oscillator<sp/>clock<sp/>divided<sp/>by<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>=<sp/>(<ref refid="group___s_t_m32_f1xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE</ref><sp/>&gt;&gt;<sp/>1U)<sp/>*<sp/>pllmull;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>=<sp/><ref refid="group___s_t_m32_f1xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE</ref><sp/>*<sp/>pllmull;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pllmull<sp/>=<sp/>pllmull<sp/>&gt;&gt;<sp/>18U;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pllmull<sp/>!=<sp/>0x0DU)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pllmull<sp/>+=<sp/>2U;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>PLL<sp/>multiplication<sp/>factor<sp/>=<sp/>PLL<sp/>input<sp/>clock<sp/>*<sp/>6.5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pllmull<sp/>=<sp/>13U<sp/>/<sp/>2U;<sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pllsource<sp/>==<sp/>0x00U)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HSI<sp/>oscillator<sp/>clock<sp/>divided<sp/>by<sp/>2<sp/>selected<sp/>as<sp/>PLL<sp/>clock<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>=<sp/>(<ref refid="group___s_t_m32_f1xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE</ref><sp/>&gt;&gt;<sp/>1U)<sp/>*<sp/>pllmull;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="comment">/*<sp/>PREDIV1<sp/>selected<sp/>as<sp/>PLL<sp/>clock<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>PREDIV1<sp/>clock<sp/>source<sp/>and<sp/>division<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prediv1source<sp/>=<sp/>RCC-&gt;CFGR2<sp/>&amp;<sp/>RCC_CFGR2_PREDIV1SRC;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prediv1factor<sp/>=<sp/>(RCC-&gt;CFGR2<sp/>&amp;<sp/>RCC_CFGR2_PREDIV1)<sp/>+<sp/>1U;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prediv1source<sp/>==<sp/>0U)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HSE<sp/>oscillator<sp/>clock<sp/>selected<sp/>as<sp/>PREDIV1<sp/>clock<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>=<sp/>(<ref refid="group___s_t_m32_f1xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE</ref><sp/>/<sp/>prediv1factor)<sp/>*<sp/>pllmull;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="comment">/*<sp/>PLL2<sp/>clock<sp/>selected<sp/>as<sp/>PREDIV1<sp/>clock<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>PREDIV2<sp/>division<sp/>factor<sp/>and<sp/>PLL2<sp/>multiplication<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prediv2factor<sp/>=<sp/>((RCC-&gt;CFGR2<sp/>&amp;<sp/>RCC_CFGR2_PREDIV2)<sp/>&gt;&gt;<sp/>4U)<sp/>+<sp/>1U;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pll2mull<sp/>=<sp/>((RCC-&gt;CFGR2<sp/>&amp;<sp/>RCC_CFGR2_PLL2MUL)<sp/>&gt;&gt;<sp/>8U)<sp/>+<sp/>2U;<sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>=<sp/>(((<ref refid="group___s_t_m32_f1xx___system___private___defines_1gaeafcff4f57440c60e64812dddd13e7cb" kindref="member">HSE_VALUE</ref><sp/>/<sp/>prediv2factor)<sp/>*<sp/>pll2mull)<sp/>/<sp/>prediv1factor)<sp/>*<sp/>pllmull;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STM32F105xC<sp/>*/</highlight><highlight class="preprocessor"><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>=<sp/><ref refid="group___s_t_m32_f1xx___system___private___defines_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37" kindref="member">HSI_VALUE</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>HCLK<sp/>clock<sp/>frequency<sp/>----------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>HCLK<sp/>prescaler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1ga53cb26d01524d9560f98101a2c597c40" kindref="member">AHBPrescTable</ref>[((RCC-&gt;CFGR<sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1gafe10e66938644ee8054a2426ff23efea" kindref="member">RCC_CFGR_HPRE</ref>)<sp/>&gt;&gt;<sp/>4U)];</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>HCLK<sp/>clock<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="group___s_t_m32_f1xx___system___private___variables_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref><sp/>&gt;&gt;=<sp/>tmp;<sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STM32F100xE)<sp/>||<sp/>defined(STM32F101xE)<sp/>||<sp/>defined(STM32F101xG)<sp/>||<sp/>defined(STM32F103xE)<sp/>||<sp/>defined(STM32F103xG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DATA_IN_ExtSRAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SystemInit_ExtMemCtl(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="core__armv8mbl_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t<sp/>tmpreg;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>FSMC<sp/>clock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>RCC-&gt;AHBENR<sp/>=<sp/>0x00000114U;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delay<sp/>after<sp/>an<sp/>RCC<sp/>peripheral<sp/>clock<sp/>enabling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>tmpreg<sp/>=<sp/>READ_BIT(RCC-&gt;AHBENR,<sp/>RCC_AHBENR_FSMCEN);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>GPIOD,<sp/>GPIOE,<sp/>GPIOF<sp/>and<sp/>GPIOG<sp/>clocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>RCC-&gt;APB2ENR<sp/>=<sp/>0x000001E0U;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delay<sp/>after<sp/>an<sp/>RCC<sp/>peripheral<sp/>clock<sp/>enabling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>tmpreg<sp/>=<sp/>READ_BIT(RCC-&gt;APB2ENR,<sp/><ref refid="group___peripheral___registers___bits___definition_1ga778a0ac70714122cf143a6b7b275cc83" kindref="member">RCC_APB2ENR_IOPDEN</ref>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>(void)(tmpreg);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------<sp/><sp/>SRAM<sp/>Data<sp/>lines,<sp/>NOE<sp/>and<sp/>NWE<sp/>configuration<sp/>---------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">/*----------------<sp/><sp/>SRAM<sp/>Address<sp/>lines<sp/>configuration<sp/>-------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">/*----------------<sp/><sp/>NOE<sp/>and<sp/>NWE<sp/>configuration<sp/>--------------------------------*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">/*----------------<sp/><sp/>NE3<sp/>configuration<sp/>----------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">/*----------------<sp/><sp/>NBL0,<sp/>NBL1<sp/>configuration<sp/>---------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>GPIOD-&gt;CRL<sp/>=<sp/>0x44BB44BBU;<sp/><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>GPIOD-&gt;CRH<sp/>=<sp/>0xBBBBBBBBU;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>GPIOE-&gt;CRL<sp/>=<sp/>0xB44444BBU;<sp/><sp/></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>GPIOE-&gt;CRH<sp/>=<sp/>0xBBBBBBBBU;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>GPIOF-&gt;CRL<sp/>=<sp/>0x44BBBBBBU;<sp/><sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>GPIOF-&gt;CRH<sp/>=<sp/>0xBBBB4444U;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>GPIOG-&gt;CRL<sp/>=<sp/>0x44BBBBBBU;<sp/><sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>GPIOG-&gt;CRH<sp/>=<sp/>0x444B4B44U;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">/*----------------<sp/><sp/>FSMC<sp/>Configuration<sp/>---------------------------------------*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">/*----------------<sp/><sp/>Enable<sp/>FSMC<sp/>Bank1_SRAM<sp/>Bank<sp/>------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>FSMC_Bank1-&gt;BTCR[4U]<sp/>=<sp/>0x00001091U;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>FSMC_Bank1-&gt;BTCR[5U]<sp/>=<sp/>0x00110212U;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DATA_IN_ExtSRAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STM32F100xE<sp/>||<sp/>STM32F101xE<sp/>||<sp/>STM32F101xG<sp/>||<sp/>STM32F103xE<sp/>||<sp/>STM32F103xG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">/************************<sp/>(C)<sp/>COPYRIGHT<sp/>STMicroelectronics<sp/>*****END<sp/>OF<sp/>FILE****/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Src/system_stm32f1xx.c"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="queue_8h" kind="file" language="C++">
    <compoundname>queue.h</compoundname>
    <includedby refid="cmsis__os_8h" local="yes">Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h</includedby>
    <includedby refid="semphr_8h" local="yes">Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h</includedby>
    <includedby refid="queue_8c" local="yes">Middlewares/Third_Party/FreeRTOS/Source/queue.c</includedby>
    <includedby refid="timers_8c" local="yes">Middlewares/Third_Party/FreeRTOS/Source/timers.c</includedby>
    <invincdepgraph>
      <node id="4">
        <label>Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h</label>
        <link refid="semphr_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h</label>
        <link refid="cmsis__os_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Src/main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="1">
        <label>Middlewares/Third_Party/FreeRTOS/Source/include/queue.h</label>
        <link refid="queue_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="queue_8h_1a4d78fa863fbeb90425a2dda08fae8b12" prot="public" static="no">
        <name>queueSEND_TO_BACK</name>
        <initializer>( ( BaseType_t ) 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="63" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1a6bae395a00f1a4455f0e7fe3c9e76c14" prot="public" static="no">
        <name>queueSEND_TO_FRONT</name>
        <initializer>( ( BaseType_t ) 1 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="64" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1a5bb1c4a46d4b08b6d35cf586983476ef" prot="public" static="no">
        <name>queueOVERWRITE</name>
        <initializer>( ( BaseType_t ) 2 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="65" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1a3f926bea6ffa4e2f1af900431d0d90a5" prot="public" static="no">
        <name>queueQUEUE_TYPE_BASE</name>
        <initializer>( ( uint8_t ) 0U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="68" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1a9b8e1b1d5d9952bd0121ae71cf3aba8d" prot="public" static="no">
        <name>queueQUEUE_TYPE_SET</name>
        <initializer>( ( uint8_t ) 0U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="69" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1ae9c10f504e758fb69271024dc8d8a8c9" prot="public" static="no">
        <name>queueQUEUE_TYPE_MUTEX</name>
        <initializer>( ( uint8_t ) 1U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="70" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1abccf1c95aa0942f8df163d414010542b" prot="public" static="no">
        <name>queueQUEUE_TYPE_COUNTING_SEMAPHORE</name>
        <initializer>( ( uint8_t ) 2U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="71" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1a8af9c6a83fce59c386da4f22248b56ae" prot="public" static="no">
        <name>queueQUEUE_TYPE_BINARY_SEMAPHORE</name>
        <initializer>( ( uint8_t ) 3U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="72" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1a6f68aa65394f83b57e34061d9ff44b47" prot="public" static="no">
        <name>queueQUEUE_TYPE_RECURSIVE_MUTEX</name>
        <initializer>( ( uint8_t ) 4U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="73" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1aa612fcc2b1ceee0200f34b942e300b41" prot="public" static="no">
        <name>xQueueSendToFront</name>
        <param><defname>xQueue</defname></param>
        <param><defname>pvItemToQueue</defname></param>
        <param><defname>xTicksToWait</defname></param>
        <initializer>xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_FRONT )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="311" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1a81d24a2c1199d58efb76fbee15853112" prot="public" static="no">
        <name>xQueueSendToBack</name>
        <param><defname>xQueue</defname></param>
        <param><defname>pvItemToQueue</defname></param>
        <param><defname>xTicksToWait</defname></param>
        <initializer>xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_BACK )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="393" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1af7eb49d3249351176992950d9185abe9" prot="public" static="no">
        <name>xQueueSend</name>
        <param><defname>xQueue</defname></param>
        <param><defname>pvItemToQueue</defname></param>
        <param><defname>xTicksToWait</defname></param>
        <initializer>xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_BACK )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="477" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1a8e9ced123b5a0e37a36d3bbdb2e56b4e" prot="public" static="no">
        <name>xQueueOverwrite</name>
        <param><defname>xQueue</defname></param>
        <param><defname>pvItemToQueue</defname></param>
        <initializer>xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), 0, queueOVERWRITE )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="560" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1af03b83396462affe9e28302660e7b9c6" prot="public" static="no">
        <name>xQueueSendToFrontFromISR</name>
        <param><defname>xQueue</defname></param>
        <param><defname>pvItemToQueue</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer>xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_FRONT )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="982" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1a51e9f73417b11441a181cdc4f33a68e9" prot="public" static="no">
        <name>xQueueSendToBackFromISR</name>
        <param><defname>xQueue</defname></param>
        <param><defname>pvItemToQueue</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer>xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_BACK )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1053" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="1053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1abdcd6a86ef82034d002193e79cfd3ce8" prot="public" static="no">
        <name>xQueueOverwriteFromISR</name>
        <param><defname>xQueue</defname></param>
        <param><defname>pvItemToQueue</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer>xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueOVERWRITE )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1140" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="1140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1a21d5919ed26c21d121df4a4debeb643c" prot="public" static="no">
        <name>xQueueSendFromISR</name>
        <param><defname>xQueue</defname></param>
        <param><defname>pvItemToQueue</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer>xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_BACK )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1214" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="1214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8h_1a94df8d8bc938424151f8196db2f1177b" prot="public" static="no">
        <name>xQueueReset</name>
        <param><defname>xQueue</defname></param>
        <initializer>xQueueGenericReset( xQueue, pdFALSE )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1431" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="1431" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="queue_8h_1aaf19d499892a4ce1409326ece00f5264" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* QueueHandle_t</definition>
        <argsstring></argsstring>
        <name>QueueHandle_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type by which queues are referenced. For example, a call to xQueueCreate() returns an QueueHandle_t variable that can then be used as a parameter to xQueueSend(), xQueueReceive(), etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="46" column="15" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="queue_8h_1a32a86d604e1706d72a5a4c62d8262f56" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* QueueSetHandle_t</definition>
        <argsstring></argsstring>
        <name>QueueSetHandle_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type by which queue sets are referenced. For example, a call to xQueueCreateSet() returns an xQueueSet variable that can then be used as a parameter to xQueueSelectFromSet(), xQueueAddToSet(), etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="53" column="15" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="queue_8h_1a6c19a940d8fe07d338928ecea68b1776" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* QueueSetMemberHandle_t</definition>
        <argsstring></argsstring>
        <name>QueueSetMemberHandle_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Queue sets can contain both queues and semaphores, so the QueueSetMemberHandle_t is defined as a type to be used where a parameter or return value can be either an QueueHandle_t or an SemaphoreHandle_t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="60" column="15" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueGenericSend</definition>
        <argsstring>(QueueHandle_t xQueue, const void *const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueGenericSend</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>const void *const</type>
          <declname>pvItemToQueue</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <param>
          <type>const BaseType_t</type>
          <declname>xCopyPosition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="648" column="12" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="725" bodyend="920" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="648" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueuePeek</definition>
        <argsstring>(QueueHandle_t xQueue, void *const pvBuffer, TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueuePeek</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>pvBuffer</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="742" column="12" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1599" bodyend="1746" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="742" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1ac402adf98be1fb8ca0345f30dc11a9dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueuePeekFromISR</definition>
        <argsstring>(QueueHandle_t xQueue, void *const pvBuffer) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueuePeekFromISR</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>pvBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="775" column="12" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1840" bodyend="1891" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="775" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueReceive</definition>
        <argsstring>(QueueHandle_t xQueue, void *const pvBuffer, TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueReceive</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>pvBuffer</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="866" column="12" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1239" bodyend="1377" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="866" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1add7ee0701ba35904d190811b9e5a4eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UBaseType_t</type>
        <definition>UBaseType_t uxQueueMessagesWaiting</definition>
        <argsstring>(const QueueHandle_t xQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>uxQueueMessagesWaiting</name>
        <param>
          <type>const QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="881" column="13" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1894" bodyend="1907" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="881" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1aae75791e91707c1e0bb31d761921531c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UBaseType_t</type>
        <definition>UBaseType_t uxQueueSpacesAvailable</definition>
        <argsstring>(const QueueHandle_t xQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>uxQueueSpacesAvailable</name>
        <param>
          <type>const QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="898" column="13" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1910" bodyend="1925" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="898" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a707cbcfe3aed6b877b6aa6d9d75a3f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vQueueDelete</definition>
        <argsstring>(QueueHandle_t xQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>vQueueDelete</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="912" column="6" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1940" bodyend="1979" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="912" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a263711eb0124112e828a18fd4b8ab29d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueGenericSendFromISR</definition>
        <argsstring>(QueueHandle_t xQueue, const void *const pvItemToQueue, BaseType_t *const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueGenericSendFromISR</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>const void *const</type>
          <declname>pvItemToQueue</declname>
        </param>
        <param>
          <type>BaseType_t *const</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <param>
          <type>const BaseType_t</type>
          <declname>xCopyPosition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1293" column="12" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="923" bodyend="1071" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1293" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1ad14ae1174c2772cffc9e0c2c45dc55a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueGiveFromISR</definition>
        <argsstring>(QueueHandle_t xQueue, BaseType_t *const pxHigherPriorityTaskWoken) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueGiveFromISR</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>BaseType_t *const</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1294" column="12" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1074" bodyend="1236" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1294" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1acdf528f5c91131ae2f31c669cfd65758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueReceiveFromISR</definition>
        <argsstring>(QueueHandle_t xQueue, void *const pvBuffer, BaseType_t *const pxHigherPriorityTaskWoken) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueReceiveFromISR</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>pvBuffer</declname>
        </param>
        <param>
          <type>BaseType_t *const</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1383" column="12" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1749" bodyend="1837" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1383" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1aa11139c58f4eecaa0c50078f2976d010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueIsQueueEmptyFromISR</definition>
        <argsstring>(const QueueHandle_t xQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueIsQueueEmptyFromISR</name>
        <param>
          <type>const QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1389" column="12" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="2277" bodyend="2292" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1389" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a81319b3aa562733957c5a12a088516d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueIsQueueFullFromISR</definition>
        <argsstring>(const QueueHandle_t xQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueIsQueueFullFromISR</name>
        <param>
          <type>const QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1390" column="12" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="2316" bodyend="2331" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1390" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a3e89b6189166f9544f283435e2732f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UBaseType_t</type>
        <definition>UBaseType_t uxQueueMessagesWaitingFromISR</definition>
        <argsstring>(const QueueHandle_t xQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>uxQueueMessagesWaitingFromISR</name>
        <param>
          <type>const QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1391" column="13" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1928" bodyend="1937" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1391" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a80af2aff3f472600a12dea0642fa8b27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueCRSendFromISR</definition>
        <argsstring>(QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken)</argsstring>
        <name>xQueueCRSendFromISR</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pvItemToQueue</declname>
        </param>
        <param>
          <type>BaseType_t</type>
          <declname>xCoRoutinePreviouslyWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1402" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1402" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1ad66b08c1d6a17efa8985605bf182b997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueCRReceiveFromISR</definition>
        <argsstring>(QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxTaskWoken)</argsstring>
        <name>xQueueCRReceiveFromISR</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pvBuffer</declname>
        </param>
        <param>
          <type>BaseType_t *</type>
          <declname>pxTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1403" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1403" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1abb5d7bd9b62f2b642104fde73c1c666b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueCRSend</definition>
        <argsstring>(QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait)</argsstring>
        <name>xQueueCRSend</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pvItemToQueue</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1404" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1404" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a88a02b37c486c38b8c4112e16dfed099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueCRReceive</definition>
        <argsstring>(QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait)</argsstring>
        <name>xQueueCRReceive</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pvBuffer</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1405" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1405" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1acac7df114346b4219bc2aab79cac35b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QueueHandle_t</type>
        <definition>QueueHandle_t xQueueCreateMutex</definition>
        <argsstring>(const uint8_t ucQueueType) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueCreateMutex</name>
        <param>
          <type>const uint8_t</type>
          <declname>ucQueueType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1412" column="15" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1412" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1af92945589381b740932a7cc41e212a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QueueHandle_t</type>
        <definition>QueueHandle_t xQueueCreateMutexStatic</definition>
        <argsstring>(const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueCreateMutexStatic</name>
        <param>
          <type>const uint8_t</type>
          <declname>ucQueueType</declname>
        </param>
        <param>
          <type><ref refid="structx_s_t_a_t_i_c___q_u_e_u_e" kindref="compound">StaticQueue_t</ref> *</type>
          <declname>pxStaticQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1413" column="15" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1413" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1ac74677a8d243c76843c25fdb06436043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QueueHandle_t</type>
        <definition>QueueHandle_t xQueueCreateCountingSemaphore</definition>
        <argsstring>(const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueCreateCountingSemaphore</name>
        <param>
          <type>const UBaseType_t</type>
          <declname>uxMaxCount</declname>
        </param>
        <param>
          <type>const UBaseType_t</type>
          <declname>uxInitialCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1414" column="15" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1414" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a601cb15993988a393676a9df74b067bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QueueHandle_t</type>
        <definition>QueueHandle_t xQueueCreateCountingSemaphoreStatic</definition>
        <argsstring>(const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueCreateCountingSemaphoreStatic</name>
        <param>
          <type>const UBaseType_t</type>
          <declname>uxMaxCount</declname>
        </param>
        <param>
          <type>const UBaseType_t</type>
          <declname>uxInitialCount</declname>
        </param>
        <param>
          <type><ref refid="structx_s_t_a_t_i_c___q_u_e_u_e" kindref="compound">StaticQueue_t</ref> *</type>
          <declname>pxStaticQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1415" column="15" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1415" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueSemaphoreTake</definition>
        <argsstring>(QueueHandle_t xQueue, TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueSemaphoreTake</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1416" column="12" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1380" bodyend="1596" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1416" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1ac0db78cd3f300adcf29d618d7a0ec6fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* xQueueGetMutexHolder</definition>
        <argsstring>(QueueHandle_t xSemaphore) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueGetMutexHolder</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xSemaphore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1417" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1417" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a2bab773f100e4945e6ba8a7924b85f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* xQueueGetMutexHolderFromISR</definition>
        <argsstring>(QueueHandle_t xSemaphore) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueGetMutexHolderFromISR</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xSemaphore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1418" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1418" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a74e27d539a884589ebbbdfcc371a48cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueTakeMutexRecursive</definition>
        <argsstring>(QueueHandle_t xMutex, TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueTakeMutexRecursive</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xMutex</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1424" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1424" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1ac72c90f499bd0a5b5a90d1d3b05cb0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueGiveMutexRecursive</definition>
        <argsstring>(QueueHandle_t pxMutex) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueGiveMutexRecursive</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>pxMutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1425" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1425" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1ad4208ad97f737af942a13e64b45e83e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QueueSetHandle_t</type>
        <definition>QueueSetHandle_t xQueueCreateSet</definition>
        <argsstring>(const UBaseType_t uxEventQueueLength) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueCreateSet</name>
        <param>
          <type>const UBaseType_t</type>
          <declname>uxEventQueueLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1554" column="18" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1554" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1ae07b563e6bbe42a977f7c46853aa11eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueAddToSet</definition>
        <argsstring>(QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueAddToSet</name>
        <param>
          <type>QueueSetMemberHandle_t</type>
          <declname>xQueueOrSemaphore</declname>
        </param>
        <param>
          <type>QueueSetHandle_t</type>
          <declname>xQueueSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1578" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1578" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1ab16fdd17b9b6d74a82c8366f47cda162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueRemoveFromSet</definition>
        <argsstring>(QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueRemoveFromSet</name>
        <param>
          <type>QueueSetMemberHandle_t</type>
          <declname>xQueueOrSemaphore</declname>
        </param>
        <param>
          <type>QueueSetHandle_t</type>
          <declname>xQueueSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1597" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1597" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a71f56e6277ed4e419c707c8d0c785065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QueueSetMemberHandle_t</type>
        <definition>QueueSetMemberHandle_t xQueueSelectFromSet</definition>
        <argsstring>(QueueSetHandle_t xQueueSet, const TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueSelectFromSet</name>
        <param>
          <type>QueueSetHandle_t</type>
          <declname>xQueueSet</declname>
        </param>
        <param>
          <type>const TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1633" column="24" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1633" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1ac58b34fd733cf460cddab1abb9a899b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QueueSetMemberHandle_t</type>
        <definition>QueueSetMemberHandle_t xQueueSelectFromSetFromISR</definition>
        <argsstring>(QueueSetHandle_t xQueueSet) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueSelectFromSetFromISR</name>
        <param>
          <type>QueueSetHandle_t</type>
          <declname>xQueueSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1638" column="24" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1638" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1abaa0f8224837d82e60cf799127185546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vQueueWaitForMessageRestricted</definition>
        <argsstring>(QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) PRIVILEGED_FUNCTION</argsstring>
        <name>vQueueWaitForMessageRestricted</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <param>
          <type>const BaseType_t</type>
          <declname>xWaitIndefinitely</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1641" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1641" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a3c13a9fe455ec2d35b5f8386a1040599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xQueueGenericReset</definition>
        <argsstring>(QueueHandle_t xQueue, BaseType_t xNewQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>xQueueGenericReset</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>BaseType_t</type>
          <declname>xNewQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1642" column="12" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="247" bodyend="297" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1642" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a37c8b0ea8f2e6c5fa5082afb9721f986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vQueueSetQueueNumber</definition>
        <argsstring>(QueueHandle_t xQueue, UBaseType_t uxQueueNumber) PRIVILEGED_FUNCTION</argsstring>
        <name>vQueueSetQueueNumber</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>UBaseType_t</type>
          <declname>uxQueueNumber</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1643" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1643" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a7f7a4d9b75dcfbcefb2384da5df5290e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UBaseType_t</type>
        <definition>UBaseType_t uxQueueGetQueueNumber</definition>
        <argsstring>(QueueHandle_t xQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>uxQueueGetQueueNumber</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1644" column="13" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1644" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="queue_8h_1a9730db0a2f63acbf7197fa4150d7fe08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t ucQueueGetQueueType</definition>
        <argsstring>(QueueHandle_t xQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>ucQueueGetQueueType</name>
        <param>
          <type>QueueHandle_t</type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" line="1645" column="9" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h" declline="1645" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>FreeRTOS<sp/>Kernel<sp/>V10.0.1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2017<sp/>Amazon.com,<sp/>Inc.<sp/>or<sp/>its<sp/>affiliates.<sp/><sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>http://www.FreeRTOS.org</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>http://aws.amazon.com/freertos</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>1<sp/>tab<sp/>==<sp/>4<sp/>spaces!</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>QUEUE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>QUEUE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INC_FREERTOS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>&quot;include<sp/>FreeRTOS.h&quot;</highlight><highlight class="normal"><sp/>must<sp/>appear<sp/>in<sp/>source<sp/>files<sp/>before<sp/>&quot;include<sp/>queue.h&quot;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>QueueHandle_t;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>QueueSetHandle_t;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>QueueSetMemberHandle_t;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>internal<sp/>use<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueSEND_TO_BACK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueSEND_TO_FRONT<sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueOVERWRITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>2<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>internal<sp/>use<sp/>only.<sp/><sp/>These<sp/>definitions<sp/>*must*<sp/>match<sp/>those<sp/>in<sp/>queue.c.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueQUEUE_TYPE_BASE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>0U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueQUEUE_TYPE_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>0U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueQUEUE_TYPE_MUTEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>1U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueQUEUE_TYPE_COUNTING_SEMAPHORE<sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>2U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueQUEUE_TYPE_BINARY_SEMAPHORE<sp/><sp/><sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>3U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueQUEUE_TYPE_RECURSIVE_MUTEX<sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>4U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>xQueueCreate(<sp/>uxQueueLength,<sp/>uxItemSize<sp/>)<sp/>xQueueGenericCreate(<sp/>(<sp/>uxQueueLength<sp/>),<sp/>(<sp/>uxItemSize<sp/>),<sp/>(<sp/>queueQUEUE_TYPE_BASE<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>xQueueCreateStatic(<sp/>uxQueueLength,<sp/>uxItemSize,<sp/>pucQueueStorage,<sp/>pxQueueBuffer<sp/>)<sp/>xQueueGenericCreateStatic(<sp/>(<sp/>uxQueueLength<sp/>),<sp/>(<sp/>uxItemSize<sp/>),<sp/>(<sp/>pucQueueStorage<sp/>),<sp/>(<sp/>pxQueueBuffer<sp/>),<sp/>(<sp/>queueQUEUE_TYPE_BASE<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xQueueSendToFront(<sp/>xQueue,<sp/>pvItemToQueue,<sp/>xTicksToWait<sp/>)<sp/>xQueueGenericSend(<sp/>(<sp/>xQueue<sp/>),<sp/>(<sp/>pvItemToQueue<sp/>),<sp/>(<sp/>xTicksToWait<sp/>),<sp/>queueSEND_TO_FRONT<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xQueueSendToBack(<sp/>xQueue,<sp/>pvItemToQueue,<sp/>xTicksToWait<sp/>)<sp/>xQueueGenericSend(<sp/>(<sp/>xQueue<sp/>),<sp/>(<sp/>pvItemToQueue<sp/>),<sp/>(<sp/>xTicksToWait<sp/>),<sp/>queueSEND_TO_BACK<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xQueueSend(<sp/>xQueue,<sp/>pvItemToQueue,<sp/>xTicksToWait<sp/>)<sp/>xQueueGenericSend(<sp/>(<sp/>xQueue<sp/>),<sp/>(<sp/>pvItemToQueue<sp/>),<sp/>(<sp/>xTicksToWait<sp/>),<sp/>queueSEND_TO_BACK<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xQueueOverwrite(<sp/>xQueue,<sp/>pvItemToQueue<sp/>)<sp/>xQueueGenericSend(<sp/>(<sp/>xQueue<sp/>),<sp/>(<sp/>pvItemToQueue<sp/>),<sp/>0,<sp/>queueOVERWRITE<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal">BaseType_t<sp/>xQueueGenericSend(<sp/>QueueHandle_t<sp/>xQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvItemToQueue,<sp/>TickType_t<sp/>xTicksToWait,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseType_t<sp/>xCopyPosition<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal">BaseType_t<sp/>xQueuePeek(<sp/>QueueHandle_t<sp/>xQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvBuffer,<sp/>TickType_t<sp/>xTicksToWait<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal">BaseType_t<sp/>xQueuePeekFromISR(<sp/>QueueHandle_t<sp/>xQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvBuffer<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal">BaseType_t<sp/>xQueueReceive(<sp/>QueueHandle_t<sp/>xQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvBuffer,<sp/>TickType_t<sp/>xTicksToWait<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal">UBaseType_t<sp/>uxQueueMessagesWaiting(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueueHandle_t<sp/>xQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal">UBaseType_t<sp/>uxQueueSpacesAvailable(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueueHandle_t<sp/>xQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vQueueDelete(<sp/>QueueHandle_t<sp/>xQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xQueueSendToFrontFromISR(<sp/>xQueue,<sp/>pvItemToQueue,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>xQueueGenericSendFromISR(<sp/>(<sp/>xQueue<sp/>),<sp/>(<sp/>pvItemToQueue<sp/>),<sp/>(<sp/>pxHigherPriorityTaskWoken<sp/>),<sp/>queueSEND_TO_FRONT<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xQueueSendToBackFromISR(<sp/>xQueue,<sp/>pvItemToQueue,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>xQueueGenericSendFromISR(<sp/>(<sp/>xQueue<sp/>),<sp/>(<sp/>pvItemToQueue<sp/>),<sp/>(<sp/>pxHigherPriorityTaskWoken<sp/>),<sp/>queueSEND_TO_BACK<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xQueueOverwriteFromISR(<sp/>xQueue,<sp/>pvItemToQueue,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>xQueueGenericSendFromISR(<sp/>(<sp/>xQueue<sp/>),<sp/>(<sp/>pvItemToQueue<sp/>),<sp/>(<sp/>pxHigherPriorityTaskWoken<sp/>),<sp/>queueOVERWRITE<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xQueueSendFromISR(<sp/>xQueue,<sp/>pvItemToQueue,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>xQueueGenericSendFromISR(<sp/>(<sp/>xQueue<sp/>),<sp/>(<sp/>pvItemToQueue<sp/>),<sp/>(<sp/>pxHigherPriorityTaskWoken<sp/>),<sp/>queueSEND_TO_BACK<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal">BaseType_t<sp/>xQueueGenericSendFromISR(<sp/>QueueHandle_t<sp/>xQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvItemToQueue,<sp/>BaseType_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxHigherPriorityTaskWoken,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseType_t<sp/>xCopyPosition<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">BaseType_t<sp/>xQueueGiveFromISR(<sp/>QueueHandle_t<sp/>xQueue,<sp/>BaseType_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal">BaseType_t<sp/>xQueueReceiveFromISR(<sp/>QueueHandle_t<sp/>xQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvBuffer,<sp/>BaseType_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1386"><highlight class="comment"><sp/>*<sp/>Utilities<sp/>to<sp/>query<sp/>queues<sp/>that<sp/>are<sp/>safe<sp/>to<sp/>use<sp/>from<sp/>an<sp/>ISR.<sp/><sp/>These<sp/>utilities</highlight></codeline>
<codeline lineno="1387"><highlight class="comment"><sp/>*<sp/>should<sp/>be<sp/>used<sp/>only<sp/>from<sp/>witin<sp/>an<sp/>ISR,<sp/>or<sp/>within<sp/>a<sp/>critical<sp/>section.</highlight></codeline>
<codeline lineno="1388"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal">BaseType_t<sp/>xQueueIsQueueEmptyFromISR(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueueHandle_t<sp/>xQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal">BaseType_t<sp/>xQueueIsQueueFullFromISR(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueueHandle_t<sp/>xQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">UBaseType_t<sp/>uxQueueMessagesWaitingFromISR(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueueHandle_t<sp/>xQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1394"><highlight class="comment"><sp/>*<sp/>The<sp/>functions<sp/>defined<sp/>above<sp/>are<sp/>for<sp/>passing<sp/>data<sp/>to<sp/>and<sp/>from<sp/>tasks.<sp/><sp/>The</highlight></codeline>
<codeline lineno="1395"><highlight class="comment"><sp/>*<sp/>functions<sp/>below<sp/>are<sp/>the<sp/>equivalents<sp/>for<sp/>passing<sp/>data<sp/>to<sp/>and<sp/>from</highlight></codeline>
<codeline lineno="1396"><highlight class="comment"><sp/>*<sp/>co-routines.</highlight></codeline>
<codeline lineno="1397"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1398"><highlight class="comment"><sp/>*<sp/>These<sp/>functions<sp/>are<sp/>called<sp/>from<sp/>the<sp/>co-routine<sp/>macro<sp/>implementation<sp/>and</highlight></codeline>
<codeline lineno="1399"><highlight class="comment"><sp/>*<sp/>should<sp/>not<sp/>be<sp/>called<sp/>directly<sp/>from<sp/>application<sp/>code.<sp/><sp/>Instead<sp/>use<sp/>the<sp/>macro</highlight></codeline>
<codeline lineno="1400"><highlight class="comment"><sp/>*<sp/>wrappers<sp/>defined<sp/>within<sp/>croutine.h.</highlight></codeline>
<codeline lineno="1401"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal">BaseType_t<sp/>xQueueCRSendFromISR(<sp/>QueueHandle_t<sp/>xQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvItemToQueue,<sp/>BaseType_t<sp/>xCoRoutinePreviouslyWoken<sp/>);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal">BaseType_t<sp/>xQueueCRReceiveFromISR(<sp/>QueueHandle_t<sp/>xQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvBuffer,<sp/>BaseType_t<sp/>*pxTaskWoken<sp/>);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal">BaseType_t<sp/>xQueueCRSend(<sp/>QueueHandle_t<sp/>xQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvItemToQueue,<sp/>TickType_t<sp/>xTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal">BaseType_t<sp/>xQueueCRReceive(<sp/>QueueHandle_t<sp/>xQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvBuffer,<sp/>TickType_t<sp/>xTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1408"><highlight class="comment"><sp/>*<sp/>For<sp/>internal<sp/>use<sp/>only.<sp/><sp/>Use<sp/>xSemaphoreCreateMutex(),</highlight></codeline>
<codeline lineno="1409"><highlight class="comment"><sp/>*<sp/>xSemaphoreCreateCounting()<sp/>or<sp/>xSemaphoreGetMutexHolder()<sp/>instead<sp/>of<sp/>calling</highlight></codeline>
<codeline lineno="1410"><highlight class="comment"><sp/>*<sp/>these<sp/>functions<sp/>directly.</highlight></codeline>
<codeline lineno="1411"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal">QueueHandle_t<sp/>xQueueCreateMutex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucQueueType<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal">QueueHandle_t<sp/>xQueueCreateMutexStatic(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucQueueType,<sp/><ref refid="structx_s_t_a_t_i_c___q_u_e_u_e" kindref="compound">StaticQueue_t</ref><sp/>*pxStaticQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal">QueueHandle_t<sp/>xQueueCreateCountingSemaphore(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxMaxCount,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxInitialCount<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">QueueHandle_t<sp/>xQueueCreateCountingSemaphoreStatic(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxMaxCount,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxInitialCount,<sp/><ref refid="structx_s_t_a_t_i_c___q_u_e_u_e" kindref="compound">StaticQueue_t</ref><sp/>*pxStaticQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">BaseType_t<sp/>xQueueSemaphoreTake(<sp/>QueueHandle_t<sp/>xQueue,<sp/>TickType_t<sp/>xTicksToWait<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>xQueueGetMutexHolder(<sp/>QueueHandle_t<sp/>xSemaphore<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>xQueueGetMutexHolderFromISR(<sp/>QueueHandle_t<sp/>xSemaphore<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/>*<sp/>For<sp/>internal<sp/>use<sp/>only.<sp/><sp/>Use<sp/>xSemaphoreTakeMutexRecursive()<sp/>or</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"><sp/>*<sp/>xSemaphoreGiveMutexRecursive()<sp/>instead<sp/>of<sp/>calling<sp/>these<sp/>functions<sp/>directly.</highlight></codeline>
<codeline lineno="1423"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal">BaseType_t<sp/>xQueueTakeMutexRecursive(<sp/>QueueHandle_t<sp/>xMutex,<sp/>TickType_t<sp/>xTicksToWait<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">BaseType_t<sp/>xQueueGiveMutexRecursive(<sp/>QueueHandle_t<sp/>pxMutex<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1428"><highlight class="comment"><sp/>*<sp/>Reset<sp/>a<sp/>queue<sp/>back<sp/>to<sp/>its<sp/>original<sp/>empty<sp/>state.<sp/><sp/>The<sp/>return<sp/>value<sp/>is<sp/>now</highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/>*<sp/>obsolete<sp/>and<sp/>is<sp/>always<sp/>set<sp/>to<sp/>pdPASS.</highlight></codeline>
<codeline lineno="1430"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xQueueReset(<sp/>xQueue<sp/>)<sp/>xQueueGenericReset(<sp/>xQueue,<sp/>pdFALSE<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1434"><highlight class="comment"><sp/>*<sp/>The<sp/>registry<sp/>is<sp/>provided<sp/>as<sp/>a<sp/>means<sp/>for<sp/>kernel<sp/>aware<sp/>debuggers<sp/>to</highlight></codeline>
<codeline lineno="1435"><highlight class="comment"><sp/>*<sp/>locate<sp/>queues,<sp/>semaphores<sp/>and<sp/>mutexes.<sp/><sp/>Call<sp/>vQueueAddToRegistry()<sp/>add</highlight></codeline>
<codeline lineno="1436"><highlight class="comment"><sp/>*<sp/>a<sp/>queue,<sp/>semaphore<sp/>or<sp/>mutex<sp/>handle<sp/>to<sp/>the<sp/>registry<sp/>if<sp/>you<sp/>want<sp/>the<sp/>handle</highlight></codeline>
<codeline lineno="1437"><highlight class="comment"><sp/>*<sp/>to<sp/>be<sp/>available<sp/>to<sp/>a<sp/>kernel<sp/>aware<sp/>debugger.<sp/><sp/>If<sp/>you<sp/>are<sp/>not<sp/>using<sp/>a<sp/>kernel</highlight></codeline>
<codeline lineno="1438"><highlight class="comment"><sp/>*<sp/>aware<sp/>debugger<sp/>then<sp/>this<sp/>function<sp/>can<sp/>be<sp/>ignored.</highlight></codeline>
<codeline lineno="1439"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1440"><highlight class="comment"><sp/>*<sp/>configQUEUE_REGISTRY_SIZE<sp/>defines<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>handles<sp/>the</highlight></codeline>
<codeline lineno="1441"><highlight class="comment"><sp/>*<sp/>registry<sp/>can<sp/>hold.<sp/><sp/>configQUEUE_REGISTRY_SIZE<sp/>must<sp/>be<sp/>greater<sp/>than<sp/>0</highlight></codeline>
<codeline lineno="1442"><highlight class="comment"><sp/>*<sp/>within<sp/>FreeRTOSConfig.h<sp/>for<sp/>the<sp/>registry<sp/>to<sp/>be<sp/>available.<sp/><sp/>Its<sp/>value</highlight></codeline>
<codeline lineno="1443"><highlight class="comment"><sp/>*<sp/>does<sp/>not<sp/>effect<sp/>the<sp/>number<sp/>of<sp/>queues,<sp/>semaphores<sp/>and<sp/>mutexes<sp/>that<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="1444"><highlight class="comment"><sp/>*<sp/>created<sp/>-<sp/>just<sp/>the<sp/>number<sp/>that<sp/>the<sp/>registry<sp/>can<sp/>hold.</highlight></codeline>
<codeline lineno="1445"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1446"><highlight class="comment"><sp/>*<sp/>@param<sp/>xQueue<sp/>The<sp/>handle<sp/>of<sp/>the<sp/>queue<sp/>being<sp/>added<sp/>to<sp/>the<sp/>registry.<sp/><sp/>This</highlight></codeline>
<codeline lineno="1447"><highlight class="comment"><sp/>*<sp/>is<sp/>the<sp/>handle<sp/>returned<sp/>by<sp/>a<sp/>call<sp/>to<sp/>xQueueCreate().<sp/><sp/>Semaphore<sp/>and<sp/>mutex</highlight></codeline>
<codeline lineno="1448"><highlight class="comment"><sp/>*<sp/>handles<sp/>can<sp/>also<sp/>be<sp/>passed<sp/>in<sp/>here.</highlight></codeline>
<codeline lineno="1449"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1450"><highlight class="comment"><sp/>*<sp/>@param<sp/>pcName<sp/>The<sp/>name<sp/>to<sp/>be<sp/>associated<sp/>with<sp/>the<sp/>handle.<sp/><sp/>This<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="1451"><highlight class="comment"><sp/>*<sp/>name<sp/>that<sp/>the<sp/>kernel<sp/>aware<sp/>debugger<sp/>will<sp/>display.<sp/><sp/>The<sp/>queue<sp/>registry<sp/>only</highlight></codeline>
<codeline lineno="1452"><highlight class="comment"><sp/>*<sp/>stores<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>string<sp/>-<sp/>so<sp/>the<sp/>string<sp/>must<sp/>be<sp/>persistent<sp/>(global<sp/>or</highlight></codeline>
<codeline lineno="1453"><highlight class="comment"><sp/>*<sp/>preferably<sp/>in<sp/>ROM/Flash),<sp/>not<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="1454"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configQUEUE_REGISTRY_SIZE<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vQueueAddToRegistry(<sp/>QueueHandle_t<sp/>xQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcName<sp/>)<sp/>PRIVILEGED_FUNCTION;<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1460"><highlight class="comment"><sp/>*<sp/>The<sp/>registry<sp/>is<sp/>provided<sp/>as<sp/>a<sp/>means<sp/>for<sp/>kernel<sp/>aware<sp/>debuggers<sp/>to</highlight></codeline>
<codeline lineno="1461"><highlight class="comment"><sp/>*<sp/>locate<sp/>queues,<sp/>semaphores<sp/>and<sp/>mutexes.<sp/><sp/>Call<sp/>vQueueAddToRegistry()<sp/>add</highlight></codeline>
<codeline lineno="1462"><highlight class="comment"><sp/>*<sp/>a<sp/>queue,<sp/>semaphore<sp/>or<sp/>mutex<sp/>handle<sp/>to<sp/>the<sp/>registry<sp/>if<sp/>you<sp/>want<sp/>the<sp/>handle</highlight></codeline>
<codeline lineno="1463"><highlight class="comment"><sp/>*<sp/>to<sp/>be<sp/>available<sp/>to<sp/>a<sp/>kernel<sp/>aware<sp/>debugger,<sp/>and<sp/>vQueueUnregisterQueue()<sp/>to</highlight></codeline>
<codeline lineno="1464"><highlight class="comment"><sp/>*<sp/>remove<sp/>the<sp/>queue,<sp/>semaphore<sp/>or<sp/>mutex<sp/>from<sp/>the<sp/>register.<sp/><sp/>If<sp/>you<sp/>are<sp/>not<sp/>using</highlight></codeline>
<codeline lineno="1465"><highlight class="comment"><sp/>*<sp/>a<sp/>kernel<sp/>aware<sp/>debugger<sp/>then<sp/>this<sp/>function<sp/>can<sp/>be<sp/>ignored.</highlight></codeline>
<codeline lineno="1466"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1467"><highlight class="comment"><sp/>*<sp/>@param<sp/>xQueue<sp/>The<sp/>handle<sp/>of<sp/>the<sp/>queue<sp/>being<sp/>removed<sp/>from<sp/>the<sp/>registry.</highlight></codeline>
<codeline lineno="1468"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configQUEUE_REGISTRY_SIZE<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vQueueUnregisterQueue(<sp/>QueueHandle_t<sp/>xQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1474"><highlight class="comment"><sp/>*<sp/>The<sp/>queue<sp/>registry<sp/>is<sp/>provided<sp/>as<sp/>a<sp/>means<sp/>for<sp/>kernel<sp/>aware<sp/>debuggers<sp/>to</highlight></codeline>
<codeline lineno="1475"><highlight class="comment"><sp/>*<sp/>locate<sp/>queues,<sp/>semaphores<sp/>and<sp/>mutexes.<sp/><sp/>Call<sp/>pcQueueGetName()<sp/>to<sp/>look</highlight></codeline>
<codeline lineno="1476"><highlight class="comment"><sp/>*<sp/>up<sp/>and<sp/>return<sp/>the<sp/>name<sp/>of<sp/>a<sp/>queue<sp/>in<sp/>the<sp/>queue<sp/>registry<sp/>from<sp/>the<sp/>queue&apos;s</highlight></codeline>
<codeline lineno="1477"><highlight class="comment"><sp/>*<sp/>handle.</highlight></codeline>
<codeline lineno="1478"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1479"><highlight class="comment"><sp/>*<sp/>@param<sp/>xQueue<sp/>The<sp/>handle<sp/>of<sp/>the<sp/>queue<sp/>the<sp/>name<sp/>of<sp/>which<sp/>will<sp/>be<sp/>returned.</highlight></codeline>
<codeline lineno="1480"><highlight class="comment"><sp/>*<sp/>@return<sp/>If<sp/>the<sp/>queue<sp/>is<sp/>in<sp/>the<sp/>registry<sp/>then<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>name<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1481"><highlight class="comment"><sp/>*<sp/>queue<sp/>is<sp/>returned.<sp/><sp/>If<sp/>the<sp/>queue<sp/>is<sp/>not<sp/>in<sp/>the<sp/>registry<sp/>then<sp/>NULL<sp/>is</highlight></codeline>
<codeline lineno="1482"><highlight class="comment"><sp/>*<sp/>returned.</highlight></codeline>
<codeline lineno="1483"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configQUEUE_REGISTRY_SIZE<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcQueueGetName(<sp/>QueueHandle_t<sp/>xQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1489"><highlight class="comment"><sp/>*<sp/>Generic<sp/>version<sp/>of<sp/>the<sp/>function<sp/>used<sp/>to<sp/>creaet<sp/>a<sp/>queue<sp/>using<sp/>dynamic<sp/>memory</highlight></codeline>
<codeline lineno="1490"><highlight class="comment"><sp/>*<sp/>allocation.<sp/><sp/>This<sp/>is<sp/>called<sp/>by<sp/>other<sp/>functions<sp/>and<sp/>macros<sp/>that<sp/>create<sp/>other</highlight></codeline>
<codeline lineno="1491"><highlight class="comment"><sp/>*<sp/>RTOS<sp/>objects<sp/>that<sp/>use<sp/>the<sp/>queue<sp/>structure<sp/>as<sp/>their<sp/>base.</highlight></codeline>
<codeline lineno="1492"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>QueueHandle_t<sp/>xQueueGenericCreate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxQueueLength,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxItemSize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucQueueType<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1498"><highlight class="comment"><sp/>*<sp/>Generic<sp/>version<sp/>of<sp/>the<sp/>function<sp/>used<sp/>to<sp/>creaet<sp/>a<sp/>queue<sp/>using<sp/>dynamic<sp/>memory</highlight></codeline>
<codeline lineno="1499"><highlight class="comment"><sp/>*<sp/>allocation.<sp/><sp/>This<sp/>is<sp/>called<sp/>by<sp/>other<sp/>functions<sp/>and<sp/>macros<sp/>that<sp/>create<sp/>other</highlight></codeline>
<codeline lineno="1500"><highlight class="comment"><sp/>*<sp/>RTOS<sp/>objects<sp/>that<sp/>use<sp/>the<sp/>queue<sp/>structure<sp/>as<sp/>their<sp/>base.</highlight></codeline>
<codeline lineno="1501"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>QueueHandle_t<sp/>xQueueGenericCreateStatic(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxQueueLength,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxItemSize,<sp/>uint8_t<sp/>*pucQueueStorage,<sp/><ref refid="structx_s_t_a_t_i_c___q_u_e_u_e" kindref="compound">StaticQueue_t</ref><sp/>*pxStaticQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucQueueType<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1507"><highlight class="comment"><sp/>*<sp/>Queue<sp/>sets<sp/>provide<sp/>a<sp/>mechanism<sp/>to<sp/>allow<sp/>a<sp/>task<sp/>to<sp/>block<sp/>(pend)<sp/>on<sp/>a<sp/>read</highlight></codeline>
<codeline lineno="1508"><highlight class="comment"><sp/>*<sp/>operation<sp/>from<sp/>multiple<sp/>queues<sp/>or<sp/>semaphores<sp/>simultaneously.</highlight></codeline>
<codeline lineno="1509"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1510"><highlight class="comment"><sp/>*<sp/>See<sp/>FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c<sp/>for<sp/>an<sp/>example<sp/>using<sp/>this</highlight></codeline>
<codeline lineno="1511"><highlight class="comment"><sp/>*<sp/>function.</highlight></codeline>
<codeline lineno="1512"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1513"><highlight class="comment"><sp/>*<sp/>A<sp/>queue<sp/>set<sp/>must<sp/>be<sp/>explicitly<sp/>created<sp/>using<sp/>a<sp/>call<sp/>to<sp/>xQueueCreateSet()</highlight></codeline>
<codeline lineno="1514"><highlight class="comment"><sp/>*<sp/>before<sp/>it<sp/>can<sp/>be<sp/>used.<sp/><sp/>Once<sp/>created,<sp/>standard<sp/>FreeRTOS<sp/>queues<sp/>and<sp/>semaphores</highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/>*<sp/>can<sp/>be<sp/>added<sp/>to<sp/>the<sp/>set<sp/>using<sp/>calls<sp/>to<sp/>xQueueAddToSet().</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/>*<sp/>xQueueSelectFromSet()<sp/>is<sp/>then<sp/>used<sp/>to<sp/>determine<sp/>which,<sp/>if<sp/>any,<sp/>of<sp/>the<sp/>queues</highlight></codeline>
<codeline lineno="1517"><highlight class="comment"><sp/>*<sp/>or<sp/>semaphores<sp/>contained<sp/>in<sp/>the<sp/>set<sp/>is<sp/>in<sp/>a<sp/>state<sp/>where<sp/>a<sp/>queue<sp/>read<sp/>or</highlight></codeline>
<codeline lineno="1518"><highlight class="comment"><sp/>*<sp/>semaphore<sp/>take<sp/>operation<sp/>would<sp/>be<sp/>successful.</highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1520"><highlight class="comment"><sp/>*<sp/>Note<sp/>1:<sp/><sp/>See<sp/>the<sp/>documentation<sp/>on<sp/>http://wwwFreeRTOS.org/RTOS-queue-sets.html</highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/>*<sp/>for<sp/>reasons<sp/>why<sp/>queue<sp/>sets<sp/>are<sp/>very<sp/>rarely<sp/>needed<sp/>in<sp/>practice<sp/>as<sp/>there<sp/>are</highlight></codeline>
<codeline lineno="1522"><highlight class="comment"><sp/>*<sp/>simpler<sp/>methods<sp/>of<sp/>blocking<sp/>on<sp/>multiple<sp/>objects.</highlight></codeline>
<codeline lineno="1523"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1524"><highlight class="comment"><sp/>*<sp/>Note<sp/>2:<sp/><sp/>Blocking<sp/>on<sp/>a<sp/>queue<sp/>set<sp/>that<sp/>contains<sp/>a<sp/>mutex<sp/>will<sp/>not<sp/>cause<sp/>the</highlight></codeline>
<codeline lineno="1525"><highlight class="comment"><sp/>*<sp/>mutex<sp/>holder<sp/>to<sp/>inherit<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>blocked<sp/>task.</highlight></codeline>
<codeline lineno="1526"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1527"><highlight class="comment"><sp/>*<sp/>Note<sp/>3:<sp/><sp/>An<sp/>additional<sp/>4<sp/>bytes<sp/>of<sp/>RAM<sp/>is<sp/>required<sp/>for<sp/>each<sp/>space<sp/>in<sp/>a<sp/>every</highlight></codeline>
<codeline lineno="1528"><highlight class="comment"><sp/>*<sp/>queue<sp/>added<sp/>to<sp/>a<sp/>queue<sp/>set.<sp/><sp/>Therefore<sp/>counting<sp/>semaphores<sp/>that<sp/>have<sp/>a<sp/>high</highlight></codeline>
<codeline lineno="1529"><highlight class="comment"><sp/>*<sp/>maximum<sp/>count<sp/>value<sp/>should<sp/>not<sp/>be<sp/>added<sp/>to<sp/>a<sp/>queue<sp/>set.</highlight></codeline>
<codeline lineno="1530"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1531"><highlight class="comment"><sp/>*<sp/>Note<sp/>4:<sp/><sp/>A<sp/>receive<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>a<sp/>queue)<sp/>or<sp/>take<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="1532"><highlight class="comment"><sp/>*<sp/>semaphore)<sp/>operation<sp/>must<sp/>not<sp/>be<sp/>performed<sp/>on<sp/>a<sp/>member<sp/>of<sp/>a<sp/>queue<sp/>set<sp/>unless</highlight></codeline>
<codeline lineno="1533"><highlight class="comment"><sp/>*<sp/>a<sp/>call<sp/>to<sp/>xQueueSelectFromSet()<sp/>has<sp/>first<sp/>returned<sp/>a<sp/>handle<sp/>to<sp/>that<sp/>set<sp/>member.</highlight></codeline>
<codeline lineno="1534"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1535"><highlight class="comment"><sp/>*<sp/>@param<sp/>uxEventQueueLength<sp/>Queue<sp/>sets<sp/>store<sp/>events<sp/>that<sp/>occur<sp/>on</highlight></codeline>
<codeline lineno="1536"><highlight class="comment"><sp/>*<sp/>the<sp/>queues<sp/>and<sp/>semaphores<sp/>contained<sp/>in<sp/>the<sp/>set.<sp/><sp/>uxEventQueueLength<sp/>specifies</highlight></codeline>
<codeline lineno="1537"><highlight class="comment"><sp/>*<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>events<sp/>that<sp/>can<sp/>be<sp/>queued<sp/>at<sp/>once.<sp/><sp/>To<sp/>be<sp/>absolutely</highlight></codeline>
<codeline lineno="1538"><highlight class="comment"><sp/>*<sp/>certain<sp/>that<sp/>events<sp/>are<sp/>not<sp/>lost<sp/>uxEventQueueLength<sp/>should<sp/>be<sp/>set<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1539"><highlight class="comment"><sp/>*<sp/>total<sp/>sum<sp/>of<sp/>the<sp/>length<sp/>of<sp/>the<sp/>queues<sp/>added<sp/>to<sp/>the<sp/>set,<sp/>where<sp/>binary</highlight></codeline>
<codeline lineno="1540"><highlight class="comment"><sp/>*<sp/>semaphores<sp/>and<sp/>mutexes<sp/>have<sp/>a<sp/>length<sp/>of<sp/>1,<sp/>and<sp/>counting<sp/>semaphores<sp/>have<sp/>a</highlight></codeline>
<codeline lineno="1541"><highlight class="comment"><sp/>*<sp/>length<sp/>set<sp/>by<sp/>their<sp/>maximum<sp/>count<sp/>value.<sp/><sp/>Examples:</highlight></codeline>
<codeline lineno="1542"><highlight class="comment"><sp/>*<sp/><sp/>+<sp/>If<sp/>a<sp/>queue<sp/>set<sp/>is<sp/>to<sp/>hold<sp/>a<sp/>queue<sp/>of<sp/>length<sp/>5,<sp/>another<sp/>queue<sp/>of<sp/>length<sp/>12,</highlight></codeline>
<codeline lineno="1543"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>and<sp/>a<sp/>binary<sp/>semaphore,<sp/>then<sp/>uxEventQueueLength<sp/>should<sp/>be<sp/>set<sp/>to</highlight></codeline>
<codeline lineno="1544"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>(5<sp/>+<sp/>12<sp/>+<sp/>1),<sp/>or<sp/>18.</highlight></codeline>
<codeline lineno="1545"><highlight class="comment"><sp/>*<sp/><sp/>+<sp/>If<sp/>a<sp/>queue<sp/>set<sp/>is<sp/>to<sp/>hold<sp/>three<sp/>binary<sp/>semaphores<sp/>then<sp/>uxEventQueueLength</highlight></codeline>
<codeline lineno="1546"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>should<sp/>be<sp/>set<sp/>to<sp/>(1<sp/>+<sp/>1<sp/>+<sp/>1<sp/>),<sp/>or<sp/>3.</highlight></codeline>
<codeline lineno="1547"><highlight class="comment"><sp/>*<sp/><sp/>+<sp/>If<sp/>a<sp/>queue<sp/>set<sp/>is<sp/>to<sp/>hold<sp/>a<sp/>counting<sp/>semaphore<sp/>that<sp/>has<sp/>a<sp/>maximum<sp/>count<sp/>of</highlight></codeline>
<codeline lineno="1548"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>5,<sp/>and<sp/>a<sp/>counting<sp/>semaphore<sp/>that<sp/>has<sp/>a<sp/>maximum<sp/>count<sp/>of<sp/>3,<sp/>then</highlight></codeline>
<codeline lineno="1549"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>uxEventQueueLength<sp/>should<sp/>be<sp/>set<sp/>to<sp/>(5<sp/>+<sp/>3),<sp/>or<sp/>8.</highlight></codeline>
<codeline lineno="1550"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1551"><highlight class="comment"><sp/>*<sp/>@return<sp/>If<sp/>the<sp/>queue<sp/>set<sp/>is<sp/>created<sp/>successfully<sp/>then<sp/>a<sp/>handle<sp/>to<sp/>the<sp/>created</highlight></codeline>
<codeline lineno="1552"><highlight class="comment"><sp/>*<sp/>queue<sp/>set<sp/>is<sp/>returned.<sp/><sp/>Otherwise<sp/>NULL<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1553"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal">QueueSetHandle_t<sp/>xQueueCreateSet(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxEventQueueLength<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1557"><highlight class="comment"><sp/>*<sp/>Adds<sp/>a<sp/>queue<sp/>or<sp/>semaphore<sp/>to<sp/>a<sp/>queue<sp/>set<sp/>that<sp/>was<sp/>previously<sp/>created<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="1558"><highlight class="comment"><sp/>*<sp/>call<sp/>to<sp/>xQueueCreateSet().</highlight></codeline>
<codeline lineno="1559"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1560"><highlight class="comment"><sp/>*<sp/>See<sp/>FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c<sp/>for<sp/>an<sp/>example<sp/>using<sp/>this</highlight></codeline>
<codeline lineno="1561"><highlight class="comment"><sp/>*<sp/>function.</highlight></codeline>
<codeline lineno="1562"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1563"><highlight class="comment"><sp/>*<sp/>Note<sp/>1:<sp/><sp/>A<sp/>receive<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>a<sp/>queue)<sp/>or<sp/>take<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="1564"><highlight class="comment"><sp/>*<sp/>semaphore)<sp/>operation<sp/>must<sp/>not<sp/>be<sp/>performed<sp/>on<sp/>a<sp/>member<sp/>of<sp/>a<sp/>queue<sp/>set<sp/>unless</highlight></codeline>
<codeline lineno="1565"><highlight class="comment"><sp/>*<sp/>a<sp/>call<sp/>to<sp/>xQueueSelectFromSet()<sp/>has<sp/>first<sp/>returned<sp/>a<sp/>handle<sp/>to<sp/>that<sp/>set<sp/>member.</highlight></codeline>
<codeline lineno="1566"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1567"><highlight class="comment"><sp/>*<sp/>@param<sp/>xQueueOrSemaphore<sp/>The<sp/>handle<sp/>of<sp/>the<sp/>queue<sp/>or<sp/>semaphore<sp/>being<sp/>added<sp/>to</highlight></codeline>
<codeline lineno="1568"><highlight class="comment"><sp/>*<sp/>the<sp/>queue<sp/>set<sp/>(cast<sp/>to<sp/>an<sp/>QueueSetMemberHandle_t<sp/>type).</highlight></codeline>
<codeline lineno="1569"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1570"><highlight class="comment"><sp/>*<sp/>@param<sp/>xQueueSet<sp/>The<sp/>handle<sp/>of<sp/>the<sp/>queue<sp/>set<sp/>to<sp/>which<sp/>the<sp/>queue<sp/>or<sp/>semaphore</highlight></codeline>
<codeline lineno="1571"><highlight class="comment"><sp/>*<sp/>is<sp/>being<sp/>added.</highlight></codeline>
<codeline lineno="1572"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1573"><highlight class="comment"><sp/>*<sp/>@return<sp/>If<sp/>the<sp/>queue<sp/>or<sp/>semaphore<sp/>was<sp/>successfully<sp/>added<sp/>to<sp/>the<sp/>queue<sp/>set</highlight></codeline>
<codeline lineno="1574"><highlight class="comment"><sp/>*<sp/>then<sp/>pdPASS<sp/>is<sp/>returned.<sp/><sp/>If<sp/>the<sp/>queue<sp/>could<sp/>not<sp/>be<sp/>successfully<sp/>added<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1575"><highlight class="comment"><sp/>*<sp/>queue<sp/>set<sp/>because<sp/>it<sp/>is<sp/>already<sp/>a<sp/>member<sp/>of<sp/>a<sp/>different<sp/>queue<sp/>set<sp/>then<sp/>pdFAIL</highlight></codeline>
<codeline lineno="1576"><highlight class="comment"><sp/>*<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1577"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal">BaseType_t<sp/>xQueueAddToSet(<sp/>QueueSetMemberHandle_t<sp/>xQueueOrSemaphore,<sp/>QueueSetHandle_t<sp/>xQueueSet<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1581"><highlight class="comment"><sp/>*<sp/>Removes<sp/>a<sp/>queue<sp/>or<sp/>semaphore<sp/>from<sp/>a<sp/>queue<sp/>set.<sp/><sp/>A<sp/>queue<sp/>or<sp/>semaphore<sp/>can<sp/>only</highlight></codeline>
<codeline lineno="1582"><highlight class="comment"><sp/>*<sp/>be<sp/>removed<sp/>from<sp/>a<sp/>set<sp/>if<sp/>the<sp/>queue<sp/>or<sp/>semaphore<sp/>is<sp/>empty.</highlight></codeline>
<codeline lineno="1583"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1584"><highlight class="comment"><sp/>*<sp/>See<sp/>FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c<sp/>for<sp/>an<sp/>example<sp/>using<sp/>this</highlight></codeline>
<codeline lineno="1585"><highlight class="comment"><sp/>*<sp/>function.</highlight></codeline>
<codeline lineno="1586"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1587"><highlight class="comment"><sp/>*<sp/>@param<sp/>xQueueOrSemaphore<sp/>The<sp/>handle<sp/>of<sp/>the<sp/>queue<sp/>or<sp/>semaphore<sp/>being<sp/>removed</highlight></codeline>
<codeline lineno="1588"><highlight class="comment"><sp/>*<sp/>from<sp/>the<sp/>queue<sp/>set<sp/>(cast<sp/>to<sp/>an<sp/>QueueSetMemberHandle_t<sp/>type).</highlight></codeline>
<codeline lineno="1589"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1590"><highlight class="comment"><sp/>*<sp/>@param<sp/>xQueueSet<sp/>The<sp/>handle<sp/>of<sp/>the<sp/>queue<sp/>set<sp/>in<sp/>which<sp/>the<sp/>queue<sp/>or<sp/>semaphore</highlight></codeline>
<codeline lineno="1591"><highlight class="comment"><sp/>*<sp/>is<sp/>included.</highlight></codeline>
<codeline lineno="1592"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1593"><highlight class="comment"><sp/>*<sp/>@return<sp/>If<sp/>the<sp/>queue<sp/>or<sp/>semaphore<sp/>was<sp/>successfully<sp/>removed<sp/>from<sp/>the<sp/>queue<sp/>set</highlight></codeline>
<codeline lineno="1594"><highlight class="comment"><sp/>*<sp/>then<sp/>pdPASS<sp/>is<sp/>returned.<sp/><sp/>If<sp/>the<sp/>queue<sp/>was<sp/>not<sp/>in<sp/>the<sp/>queue<sp/>set,<sp/>or<sp/>the</highlight></codeline>
<codeline lineno="1595"><highlight class="comment"><sp/>*<sp/>queue<sp/>(or<sp/>semaphore)<sp/>was<sp/>not<sp/>empty,<sp/>then<sp/>pdFAIL<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1596"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal">BaseType_t<sp/>xQueueRemoveFromSet(<sp/>QueueSetMemberHandle_t<sp/>xQueueOrSemaphore,<sp/>QueueSetHandle_t<sp/>xQueueSet<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1600"><highlight class="comment"><sp/>*<sp/>xQueueSelectFromSet()<sp/>selects<sp/>from<sp/>the<sp/>members<sp/>of<sp/>a<sp/>queue<sp/>set<sp/>a<sp/>queue<sp/>or</highlight></codeline>
<codeline lineno="1601"><highlight class="comment"><sp/>*<sp/>semaphore<sp/>that<sp/>either<sp/>contains<sp/>data<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>a<sp/>queue)<sp/>or<sp/>is<sp/>available</highlight></codeline>
<codeline lineno="1602"><highlight class="comment"><sp/>*<sp/>to<sp/>take<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>a<sp/>semaphore).<sp/><sp/>xQueueSelectFromSet()<sp/>effectively</highlight></codeline>
<codeline lineno="1603"><highlight class="comment"><sp/>*<sp/>allows<sp/>a<sp/>task<sp/>to<sp/>block<sp/>(pend)<sp/>on<sp/>a<sp/>read<sp/>operation<sp/>on<sp/>all<sp/>the<sp/>queues<sp/>and</highlight></codeline>
<codeline lineno="1604"><highlight class="comment"><sp/>*<sp/>semaphores<sp/>in<sp/>a<sp/>queue<sp/>set<sp/>simultaneously.</highlight></codeline>
<codeline lineno="1605"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1606"><highlight class="comment"><sp/>*<sp/>See<sp/>FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c<sp/>for<sp/>an<sp/>example<sp/>using<sp/>this</highlight></codeline>
<codeline lineno="1607"><highlight class="comment"><sp/>*<sp/>function.</highlight></codeline>
<codeline lineno="1608"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1609"><highlight class="comment"><sp/>*<sp/>Note<sp/>1:<sp/><sp/>See<sp/>the<sp/>documentation<sp/>on<sp/>http://wwwFreeRTOS.org/RTOS-queue-sets.html</highlight></codeline>
<codeline lineno="1610"><highlight class="comment"><sp/>*<sp/>for<sp/>reasons<sp/>why<sp/>queue<sp/>sets<sp/>are<sp/>very<sp/>rarely<sp/>needed<sp/>in<sp/>practice<sp/>as<sp/>there<sp/>are</highlight></codeline>
<codeline lineno="1611"><highlight class="comment"><sp/>*<sp/>simpler<sp/>methods<sp/>of<sp/>blocking<sp/>on<sp/>multiple<sp/>objects.</highlight></codeline>
<codeline lineno="1612"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1613"><highlight class="comment"><sp/>*<sp/>Note<sp/>2:<sp/><sp/>Blocking<sp/>on<sp/>a<sp/>queue<sp/>set<sp/>that<sp/>contains<sp/>a<sp/>mutex<sp/>will<sp/>not<sp/>cause<sp/>the</highlight></codeline>
<codeline lineno="1614"><highlight class="comment"><sp/>*<sp/>mutex<sp/>holder<sp/>to<sp/>inherit<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>blocked<sp/>task.</highlight></codeline>
<codeline lineno="1615"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1616"><highlight class="comment"><sp/>*<sp/>Note<sp/>3:<sp/><sp/>A<sp/>receive<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>a<sp/>queue)<sp/>or<sp/>take<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="1617"><highlight class="comment"><sp/>*<sp/>semaphore)<sp/>operation<sp/>must<sp/>not<sp/>be<sp/>performed<sp/>on<sp/>a<sp/>member<sp/>of<sp/>a<sp/>queue<sp/>set<sp/>unless</highlight></codeline>
<codeline lineno="1618"><highlight class="comment"><sp/>*<sp/>a<sp/>call<sp/>to<sp/>xQueueSelectFromSet()<sp/>has<sp/>first<sp/>returned<sp/>a<sp/>handle<sp/>to<sp/>that<sp/>set<sp/>member.</highlight></codeline>
<codeline lineno="1619"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1620"><highlight class="comment"><sp/>*<sp/>@param<sp/>xQueueSet<sp/>The<sp/>queue<sp/>set<sp/>on<sp/>which<sp/>the<sp/>task<sp/>will<sp/>(potentially)<sp/>block.</highlight></codeline>
<codeline lineno="1621"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1622"><highlight class="comment"><sp/>*<sp/>@param<sp/>xTicksToWait<sp/>The<sp/>maximum<sp/>time,<sp/>in<sp/>ticks,<sp/>that<sp/>the<sp/>calling<sp/>task<sp/>will</highlight></codeline>
<codeline lineno="1623"><highlight class="comment"><sp/>*<sp/>remain<sp/>in<sp/>the<sp/>Blocked<sp/>state<sp/>(with<sp/>other<sp/>tasks<sp/>executing)<sp/>to<sp/>wait<sp/>for<sp/>a<sp/>member</highlight></codeline>
<codeline lineno="1624"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>queue<sp/>set<sp/>to<sp/>be<sp/>ready<sp/>for<sp/>a<sp/>successful<sp/>queue<sp/>read<sp/>or<sp/>semaphore<sp/>take</highlight></codeline>
<codeline lineno="1625"><highlight class="comment"><sp/>*<sp/>operation.</highlight></codeline>
<codeline lineno="1626"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1627"><highlight class="comment"><sp/>*<sp/>@return<sp/>xQueueSelectFromSet()<sp/>will<sp/>return<sp/>the<sp/>handle<sp/>of<sp/>a<sp/>queue<sp/>(cast<sp/>to</highlight></codeline>
<codeline lineno="1628"><highlight class="comment"><sp/>*<sp/>a<sp/>QueueSetMemberHandle_t<sp/>type)<sp/>contained<sp/>in<sp/>the<sp/>queue<sp/>set<sp/>that<sp/>contains<sp/>data,</highlight></codeline>
<codeline lineno="1629"><highlight class="comment"><sp/>*<sp/>or<sp/>the<sp/>handle<sp/>of<sp/>a<sp/>semaphore<sp/>(cast<sp/>to<sp/>a<sp/>QueueSetMemberHandle_t<sp/>type)<sp/>contained</highlight></codeline>
<codeline lineno="1630"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>queue<sp/>set<sp/>that<sp/>is<sp/>available,<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>such<sp/>queue<sp/>or<sp/>semaphore</highlight></codeline>
<codeline lineno="1631"><highlight class="comment"><sp/>*<sp/>exists<sp/>before<sp/>before<sp/>the<sp/>specified<sp/>block<sp/>time<sp/>expires.</highlight></codeline>
<codeline lineno="1632"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal">QueueSetMemberHandle_t<sp/>xQueueSelectFromSet(<sp/>QueueSetHandle_t<sp/>xQueueSet,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xTicksToWait<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1636"><highlight class="comment"><sp/>*<sp/>A<sp/>version<sp/>of<sp/>xQueueSelectFromSet()<sp/>that<sp/>can<sp/>be<sp/>used<sp/>from<sp/>an<sp/>ISR.</highlight></codeline>
<codeline lineno="1637"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal">QueueSetMemberHandle_t<sp/>xQueueSelectFromSetFromISR(<sp/>QueueSetHandle_t<sp/>xQueueSet<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Not<sp/>public<sp/>API<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vQueueWaitForMessageRestricted(<sp/>QueueHandle_t<sp/>xQueue,<sp/>TickType_t<sp/>xTicksToWait,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseType_t<sp/>xWaitIndefinitely<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">BaseType_t<sp/>xQueueGenericReset(<sp/>QueueHandle_t<sp/>xQueue,<sp/>BaseType_t<sp/>xNewQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vQueueSetQueueNumber(<sp/>QueueHandle_t<sp/>xQueue,<sp/>UBaseType_t<sp/>uxQueueNumber<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal">UBaseType_t<sp/>uxQueueGetQueueNumber(<sp/>QueueHandle_t<sp/>xQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal">uint8_t<sp/>ucQueueGetQueueType(<sp/>QueueHandle_t<sp/>xQueue<sp/>)<sp/>PRIVILEGED_FUNCTION;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>QUEUE_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"/>
  </compounddef>
</doxygen>

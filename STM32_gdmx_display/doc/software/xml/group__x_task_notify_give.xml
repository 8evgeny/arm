<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__x_task_notify_give" kind="group">
    <compoundname>xTaskNotifyGive</compoundname>
    <title>xTaskNotifyGive</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>task. h <preformatted>BaseType_t xTaskNotifyGive( TaskHandle_t xTaskToNotify );</preformatted></para>
<para>configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro to be available.</para>
<para>When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private &quot;notification value&quot;, which is a 32-bit unsigned integer (uint32_t).</para>
<para>Events can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.</para>
<para>A notification sent to a task can optionally perform an action, such as update, overwrite or increment the task&apos;s notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.</para>
<para>xTaskNotifyGive() is a helper macro intended for use when task notifications are used as light weight and faster binary or counting semaphore equivalents. Actual FreeRTOS semaphores are given using the xSemaphoreGive() API function, the equivalent action that instead uses a task notification is xTaskNotifyGive().</para>
<para>When task notifications are being used as a binary or counting semaphore equivalent then the task being notified should wait for the notification using the ulTaskNotificationTake() API function rather than the xTaskNotifyWait() API function.</para>
<para>See <ulink url="http://www.FreeRTOS.org/RTOS-task-notifications.html">http://www.FreeRTOS.org/RTOS-task-notifications.html</ulink> for more details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTaskToNotify</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the task being notified. The handle to a task can be returned from the xTaskCreate() API function used to create the task, and the handle of the currently running task can be obtained by calling xTaskGetCurrentTaskHandle().</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>xTaskNotifyGive() is a macro that calls xTaskNotify() with the eAction parameter set to eIncrement - so pdPASS is always returned. </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>

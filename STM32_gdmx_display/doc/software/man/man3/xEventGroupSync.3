.TH "xEventGroupSync" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xEventGroupSync \- xEventGroupSync
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
\fBevent_groups\&.h\fP 
.PP
.nf

   EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet,
                                const EventBits_t uxBitsToWaitFor,
                                TickType_t xTicksToWait );
.fi
.PP
.PP
Atomically set bits within an event group, then wait for a combination of bits to be set within the same event group\&. This functionality is typically used to synchronise multiple tasks, where each task has to wait for the other tasks to reach a synchronisation point before proceeding\&.
.PP
This function cannot be used from an interrupt\&.
.PP
The function will return before its block time expires if the bits specified by the uxBitsToWait parameter are set, or become set within that time\&. In this case all the bits specified by uxBitsToWait will be automatically cleared before the function returns\&.
.PP
\fBParameters\fP
.RS 4
\fIxEventGroup\fP The event group in which the bits are being tested\&. The event group must have previously been created using a call to xEventGroupCreate()\&.
.br
\fIuxBitsToSet\fP The bits to set in the event group before determining if, and possibly waiting for, all the bits specified by the uxBitsToWait parameter are set\&.
.br
\fIuxBitsToWaitFor\fP A bitwise value that indicates the bit or bits to test inside the event group\&. For example, to wait for bit 0 and bit 2 set uxBitsToWaitFor to 0x05\&. To wait for bits 0 and bit 1 and bit 2 set uxBitsToWaitFor to 0x07\&. Etc\&.
.br
\fIxTicksToWait\fP The maximum amount of time (specified in 'ticks') to wait for all of the bits specified by uxBitsToWaitFor to become set\&.
.RE
.PP
\fBReturns\fP
.RS 4
The value of the event group at the time either the bits being waited for became set, or the block time expired\&. Test the return value to know which bits were set\&. If xEventGroupSync() returned because its timeout expired then not all the bits being waited for will be set\&. If xEventGroupSync() returned because all the bits it was waiting for were set then the returned value is the event group value before any bits were automatically cleared\&.
.RE
.PP
Example usage: 
.PP
.nf

// Bits used by the three tasks\&.
#define TASK_0_BIT      ( 1 << 0 )
#define TASK_1_BIT      ( 1 << 1 )
#define TASK_2_BIT      ( 1 << 2 )

#define ALL_SYNC_BITS ( TASK_0_BIT | TASK_1_BIT | TASK_2_BIT )

// Use an event group to synchronise three tasks\&.  It is assumed this event
// group has already been created elsewhere\&.
EventGroupHandle_t xEventBits;

void vTask0( void *pvParameters )
{
EventBits_t uxReturn;
TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

    for( ;; )
    {
    // Perform task functionality here\&.

    // Set bit 0 in the event flag to note this task has reached the
    // sync point\&.  The other two tasks will set the other two bits defined
    // by ALL_SYNC_BITS\&.  All three tasks have reached the synchronisation
    // point when all the ALL_SYNC_BITS are set\&.  Wait a maximum of 100ms
    // for this to happen\&.
    uxReturn = xEventGroupSync( xEventBits, TASK_0_BIT, ALL_SYNC_BITS, xTicksToWait );

    if( ( uxReturn & ALL_SYNC_BITS ) == ALL_SYNC_BITS )
    {
        // All three tasks reached the synchronisation point before the call
        // to xEventGroupSync() timed out\&.
    }
   }
}

void vTask1( void *pvParameters )
{
    for( ;; )
    {
    // Perform task functionality here\&.

    // Set bit 1 in the event flag to note this task has reached the
    // synchronisation point\&.  The other two tasks will set the other two
    // bits defined by ALL_SYNC_BITS\&.  All three tasks have reached the
    // synchronisation point when all the ALL_SYNC_BITS are set\&.  Wait
    // indefinitely for this to happen\&.
    xEventGroupSync( xEventBits, TASK_1_BIT, ALL_SYNC_BITS, portMAX_DELAY );

    // xEventGroupSync() was called with an indefinite block time, so
    // this task will only reach here if the syncrhonisation was made by all
    // three tasks, so there is no need to test the return value\&.
    }
}

void vTask2( void *pvParameters )
{
    for( ;; )
    {
    // Perform task functionality here\&.

    // Set bit 2 in the event flag to note this task has reached the
    // synchronisation point\&.  The other two tasks will set the other two
    // bits defined by ALL_SYNC_BITS\&.  All three tasks have reached the
    // synchronisation point when all the ALL_SYNC_BITS are set\&.  Wait
    // indefinitely for this to happen\&.
    xEventGroupSync( xEventBits, TASK_2_BIT, ALL_SYNC_BITS, portMAX_DELAY );

    // xEventGroupSync() was called with an indefinite block time, so
    // this task will only reach here if the syncrhonisation was made by all
    // three tasks, so there is no need to test the return value\&.
   }
}

.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.

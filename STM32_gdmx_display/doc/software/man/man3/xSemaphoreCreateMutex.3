.TH "xSemaphoreCreateMutex" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xSemaphoreCreateMutex \- xSemaphoreCreateMutex
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
semphr\&. h 
.PP
.nf
SemaphoreHandle_t xSemaphoreCreateMutex( void )
.fi
.PP
.PP
Creates a new mutex type semaphore instance, and returns a handle by which the new mutex can be referenced\&.
.PP
Internally, within the FreeRTOS implementation, mutex semaphores use a block of memory, in which the mutex structure is stored\&. If a mutex is created using xSemaphoreCreateMutex() then the required memory is automatically dynamically allocated inside the xSemaphoreCreateMutex() function\&. (see http://www.freertos.org/a00111.html)\&. If a mutex is created using xSemaphoreCreateMutexStatic() then the application writer must provided the memory\&. xSemaphoreCreateMutexStatic() therefore allows a mutex to be created without using any dynamic memory allocation\&.
.PP
Mutexes created using this function can be accessed using the xSemaphoreTake() and xSemaphoreGive() macros\&. The xSemaphoreTakeRecursive() and xSemaphoreGiveRecursive() macros must not be used\&.
.PP
This type of semaphore uses a priority inheritance mechanism so a task 'taking' a semaphore MUST ALWAYS 'give' the semaphore back once the semaphore it is no longer required\&.
.PP
Mutex type semaphores cannot be used from within interrupt service routines\&.
.PP
See xSemaphoreCreateBinary() for an alternative implementation that can be used for pure synchronisation (where one task or interrupt always 'gives' the semaphore and another always 'takes' the semaphore) and from within interrupt service routines\&.
.PP
\fBReturns\fP
.RS 4
If the mutex was successfully created then a handle to the created semaphore is returned\&. If there was not enough heap to allocate the mutex data structures then NULL is returned\&.
.RE
.PP
Example usage: 
.PP
.nf

SemaphoreHandle_t xSemaphore;

void vATask( void * pvParameters )
{
   // Semaphore cannot be used before a call to xSemaphoreCreateMutex()\&.
   // This is a macro so pass the variable in directly\&.
   xSemaphore = xSemaphoreCreateMutex();

   if( xSemaphore != NULL )
   {
       // The semaphore was created successfully\&.
       // The semaphore can now be used\&.
   }
}
.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.

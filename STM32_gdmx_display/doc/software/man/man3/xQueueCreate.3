.TH "xQueueCreate" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xQueueCreate \- xQueueCreate
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
queue\&. h 
.PP
.nf

QueueHandle_t xQueueCreate(
                          UBaseType_t uxQueueLength,
                          UBaseType_t uxItemSize
                      );
  
.fi
.PP
.PP
Creates a new queue instance, and returns a handle by which the new queue can be referenced\&.
.PP
Internally, within the FreeRTOS implementation, queues use two blocks of memory\&. The first block is used to hold the queue's data structures\&. The second block is used to hold items placed into the queue\&. If a queue is created using xQueueCreate() then both blocks of memory are automatically dynamically allocated inside the xQueueCreate() function\&. (see http://www.freertos.org/a00111.html)\&. If a queue is created using xQueueCreateStatic() then the application writer must provide the memory that will get used by the queue\&. xQueueCreateStatic() therefore allows a queue to be created without using any dynamic memory allocation\&.
.PP
http://www.FreeRTOS.org/Embedded-RTOS-Queues.html
.PP
\fBParameters\fP
.RS 4
\fIuxQueueLength\fP The maximum number of items that the queue can contain\&.
.br
\fIuxItemSize\fP The number of bytes each item in the queue will require\&. Items are queued by copy, not by reference, so this is the number of bytes that will be copied for each posted item\&. Each item on the queue must be the same size\&.
.RE
.PP
\fBReturns\fP
.RS 4
If the queue is successfully create then a handle to the newly created queue is returned\&. If the queue cannot be created then 0 is returned\&.
.RE
.PP
Example usage: 
.PP
.nf

struct AMessage
{
   char ucMessageID;
   char ucData[ 20 ];
};

void vATask( void *pvParameters )
{
QueueHandle_t xQueue1, xQueue2;

   // Create a queue capable of containing 10 uint32_t values\&.
   xQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );
   if( xQueue1 == 0 )
   {
    // Queue was not created and must not be used\&.
   }

   // Create a queue capable of containing 10 pointers to AMessage structures\&.
   // These should be passed by pointer as they contain a lot of data\&.
   xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );
   if( xQueue2 == 0 )
   {
    // Queue was not created and must not be used\&.
   }

   // \&.\&.\&. Rest of task code\&.
}
.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.

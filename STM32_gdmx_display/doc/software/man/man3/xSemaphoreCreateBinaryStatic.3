.TH "xSemaphoreCreateBinaryStatic" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xSemaphoreCreateBinaryStatic \- xSemaphoreCreateBinaryStatic
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
semphr\&. h 
.PP
.nf
SemaphoreHandle_t xSemaphoreCreateBinaryStatic( StaticSemaphore_t *pxSemaphoreBuffer )
.fi
.PP
.PP
Creates a new binary semaphore instance, and returns a handle by which the new semaphore can be referenced\&.
.PP
NOTE: In many usage scenarios it is faster and more memory efficient to use a direct to task notification in place of a binary semaphore! http://www.freertos.org/RTOS-task-notifications.html
.PP
Internally, within the FreeRTOS implementation, binary semaphores use a block of memory, in which the semaphore structure is stored\&. If a binary semaphore is created using xSemaphoreCreateBinary() then the required memory is automatically dynamically allocated inside the xSemaphoreCreateBinary() function\&. (see http://www.freertos.org/a00111.html)\&. If a binary semaphore is created using xSemaphoreCreateBinaryStatic() then the application writer must provide the memory\&. xSemaphoreCreateBinaryStatic() therefore allows a binary semaphore to be created without using any dynamic memory allocation\&.
.PP
This type of semaphore can be used for pure synchronisation between tasks or between an interrupt and a task\&. The semaphore need not be given back once obtained, so one task/interrupt can continuously 'give' the semaphore while another continuously 'takes' the semaphore\&. For this reason this type of semaphore does not use a priority inheritance mechanism\&. For an alternative that does use priority inheritance see xSemaphoreCreateMutex()\&.
.PP
\fBParameters\fP
.RS 4
\fIpxSemaphoreBuffer\fP Must point to a variable of type StaticSemaphore_t, which will then be used to hold the semaphore's data structure, removing the need for the memory to be allocated dynamically\&.
.RE
.PP
\fBReturns\fP
.RS 4
If the semaphore is created then a handle to the created semaphore is returned\&. If pxSemaphoreBuffer is NULL then NULL is returned\&.
.RE
.PP
Example usage: 
.PP
.nf

SemaphoreHandle_t xSemaphore = NULL;
StaticSemaphore_t xSemaphoreBuffer;

void vATask( void * pvParameters )
{
   // Semaphore cannot be used before a call to xSemaphoreCreateBinary()\&.
   // The semaphore's data structures will be placed in the xSemaphoreBuffer
   // variable, the address of which is passed into the function\&.  The
   // function's parameter is not NULL, so the function will not attempt any
   // dynamic memory allocation, and therefore the function will not return
   // return NULL\&.
   xSemaphore = xSemaphoreCreateBinary( &xSemaphoreBuffer );

   // Rest of task code goes here\&.
}
.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.

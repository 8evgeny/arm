.TH "USBD_CORE_Exported_FunctionsPrototype" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
USBD_CORE_Exported_FunctionsPrototype \- USBD_CORE_Exported_FunctionsPrototype
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_Init\fP (\fBUSBD_HandleTypeDef\fP *pdev, \fBUSBD_DescriptorsTypeDef\fP *pdesc, uint8_t id)"
.br
.RI "USBD_Init Initializes the device stack and load the class driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_DeInit\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "USBD_DeInit Re-Initialize th device library\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_Start\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "USBD_Start Start the USB Device Core\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_Stop\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "USBD_Stop Stop the USB Device Core\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_RegisterClass\fP (\fBUSBD_HandleTypeDef\fP *pdev, \fBUSBD_ClassTypeDef\fP *pclass)"
.br
.RI "USBD_RegisterClass Link class driver to Device Core\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_RunTestMode\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "USBD_RunTestMode Launch test mode process\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_SetClassConfig\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t cfgidx)"
.br
.RI "USBD_SetClassConfig Configure device and start the interface\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_ClrClassConfig\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t cfgidx)"
.br
.RI "USBD_ClrClassConfig Clear current configuration\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_SetupStage\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t *psetup)"
.br
.RI "USBD_SetupStage Handle the setup stage\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_DataOutStage\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t epnum, uint8_t *pdata)"
.br
.RI "USBD_DataOutStage Handle data OUT stage\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_DataInStage\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t epnum, uint8_t *pdata)"
.br
.RI "USBD_DataInStage Handle data in stage\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_Reset\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "USBD_LL_Reset Handle Reset event\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_SetSpeed\fP (\fBUSBD_HandleTypeDef\fP *pdev, USBD_SpeedTypeDef speed)"
.br
.RI "USBD_LL_Reset Handle Reset event\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_Suspend\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "USBD_Suspend Handle Suspend event\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_Resume\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "USBD_Resume Handle Resume event\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_SOF\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "USBD_SOF Handle SOF event\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_IsoINIncomplete\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t epnum)"
.br
.RI "USBD_IsoINIncomplete Handle iso in incomplete event\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_IsoOUTIncomplete\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t epnum)"
.br
.RI "USBD_IsoOUTIncomplete Handle iso out incomplete event\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_DevConnected\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "USBD_DevConnected Handle device connection event\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_DevDisconnected\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "USBD_DevDisconnected Handle device disconnection event\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_Init\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "Initializes the low level portion of the device driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_DeInit\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "De-Initializes the low level portion of the device driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_Start\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "Starts the low level portion of the device driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_Stop\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "Stops the low level portion of the device driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_OpenEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)"
.br
.RI "Opens an endpoint of the low level driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_CloseEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Closes an endpoint of the low level driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_FlushEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Flushes an endpoint of the Low Level Driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_StallEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Sets a Stall condition on an endpoint of the Low Level Driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_ClearStallEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Clears a Stall condition on an endpoint of the Low Level Driver\&. "
.ti -1c
.RI "uint8_t \fBUSBD_LL_IsStallEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Returns Stall condition\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_SetUSBAddress\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t dev_addr)"
.br
.RI "Assigns a USB address to the device\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_Transmit\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)"
.br
.RI "Transmits data over an endpoint\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_PrepareReceive\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)"
.br
.RI "Prepares an endpoint for reception\&. "
.ti -1c
.RI "uint32_t \fBUSBD_LL_GetRxDataSize\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Returns the last transfered packet size\&. "
.ti -1c
.RI "void \fBUSBD_LL_Delay\fP (uint32_t Delay)"
.br
.RI "Delays routine for the USB device library\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "USBD_StatusTypeDef USBD_ClrClassConfig (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t cfgidx)"

.PP
USBD_ClrClassConfig Clear current configuration\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.br
\fIcfgidx\fP configuration index 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP USBD_StatusTypeDef 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_DeInit (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
USBD_DeInit Re-Initialize th device library\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_Init (\fBUSBD_HandleTypeDef\fP * pdev, \fBUSBD_DescriptorsTypeDef\fP * pdesc, uint8_t id)"

.PP
USBD_Init Initializes the device stack and load the class driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.br
\fIpdesc\fP Descriptor structure address 
.br
\fIid\fP Low level core index 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_ClearStallEP (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t ep_addr)"

.PP
Clears a Stall condition on an endpoint of the Low Level Driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.br
\fIep_addr\fP Endpoint number 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_CloseEP (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t ep_addr)"

.PP
Closes an endpoint of the low level driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.br
\fIep_addr\fP Endpoint number 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_DataInStage (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t epnum, uint8_t * pdata)"

.PP
USBD_DataInStage Handle data in stage\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.br
\fIepnum\fP endpoint index 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_DataOutStage (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t epnum, uint8_t * pdata)"

.PP
USBD_DataOutStage Handle data OUT stage\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.br
\fIepnum\fP endpoint index 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_DeInit (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
De-Initializes the low level portion of the device driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "void USBD_LL_Delay (uint32_t Delay)"

.PP
Delays routine for the USB device library\&. 
.PP
\fBParameters\fP
.RS 4
\fIDelay\fP Delay in ms 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_DevConnected (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
USBD_DevConnected Handle device connection event\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_DevDisconnected (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
USBD_DevDisconnected Handle device disconnection event\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_FlushEP (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t ep_addr)"

.PP
Flushes an endpoint of the Low Level Driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.br
\fIep_addr\fP Endpoint number 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "uint32_t USBD_LL_GetRxDataSize (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t ep_addr)"

.PP
Returns the last transfered packet size\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.br
\fIep_addr\fP Endpoint number 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIRecived\fP Data Size 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_Init (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
Initializes the low level portion of the device driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_IsoINIncomplete (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t epnum)"

.PP
USBD_IsoINIncomplete Handle iso in incomplete event\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t epnum)"

.PP
USBD_IsoOUTIncomplete Handle iso out incomplete event\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "uint8_t USBD_LL_IsStallEP (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t ep_addr)"

.PP
Returns Stall condition\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.br
\fIep_addr\fP Endpoint number 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIStall\fP (1: Yes, 0: No) 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_OpenEP (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)"

.PP
Opens an endpoint of the low level driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.br
\fIep_addr\fP Endpoint number 
.br
\fIep_type\fP Endpoint type 
.br
\fIep_mps\fP Endpoint max packet size 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_PrepareReceive (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t ep_addr, uint8_t * pbuf, uint16_t size)"

.PP
Prepares an endpoint for reception\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.br
\fIep_addr\fP Endpoint number 
.br
\fIpbuf\fP Pointer to data to be received 
.br
\fIsize\fP Data size 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_Reset (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
USBD_LL_Reset Handle Reset event\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_Resume (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
USBD_Resume Handle Resume event\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_SetSpeed (\fBUSBD_HandleTypeDef\fP * pdev, USBD_SpeedTypeDef speed)"

.PP
USBD_LL_Reset Handle Reset event\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_SetupStage (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t * psetup)"

.PP
USBD_SetupStage Handle the setup stage\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_SetUSBAddress (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t dev_addr)"

.PP
Assigns a USB address to the device\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.br
\fIdev_addr\fP Device address 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_SOF (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
USBD_SOF Handle SOF event\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_StallEP (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t ep_addr)"

.PP
Sets a Stall condition on an endpoint of the Low Level Driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.br
\fIep_addr\fP Endpoint number 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_Start (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
Starts the low level portion of the device driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_Stop (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
Stops the low level portion of the device driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_Suspend (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
USBD_Suspend Handle Suspend event\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_LL_Transmit (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t ep_addr, uint8_t * pbuf, uint16_t size)"

.PP
Transmits data over an endpoint\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device handle 
.br
\fIep_addr\fP Endpoint number 
.br
\fIpbuf\fP Pointer to data to be sent 
.br
\fIsize\fP Data size 
.br
 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_RegisterClass (\fBUSBD_HandleTypeDef\fP * pdev, \fBUSBD_ClassTypeDef\fP * pclass)"

.PP
USBD_RegisterClass Link class driver to Device Core\&. 
.PP
\fBParameters\fP
.RS 4
\fIpDevice\fP : Device Handle 
.br
\fIpclass\fP Class handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP Status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_RunTestMode (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
USBD_RunTestMode Launch test mode process\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_SetClassConfig (\fBUSBD_HandleTypeDef\fP * pdev, uint8_t cfgidx)"

.PP
USBD_SetClassConfig Configure device and start the interface\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP device instance 
.br
\fIcfgidx\fP configuration index 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIstatus\fP 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_Start (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
USBD_Start Start the USB Device Core\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device Handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP Status 
.RE
.PP

.SS "USBD_StatusTypeDef USBD_Stop (\fBUSBD_HandleTypeDef\fP * pdev)"

.PP
USBD_Stop Stop the USB Device Core\&. 
.PP
\fBParameters\fP
.RS 4
\fIpdev\fP Device Handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIUSBD\fP Status 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.

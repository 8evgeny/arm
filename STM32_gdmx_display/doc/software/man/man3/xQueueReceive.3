.TH "xQueueReceive" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xQueueReceive \- xQueueReceive
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
queue\&. h 
.PP
.nf

BaseType_t xQueueReceive(
                             QueueHandle_t xQueue,
                             void *pvBuffer,
                             TickType_t xTicksToWait
                        );
.fi
.PP
.PP
Receive an item from a queue\&. The item is received by copy so a buffer of adequate size must be provided\&. The number of bytes copied into the buffer was defined when the queue was created\&.
.PP
Successfully received items are removed from the queue\&.
.PP
This function must not be used in an interrupt service routine\&. See xQueueReceiveFromISR for an alternative that can\&.
.PP
\fBParameters\fP
.RS 4
\fIxQueue\fP The handle to the queue from which the item is to be received\&.
.br
\fIpvBuffer\fP Pointer to the buffer into which the received item will be copied\&.
.br
\fIxTicksToWait\fP The maximum amount of time the task should block waiting for an item to receive should the queue be empty at the time of the call\&. xQueueReceive() will return immediately if xTicksToWait is zero and the queue is empty\&. The time is defined in tick periods so the constant portTICK_PERIOD_MS should be used to convert to real time if this is required\&.
.RE
.PP
\fBReturns\fP
.RS 4
pdTRUE if an item was successfully received from the queue, otherwise pdFALSE\&.
.RE
.PP
Example usage: 
.PP
.nf

struct AMessage
{
   char ucMessageID;
   char ucData[ 20 ];
} xMessage;

QueueHandle_t xQueue;

// Task to create a queue and post a value\&.
void vATask( void *pvParameters )
{
struct AMessage *pxMessage;

   // Create a queue capable of containing 10 pointers to AMessage structures\&.
   // These should be passed by pointer as they contain a lot of data\&.
   xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );
   if( xQueue == 0 )
   {
    // Failed to create the queue\&.
   }

   // \&.\&.\&.

   // Send a pointer to a struct AMessage object\&.  Don't block if the
   // queue is already full\&.
   pxMessage = & xMessage;
   xQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );

   // \&.\&.\&. Rest of task code\&.
}

// Task to receive from the queue\&.
void vADifferentTask( void *pvParameters )
{
struct AMessage *pxRxedMessage;

   if( xQueue != 0 )
   {
    // Receive a message on the created queue\&.  Block for 10 ticks if a
    // message is not immediately available\&.
    if( xQueueReceive( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) )
    {
        // pcRxedMessage now points to the struct AMessage variable posted
        // by vATask\&.
    }
   }

   // \&.\&.\&. Rest of task code\&.
}
.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.

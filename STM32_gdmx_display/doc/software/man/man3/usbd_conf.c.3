.TH "Src/usbd_conf.c" 3 "Mon May 24 2021" "gdmx-display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Src/usbd_conf.c \- : This file implements the board support package for the USB device library  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f1xx\&.h'\fP
.br
\fC#include 'stm32f1xx_hal\&.h'\fP
.br
\fC#include 'usbd_def\&.h'\fP
.br
\fC#include 'usbd_core\&.h'\fP
.br
\fC#include 'usbd_cdc\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBError_Handler\fP (void)"
.br
.RI "FreeRTOS error handler function\&. "
.ti -1c
.RI "void \fBHAL_PCD_MspInit\fP (PCD_HandleTypeDef *pcdHandle)"
.br
.ti -1c
.RI "void \fBHAL_PCD_MspDeInit\fP (PCD_HandleTypeDef *pcdHandle)"
.br
.ti -1c
.RI "void \fBHAL_PCD_SetupStageCallback\fP (PCD_HandleTypeDef *hpcd)"
.br
.RI "Setup stage callback\&. "
.ti -1c
.RI "void \fBHAL_PCD_DataOutStageCallback\fP (PCD_HandleTypeDef *hpcd, uint8_t epnum)"
.br
.RI "Data Out stage callback\&. "
.ti -1c
.RI "void \fBHAL_PCD_DataInStageCallback\fP (PCD_HandleTypeDef *hpcd, uint8_t epnum)"
.br
.RI "Data In stage callback\&. "
.ti -1c
.RI "void \fBHAL_PCD_SOFCallback\fP (PCD_HandleTypeDef *hpcd)"
.br
.RI "SOF callback\&. "
.ti -1c
.RI "void \fBHAL_PCD_ResetCallback\fP (PCD_HandleTypeDef *hpcd)"
.br
.RI "Reset callback\&. "
.ti -1c
.RI "void \fBHAL_PCD_SuspendCallback\fP (PCD_HandleTypeDef *hpcd)"
.br
.RI "Suspend callback\&. When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it) "
.ti -1c
.RI "void \fBHAL_PCD_ResumeCallback\fP (PCD_HandleTypeDef *hpcd)"
.br
.RI "Resume callback\&. When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it) "
.ti -1c
.RI "void \fBHAL_PCD_ISOOUTIncompleteCallback\fP (PCD_HandleTypeDef *hpcd, uint8_t epnum)"
.br
.RI "ISOOUTIncomplete callback\&. "
.ti -1c
.RI "void \fBHAL_PCD_ISOINIncompleteCallback\fP (PCD_HandleTypeDef *hpcd, uint8_t epnum)"
.br
.RI "ISOINIncomplete callback\&. "
.ti -1c
.RI "void \fBHAL_PCD_ConnectCallback\fP (PCD_HandleTypeDef *hpcd)"
.br
.RI "Connect callback\&. "
.ti -1c
.RI "void \fBHAL_PCD_DisconnectCallback\fP (PCD_HandleTypeDef *hpcd)"
.br
.RI "Disconnect callback\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_Init\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "Initializes the low level portion of the device driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_DeInit\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "De-Initializes the low level portion of the device driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_Start\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "Starts the low level portion of the device driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_Stop\fP (\fBUSBD_HandleTypeDef\fP *pdev)"
.br
.RI "Stops the low level portion of the device driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_OpenEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)"
.br
.RI "Opens an endpoint of the low level driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_CloseEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Closes an endpoint of the low level driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_FlushEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Flushes an endpoint of the Low Level Driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_StallEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Sets a Stall condition on an endpoint of the Low Level Driver\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_ClearStallEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Clears a Stall condition on an endpoint of the Low Level Driver\&. "
.ti -1c
.RI "uint8_t \fBUSBD_LL_IsStallEP\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Returns Stall condition\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_SetUSBAddress\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t dev_addr)"
.br
.RI "Assigns a USB address to the device\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_Transmit\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)"
.br
.RI "Transmits data over an endpoint\&. "
.ti -1c
.RI "USBD_StatusTypeDef \fBUSBD_LL_PrepareReceive\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)"
.br
.RI "Prepares an endpoint for reception\&. "
.ti -1c
.RI "uint32_t \fBUSBD_LL_GetRxDataSize\fP (\fBUSBD_HandleTypeDef\fP *pdev, uint8_t ep_addr)"
.br
.RI "Returns the last transfered packet size\&. "
.ti -1c
.RI "void \fBUSBD_LL_Delay\fP (uint32_t Delay)"
.br
.RI "Delays routine for the USB device library\&. "
.ti -1c
.RI "void * \fBUSBD_static_malloc\fP (uint32_t size)"
.br
.RI "Static single allocation\&. "
.ti -1c
.RI "void \fBUSBD_static_free\fP (void *p)"
.br
.RI "Dummy memory free\&. "
.ti -1c
.RI "void \fBHAL_PCDEx_SetConnectionState\fP (PCD_HandleTypeDef *hpcd, uint8_t state)"
.br
.RI "Software Device Connection\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "PCD_HandleTypeDef \fBhpcd_USB_FS\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
: This file implements the board support package for the USB device library 


.PP
\fBVersion\fP
.RS 4
: v2\&.0_Cube
.RE
.PP
\fBAttention\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2019 Donskih Dmitriy\&. All rights reserved\&."
.PP
This software component is licensed by Donskih Dmitriy under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.SH "Function Documentation"
.PP 
.SS "void Error_Handler (void)"

.PP
FreeRTOS error handler function\&. This function is executed in case of error occurrence\&. User can add his own implementation to report the HAL error return state\&. 
.PP
\fBParameters\fP
.RS 4
\fINone\&.\fP 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\&.\fP 
.RE
.PP

.SS "void HAL_PCD_ConnectCallback (PCD_HandleTypeDef * hpcd)"

.PP
Connect callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void HAL_PCD_DataInStageCallback (PCD_HandleTypeDef * hpcd, uint8_t epnum)"

.PP
Data In stage callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.br
\fIepnum\fP Endpoint number 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void HAL_PCD_DataOutStageCallback (PCD_HandleTypeDef * hpcd, uint8_t epnum)"

.PP
Data Out stage callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.br
\fIepnum\fP Endpoint number 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void HAL_PCD_DisconnectCallback (PCD_HandleTypeDef * hpcd)"

.PP
Disconnect callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void HAL_PCD_ISOINIncompleteCallback (PCD_HandleTypeDef * hpcd, uint8_t epnum)"

.PP
ISOINIncomplete callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.br
\fIepnum\fP Endpoint number 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void HAL_PCD_ISOOUTIncompleteCallback (PCD_HandleTypeDef * hpcd, uint8_t epnum)"

.PP
ISOOUTIncomplete callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.br
\fIepnum\fP Endpoint number 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void HAL_PCD_ResetCallback (PCD_HandleTypeDef * hpcd)"

.PP
Reset callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void HAL_PCD_ResumeCallback (PCD_HandleTypeDef * hpcd)"

.PP
Resume callback\&. When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it) 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void HAL_PCD_SetupStageCallback (PCD_HandleTypeDef * hpcd)"

.PP
Setup stage callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void HAL_PCD_SOFCallback (PCD_HandleTypeDef * hpcd)"

.PP
SOF callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void HAL_PCD_SuspendCallback (PCD_HandleTypeDef * hpcd)"

.PP
Suspend callback\&. When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it) 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void HAL_PCDEx_SetConnectionState (PCD_HandleTypeDef * hpcd, uint8_t state)"

.PP
Software Device Connection\&. 
.PP
\fBParameters\fP
.RS 4
\fIhpcd\fP PCD handle 
.br
\fIstate\fP Connection state (0: disconnected / 1: connected) 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for gdmx-display from the source code\&.
